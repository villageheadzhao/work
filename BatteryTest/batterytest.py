import threading
import tkinter as tk
from tkinter import messagebox
import time
#import serilport as ser
import datetime
import csv
#import logupload as ftp
import math

mutex = threading.Lock()
mutex_w = threading.Lock()
mutex_readenvironmenttemperature = threading.Lock()

com = "COM8"
com1 = "COM10"

ch1_1_log = []
ch1_2_log = []
ch1_3_log = []
ch1_4_log = []
ch1_5_log = []
ch1_6_log = []
ch1_7_log = []
ch1_8_log = []

ch2_1_log = []
ch2_2_log = []
ch2_3_log = []
ch2_4_log = []
ch2_5_log = []
ch2_6_log = []
ch2_7_log = []
ch2_8_log = []

ch3_1_log = []
ch3_2_log = []
ch3_3_log = []
ch3_4_log = []
ch3_5_log = []
ch3_6_log = []
ch3_7_log = []
ch3_8_log = []

ch4_1_log = []
ch4_2_log = []
ch4_3_log = []
ch4_4_log = []
ch4_5_log = []
ch4_6_log = []
ch4_7_log = []
ch4_8_log = []

ch5_1_log = []
ch5_2_log = []
ch5_3_log = []
ch5_4_log = []
ch5_5_log = []
ch5_6_log = []
ch5_7_log = []
ch5_8_log = []

ch6_1_log = []
ch6_2_log = []
ch6_3_log = []
ch6_4_log = []
ch6_5_log = []
ch6_6_log = []
ch6_7_log = []
ch6_8_log = []

ch7_1_log = []
ch7_2_log = []
ch7_3_log = []
ch7_4_log = []
ch7_5_log = []
ch7_6_log = []
ch7_7_log = []
ch7_8_log = []

ch8_1_log = []
ch8_2_log = []
ch8_3_log = []
ch8_4_log = []
ch8_5_log = []
ch8_6_log = []
ch8_7_log = []
ch8_8_log = []

ch1_1_data = ["1-1", "1111", "等待中", "200", "9.6", "500", "1000", "0", "0", "0", "0"]
ch1_2_data = ["1-2", "2222", "等待中", "300", "10", "400", "1200", "0", "0", "0", "0"]
ch1_3_data = ["1-3", "3333", "等待中", "200", "9.6", "500", "1000", "0", "0", "0", "0"]
ch1_4_data = ["1-4", "4444", "等待中", "300", "10", "400", "1200", "0", "0", "0", "0"]
ch1_5_data = ["1-5", "5555", "等待中", "200", "9.6", "500", "1000", "0", "0", "0", "0"]
ch1_6_data = ["1-6", "6666", "等待中", "300", "10", "400", "1200", "0", "0", "0", "0"]
ch1_7_data = ["1-7", "7777", "等待中", "200", "9.6", "500", "1000", "0", "0", "0", "0"]
ch1_8_data = ["1-8", "8888", "等待中", "300", "10", "400", "1200", "0", "0", "0", "0"]

ch2_1_data = ["2-1", "1111", "等待中", "200", "9.6", "500", "1000", "0", "0", "0", "0"]
ch2_2_data = ["2-2", "2222", "等待中", "300", "10", "400", "1200", "0", "0", "0", "0"]
ch2_3_data = ["2-3", "3333", "等待中", "200", "9.6", "500", "1000", "0", "0", "0", "0"]
ch2_4_data = ["2-4", "4444", "等待中", "300", "10", "400", "1200", "0", "0", "0", "0"]
ch2_5_data = ["2-5", "5555", "等待中", "200", "9.6", "500", "1000", "0", "0", "0", "0"]
ch2_6_data = ["2-6", "6666", "等待中", "300", "10", "400", "1200", "0", "0", "0", "0"]
ch2_7_data = ["2-7", "7777", "等待中", "200", "9.6", "500", "1000", "0", "0", "0", "0"]
ch2_8_data = ["2-8", "8888", "等待中", "300", "10", "400", "1200", "0", "0", "0", "0"]

ch3_1_data = ["3-1", "1111", "等待中", "200", "9.6", "500", "1000", "0", "0", "0", "0"]
ch3_2_data = ["3-2", "2222", "等待中", "300", "10", "400", "1200", "0", "0", "0", "0"]
ch3_3_data = ["3-3", "3333", "等待中", "200", "9.6", "500", "1000", "0", "0", "0", "0"]
ch3_4_data = ["3-4", "4444", "等待中", "300", "10", "400", "1200", "0", "0", "0", "0"]
ch3_5_data = ["3-5", "5555", "等待中", "200", "9.6", "500", "1000", "0", "0", "0", "0"]
ch3_6_data = ["3-6", "6666", "等待中", "300", "10", "400", "1200", "0", "0", "0", "0"]
ch3_7_data = ["3-7", "7777", "等待中", "200", "9.6", "500", "1000", "0", "0", "0", "0"]
ch3_8_data = ["3-8", "8888", "等待中", "300", "10", "400", "1200", "0", "0", "0", "0"]

ch4_1_data = ["4-1", "1111", "等待中", "200", "9.6", "500", "1000", "0", "0", "0", "0"]
ch4_2_data = ["4-2", "2222", "等待中", "300", "10", "400", "1200", "0", "0", "0", "0"]
ch4_3_data = ["4-3", "3333", "等待中", "200", "9.6", "500", "1000", "0", "0", "0", "0"]
ch4_4_data = ["4-4", "4444", "等待中", "300", "10", "400", "1200", "0", "0", "0", "0"]
ch4_5_data = ["4-5", "5555", "等待中", "200", "9.6", "500", "1000", "0", "0", "0", "0"]
ch4_6_data = ["4-6", "6666", "等待中", "300", "10", "400", "1200", "0", "0", "0", "0"]
ch4_7_data = ["4-7", "7777", "等待中", "200", "9.6", "500", "1000", "0", "0", "0", "0"]
ch4_8_data = ["4-8", "8888", "等待中", "300", "10", "400", "1200", "0", "0", "0", "0"]

ch5_1_data = ["5-1", "1111", "等待中", "200", "9.6", "500", "1000", "0", "0", "0", "0"]
ch5_2_data = ["5-2", "2222", "等待中", "300", "10", "400", "1200", "0", "0", "0", "0"]
ch5_3_data = ["5-3", "3333", "等待中", "200", "9.6", "500", "1000", "0", "0", "0", "0"]
ch5_4_data = ["5-4", "4444", "等待中", "300", "10", "400", "1200", "0", "0", "0", "0"]
ch5_5_data = ["5-5", "5555", "等待中", "200", "9.6", "500", "1000", "0", "0", "0", "0"]
ch5_6_data = ["5-6", "6666", "等待中", "300", "10", "400", "1200", "0", "0", "0", "0"]
ch5_7_data = ["5-7", "7777", "等待中", "200", "9.6", "500", "1000", "0", "0", "0", "0"]
ch5_8_data = ["5-8", "8888", "等待中", "300", "10", "400", "1200", "0", "0", "0", "0"]

ch6_1_data = ["6-1", "1111", "等待中", "200", "9.6", "500", "1000", "0", "0", "0", "0"]
ch6_2_data = ["6-2", "2222", "等待中", "300", "10", "400", "1200", "0", "0", "0", "0"]
ch6_3_data = ["6-3", "3333", "等待中", "200", "9.6", "500", "1000", "0", "0", "0", "0"]
ch6_4_data = ["6-4", "4444", "等待中", "300", "10", "400", "1200", "0", "0", "0", "0"]
ch6_5_data = ["6-5", "5555", "等待中", "200", "9.6", "500", "1000", "0", "0", "0", "0"]
ch6_6_data = ["6-6", "6666", "等待中", "300", "10", "400", "1200", "0", "0", "0", "0"]
ch6_7_data = ["6-7", "7777", "等待中", "200", "9.6", "500", "1000", "0", "0", "0", "0"]
ch6_8_data = ["6-8", "8888", "等待中", "300", "10", "400", "1200", "0", "0", "0", "0"]

ch7_1_data = ["7-1", "1111", "等待中", "200", "9.6", "500", "1000", "0", "0", "0", "0"]
ch7_2_data = ["7-2", "2222", "等待中", "300", "10", "400", "1200", "0", "0", "0", "0"]
ch7_3_data = ["7-3", "3333", "等待中", "200", "9.6", "500", "1000", "0", "0", "0", "0"]
ch7_4_data = ["7-4", "4444", "等待中", "300", "10", "400", "1200", "0", "0", "0", "0"]
ch7_5_data = ["7-5", "5555", "等待中", "200", "9.6", "500", "1000", "0", "0", "0", "0"]
ch7_6_data = ["7-6", "6666", "等待中", "300", "10", "400", "1200", "0", "0", "0", "0"]
ch7_7_data = ["7-7", "7777", "等待中", "200", "9.6", "500", "1000", "0", "0", "0", "0"]
ch7_8_data = ["7-8", "8888", "等待中", "300", "10", "400", "1200", "0", "0", "0", "0"]

ch8_1_data = ["8-1", "1111", "等待中", "200", "9.6", "500", "1000", "0", "0", "0", "0"]
ch8_2_data = ["8-2", "2222", "等待中", "300", "10", "400", "1200", "0", "0", "0", "0"]
ch8_3_data = ["8-3", "3333", "等待中", "200", "9.6", "500", "1000", "0", "0", "0", "0"]
ch8_4_data = ["8-4", "4444", "等待中", "300", "10", "400", "1200", "0", "0", "0", "0"]
ch8_5_data = ["8-5", "5555", "等待中", "200", "9.6", "500", "1000", "0", "0", "0", "0"]
ch8_6_data = ["8-6", "6666", "等待中", "300", "10", "400", "1200", "0", "0", "0", "0"]
ch8_7_data = ["8-7", "7777", "等待中", "200", "9.6", "500", "1000", "0", "0", "0", "0"]
ch8_8_data = ["8-8", "8888", "等待中", "300", "10", "400", "1200", "0", "0", "0", "0"]

ch1_1_e = ["0", "0", "0", "0", "0", "0"]
ch1_2_e = ["0", "0", "0", "0", "0", "0"]
ch1_3_e = ["0", "0", "0", "0", "0", "0"]
ch1_4_e = ["0", "0", "0", "0", "0", "0"]
ch1_5_e = ["0", "0", "0", "0", "0", "0"]
ch1_6_e = ["0", "0", "0", "0", "0", "0"]
ch1_7_e = ["0", "0", "0", "0", "0", "0"]
ch1_8_e = ["0", "0", "0", "0", "0", "0"]

ch2_1_e = ["0", "0", "0", "0", "0", "0"]
ch2_2_e = ["0", "0", "0", "0", "0", "0"]
ch2_3_e = ["0", "0", "0", "0", "0", "0"]
ch2_4_e = ["0", "0", "0", "0", "0", "0"]
ch2_5_e = ["0", "0", "0", "0", "0", "0"]
ch2_6_e = ["0", "0", "0", "0", "0", "0"]
ch2_7_e = ["0", "0", "0", "0", "0", "0"]
ch2_8_e = ["0", "0", "0", "0", "0", "0"]

ch3_1_e = ["0", "0", "0", "0", "0", "0"]
ch3_2_e = ["0", "0", "0", "0", "0", "0"]
ch3_3_e = ["0", "0", "0", "0", "0", "0"]
ch3_4_e = ["0", "0", "0", "0", "0", "0"]
ch3_5_e = ["0", "0", "0", "0", "0", "0"]
ch3_6_e = ["0", "0", "0", "0", "0", "0"]
ch3_7_e = ["0", "0", "0", "0", "0", "0"]
ch3_8_e = ["0", "0", "0", "0", "0", "0"]

ch4_1_e = ["0", "0", "0", "0", "0", "0"]
ch4_2_e = ["0", "0", "0", "0", "0", "0"]
ch4_3_e = ["0", "0", "0", "0", "0", "0"]
ch4_4_e = ["0", "0", "0", "0", "0", "0"]
ch4_5_e = ["0", "0", "0", "0", "0", "0"]
ch4_6_e = ["0", "0", "0", "0", "0", "0"]
ch4_7_e = ["0", "0", "0", "0", "0", "0"]
ch4_8_e = ["0", "0", "0", "0", "0", "0"]

ch5_1_e = ["0", "0", "0", "0", "0", "0"]
ch5_2_e = ["0", "0", "0", "0", "0", "0"]
ch5_3_e = ["0", "0", "0", "0", "0", "0"]
ch5_4_e = ["0", "0", "0", "0", "0", "0"]
ch5_5_e = ["0", "0", "0", "0", "0", "0"]
ch5_6_e = ["0", "0", "0", "0", "0", "0"]
ch5_7_e = ["0", "0", "0", "0", "0", "0"]
ch5_8_e = ["0", "0", "0", "0", "0", "0"]

ch6_1_e = ["0", "0", "0", "0", "0", "0"]
ch6_2_e = ["0", "0", "0", "0", "0", "0"]
ch6_3_e = ["0", "0", "0", "0", "0", "0"]
ch6_4_e = ["0", "0", "0", "0", "0", "0"]
ch6_5_e = ["0", "0", "0", "0", "0", "0"]
ch6_6_e = ["0", "0", "0", "0", "0", "0"]
ch6_7_e = ["0", "0", "0", "0", "0", "0"]
ch6_8_e = ["0", "0", "0", "0", "0", "0"]

ch7_1_e = ["0", "0", "0", "0", "0", "0"]
ch7_2_e = ["0", "0", "0", "0", "0", "0"]
ch7_3_e = ["0", "0", "0", "0", "0", "0"]
ch7_4_e = ["0", "0", "0", "0", "0", "0"]
ch7_5_e = ["0", "0", "0", "0", "0", "0"]
ch7_6_e = ["0", "0", "0", "0", "0", "0"]
ch7_7_e = ["0", "0", "0", "0", "0", "0"]
ch7_8_e = ["0", "0", "0", "0", "0", "0"]

ch8_1_e = ["0", "0", "0", "0", "0", "0"]
ch8_2_e = ["0", "0", "0", "0", "0", "0"]
ch8_3_e = ["0", "0", "0", "0", "0", "0"]
ch8_4_e = ["0", "0", "0", "0", "0", "0"]
ch8_5_e = ["0", "0", "0", "0", "0", "0"]
ch8_6_e = ["0", "0", "0", "0", "0", "0"]
ch8_7_e = ["0", "0", "0", "0", "0", "0"]
ch8_8_e = ["0", "0", "0", "0", "0", "0"]

face_name = "error"
num = 1

ch1_1_signal = 0
ch1_2_signal = 0
ch1_3_signal = 0
ch1_4_signal = 0
ch1_5_signal = 0
ch1_6_signal = 0
ch1_7_signal = 0
ch1_8_signal = 0

ch2_1_signal = 0
ch2_2_signal = 0
ch2_3_signal = 0
ch2_4_signal = 0
ch2_5_signal = 0
ch2_6_signal = 0
ch2_7_signal = 0
ch2_8_signal = 0

ch3_1_signal = 0
ch3_2_signal = 0
ch3_3_signal = 0
ch3_4_signal = 0
ch3_5_signal = 0
ch3_6_signal = 0
ch3_7_signal = 0
ch3_8_signal = 0

ch4_1_signal = 0
ch4_2_signal = 0
ch4_3_signal = 0
ch4_4_signal = 0
ch4_5_signal = 0
ch4_6_signal = 0
ch4_7_signal = 0
ch4_8_signal = 0

ch5_1_signal = 0
ch5_2_signal = 0
ch5_3_signal = 0
ch5_4_signal = 0
ch5_5_signal = 0
ch5_6_signal = 0
ch5_7_signal = 0
ch5_8_signal = 0

ch6_1_signal = 0
ch6_2_signal = 0
ch6_3_signal = 0
ch6_4_signal = 0
ch6_5_signal = 0
ch6_6_signal = 0
ch6_7_signal = 0
ch6_8_signal = 0

ch7_1_signal = 0
ch7_2_signal = 0
ch7_3_signal = 0
ch7_4_signal = 0
ch7_5_signal = 0
ch7_6_signal = 0
ch7_7_signal = 0
ch7_8_signal = 0

ch8_1_signal = 0
ch8_2_signal = 0
ch8_3_signal = 0
ch8_4_signal = 0
ch8_5_signal = 0
ch8_6_signal = 0
ch8_7_signal = 0
ch8_8_signal = 0

ch1_1_setvoltage_signal = 0
ch1_2_setvoltage_signal = 0
ch1_3_setvoltage_signal = 0
ch1_4_setvoltage_signal = 0
ch1_5_setvoltage_signal = 0
ch1_6_setvoltage_signal = 0
ch1_7_setvoltage_signal = 0
ch1_8_setvoltage_signal = 0

ch2_1_setvoltage_signal = 0
ch2_2_setvoltage_signal = 0
ch2_3_setvoltage_signal = 0
ch2_4_setvoltage_signal = 0
ch2_5_setvoltage_signal = 0
ch2_6_setvoltage_signal = 0
ch2_7_setvoltage_signal = 0
ch2_8_setvoltage_signal = 0

ch3_1_setvoltage_signal = 0
ch3_2_setvoltage_signal = 0
ch3_3_setvoltage_signal = 0
ch3_4_setvoltage_signal = 0
ch3_5_setvoltage_signal = 0
ch3_6_setvoltage_signal = 0
ch3_7_setvoltage_signal = 0
ch3_8_setvoltage_signal = 0

ch4_1_setvoltage_signal = 0
ch4_2_setvoltage_signal = 0
ch4_3_setvoltage_signal = 0
ch4_4_setvoltage_signal = 0
ch4_5_setvoltage_signal = 0
ch4_6_setvoltage_signal = 0
ch4_7_setvoltage_signal = 0
ch4_8_setvoltage_signal = 0

ch5_1_setvoltage_signal = 0
ch5_2_setvoltage_signal = 0
ch5_3_setvoltage_signal = 0
ch5_4_setvoltage_signal = 0
ch5_5_setvoltage_signal = 0
ch5_6_setvoltage_signal = 0
ch5_7_setvoltage_signal = 0
ch5_8_setvoltage_signal = 0

ch6_1_setvoltage_signal = 0
ch6_2_setvoltage_signal = 0
ch6_3_setvoltage_signal = 0
ch6_4_setvoltage_signal = 0
ch6_5_setvoltage_signal = 0
ch6_6_setvoltage_signal = 0
ch6_7_setvoltage_signal = 0
ch6_8_setvoltage_signal = 0

ch7_1_setvoltage_signal = 0
ch7_2_setvoltage_signal = 0
ch7_3_setvoltage_signal = 0
ch7_4_setvoltage_signal = 0
ch7_5_setvoltage_signal = 0
ch7_6_setvoltage_signal = 0
ch7_7_setvoltage_signal = 0
ch7_8_setvoltage_signal = 0

ch8_1_setvoltage_signal = 0
ch8_2_setvoltage_signal = 0
ch8_3_setvoltage_signal = 0
ch8_4_setvoltage_signal = 0
ch8_5_setvoltage_signal = 0
ch8_6_setvoltage_signal = 0
ch8_7_setvoltage_signal = 0
ch8_8_setvoltage_signal = 0

ch1_1_sn_signal = 0
ch1_2_sn_signal = 0
ch1_3_sn_signal = 0
ch1_4_sn_signal = 0
ch1_5_sn_signal = 0
ch1_6_sn_signal = 0
ch1_7_sn_signal = 0
ch1_8_sn_signal = 0

ch2_1_sn_signal = 0
ch2_2_sn_signal = 0
ch2_3_sn_signal = 0
ch2_4_sn_signal = 0
ch2_5_sn_signal = 0
ch2_6_sn_signal = 0
ch2_7_sn_signal = 0
ch2_8_sn_signal = 0

ch3_1_sn_signal = 0
ch3_2_sn_signal = 0
ch3_3_sn_signal = 0
ch3_4_sn_signal = 0
ch3_5_sn_signal = 0
ch3_6_sn_signal = 0
ch3_7_sn_signal = 0
ch3_8_sn_signal = 0

ch4_1_sn_signal = 0
ch4_2_sn_signal = 0
ch4_3_sn_signal = 0
ch4_4_sn_signal = 0
ch4_5_sn_signal = 0
ch4_6_sn_signal = 0
ch4_7_sn_signal = 0
ch4_8_sn_signal = 0

ch5_1_sn_signal = 0
ch5_2_sn_signal = 0
ch5_3_sn_signal = 0
ch5_4_sn_signal = 0
ch5_5_sn_signal = 0
ch5_6_sn_signal = 0
ch5_7_sn_signal = 0
ch5_8_sn_signal = 0

ch6_1_sn_signal = 0
ch6_2_sn_signal = 0
ch6_3_sn_signal = 0
ch6_4_sn_signal = 0
ch6_5_sn_signal = 0
ch6_6_sn_signal = 0
ch6_7_sn_signal = 0
ch6_8_sn_signal = 0

ch7_1_sn_signal = 0
ch7_2_sn_signal = 0
ch7_3_sn_signal = 0
ch7_4_sn_signal = 0
ch7_5_sn_signal = 0
ch7_6_sn_signal = 0
ch7_7_sn_signal = 0
ch7_8_sn_signal = 0

ch8_1_sn_signal = 0
ch8_2_sn_signal = 0
ch8_3_sn_signal = 0
ch8_4_sn_signal = 0
ch8_5_sn_signal = 0
ch8_6_sn_signal = 0
ch8_7_sn_signal = 0
ch8_8_sn_signal = 0

ch1_1_signal_ntc = 0
ch1_2_signal_ntc = 0
ch1_3_signal_ntc = 0
ch1_4_signal_ntc = 0
ch1_5_signal_ntc = 0
ch1_6_signal_ntc = 0
ch1_7_signal_ntc = 0
ch1_8_signal_ntc = 0

ch2_1_signal_ntc = 0
ch2_2_signal_ntc = 0
ch2_3_signal_ntc = 0
ch2_4_signal_ntc = 0
ch2_5_signal_ntc = 0
ch2_6_signal_ntc = 0
ch2_7_signal_ntc = 0
ch2_8_signal_ntc = 0

ch3_1_signal_ntc = 0
ch3_2_signal_ntc = 0
ch3_3_signal_ntc = 0
ch3_4_signal_ntc = 0
ch3_5_signal_ntc = 0
ch3_6_signal_ntc = 0
ch3_7_signal_ntc = 0
ch3_8_signal_ntc = 0

ch4_1_signal_ntc = 0
ch4_2_signal_ntc = 0
ch4_3_signal_ntc = 0
ch4_4_signal_ntc = 0
ch4_5_signal_ntc = 0
ch4_6_signal_ntc = 0
ch4_7_signal_ntc = 0
ch4_8_signal_ntc = 0

ch5_1_signal_ntc = 0
ch5_2_signal_ntc = 0
ch5_3_signal_ntc = 0
ch5_4_signal_ntc = 0
ch5_5_signal_ntc = 0
ch5_6_signal_ntc = 0
ch5_7_signal_ntc = 0
ch5_8_signal_ntc = 0

ch6_1_signal_ntc = 0
ch6_2_signal_ntc = 0
ch6_3_signal_ntc = 0
ch6_4_signal_ntc = 0
ch6_5_signal_ntc = 0
ch6_6_signal_ntc = 0
ch6_7_signal_ntc = 0
ch6_8_signal_ntc = 0

ch7_1_signal_ntc = 0
ch7_2_signal_ntc = 0
ch7_3_signal_ntc = 0
ch7_4_signal_ntc = 0
ch7_5_signal_ntc = 0
ch7_6_signal_ntc = 0
ch7_7_signal_ntc = 0
ch7_8_signal_ntc = 0

ch8_1_signal_ntc = 0
ch8_2_signal_ntc = 0
ch8_3_signal_ntc = 0
ch8_4_signal_ntc = 0
ch8_5_signal_ntc = 0
ch8_6_signal_ntc = 0
ch8_7_signal_ntc = 0
ch8_8_signal_ntc = 0

ch1_1_start_signal = True
ch1_2_start_signal = True
ch1_3_start_signal = True
ch1_4_start_signal = True
ch1_5_start_signal = True
ch1_6_start_signal = True
ch1_7_start_signal = True
ch1_8_start_signal = True

ch2_1_start_signal = True
ch2_2_start_signal = True
ch2_3_start_signal = True
ch2_4_start_signal = True
ch2_5_start_signal = True
ch2_6_start_signal = True
ch2_7_start_signal = True
ch2_8_start_signal = True

ch3_1_start_signal = True
ch3_2_start_signal = True
ch3_3_start_signal = True
ch3_4_start_signal = True
ch3_5_start_signal = True
ch3_6_start_signal = True
ch3_7_start_signal = True
ch3_8_start_signal = True

ch4_1_start_signal = True
ch4_2_start_signal = True
ch4_3_start_signal = True
ch4_4_start_signal = True
ch4_5_start_signal = True
ch4_6_start_signal = True
ch4_7_start_signal = True
ch4_8_start_signal = True

ch5_1_start_signal = True
ch5_2_start_signal = True
ch5_3_start_signal = True
ch5_4_start_signal = True
ch5_5_start_signal = True
ch5_6_start_signal = True
ch5_7_start_signal = True
ch5_8_start_signal = True

ch6_1_start_signal = True
ch6_2_start_signal = True
ch6_3_start_signal = True
ch6_4_start_signal = True
ch6_5_start_signal = True
ch6_6_start_signal = True
ch6_7_start_signal = True
ch6_8_start_signal = True

ch7_1_start_signal = True
ch7_2_start_signal = True
ch7_3_start_signal = True
ch7_4_start_signal = True
ch7_5_start_signal = True
ch7_6_start_signal = True
ch7_7_start_signal = True
ch7_8_start_signal = True

ch8_1_start_signal = True
ch8_2_start_signal = True
ch8_3_start_signal = True
ch8_4_start_signal = True
ch8_5_start_signal = True
ch8_6_start_signal = True
ch8_7_start_signal = True
ch8_8_start_signal = True

ch1_1_error_data = ""
ch1_2_error_data = ""
ch1_3_error_data = ""
ch1_4_error_data = ""
ch1_5_error_data = ""
ch1_6_error_data = ""
ch1_7_error_data = ""
ch1_8_error_data = ""

ch2_1_error_data = ""
ch2_2_error_data = ""
ch2_3_error_data = ""
ch2_4_error_data = ""
ch2_5_error_data = ""
ch2_6_error_data = ""
ch2_7_error_data = ""
ch2_8_error_data = ""

ch3_1_error_data = ""
ch3_2_error_data = ""
ch3_3_error_data = ""
ch3_4_error_data = ""
ch3_5_error_data = ""
ch3_6_error_data = ""
ch3_7_error_data = ""
ch3_8_error_data = ""

ch4_1_error_data = ""
ch4_2_error_data = ""
ch4_3_error_data = ""
ch4_4_error_data = ""
ch4_5_error_data = ""
ch4_6_error_data = ""
ch4_7_error_data = ""
ch4_8_error_data = ""

ch5_1_error_data = ""
ch5_2_error_data = ""
ch5_3_error_data = ""
ch5_4_error_data = ""
ch5_5_error_data = ""
ch5_6_error_data = ""
ch5_7_error_data = ""
ch5_8_error_data = ""

ch6_1_error_data = ""
ch6_2_error_data = ""
ch6_3_error_data = ""
ch6_4_error_data = ""
ch6_5_error_data = ""
ch6_6_error_data = ""
ch6_7_error_data = ""
ch6_8_error_data = ""

ch7_1_error_data = ""
ch7_2_error_data = ""
ch7_3_error_data = ""
ch7_4_error_data = ""
ch7_5_error_data = ""
ch7_6_error_data = ""
ch7_7_error_data = ""
ch7_8_error_data = ""

ch8_1_error_data = ""
ch8_2_error_data = ""
ch8_3_error_data = ""
ch8_4_error_data = ""
ch8_5_error_data = ""
ch8_6_error_data = ""
ch8_7_error_data = ""
ch8_8_error_data = ""


def start_test():
    print("start_test")
    test = threading.Timer(1, data_update)
    test_main = threading.Timer(2, main_update)
    test_face = threading.Timer(1, face_update)
    try:
        # test.daemon = True
        # test_main.daemon = True
        # test_face.daemon = True
        test.start()
        test_main.start()
        test_face.start()
    except Exception:
        print("Error: unable to start thread")


def data_update():
    global ch1_1_data
    global ch1_2_data
    global ch1_3_data
    global ch1_4_data
    global ch1_5_data
    global ch1_6_data
    global ch1_7_data
    global ch1_8_data

    global ch2_1_data
    global ch2_2_data
    global ch2_3_data
    global ch2_4_data
    global ch2_5_data
    global ch2_6_data
    global ch2_7_data
    global ch2_8_data

    global ch3_1_data
    global ch3_2_data
    global ch3_3_data
    global ch3_4_data
    global ch3_5_data
    global ch3_6_data
    global ch3_7_data
    global ch3_8_data

    global ch4_1_data
    global ch4_2_data
    global ch4_3_data
    global ch4_4_data
    global ch4_5_data
    global ch4_6_data
    global ch4_7_data
    global ch4_8_data

    global ch5_1_data
    global ch5_2_data
    global ch5_3_data
    global ch5_4_data
    global ch5_5_data
    global ch5_6_data
    global ch5_7_data
    global ch5_8_data

    global ch6_1_data
    global ch6_2_data
    global ch6_3_data
    global ch6_4_data
    global ch6_5_data
    global ch6_6_data
    global ch6_7_data
    global ch6_8_data

    global ch7_1_data
    global ch7_2_data
    global ch7_3_data
    global ch7_4_data
    global ch7_5_data
    global ch7_6_data
    global ch7_7_data
    global ch7_8_data

    global ch8_1_data
    global ch8_2_data
    global ch8_3_data
    global ch8_4_data
    global ch8_5_data
    global ch8_6_data
    global ch8_7_data
    global ch8_8_data

    global ch1_1_e
    global ch1_2_e
    global ch1_3_e
    global ch1_4_e
    global ch1_5_e
    global ch1_6_e
    global ch1_7_e
    global ch1_8_e

    global ch1_1_signal
    global ch1_2_signal
    global ch1_3_signal
    global ch1_4_signal
    global ch1_5_signal
    global ch1_6_signal
    global ch1_7_signal
    global ch1_8_signal

    global ch2_1_signal
    global ch2_2_signal
    global ch2_3_signal
    global ch2_4_signal
    global ch2_5_signal
    global ch2_6_signal
    global ch2_7_signal
    global ch2_8_signal

    global ch3_1_signal
    global ch3_2_signal
    global ch3_3_signal
    global ch3_4_signal
    global ch3_5_signal
    global ch3_6_signal
    global ch3_7_signal
    global ch3_8_signal

    global ch4_1_signal
    global ch4_2_signal
    global ch4_3_signal
    global ch4_4_signal
    global ch4_5_signal
    global ch4_6_signal
    global ch4_7_signal
    global ch4_8_signal

    global ch5_1_signal
    global ch5_2_signal
    global ch5_3_signal
    global ch5_4_signal
    global ch5_5_signal
    global ch5_6_signal
    global ch5_7_signal
    global ch5_8_signal

    global ch6_1_signal
    global ch6_2_signal
    global ch6_3_signal
    global ch6_4_signal
    global ch6_5_signal
    global ch6_6_signal
    global ch6_7_signal
    global ch6_8_signal

    global ch7_1_signal
    global ch7_2_signal
    global ch7_3_signal
    global ch7_4_signal
    global ch7_5_signal
    global ch7_6_signal
    global ch7_7_signal
    global ch7_8_signal

    global ch8_1_signal
    global ch8_2_signal
    global ch8_3_signal
    global ch8_4_signal
    global ch8_5_signal
    global ch8_6_signal
    global ch8_7_signal
    global ch8_8_signal

    global ch1_1_log
    global ch1_2_log
    global ch1_3_log
    global ch1_4_log
    global ch1_5_log
    global ch1_6_log
    global ch1_7_log
    global ch1_8_log

    global ch2_1_log
    global ch2_2_log
    global ch2_3_log
    global ch2_4_log
    global ch2_5_log
    global ch2_6_log
    global ch2_7_log
    global ch2_8_log

    global ch3_1_log
    global ch3_2_log
    global ch3_3_log
    global ch3_4_log
    global ch3_5_log
    global ch3_6_log
    global ch3_7_log
    global ch3_8_log

    global ch4_1_log
    global ch4_2_log
    global ch4_3_log
    global ch4_4_log
    global ch4_5_log
    global ch4_6_log
    global ch4_7_log
    global ch4_8_log

    global ch5_1_log
    global ch5_2_log
    global ch5_3_log
    global ch5_4_log
    global ch5_5_log
    global ch5_6_log
    global ch5_7_log
    global ch5_8_log

    global ch6_1_log
    global ch6_2_log
    global ch6_3_log
    global ch6_4_log
    global ch6_5_log
    global ch6_6_log
    global ch6_7_log
    global ch6_8_log

    global ch7_1_log
    global ch7_2_log
    global ch7_3_log
    global ch7_4_log
    global ch7_5_log
    global ch7_6_log
    global ch7_7_log
    global ch7_8_log

    global ch8_1_log
    global ch8_2_log
    global ch8_3_log
    global ch8_4_log
    global ch8_5_log
    global ch8_6_log
    global ch8_7_log
    global ch8_8_log

    global ch1_1_error_data
    global ch1_2_error_data
    global ch1_3_error_data
    global ch1_4_error_data
    global ch1_5_error_data
    global ch1_6_error_data
    global ch1_7_error_data
    global ch1_8_error_data

    global ch2_1_error_data
    global ch2_2_error_data
    global ch2_3_error_data
    global ch2_4_error_data
    global ch2_5_error_data
    global ch2_6_error_data
    global ch2_7_error_data
    global ch2_8_error_data

    global ch3_1_error_data
    global ch3_2_error_data
    global ch3_3_error_data
    global ch3_4_error_data
    global ch3_5_error_data
    global ch3_6_error_data
    global ch3_7_error_data
    global ch3_8_error_data

    global ch4_1_error_data
    global ch4_2_error_data
    global ch4_3_error_data
    global ch4_4_error_data
    global ch4_5_error_data
    global ch4_6_error_data
    global ch4_7_error_data
    global ch4_8_error_data

    global ch5_1_error_data
    global ch5_2_error_data
    global ch5_3_error_data
    global ch5_4_error_data
    global ch5_5_error_data
    global ch5_6_error_data
    global ch5_7_error_data
    global ch5_8_error_data

    global ch6_1_error_data
    global ch6_2_error_data
    global ch6_3_error_data
    global ch6_4_error_data
    global ch6_5_error_data
    global ch6_6_error_data
    global ch6_7_error_data
    global ch6_8_error_data

    global ch7_1_error_data
    global ch7_2_error_data
    global ch7_3_error_data
    global ch7_4_error_data
    global ch7_5_error_data
    global ch7_6_error_data
    global ch7_7_error_data
    global ch7_8_error_data

    global ch8_1_error_data
    global ch8_2_error_data
    global ch8_3_error_data
    global ch8_4_error_data
    global ch8_5_error_data
    global ch8_6_error_data
    global ch8_7_error_data
    global ch8_8_error_data

    global ch1_1_start_signal
    global ch1_2_start_signal
    global ch1_3_start_signal
    global ch1_4_start_signal
    global ch1_5_start_signal
    global ch1_6_start_signal
    global ch1_7_start_signal
    global ch1_8_start_signal

    global ch2_1_start_signal
    global ch2_2_start_signal
    global ch2_3_start_signal
    global ch2_4_start_signal
    global ch2_5_start_signal
    global ch2_6_start_signal
    global ch2_7_start_signal
    global ch2_8_start_signal

    global ch3_1_start_signal
    global ch3_2_start_signal
    global ch3_3_start_signal
    global ch3_4_start_signal
    global ch3_5_start_signal
    global ch3_6_start_signal
    global ch3_7_start_signal
    global ch3_8_start_signal

    global ch4_1_start_signal
    global ch4_2_start_signal
    global ch4_3_start_signal
    global ch4_4_start_signal
    global ch4_5_start_signal
    global ch4_6_start_signal
    global ch4_7_start_signal
    global ch4_8_start_signal

    global ch5_1_start_signal
    global ch5_2_start_signal
    global ch5_3_start_signal
    global ch5_4_start_signal
    global ch5_5_start_signal
    global ch5_6_start_signal
    global ch5_7_start_signal
    global ch5_8_start_signal

    global ch6_1_start_signal
    global ch6_2_start_signal
    global ch6_3_start_signal
    global ch6_4_start_signal
    global ch6_5_start_signal
    global ch6_6_start_signal
    global ch6_7_start_signal
    global ch6_8_start_signal

    global ch7_1_start_signal
    global ch7_2_start_signal
    global ch7_3_start_signal
    global ch7_4_start_signal
    global ch7_5_start_signal
    global ch7_6_start_signal
    global ch7_7_start_signal
    global ch7_8_start_signal

    global ch8_1_start_signal
    global ch8_2_start_signal
    global ch8_3_start_signal
    global ch8_4_start_signal
    global ch8_5_start_signal
    global ch8_6_start_signal
    global ch8_7_start_signal
    global ch8_8_start_signal

    print("data_update")
    while True:
        # time.sleep(1)
        if (
            ch1_1_signal == 1
            or ch1_2_signal == 1
            or ch1_3_signal == 1
            or ch1_4_signal == 1
            or ch1_5_signal == 1
            or ch1_6_signal == 1
            or ch1_7_signal == 1
            or ch1_8_signal == 1
        ):
            ch1_readcommend = "010300000000A5"
            ### 加锁读取数据
            ### 数据处理
            mutex.acquire()
            ch1_read_data = ser.readdata(com, ch1_readcommend)
            mutex.release()

            if ch1_read_data == "FF":
                ch1_1_data[2] = "通信异常"
                ch1_2_data[2] = "通信异常"
                ch1_3_data[2] = "通信异常"
                ch1_4_data[2] = "通信异常"
                ch1_5_data[2] = "通信异常"
                ch1_6_data[2] = "通信异常"
                ch1_7_data[2] = "通信异常"
                ch1_8_data[2] = "通信异常"
                # stop_test("ch1_1")
                # stop_test("ch1_2")
                # stop_test("ch1_3")
                # stop_test("ch1_4")
                # stop_test("ch1_5")
                # stop_test("ch1_6")
                # stop_test("ch1_7")
                # stop_test("ch1_8")

            else:
                ch1_1_data[2] = int(hex(ch1_read_data[2])[2:])

                if not ch1_1_start_signal:
                    if (
                        ch1_1_error_data == "过压报警"
                        or ch1_1_error_data == "低压报警"
                        or ch1_1_error_data == "过流报警"
                        or ch1_1_error_data == "过温报警"
                        or ch1_1_error_data == "电池脱落或被保护"
                        or ch1_1_error_data == "电池不充电报警"
                        or ch1_1_error_data == "测试完成"
                        or ch1_1_error_data == "容量不足"
                        or ch1_1_error_data == "NTC温度异常"
                    ):
                        ch1_1_data[2] = ch1_1_error_data
                    elif ch1_1_data[2] == 0:
                        ch1_1_data[2] = "待机状态"
                    elif ch1_1_data[2] == 1:
                        ch1_1_data[2] = "放电状态"
                    elif ch1_1_data[2] == 2:
                        ch1_1_data[2] = "充电状态"
                    elif ch1_1_data[2] == 3:
                        ch1_1_data[2] = "测试完成"
                    elif ch1_1_data[2] == 4:
                        ch1_1_data[2] = "过压报警"
                    elif ch1_1_data[2] == 5:
                        ch1_1_data[2] = "低压报警"
                    elif ch1_1_data[2] == 6:
                        ch1_1_data[2] = "过流报警"
                    elif ch1_1_data[2] == 7:
                        ch1_1_data[2] = "过温报警"
                    elif ch1_1_data[2] == 8:
                        ch1_1_data[2] = "电池脱落或被保护"
                    elif ch1_1_data[2] == 9:
                        ch1_1_data[2] = "电池不充电报警"
                    else:
                        ch1_1_data[2] = "通信异常"

                    ch1_1_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[10])[2:]
                                + ("0x%02x" % ch1_read_data[11])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch1_1_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[26])[2:]
                                + ("0x%02x" % ch1_read_data[27])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch1_1_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[42])[2:]
                                + ("0x%02x" % ch1_read_data[43])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch1_1_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[58])[2:]
                                + ("0x%02x" % ch1_read_data[59])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch1_1_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[74])[2:]
                                + ("0x%02x" % ch1_read_data[75])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch1_1_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[90])[2:]
                                + ("0x%02x" % ch1_read_data[91])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch1_1_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[106])[2:]
                                + ("0x%02x" % ch1_read_data[107])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                if ch1_1_start_signal:
                    if ch1_1_data[2] == 0:
                        ch1_1_data[2] = "待机状态"
                    elif ch1_1_data[2] == 1:
                        ch1_1_data[2] = "放电状态"
                    elif ch1_1_data[2] == 2:
                        ch1_1_data[2] = "充电状态"
                    elif ch1_1_data[2] == 3:
                        ch1_1_data[2] = "测试完成"
                    elif ch1_1_data[2] == 4:
                        ch1_1_data[2] = "过压报警"
                    elif ch1_1_data[2] == 5:
                        ch1_1_data[2] = "低压报警"
                    elif ch1_1_data[2] == 6:
                        ch1_1_data[2] = "过流报警"
                    elif ch1_1_data[2] == 7:
                        ch1_1_data[2] = "过温报警"
                    elif ch1_1_data[2] == 8:
                        ch1_1_data[2] = "电池脱落或被保护"
                    elif ch1_1_data[2] == 9:
                        ch1_1_data[2] = "电池不充电报警"
                    else:
                        ch1_1_data[2] = "通信异常"

                    ch1_1_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[10])[2:]
                                + ("0x%02x" % ch1_read_data[11])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch1_1_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[26])[2:]
                                + ("0x%02x" % ch1_read_data[27])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch1_1_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[42])[2:]
                                + ("0x%02x" % ch1_read_data[43])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch1_1_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[58])[2:]
                                + ("0x%02x" % ch1_read_data[59])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch1_1_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[74])[2:]
                                + ("0x%02x" % ch1_read_data[75])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch1_1_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[90])[2:]
                                + ("0x%02x" % ch1_read_data[91])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch1_1_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[106])[2:]
                                + ("0x%02x" % ch1_read_data[107])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                ch1_2_data[2] = int(hex(ch1_read_data[3])[2:])
                if not ch1_2_start_signal:
                    if (
                        ch1_2_error_data == "过压报警"
                        or ch1_2_error_data == "低压报警"
                        or ch1_2_error_data == "过流报警"
                        or ch1_2_error_data == "过温报警"
                        or ch1_2_error_data == "电池脱落或被保护"
                        or ch1_2_error_data == "电池不充电报警"
                        or ch1_2_error_data == "测试完成"
                        or ch1_2_error_data == "容量不足"
                        or ch1_2_error_data == "NTC温度异常"
                    ):
                        ch1_2_data[2] = ch1_2_error_data
                    elif ch1_2_data[2] == 0:
                        ch1_2_data[2] = "待机状态"
                    elif ch1_2_data[2] == 1:
                        ch1_2_data[2] = "放电状态"
                    elif ch1_2_data[2] == 2:
                        ch1_2_data[2] = "充电状态"
                    elif ch1_2_data[2] == 3:
                        ch1_2_data[2] = "测试完成"
                    elif ch1_2_data[2] == 4:
                        ch1_2_data[2] = "过压报警"
                    elif ch1_2_data[2] == 5:
                        ch1_2_data[2] = "低压报警"
                    elif ch1_2_data[2] == 6:
                        ch1_2_data[2] = "过流报警"
                    elif ch1_2_data[2] == 7:
                        ch1_2_data[2] = "过温报警"
                    elif ch1_2_data[2] == 8:
                        ch1_2_data[2] = "电池脱落或被保护"
                    elif ch1_2_data[2] == 9:
                        ch1_2_data[2] = "电池不充电报警"
                    else:
                        ch1_2_data[2] = "通信异常"

                    ch1_2_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[12])[2:]
                                + ("0x%02x" % ch1_read_data[13])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch1_2_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[28])[2:]
                                + ("0x%02x" % ch1_read_data[29])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch1_2_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[44])[2:]
                                + ("0x%02x" % ch1_read_data[45])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch1_2_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[60])[2:]
                                + ("0x%02x" % ch1_read_data[61])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch1_2_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[76])[2:]
                                + ("0x%02x" % ch1_read_data[77])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch1_2_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[92])[2:]
                                + ("0x%02x" % ch1_read_data[93])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch1_2_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[108])[2:]
                                + ("0x%02x" % ch1_read_data[109])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                if ch1_2_start_signal:
                    if ch1_2_data[2] == 0:
                        ch1_2_data[2] = "待机状态"
                    elif ch1_2_data[2] == 1:
                        ch1_2_data[2] = "放电状态"
                    elif ch1_2_data[2] == 2:
                        ch1_2_data[2] = "充电状态"
                    elif ch1_2_data[2] == 3:
                        ch1_2_data[2] = "测试完成"
                    elif ch1_2_data[2] == 4:
                        ch1_2_data[2] = "过压报警"
                    elif ch1_2_data[2] == 5:
                        ch1_2_data[2] = "低压报警"
                    elif ch1_2_data[2] == 6:
                        ch1_2_data[2] = "过流报警"
                    elif ch1_2_data[2] == 7:
                        ch1_2_data[2] = "过温报警"
                    elif ch1_2_data[2] == 8:
                        ch1_2_data[2] = "电池脱落或被保护"
                    elif ch1_2_data[2] == 9:
                        ch1_2_data[2] = "电池不充电报警"
                    else:
                        ch1_2_data[2] = "通信异常"

                    ch1_2_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[12])[2:]
                                + ("0x%02x" % ch1_read_data[13])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch1_2_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[28])[2:]
                                + ("0x%02x" % ch1_read_data[29])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch1_2_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[44])[2:]
                                + ("0x%02x" % ch1_read_data[45])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch1_2_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[60])[2:]
                                + ("0x%02x" % ch1_read_data[61])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch1_2_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[76])[2:]
                                + ("0x%02x" % ch1_read_data[77])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch1_2_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[92])[2:]
                                + ("0x%02x" % ch1_read_data[93])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch1_2_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[108])[2:]
                                + ("0x%02x" % ch1_read_data[109])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                ch1_3_data[2] = int(hex(ch1_read_data[4])[2:])
                if not ch1_3_start_signal:
                    if (
                        ch1_3_error_data == "过压报警"
                        or ch1_3_error_data == "低压报警"
                        or ch1_3_error_data == "过流报警"
                        or ch1_3_error_data == "过温报警"
                        or ch1_3_error_data == "电池脱落或被保护"
                        or ch1_3_error_data == "电池不充电报警"
                        or ch1_3_error_data == "测试完成"
                        or ch1_3_error_data == "容量不足"
                        or ch1_3_error_data == "NTC温度异常"
                    ):
                        ch1_3_data[2] = ch1_3_error_data
                    elif ch1_3_data[2] == 0:
                        ch1_3_data[2] = "待机状态"
                    elif ch1_3_data[2] == 1:
                        ch1_3_data[2] = "放电状态"
                    elif ch1_3_data[2] == 2:
                        ch1_3_data[2] = "充电状态"
                    elif ch1_3_data[2] == 3:
                        ch1_3_data[2] = "测试完成"
                    elif ch1_3_data[2] == 4:
                        ch1_3_data[2] = "过压报警"
                    elif ch1_3_data[2] == 5:
                        ch1_3_data[2] = "低压报警"
                    elif ch1_3_data[2] == 6:
                        ch1_3_data[2] = "过流报警"
                    elif ch1_3_data[2] == 7:
                        ch1_3_data[2] = "过温报警"
                    elif ch1_3_data[2] == 8:
                        ch1_3_data[2] = "电池脱落或被保护"
                    elif ch1_3_data[2] == 9:
                        ch1_3_data[2] = "电池不充电报警"
                    else:
                        ch1_3_data[2] = "通信异常"

                    ch1_3_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[14])[2:]
                                + ("0x%02x" % ch1_read_data[15])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch1_3_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[30])[2:]
                                + ("0x%02x" % ch1_read_data[31])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch1_3_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[46])[2:]
                                + ("0x%02x" % ch1_read_data[47])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch1_3_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[62])[2:]
                                + ("0x%02x" % ch1_read_data[63])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch1_3_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[78])[2:]
                                + ("0x%02x" % ch1_read_data[79])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch1_3_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[94])[2:]
                                + ("0x%02x" % ch1_read_data[95])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch1_3_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[110])[2:]
                                + ("0x%02x" % ch1_read_data[111])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                if ch1_3_start_signal:
                    if ch1_3_data[2] == 0:
                        ch1_3_data[2] = "待机状态"
                    elif ch1_3_data[2] == 1:
                        ch1_3_data[2] = "放电状态"
                    elif ch1_3_data[2] == 2:
                        ch1_3_data[2] = "充电状态"
                    elif ch1_3_data[2] == 3:
                        ch1_3_data[2] = "测试完成"
                    elif ch1_3_data[2] == 4:
                        ch1_3_data[2] = "过压报警"
                    elif ch1_3_data[2] == 5:
                        ch1_3_data[2] = "低压报警"
                    elif ch1_3_data[2] == 6:
                        ch1_3_data[2] = "过流报警"
                    elif ch1_3_data[2] == 7:
                        ch1_3_data[2] = "过温报警"
                    elif ch1_3_data[2] == 8:
                        ch1_3_data[2] = "电池脱落或被保护"
                    elif ch1_3_data[2] == 9:
                        ch1_3_data[2] = "电池不充电报警"
                    else:
                        ch1_3_data[2] = "通信异常"

                    ch1_3_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[14])[2:]
                                + ("0x%02x" % ch1_read_data[15])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch1_3_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[30])[2:]
                                + ("0x%02x" % ch1_read_data[31])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch1_3_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[46])[2:]
                                + ("0x%02x" % ch1_read_data[47])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch1_3_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[62])[2:]
                                + ("0x%02x" % ch1_read_data[63])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch1_3_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[78])[2:]
                                + ("0x%02x" % ch1_read_data[79])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch1_3_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[94])[2:]
                                + ("0x%02x" % ch1_read_data[95])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch1_3_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[110])[2:]
                                + ("0x%02x" % ch1_read_data[111])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                ch1_4_data[2] = int(hex(ch1_read_data[5])[2:])
                if not ch1_4_start_signal:
                    if (
                        ch1_4_error_data == "过压报警"
                        or ch1_4_error_data == "低压报警"
                        or ch1_4_error_data == "过流报警"
                        or ch1_4_error_data == "过温报警"
                        or ch1_4_error_data == "电池脱落或被保护"
                        or ch1_4_error_data == "电池不充电报警"
                        or ch1_4_error_data == "测试完成"
                        or ch1_4_error_data == "容量不足"
                        or ch1_4_error_data == "NTC温度异常"
                    ):
                        ch1_4_data[2] = ch1_4_error_data
                    elif ch1_4_data[2] == 0:
                        ch1_4_data[2] = "待机状态"
                    elif ch1_4_data[2] == 1:
                        ch1_4_data[2] = "放电状态"
                    elif ch1_4_data[2] == 2:
                        ch1_4_data[2] = "充电状态"
                    elif ch1_4_data[2] == 3:
                        ch1_4_data[2] = "测试完成"
                    elif ch1_4_data[2] == 4:
                        ch1_4_data[2] = "过压报警"
                    elif ch1_4_data[2] == 5:
                        ch1_4_data[2] = "低压报警"
                    elif ch1_4_data[2] == 6:
                        ch1_4_data[2] = "过流报警"
                    elif ch1_4_data[2] == 7:
                        ch1_4_data[2] = "过温报警"
                    elif ch1_4_data[2] == 8:
                        ch1_4_data[2] = "电池脱落或被保护"
                    elif ch1_4_data[2] == 9:
                        ch1_4_data[2] = "电池不充电报警"
                    else:
                        ch1_4_data[2] = "通信异常"

                    ch1_4_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[16])[2:]
                                + ("0x%02x" % ch1_read_data[17])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch1_4_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[32])[2:]
                                + ("0x%02x" % ch1_read_data[33])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch1_4_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[48])[2:]
                                + ("0x%02x" % ch1_read_data[49])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch1_4_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[64])[2:]
                                + ("0x%02x" % ch1_read_data[65])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch1_4_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[80])[2:]
                                + ("0x%02x" % ch1_read_data[81])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch1_4_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[96])[2:]
                                + ("0x%02x" % ch1_read_data[97])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch1_4_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[112])[2:]
                                + ("0x%02x" % ch1_read_data[113])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                if ch1_4_start_signal:
                    if ch1_4_data[2] == 0:
                        ch1_4_data[2] = "待机状态"
                    elif ch1_4_data[2] == 1:
                        ch1_4_data[2] = "放电状态"
                    elif ch1_4_data[2] == 2:
                        ch1_4_data[2] = "充电状态"
                    elif ch1_4_data[2] == 3:
                        ch1_4_data[2] = "测试完成"
                    elif ch1_4_data[2] == 4:
                        ch1_4_data[2] = "过压报警"
                    elif ch1_4_data[2] == 5:
                        ch1_4_data[2] = "低压报警"
                    elif ch1_4_data[2] == 6:
                        ch1_4_data[2] = "过流报警"
                    elif ch1_4_data[2] == 7:
                        ch1_4_data[2] = "过温报警"
                    elif ch1_4_data[2] == 8:
                        ch1_4_data[2] = "电池脱落或被保护"
                    elif ch1_4_data[2] == 9:
                        ch1_4_data[2] = "电池不充电报警"
                    else:
                        ch1_4_data[2] = "通信异常"

                    ch1_4_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[16])[2:]
                                + ("0x%02x" % ch1_read_data[17])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch1_4_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[32])[2:]
                                + ("0x%02x" % ch1_read_data[33])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch1_4_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[48])[2:]
                                + ("0x%02x" % ch1_read_data[49])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch1_4_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[64])[2:]
                                + ("0x%02x" % ch1_read_data[65])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch1_4_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[80])[2:]
                                + ("0x%02x" % ch1_read_data[81])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch1_4_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[96])[2:]
                                + ("0x%02x" % ch1_read_data[97])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch1_4_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[112])[2:]
                                + ("0x%02x" % ch1_read_data[113])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                ch1_5_data[2] = int(hex(ch1_read_data[6])[2:])
                if not ch1_5_start_signal:
                    if (
                        ch1_5_error_data == "过压报警"
                        or ch1_5_error_data == "低压报警"
                        or ch1_5_error_data == "过流报警"
                        or ch1_5_error_data == "过温报警"
                        or ch1_5_error_data == "电池脱落或被保护"
                        or ch1_5_error_data == "电池不充电报警"
                        or ch1_5_error_data == "测试完成"
                        or ch1_5_error_data == "容量不足"
                        or ch1_5_error_data == "NTC温度异常"
                    ):
                        ch1_5_data[2] = ch1_5_error_data
                    elif ch1_5_data[2] == 0:
                        ch1_5_data[2] = "待机状态"
                    elif ch1_5_data[2] == 1:
                        ch1_5_data[2] = "放电状态"
                    elif ch1_5_data[2] == 2:
                        ch1_5_data[2] = "充电状态"
                    elif ch1_5_data[2] == 3:
                        ch1_5_data[2] = "测试完成"
                    elif ch1_5_data[2] == 4:
                        ch1_5_data[2] = "过压报警"
                    elif ch1_5_data[2] == 5:
                        ch1_5_data[2] = "低压报警"
                    elif ch1_5_data[2] == 6:
                        ch1_5_data[2] = "过流报警"
                    elif ch1_5_data[2] == 7:
                        ch1_5_data[2] = "过温报警"
                    elif ch1_5_data[2] == 8:
                        ch1_5_data[2] = "电池脱落或被保护"
                    elif ch1_5_data[2] == 9:
                        ch1_5_data[2] = "电池不充电报警"
                    else:
                        ch1_5_data[2] = "通信异常"

                    ch1_5_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[18])[2:]
                                + ("0x%02x" % ch1_read_data[19])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch1_5_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[34])[2:]
                                + ("0x%02x" % ch1_read_data[35])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch1_5_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[50])[2:]
                                + ("0x%02x" % ch1_read_data[51])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch1_5_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[66])[2:]
                                + ("0x%02x" % ch1_read_data[67])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch1_5_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[82])[2:]
                                + ("0x%02x" % ch1_read_data[83])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch1_5_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[98])[2:]
                                + ("0x%02x" % ch1_read_data[99])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch1_5_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[114])[2:]
                                + ("0x%02x" % ch1_read_data[115])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                if ch1_5_start_signal:
                    if ch1_5_data[2] == 0:
                        ch1_5_data[2] = "待机状态"
                    elif ch1_5_data[2] == 1:
                        ch1_5_data[2] = "放电状态"
                    elif ch1_5_data[2] == 2:
                        ch1_5_data[2] = "充电状态"
                    elif ch1_5_data[2] == 3:
                        ch1_5_data[2] = "测试完成"
                    elif ch1_5_data[2] == 4:
                        ch1_5_data[2] = "过压报警"
                    elif ch1_5_data[2] == 5:
                        ch1_5_data[2] = "低压报警"
                    elif ch1_5_data[2] == 6:
                        ch1_5_data[2] = "过流报警"
                    elif ch1_5_data[2] == 7:
                        ch1_5_data[2] = "过温报警"
                    elif ch1_5_data[2] == 8:
                        ch1_5_data[2] = "电池脱落或被保护"
                    elif ch1_5_data[2] == 9:
                        ch1_5_data[2] = "电池不充电报警"
                    else:
                        ch1_5_data[2] = "通信异常"

                    ch1_5_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[18])[2:]
                                + ("0x%02x" % ch1_read_data[19])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch1_5_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[34])[2:]
                                + ("0x%02x" % ch1_read_data[35])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch1_5_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[50])[2:]
                                + ("0x%02x" % ch1_read_data[51])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch1_5_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[66])[2:]
                                + ("0x%02x" % ch1_read_data[67])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch1_5_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[82])[2:]
                                + ("0x%02x" % ch1_read_data[83])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch1_5_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[98])[2:]
                                + ("0x%02x" % ch1_read_data[99])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch1_5_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[114])[2:]
                                + ("0x%02x" % ch1_read_data[115])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                ch1_6_data[2] = int(hex(ch1_read_data[7])[2:])
                if not ch1_6_start_signal:
                    if (
                        ch1_6_error_data == "过压报警"
                        or ch1_6_error_data == "低压报警"
                        or ch1_6_error_data == "过流报警"
                        or ch1_6_error_data == "过温报警"
                        or ch1_6_error_data == "电池脱落或被保护"
                        or ch1_6_error_data == "电池不充电报警"
                        or ch1_6_error_data == "测试完成"
                        or ch1_6_error_data == "容量不足"
                        or ch1_6_error_data == "NTC温度异常"
                    ):
                        ch1_6_data[2] = ch1_6_error_data
                    elif ch1_6_data[2] == 0:
                        ch1_6_data[2] = "待机状态"
                    elif ch1_6_data[2] == 1:
                        ch1_6_data[2] = "放电状态"
                    elif ch1_6_data[2] == 2:
                        ch1_6_data[2] = "充电状态"
                    elif ch1_6_data[2] == 3:
                        ch1_6_data[2] = "测试完成"
                    elif ch1_6_data[2] == 4:
                        ch1_6_data[2] = "过压报警"
                    elif ch1_6_data[2] == 5:
                        ch1_6_data[2] = "低压报警"
                    elif ch1_6_data[2] == 6:
                        ch1_6_data[2] = "过流报警"
                    elif ch1_6_data[2] == 7:
                        ch1_6_data[2] = "过温报警"
                    elif ch1_6_data[2] == 8:
                        ch1_6_data[2] = "电池脱落或被保护"
                    elif ch1_6_data[2] == 9:
                        ch1_6_data[2] = "电池不充电报警"
                    else:
                        ch1_6_data[2] = "通信异常"

                    ch1_6_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[20])[2:]
                                + ("0x%02x" % ch1_read_data[21])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch1_6_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[36])[2:]
                                + ("0x%02x" % ch1_read_data[37])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch1_6_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[52])[2:]
                                + ("0x%02x" % ch1_read_data[53])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch1_6_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[68])[2:]
                                + ("0x%02x" % ch1_read_data[69])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch1_6_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[84])[2:]
                                + ("0x%02x" % ch1_read_data[85])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch1_6_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[100])[2:]
                                + ("0x%02x" % ch1_read_data[101])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch1_6_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[116])[2:]
                                + ("0x%02x" % ch1_read_data[117])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                if ch1_6_start_signal:
                    if ch1_6_data[2] == 0:
                        ch1_6_data[2] = "待机状态"
                    elif ch1_6_data[2] == 1:
                        ch1_6_data[2] = "放电状态"
                    elif ch1_6_data[2] == 2:
                        ch1_6_data[2] = "充电状态"
                    elif ch1_6_data[2] == 3:
                        ch1_6_data[2] = "测试完成"
                    elif ch1_6_data[2] == 4:
                        ch1_6_data[2] = "过压报警"
                    elif ch1_6_data[2] == 5:
                        ch1_6_data[2] = "低压报警"
                    elif ch1_6_data[2] == 6:
                        ch1_6_data[2] = "过流报警"
                    elif ch1_6_data[2] == 7:
                        ch1_6_data[2] = "过温报警"
                    elif ch1_6_data[2] == 8:
                        ch1_6_data[2] = "电池脱落或被保护"
                    elif ch1_6_data[2] == 9:
                        ch1_6_data[2] = "电池不充电报警"
                    else:
                        ch1_6_data[2] = "通信异常"

                    ch1_6_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[20])[2:]
                                + ("0x%02x" % ch1_read_data[21])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch1_6_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[36])[2:]
                                + ("0x%02x" % ch1_read_data[37])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch1_6_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[52])[2:]
                                + ("0x%02x" % ch1_read_data[53])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch1_6_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[68])[2:]
                                + ("0x%02x" % ch1_read_data[69])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch1_6_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[84])[2:]
                                + ("0x%02x" % ch1_read_data[85])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch1_6_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[100])[2:]
                                + ("0x%02x" % ch1_read_data[101])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch1_6_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[116])[2:]
                                + ("0x%02x" % ch1_read_data[117])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                ch1_7_data[2] = int(hex(ch1_read_data[8])[2:])
                if not ch1_7_start_signal:
                    if (
                        ch1_7_error_data == "过压报警"
                        or ch1_7_error_data == "低压报警"
                        or ch1_7_error_data == "过流报警"
                        or ch1_7_error_data == "过温报警"
                        or ch1_7_error_data == "电池脱落或被保护"
                        or ch1_7_error_data == "电池不充电报警"
                        or ch1_7_error_data == "测试完成"
                        or ch1_7_error_data == "容量不足"
                        or ch1_7_error_data == "NTC温度异常"
                    ):
                        ch1_7_data[2] = ch1_7_error_data
                    elif ch1_7_data[2] == 0:
                        ch1_7_data[2] = "待机状态"
                    elif ch1_7_data[2] == 1:
                        ch1_7_data[2] = "放电状态"
                    elif ch1_7_data[2] == 2:
                        ch1_7_data[2] = "充电状态"
                    elif ch1_7_data[2] == 3:
                        ch1_7_data[2] = "测试完成"
                    elif ch1_7_data[2] == 4:
                        ch1_7_data[2] = "过压报警"
                    elif ch1_7_data[2] == 5:
                        ch1_7_data[2] = "低压报警"
                    elif ch1_7_data[2] == 6:
                        ch1_7_data[2] = "过流报警"
                    elif ch1_7_data[2] == 7:
                        ch1_7_data[2] = "过温报警"
                    elif ch1_7_data[2] == 8:
                        ch1_7_data[2] = "电池脱落或被保护"
                    elif ch1_7_data[2] == 9:
                        ch1_7_data[2] = "电池不充电报警"
                    else:
                        ch1_7_data[2] = "通信异常"

                    ch1_7_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[22])[2:]
                                + ("0x%02x" % ch1_read_data[23])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch1_7_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[38])[2:]
                                + ("0x%02x" % ch1_read_data[39])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch1_7_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[54])[2:]
                                + ("0x%02x" % ch1_read_data[55])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch1_7_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[70])[2:]
                                + ("0x%02x" % ch1_read_data[71])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch1_7_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[86])[2:]
                                + ("0x%02x" % ch1_read_data[87])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch1_7_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[102])[2:]
                                + ("0x%02x" % ch1_read_data[103])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch1_7_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[118])[2:]
                                + ("0x%02x" % ch1_read_data[119])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                if ch1_7_start_signal:
                    if ch1_7_data[2] == 0:
                        ch1_7_data[2] = "待机状态"
                    elif ch1_7_data[2] == 1:
                        ch1_7_data[2] = "放电状态"
                    elif ch1_7_data[2] == 2:
                        ch1_7_data[2] = "充电状态"
                    elif ch1_7_data[2] == 3:
                        ch1_7_data[2] = "测试完成"
                    elif ch1_7_data[2] == 4:
                        ch1_7_data[2] = "过压报警"
                    elif ch1_7_data[2] == 5:
                        ch1_7_data[2] = "低压报警"
                    elif ch1_7_data[2] == 6:
                        ch1_7_data[2] = "过流报警"
                    elif ch1_7_data[2] == 7:
                        ch1_7_data[2] = "过温报警"
                    elif ch1_7_data[2] == 8:
                        ch1_7_data[2] = "电池脱落或被保护"
                    elif ch1_7_data[2] == 9:
                        ch1_7_data[2] = "电池不充电报警"
                    else:
                        ch1_7_data[2] = "通信异常"

                    ch1_7_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[22])[2:]
                                + ("0x%02x" % ch1_read_data[23])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch1_7_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[38])[2:]
                                + ("0x%02x" % ch1_read_data[39])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch1_7_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[54])[2:]
                                + ("0x%02x" % ch1_read_data[55])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch1_7_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[70])[2:]
                                + ("0x%02x" % ch1_read_data[71])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch1_7_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[86])[2:]
                                + ("0x%02x" % ch1_read_data[87])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch1_7_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[102])[2:]
                                + ("0x%02x" % ch1_read_data[103])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch1_7_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[118])[2:]
                                + ("0x%02x" % ch1_read_data[119])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                ch1_8_data[2] = int(hex(ch1_read_data[9])[2:])
                if not ch1_8_start_signal:
                    if (
                        ch1_8_error_data == "过压报警"
                        or ch1_8_error_data == "低压报警"
                        or ch1_8_error_data == "过流报警"
                        or ch1_8_error_data == "过温报警"
                        or ch1_8_error_data == "电池脱落或被保护"
                        or ch1_8_error_data == "电池不充电报警"
                        or ch1_8_error_data == "测试完成"
                        or ch1_8_error_data == "容量不足"
                        or ch1_8_error_data == "NTC温度异常"
                    ):
                        ch1_8_data[2] = ch1_8_error_data
                    elif ch1_8_data[2] == 0:
                        ch1_8_data[2] = "待机状态"
                    elif ch1_8_data[2] == 1:
                        ch1_8_data[2] = "放电状态"
                    elif ch1_8_data[2] == 2:
                        ch1_8_data[2] = "充电状态"
                    elif ch1_8_data[2] == 3:
                        ch1_8_data[2] = "测试完成"
                    elif ch1_8_data[2] == 4:
                        ch1_8_data[2] = "过压报警"
                    elif ch1_8_data[2] == 5:
                        ch1_8_data[2] = "低压报警"
                    elif ch1_8_data[2] == 6:
                        ch1_8_data[2] = "过流报警"
                    elif ch1_8_data[2] == 7:
                        ch1_8_data[2] = "过温报警"
                    elif ch1_8_data[2] == 8:
                        ch1_8_data[2] = "电池脱落或被保护"
                    elif ch1_8_data[2] == 9:
                        ch1_8_data[2] = "电池不充电报警"
                    else:
                        ch1_8_data[2] = "通信异常"

                    ch1_8_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[24])[2:]
                                + ("0x%02x" % ch1_read_data[25])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch1_8_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[40])[2:]
                                + ("0x%02x" % ch1_read_data[41])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch1_8_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[56])[2:]
                                + ("0x%02x" % ch1_read_data[57])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch1_8_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[72])[2:]
                                + ("0x%02x" % ch1_read_data[73])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch1_8_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[88])[2:]
                                + ("0x%02x" % ch1_read_data[89])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch1_8_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[104])[2:]
                                + ("0x%02x" % ch1_read_data[105])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch1_8_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[120])[2:]
                                + ("0x%02x" % ch1_read_data[121])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                if ch1_8_start_signal:
                    if ch1_8_data[2] == 0:
                        ch1_8_data[2] = "待机状态"
                    elif ch1_8_data[2] == 1:
                        ch1_8_data[2] = "放电状态"
                    elif ch1_8_data[2] == 2:
                        ch1_8_data[2] = "充电状态"
                    elif ch1_8_data[2] == 3:
                        ch1_8_data[2] = "测试完成"
                    elif ch1_8_data[2] == 4:
                        ch1_8_data[2] = "过压报警"
                    elif ch1_8_data[2] == 5:
                        ch1_8_data[2] = "低压报警"
                    elif ch1_8_data[2] == 6:
                        ch1_8_data[2] = "过流报警"
                    elif ch1_8_data[2] == 7:
                        ch1_8_data[2] = "过温报警"
                    elif ch1_8_data[2] == 8:
                        ch1_8_data[2] = "电池脱落或被保护"
                    elif ch1_8_data[2] == 9:
                        ch1_8_data[2] = "电池不充电报警"
                    else:
                        ch1_8_data[2] = "通信异常"

                    ch1_8_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[24])[2:]
                                + ("0x%02x" % ch1_read_data[25])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch1_8_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[40])[2:]
                                + ("0x%02x" % ch1_read_data[41])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch1_8_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[56])[2:]
                                + ("0x%02x" % ch1_read_data[57])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch1_8_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[72])[2:]
                                + ("0x%02x" % ch1_read_data[73])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch1_8_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[88])[2:]
                                + ("0x%02x" % ch1_read_data[89])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch1_8_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[104])[2:]
                                + ("0x%02x" % ch1_read_data[105])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch1_8_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data[120])[2:]
                                + ("0x%02x" % ch1_read_data[121])[2:],
                                16,
                            )
                        )
                        / 10
                    )

        if (
            ch2_1_signal == 1
            or ch2_2_signal == 1
            or ch2_3_signal == 1
            or ch2_4_signal == 1
            or ch2_5_signal == 1
            or ch2_6_signal == 1
            or ch2_7_signal == 1
            or ch2_8_signal == 1
        ):
            ch2_readcommend = "020300000000A5"
            ### 加锁读取数据
            ### 数据处理
            mutex.acquire()
            ch2_read_data = ser.readdata(com, ch2_readcommend)
            mutex.release()

            if ch2_read_data == "FF":
                ch2_1_data[2] = "通信异常"
                ch2_2_data[2] = "通信异常"
                ch2_3_data[2] = "通信异常"
                ch2_4_data[2] = "通信异常"
                ch2_5_data[2] = "通信异常"
                ch2_6_data[2] = "通信异常"
                ch2_7_data[2] = "通信异常"
                ch2_8_data[2] = "通信异常"
                # stop_test("ch2_1")
                # stop_test("ch2_2")
                # stop_test("ch2_3")
                # stop_test("ch2_4")
                # stop_test("ch2_5")
                # stop_test("ch2_6")
                # stop_test("ch2_7")
                # stop_test("ch2_8")

            else:
                ch2_1_data[2] = int(hex(ch2_read_data[2])[2:])

                if not ch2_1_start_signal:
                    if (
                        ch2_1_error_data == "过压报警"
                        or ch2_1_error_data == "低压报警"
                        or ch2_1_error_data == "过流报警"
                        or ch2_1_error_data == "过温报警"
                        or ch2_1_error_data == "电池脱落或被保护"
                        or ch2_1_error_data == "电池不充电报警"
                        or ch2_1_error_data == "测试完成"
                        or ch2_1_error_data == "容量不足"
                        or ch2_1_error_data == "NTC温度异常"
                    ):
                        ch2_1_data[2] = ch2_1_error_data
                    elif ch2_1_data[2] == 0:
                        ch2_1_data[2] = "待机状态"
                    elif ch2_1_data[2] == 1:
                        ch2_1_data[2] = "放电状态"
                    elif ch2_1_data[2] == 2:
                        ch2_1_data[2] = "充电状态"
                    elif ch2_1_data[2] == 3:
                        ch2_1_data[2] = "测试完成"
                    elif ch2_1_data[2] == 4:
                        ch2_1_data[2] = "过压报警"
                    elif ch2_1_data[2] == 5:
                        ch2_1_data[2] = "低压报警"
                    elif ch2_1_data[2] == 6:
                        ch2_1_data[2] = "过流报警"
                    elif ch2_1_data[2] == 7:
                        ch2_1_data[2] = "过温报警"
                    elif ch2_1_data[2] == 8:
                        ch2_1_data[2] = "电池脱落或被保护"
                    elif ch2_1_data[2] == 9:
                        ch2_1_data[2] = "电池不充电报警"
                    else:
                        ch2_1_data[2] = "通信异常"

                    ch2_1_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[10])[2:]
                                + ("0x%02x" % ch2_read_data[11])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch2_1_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[26])[2:]
                                + ("0x%02x" % ch2_read_data[27])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch2_1_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[42])[2:]
                                + ("0x%02x" % ch2_read_data[43])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch2_1_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[58])[2:]
                                + ("0x%02x" % ch2_read_data[59])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch2_1_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[74])[2:]
                                + ("0x%02x" % ch2_read_data[75])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch2_1_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[90])[2:]
                                + ("0x%02x" % ch2_read_data[91])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch2_1_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[106])[2:]
                                + ("0x%02x" % ch2_read_data[107])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                if ch2_1_start_signal:
                    if ch2_1_data[2] == 0:
                        ch2_1_data[2] = "待机状态"
                    elif ch2_1_data[2] == 1:
                        ch2_1_data[2] = "放电状态"
                    elif ch2_1_data[2] == 2:
                        ch2_1_data[2] = "充电状态"
                    elif ch2_1_data[2] == 3:
                        ch2_1_data[2] = "测试完成"
                    elif ch2_1_data[2] == 4:
                        ch2_1_data[2] = "过压报警"
                    elif ch2_1_data[2] == 5:
                        ch2_1_data[2] = "低压报警"
                    elif ch2_1_data[2] == 6:
                        ch2_1_data[2] = "过流报警"
                    elif ch2_1_data[2] == 7:
                        ch2_1_data[2] = "过温报警"
                    elif ch2_1_data[2] == 8:
                        ch2_1_data[2] = "电池脱落或被保护"
                    elif ch2_1_data[2] == 9:
                        ch2_1_data[2] = "电池不充电报警"
                    else:
                        ch2_1_data[2] = "通信异常"

                    ch2_1_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[10])[2:]
                                + ("0x%02x" % ch2_read_data[11])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch2_1_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[26])[2:]
                                + ("0x%02x" % ch2_read_data[27])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch2_1_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[42])[2:]
                                + ("0x%02x" % ch2_read_data[43])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch2_1_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[58])[2:]
                                + ("0x%02x" % ch2_read_data[59])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch2_1_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[74])[2:]
                                + ("0x%02x" % ch2_read_data[75])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch2_1_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[90])[2:]
                                + ("0x%02x" % ch2_read_data[91])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch2_1_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[106])[2:]
                                + ("0x%02x" % ch2_read_data[107])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                ch2_2_data[2] = int(hex(ch2_read_data[3])[2:])
                if not ch2_2_start_signal:
                    if (
                        ch2_2_error_data == "过压报警"
                        or ch2_2_error_data == "低压报警"
                        or ch2_2_error_data == "过流报警"
                        or ch2_2_error_data == "过温报警"
                        or ch2_2_error_data == "电池脱落或被保护"
                        or ch2_2_error_data == "电池不充电报警"
                        or ch2_2_error_data == "测试完成"
                        or ch2_2_error_data == "容量不足"
                        or ch2_2_error_data == "NTC温度异常"
                    ):
                        ch2_2_data[2] = ch2_2_error_data
                    elif ch2_2_data[2] == 0:
                        ch2_2_data[2] = "待机状态"
                    elif ch2_2_data[2] == 1:
                        ch2_2_data[2] = "放电状态"
                    elif ch2_2_data[2] == 2:
                        ch2_2_data[2] = "充电状态"
                    elif ch2_2_data[2] == 3:
                        ch2_2_data[2] = "测试完成"
                    elif ch2_2_data[2] == 4:
                        ch2_2_data[2] = "过压报警"
                    elif ch2_2_data[2] == 5:
                        ch2_2_data[2] = "低压报警"
                    elif ch2_2_data[2] == 6:
                        ch2_2_data[2] = "过流报警"
                    elif ch2_2_data[2] == 7:
                        ch2_2_data[2] = "过温报警"
                    elif ch2_2_data[2] == 8:
                        ch2_2_data[2] = "电池脱落或被保护"
                    elif ch2_2_data[2] == 9:
                        ch2_2_data[2] = "电池不充电报警"
                    else:
                        ch2_2_data[2] = "通信异常"

                    ch2_2_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[12])[2:]
                                + ("0x%02x" % ch2_read_data[13])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch2_2_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[28])[2:]
                                + ("0x%02x" % ch2_read_data[29])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch2_2_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[44])[2:]
                                + ("0x%02x" % ch2_read_data[45])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch2_2_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[60])[2:]
                                + ("0x%02x" % ch2_read_data[61])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch2_2_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[76])[2:]
                                + ("0x%02x" % ch2_read_data[77])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch2_2_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[92])[2:]
                                + ("0x%02x" % ch2_read_data[93])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch2_2_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[108])[2:]
                                + ("0x%02x" % ch2_read_data[109])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                if ch2_2_start_signal:
                    if ch2_2_data[2] == 0:
                        ch2_2_data[2] = "待机状态"
                    elif ch2_2_data[2] == 1:
                        ch2_2_data[2] = "放电状态"
                    elif ch2_2_data[2] == 2:
                        ch2_2_data[2] = "充电状态"
                    elif ch2_2_data[2] == 3:
                        ch2_2_data[2] = "测试完成"
                    elif ch2_2_data[2] == 4:
                        ch2_2_data[2] = "过压报警"
                    elif ch2_2_data[2] == 5:
                        ch2_2_data[2] = "低压报警"
                    elif ch2_2_data[2] == 6:
                        ch2_2_data[2] = "过流报警"
                    elif ch2_2_data[2] == 7:
                        ch2_2_data[2] = "过温报警"
                    elif ch2_2_data[2] == 8:
                        ch2_2_data[2] = "电池脱落或被保护"
                    elif ch2_2_data[2] == 9:
                        ch2_2_data[2] = "电池不充电报警"
                    else:
                        ch2_2_data[2] = "通信异常"

                    ch2_2_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[12])[2:]
                                + ("0x%02x" % ch2_read_data[13])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch2_2_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[28])[2:]
                                + ("0x%02x" % ch2_read_data[29])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch2_2_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[44])[2:]
                                + ("0x%02x" % ch2_read_data[45])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch2_2_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[60])[2:]
                                + ("0x%02x" % ch2_read_data[61])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch2_2_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[76])[2:]
                                + ("0x%02x" % ch2_read_data[77])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch2_2_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[92])[2:]
                                + ("0x%02x" % ch2_read_data[93])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch2_2_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[108])[2:]
                                + ("0x%02x" % ch2_read_data[109])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                ch2_3_data[2] = int(hex(ch2_read_data[4])[2:])
                if not ch2_3_start_signal:
                    if (
                        ch2_3_error_data == "过压报警"
                        or ch2_3_error_data == "低压报警"
                        or ch2_3_error_data == "过流报警"
                        or ch2_3_error_data == "过温报警"
                        or ch2_3_error_data == "电池脱落或被保护"
                        or ch2_3_error_data == "电池不充电报警"
                        or ch2_3_error_data == "测试完成"
                        or ch2_3_error_data == "容量不足"
                        or ch2_3_error_data == "NTC温度异常"
                    ):
                        ch2_3_data[2] = ch2_3_error_data
                    elif ch2_3_data[2] == 0:
                        ch2_3_data[2] = "待机状态"
                    elif ch2_3_data[2] == 1:
                        ch2_3_data[2] = "放电状态"
                    elif ch2_3_data[2] == 2:
                        ch2_3_data[2] = "充电状态"
                    elif ch2_3_data[2] == 3:
                        ch2_3_data[2] = "测试完成"
                    elif ch2_3_data[2] == 4:
                        ch2_3_data[2] = "过压报警"
                    elif ch2_3_data[2] == 5:
                        ch2_3_data[2] = "低压报警"
                    elif ch2_3_data[2] == 6:
                        ch2_3_data[2] = "过流报警"
                    elif ch2_3_data[2] == 7:
                        ch2_3_data[2] = "过温报警"
                    elif ch2_3_data[2] == 8:
                        ch2_3_data[2] = "电池脱落或被保护"
                    elif ch2_3_data[2] == 9:
                        ch2_3_data[2] = "电池不充电报警"
                    else:
                        ch2_3_data[2] = "通信异常"

                    ch2_3_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[14])[2:]
                                + ("0x%02x" % ch2_read_data[15])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch2_3_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[30])[2:]
                                + ("0x%02x" % ch2_read_data[31])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch2_3_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[46])[2:]
                                + ("0x%02x" % ch2_read_data[47])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch2_3_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[62])[2:]
                                + ("0x%02x" % ch2_read_data[63])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch2_3_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[78])[2:]
                                + ("0x%02x" % ch2_read_data[79])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch2_3_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[94])[2:]
                                + ("0x%02x" % ch2_read_data[95])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch2_3_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[110])[2:]
                                + ("0x%02x" % ch2_read_data[111])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                if ch2_3_start_signal:
                    if ch2_3_data[2] == 0:
                        ch2_3_data[2] = "待机状态"
                    elif ch2_3_data[2] == 1:
                        ch2_3_data[2] = "放电状态"
                    elif ch2_3_data[2] == 2:
                        ch2_3_data[2] = "充电状态"
                    elif ch2_3_data[2] == 3:
                        ch2_3_data[2] = "测试完成"
                    elif ch2_3_data[2] == 4:
                        ch2_3_data[2] = "过压报警"
                    elif ch2_3_data[2] == 5:
                        ch2_3_data[2] = "低压报警"
                    elif ch2_3_data[2] == 6:
                        ch2_3_data[2] = "过流报警"
                    elif ch2_3_data[2] == 7:
                        ch2_3_data[2] = "过温报警"
                    elif ch2_3_data[2] == 8:
                        ch2_3_data[2] = "电池脱落或被保护"
                    elif ch2_3_data[2] == 9:
                        ch2_3_data[2] = "电池不充电报警"
                    else:
                        ch2_3_data[2] = "通信异常"

                    ch2_3_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[14])[2:]
                                + ("0x%02x" % ch2_read_data[15])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch2_3_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[30])[2:]
                                + ("0x%02x" % ch2_read_data[31])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch2_3_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[46])[2:]
                                + ("0x%02x" % ch2_read_data[47])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch2_3_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[62])[2:]
                                + ("0x%02x" % ch2_read_data[63])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch2_3_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[78])[2:]
                                + ("0x%02x" % ch2_read_data[79])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch2_3_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[94])[2:]
                                + ("0x%02x" % ch2_read_data[95])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch2_3_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[110])[2:]
                                + ("0x%02x" % ch2_read_data[111])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                ch2_4_data[2] = int(hex(ch2_read_data[5])[2:])
                if not ch2_4_start_signal:
                    if (
                        ch2_4_error_data == "过压报警"
                        or ch2_4_error_data == "低压报警"
                        or ch2_4_error_data == "过流报警"
                        or ch2_4_error_data == "过温报警"
                        or ch2_4_error_data == "电池脱落或被保护"
                        or ch2_4_error_data == "电池不充电报警"
                        or ch2_4_error_data == "测试完成"
                        or ch2_4_error_data == "容量不足"
                        or ch2_4_error_data == "NTC温度异常"
                    ):
                        ch2_4_data[2] = ch2_4_error_data
                    elif ch2_4_data[2] == 0:
                        ch2_4_data[2] = "待机状态"
                    elif ch2_4_data[2] == 1:
                        ch2_4_data[2] = "放电状态"
                    elif ch2_4_data[2] == 2:
                        ch2_4_data[2] = "充电状态"
                    elif ch2_4_data[2] == 3:
                        ch2_4_data[2] = "测试完成"
                    elif ch2_4_data[2] == 4:
                        ch2_4_data[2] = "过压报警"
                    elif ch2_4_data[2] == 5:
                        ch2_4_data[2] = "低压报警"
                    elif ch2_4_data[2] == 6:
                        ch2_4_data[2] = "过流报警"
                    elif ch2_4_data[2] == 7:
                        ch2_4_data[2] = "过温报警"
                    elif ch2_4_data[2] == 8:
                        ch2_4_data[2] = "电池脱落或被保护"
                    elif ch2_4_data[2] == 9:
                        ch2_4_data[2] = "电池不充电报警"
                    else:
                        ch2_4_data[2] = "通信异常"

                    ch2_4_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[16])[2:]
                                + ("0x%02x" % ch2_read_data[17])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch2_4_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[32])[2:]
                                + ("0x%02x" % ch2_read_data[33])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch2_4_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[48])[2:]
                                + ("0x%02x" % ch2_read_data[49])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch2_4_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[64])[2:]
                                + ("0x%02x" % ch2_read_data[65])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch2_4_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[80])[2:]
                                + ("0x%02x" % ch2_read_data[81])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch2_4_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[96])[2:]
                                + ("0x%02x" % ch2_read_data[97])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch2_4_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[112])[2:]
                                + ("0x%02x" % ch2_read_data[113])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                if ch2_4_start_signal:
                    if ch2_4_data[2] == 0:
                        ch2_4_data[2] = "待机状态"
                    elif ch2_4_data[2] == 1:
                        ch2_4_data[2] = "放电状态"
                    elif ch2_4_data[2] == 2:
                        ch2_4_data[2] = "充电状态"
                    elif ch2_4_data[2] == 3:
                        ch2_4_data[2] = "测试完成"
                    elif ch2_4_data[2] == 4:
                        ch2_4_data[2] = "过压报警"
                    elif ch2_4_data[2] == 5:
                        ch2_4_data[2] = "低压报警"
                    elif ch2_4_data[2] == 6:
                        ch2_4_data[2] = "过流报警"
                    elif ch2_4_data[2] == 7:
                        ch2_4_data[2] = "过温报警"
                    elif ch2_4_data[2] == 8:
                        ch2_4_data[2] = "电池脱落或被保护"
                    elif ch2_4_data[2] == 9:
                        ch2_4_data[2] = "电池不充电报警"
                    else:
                        ch2_4_data[2] = "通信异常"

                    ch2_4_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[16])[2:]
                                + ("0x%02x" % ch2_read_data[17])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch2_4_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[32])[2:]
                                + ("0x%02x" % ch2_read_data[33])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch2_4_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[48])[2:]
                                + ("0x%02x" % ch2_read_data[49])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch2_4_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[64])[2:]
                                + ("0x%02x" % ch2_read_data[65])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch2_4_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[80])[2:]
                                + ("0x%02x" % ch2_read_data[81])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch2_4_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[96])[2:]
                                + ("0x%02x" % ch2_read_data[97])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch2_4_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[112])[2:]
                                + ("0x%02x" % ch2_read_data[113])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                ch2_5_data[2] = int(hex(ch2_read_data[6])[2:])
                if not ch2_5_start_signal:
                    if (
                        ch2_5_error_data == "过压报警"
                        or ch2_5_error_data == "低压报警"
                        or ch2_5_error_data == "过流报警"
                        or ch2_5_error_data == "过温报警"
                        or ch2_5_error_data == "电池脱落或被保护"
                        or ch2_5_error_data == "电池不充电报警"
                        or ch2_5_error_data == "测试完成"
                        or ch2_5_error_data == "容量不足"
                        or ch2_5_error_data == "NTC温度异常"
                    ):
                        ch2_5_data[2] = ch2_5_error_data
                    elif ch2_5_data[2] == 0:
                        ch2_5_data[2] = "待机状态"
                    elif ch2_5_data[2] == 1:
                        ch2_5_data[2] = "放电状态"
                    elif ch2_5_data[2] == 2:
                        ch2_5_data[2] = "充电状态"
                    elif ch2_5_data[2] == 3:
                        ch2_5_data[2] = "测试完成"
                    elif ch2_5_data[2] == 4:
                        ch2_5_data[2] = "过压报警"
                    elif ch2_5_data[2] == 5:
                        ch2_5_data[2] = "低压报警"
                    elif ch2_5_data[2] == 6:
                        ch2_5_data[2] = "过流报警"
                    elif ch2_5_data[2] == 7:
                        ch2_5_data[2] = "过温报警"
                    elif ch2_5_data[2] == 8:
                        ch2_5_data[2] = "电池脱落或被保护"
                    elif ch2_5_data[2] == 9:
                        ch2_5_data[2] = "电池不充电报警"
                    else:
                        ch2_5_data[2] = "通信异常"

                    ch2_5_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[18])[2:]
                                + ("0x%02x" % ch2_read_data[19])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch2_5_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[34])[2:]
                                + ("0x%02x" % ch2_read_data[35])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch2_5_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[50])[2:]
                                + ("0x%02x" % ch2_read_data[51])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch2_5_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[66])[2:]
                                + ("0x%02x" % ch2_read_data[67])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch2_5_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[82])[2:]
                                + ("0x%02x" % ch2_read_data[83])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch2_5_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[98])[2:]
                                + ("0x%02x" % ch2_read_data[99])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch2_5_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[114])[2:]
                                + ("0x%02x" % ch2_read_data[115])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                if ch2_5_start_signal:
                    if ch2_5_data[2] == 0:
                        ch2_5_data[2] = "待机状态"
                    elif ch2_5_data[2] == 1:
                        ch2_5_data[2] = "放电状态"
                    elif ch2_5_data[2] == 2:
                        ch2_5_data[2] = "充电状态"
                    elif ch2_5_data[2] == 3:
                        ch2_5_data[2] = "测试完成"
                    elif ch2_5_data[2] == 4:
                        ch2_5_data[2] = "过压报警"
                    elif ch2_5_data[2] == 5:
                        ch2_5_data[2] = "低压报警"
                    elif ch2_5_data[2] == 6:
                        ch2_5_data[2] = "过流报警"
                    elif ch2_5_data[2] == 7:
                        ch2_5_data[2] = "过温报警"
                    elif ch2_5_data[2] == 8:
                        ch2_5_data[2] = "电池脱落或被保护"
                    elif ch2_5_data[2] == 9:
                        ch2_5_data[2] = "电池不充电报警"
                    else:
                        ch2_5_data[2] = "通信异常"

                    ch2_5_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[18])[2:]
                                + ("0x%02x" % ch2_read_data[19])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch2_5_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[34])[2:]
                                + ("0x%02x" % ch2_read_data[35])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch2_5_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[50])[2:]
                                + ("0x%02x" % ch2_read_data[51])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch2_5_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[66])[2:]
                                + ("0x%02x" % ch2_read_data[67])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch2_5_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[82])[2:]
                                + ("0x%02x" % ch2_read_data[83])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch2_5_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[98])[2:]
                                + ("0x%02x" % ch2_read_data[99])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch2_5_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[114])[2:]
                                + ("0x%02x" % ch2_read_data[115])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                ch2_6_data[2] = int(hex(ch2_read_data[7])[2:])
                if not ch2_6_start_signal:
                    if (
                        ch2_6_error_data == "过压报警"
                        or ch2_6_error_data == "低压报警"
                        or ch2_6_error_data == "过流报警"
                        or ch2_6_error_data == "过温报警"
                        or ch2_6_error_data == "电池脱落或被保护"
                        or ch2_6_error_data == "电池不充电报警"
                        or ch2_6_error_data == "测试完成"
                        or ch2_6_error_data == "容量不足"
                        or ch2_6_error_data == "NTC温度异常"
                    ):
                        ch2_6_data[2] = ch2_6_error_data
                    elif ch2_6_data[2] == 0:
                        ch2_6_data[2] = "待机状态"
                    elif ch2_6_data[2] == 1:
                        ch2_6_data[2] = "放电状态"
                    elif ch2_6_data[2] == 2:
                        ch2_6_data[2] = "充电状态"
                    elif ch2_6_data[2] == 3:
                        ch2_6_data[2] = "测试完成"
                    elif ch2_6_data[2] == 4:
                        ch2_6_data[2] = "过压报警"
                    elif ch2_6_data[2] == 5:
                        ch2_6_data[2] = "低压报警"
                    elif ch2_6_data[2] == 6:
                        ch2_6_data[2] = "过流报警"
                    elif ch2_6_data[2] == 7:
                        ch2_6_data[2] = "过温报警"
                    elif ch2_6_data[2] == 8:
                        ch2_6_data[2] = "电池脱落或被保护"
                    elif ch2_6_data[2] == 9:
                        ch2_6_data[2] = "电池不充电报警"
                    else:
                        ch2_6_data[2] = "通信异常"

                    ch2_6_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[20])[2:]
                                + ("0x%02x" % ch2_read_data[21])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch2_6_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[36])[2:]
                                + ("0x%02x" % ch2_read_data[37])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch2_6_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[52])[2:]
                                + ("0x%02x" % ch2_read_data[53])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch2_6_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[68])[2:]
                                + ("0x%02x" % ch2_read_data[69])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch2_6_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[84])[2:]
                                + ("0x%02x" % ch2_read_data[85])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch2_6_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[100])[2:]
                                + ("0x%02x" % ch2_read_data[101])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch2_6_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[116])[2:]
                                + ("0x%02x" % ch2_read_data[117])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                if ch2_6_start_signal:
                    if ch2_6_data[2] == 0:
                        ch2_6_data[2] = "待机状态"
                    elif ch2_6_data[2] == 1:
                        ch2_6_data[2] = "放电状态"
                    elif ch2_6_data[2] == 2:
                        ch2_6_data[2] = "充电状态"
                    elif ch2_6_data[2] == 3:
                        ch2_6_data[2] = "测试完成"
                    elif ch2_6_data[2] == 4:
                        ch2_6_data[2] = "过压报警"
                    elif ch2_6_data[2] == 5:
                        ch2_6_data[2] = "低压报警"
                    elif ch2_6_data[2] == 6:
                        ch2_6_data[2] = "过流报警"
                    elif ch2_6_data[2] == 7:
                        ch2_6_data[2] = "过温报警"
                    elif ch2_6_data[2] == 8:
                        ch2_6_data[2] = "电池脱落或被保护"
                    elif ch2_6_data[2] == 9:
                        ch2_6_data[2] = "电池不充电报警"
                    else:
                        ch2_6_data[2] = "通信异常"

                    ch2_6_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[20])[2:]
                                + ("0x%02x" % ch2_read_data[21])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch2_6_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[36])[2:]
                                + ("0x%02x" % ch2_read_data[37])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch2_6_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[52])[2:]
                                + ("0x%02x" % ch2_read_data[53])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch2_6_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[68])[2:]
                                + ("0x%02x" % ch2_read_data[69])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch2_6_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[84])[2:]
                                + ("0x%02x" % ch2_read_data[85])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch2_6_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[100])[2:]
                                + ("0x%02x" % ch2_read_data[101])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch2_6_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[116])[2:]
                                + ("0x%02x" % ch2_read_data[117])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                ch2_7_data[2] = int(hex(ch2_read_data[8])[2:])
                if not ch2_7_start_signal:
                    if (
                        ch2_7_error_data == "过压报警"
                        or ch2_7_error_data == "低压报警"
                        or ch2_7_error_data == "过流报警"
                        or ch2_7_error_data == "过温报警"
                        or ch2_7_error_data == "电池脱落或被保护"
                        or ch2_7_error_data == "电池不充电报警"
                        or ch2_7_error_data == "测试完成"
                        or ch2_7_error_data == "容量不足"
                        or ch2_7_error_data == "NTC温度异常"
                    ):
                        ch2_7_data[2] = ch2_7_error_data
                    elif ch2_7_data[2] == 0:
                        ch2_7_data[2] = "待机状态"
                    elif ch2_7_data[2] == 1:
                        ch2_7_data[2] = "放电状态"
                    elif ch2_7_data[2] == 2:
                        ch2_7_data[2] = "充电状态"
                    elif ch2_7_data[2] == 3:
                        ch2_7_data[2] = "测试完成"
                    elif ch2_7_data[2] == 4:
                        ch2_7_data[2] = "过压报警"
                    elif ch2_7_data[2] == 5:
                        ch2_7_data[2] = "低压报警"
                    elif ch2_7_data[2] == 6:
                        ch2_7_data[2] = "过流报警"
                    elif ch2_7_data[2] == 7:
                        ch2_7_data[2] = "过温报警"
                    elif ch2_7_data[2] == 8:
                        ch2_7_data[2] = "电池脱落或被保护"
                    elif ch2_7_data[2] == 9:
                        ch2_7_data[2] = "电池不充电报警"
                    else:
                        ch2_7_data[2] = "通信异常"

                    ch2_7_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[22])[2:]
                                + ("0x%02x" % ch2_read_data[23])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch2_7_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[38])[2:]
                                + ("0x%02x" % ch2_read_data[39])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch2_7_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[54])[2:]
                                + ("0x%02x" % ch2_read_data[55])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch2_7_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[70])[2:]
                                + ("0x%02x" % ch2_read_data[71])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch2_7_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[86])[2:]
                                + ("0x%02x" % ch2_read_data[87])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch2_7_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[102])[2:]
                                + ("0x%02x" % ch2_read_data[103])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch2_7_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[118])[2:]
                                + ("0x%02x" % ch2_read_data[119])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                if ch2_7_start_signal:
                    if ch2_7_data[2] == 0:
                        ch2_7_data[2] = "待机状态"
                    elif ch2_7_data[2] == 1:
                        ch2_7_data[2] = "放电状态"
                    elif ch2_7_data[2] == 2:
                        ch2_7_data[2] = "充电状态"
                    elif ch2_7_data[2] == 3:
                        ch2_7_data[2] = "测试完成"
                    elif ch2_7_data[2] == 4:
                        ch2_7_data[2] = "过压报警"
                    elif ch2_7_data[2] == 5:
                        ch2_7_data[2] = "低压报警"
                    elif ch2_7_data[2] == 6:
                        ch2_7_data[2] = "过流报警"
                    elif ch2_7_data[2] == 7:
                        ch2_7_data[2] = "过温报警"
                    elif ch2_7_data[2] == 8:
                        ch2_7_data[2] = "电池脱落或被保护"
                    elif ch2_7_data[2] == 9:
                        ch2_7_data[2] = "电池不充电报警"
                    else:
                        ch2_7_data[2] = "通信异常"

                    ch2_7_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[22])[2:]
                                + ("0x%02x" % ch2_read_data[23])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch2_7_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[38])[2:]
                                + ("0x%02x" % ch2_read_data[39])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch2_7_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[54])[2:]
                                + ("0x%02x" % ch2_read_data[55])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch2_7_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[70])[2:]
                                + ("0x%02x" % ch2_read_data[71])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch2_7_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[86])[2:]
                                + ("0x%02x" % ch2_read_data[87])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch2_7_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[102])[2:]
                                + ("0x%02x" % ch2_read_data[103])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch2_7_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[118])[2:]
                                + ("0x%02x" % ch2_read_data[119])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                ch2_8_data[2] = int(hex(ch2_read_data[9])[2:])
                if not ch2_8_start_signal:
                    if (
                        ch2_8_error_data == "过压报警"
                        or ch2_8_error_data == "低压报警"
                        or ch2_8_error_data == "过流报警"
                        or ch2_8_error_data == "过温报警"
                        or ch2_8_error_data == "电池脱落或被保护"
                        or ch2_8_error_data == "电池不充电报警"
                        or ch2_8_error_data == "测试完成"
                        or ch2_8_error_data == "容量不足"
                        or ch2_8_error_data == "NTC温度异常"
                    ):
                        ch2_8_data[2] = ch2_8_error_data
                    elif ch2_8_data[2] == 0:
                        ch2_8_data[2] = "待机状态"
                    elif ch2_8_data[2] == 1:
                        ch2_8_data[2] = "放电状态"
                    elif ch2_8_data[2] == 2:
                        ch2_8_data[2] = "充电状态"
                    elif ch2_8_data[2] == 3:
                        ch2_8_data[2] = "测试完成"
                    elif ch2_8_data[2] == 4:
                        ch2_8_data[2] = "过压报警"
                    elif ch2_8_data[2] == 5:
                        ch2_8_data[2] = "低压报警"
                    elif ch2_8_data[2] == 6:
                        ch2_8_data[2] = "过流报警"
                    elif ch2_8_data[2] == 7:
                        ch2_8_data[2] = "过温报警"
                    elif ch2_8_data[2] == 8:
                        ch2_8_data[2] = "电池脱落或被保护"
                    elif ch2_8_data[2] == 9:
                        ch2_8_data[2] = "电池不充电报警"
                    else:
                        ch2_8_data[2] = "通信异常"

                    ch2_8_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[24])[2:]
                                + ("0x%02x" % ch2_read_data[25])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch2_8_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[40])[2:]
                                + ("0x%02x" % ch2_read_data[41])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch2_8_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[56])[2:]
                                + ("0x%02x" % ch2_read_data[57])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch2_8_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[72])[2:]
                                + ("0x%02x" % ch2_read_data[73])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch2_8_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[88])[2:]
                                + ("0x%02x" % ch2_read_data[89])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch2_8_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[104])[2:]
                                + ("0x%02x" % ch2_read_data[105])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch2_8_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[120])[2:]
                                + ("0x%02x" % ch2_read_data[121])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                if ch2_8_start_signal:
                    if ch2_8_data[2] == 0:
                        ch2_8_data[2] = "待机状态"
                    elif ch2_8_data[2] == 1:
                        ch2_8_data[2] = "放电状态"
                    elif ch2_8_data[2] == 2:
                        ch2_8_data[2] = "充电状态"
                    elif ch2_8_data[2] == 3:
                        ch2_8_data[2] = "测试完成"
                    elif ch2_8_data[2] == 4:
                        ch2_8_data[2] = "过压报警"
                    elif ch2_8_data[2] == 5:
                        ch2_8_data[2] = "低压报警"
                    elif ch2_8_data[2] == 6:
                        ch2_8_data[2] = "过流报警"
                    elif ch2_8_data[2] == 7:
                        ch2_8_data[2] = "过温报警"
                    elif ch2_8_data[2] == 8:
                        ch2_8_data[2] = "电池脱落或被保护"
                    elif ch2_8_data[2] == 9:
                        ch2_8_data[2] = "电池不充电报警"
                    else:
                        ch2_8_data[2] = "通信异常"

                    ch2_8_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[24])[2:]
                                + ("0x%02x" % ch2_read_data[25])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch2_8_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[40])[2:]
                                + ("0x%02x" % ch2_read_data[41])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch2_8_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[56])[2:]
                                + ("0x%02x" % ch2_read_data[57])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch2_8_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[72])[2:]
                                + ("0x%02x" % ch2_read_data[73])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch2_8_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[88])[2:]
                                + ("0x%02x" % ch2_read_data[89])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch2_8_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[104])[2:]
                                + ("0x%02x" % ch2_read_data[105])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch2_8_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data[120])[2:]
                                + ("0x%02x" % ch2_read_data[121])[2:],
                                16,
                            )
                        )
                        / 10
                    )

        if (
            ch3_1_signal == 1
            or ch3_2_signal == 1
            or ch3_3_signal == 1
            or ch3_4_signal == 1
            or ch3_5_signal == 1
            or ch3_6_signal == 1
            or ch3_7_signal == 1
            or ch3_8_signal == 1
        ):
            ch3_readcommend = "030300000000A5"
            ### 加锁读取数据
            ### 数据处理
            mutex.acquire()
            ch3_read_data = ser.readdata(com, ch3_readcommend)
            mutex.release()

            if ch3_read_data == "FF":
                ch3_1_data[2] = "通信异常"
                ch3_2_data[2] = "通信异常"
                ch3_3_data[2] = "通信异常"
                ch3_4_data[2] = "通信异常"
                ch3_5_data[2] = "通信异常"
                ch3_6_data[2] = "通信异常"
                ch3_7_data[2] = "通信异常"
                ch3_8_data[2] = "通信异常"
                # stop_test("ch3_1")
                # stop_test("ch3_2")
                # stop_test("ch3_3")
                # stop_test("ch3_4")
                # stop_test("ch3_5")
                # stop_test("ch3_6")
                # stop_test("ch3_7")
                # stop_test("ch3_8")

            else:
                ch3_1_data[2] = int(hex(ch3_read_data[2])[2:])

                if not ch3_1_start_signal:
                    if (
                        ch3_1_error_data == "过压报警"
                        or ch3_1_error_data == "低压报警"
                        or ch3_1_error_data == "过流报警"
                        or ch3_1_error_data == "过温报警"
                        or ch3_1_error_data == "电池脱落或被保护"
                        or ch3_1_error_data == "电池不充电报警"
                        or ch3_1_error_data == "测试完成"
                        or ch3_1_error_data == "容量不足"
                        or ch3_1_error_data == "NTC温度异常"
                    ):
                        ch3_1_data[2] = ch3_1_error_data
                    elif ch3_1_data[2] == 0:
                        ch3_1_data[2] = "待机状态"
                    elif ch3_1_data[2] == 1:
                        ch3_1_data[2] = "放电状态"
                    elif ch3_1_data[2] == 2:
                        ch3_1_data[2] = "充电状态"
                    elif ch3_1_data[2] == 3:
                        ch3_1_data[2] = "测试完成"
                    elif ch3_1_data[2] == 4:
                        ch3_1_data[2] = "过压报警"
                    elif ch3_1_data[2] == 5:
                        ch3_1_data[2] = "低压报警"
                    elif ch3_1_data[2] == 6:
                        ch3_1_data[2] = "过流报警"
                    elif ch3_1_data[2] == 7:
                        ch3_1_data[2] = "过温报警"
                    elif ch3_1_data[2] == 8:
                        ch3_1_data[2] = "电池脱落或被保护"
                    elif ch3_1_data[2] == 9:
                        ch3_1_data[2] = "电池不充电报警"
                    else:
                        ch3_1_data[2] = "通信异常"

                    ch3_1_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[10])[2:]
                                + ("0x%02x" % ch3_read_data[11])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch3_1_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[26])[2:]
                                + ("0x%02x" % ch3_read_data[27])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch3_1_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[42])[2:]
                                + ("0x%02x" % ch3_read_data[43])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch3_1_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[58])[2:]
                                + ("0x%02x" % ch3_read_data[59])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch3_1_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[74])[2:]
                                + ("0x%02x" % ch3_read_data[75])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch3_1_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[90])[2:]
                                + ("0x%02x" % ch3_read_data[91])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch3_1_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[106])[2:]
                                + ("0x%02x" % ch3_read_data[107])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                if ch3_1_start_signal:
                    if ch3_1_data[2] == 0:
                        ch3_1_data[2] = "待机状态"
                    elif ch3_1_data[2] == 1:
                        ch3_1_data[2] = "放电状态"
                    elif ch3_1_data[2] == 2:
                        ch3_1_data[2] = "充电状态"
                    elif ch3_1_data[2] == 3:
                        ch3_1_data[2] = "测试完成"
                    elif ch3_1_data[2] == 4:
                        ch3_1_data[2] = "过压报警"
                    elif ch3_1_data[2] == 5:
                        ch3_1_data[2] = "低压报警"
                    elif ch3_1_data[2] == 6:
                        ch3_1_data[2] = "过流报警"
                    elif ch3_1_data[2] == 7:
                        ch3_1_data[2] = "过温报警"
                    elif ch3_1_data[2] == 8:
                        ch3_1_data[2] = "电池脱落或被保护"
                    elif ch3_1_data[2] == 9:
                        ch3_1_data[2] = "电池不充电报警"
                    else:
                        ch3_1_data[2] = "通信异常"

                    ch3_1_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[10])[2:]
                                + ("0x%02x" % ch3_read_data[11])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch3_1_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[26])[2:]
                                + ("0x%02x" % ch3_read_data[27])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch3_1_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[42])[2:]
                                + ("0x%02x" % ch3_read_data[43])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch3_1_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[58])[2:]
                                + ("0x%02x" % ch3_read_data[59])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch3_1_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[74])[2:]
                                + ("0x%02x" % ch3_read_data[75])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch3_1_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[90])[2:]
                                + ("0x%02x" % ch3_read_data[91])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch3_1_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[106])[2:]
                                + ("0x%02x" % ch3_read_data[107])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                ch3_2_data[2] = int(hex(ch3_read_data[3])[2:])
                if not ch3_2_start_signal:
                    if (
                        ch3_2_error_data == "过压报警"
                        or ch3_2_error_data == "低压报警"
                        or ch3_2_error_data == "过流报警"
                        or ch3_2_error_data == "过温报警"
                        or ch3_2_error_data == "电池脱落或被保护"
                        or ch3_2_error_data == "电池不充电报警"
                        or ch3_2_error_data == "测试完成"
                        or ch3_2_error_data == "容量不足"
                        or ch3_2_error_data == "NTC温度异常"
                    ):
                        ch3_2_data[2] = ch3_2_error_data
                    elif ch3_2_data[2] == 0:
                        ch3_2_data[2] = "待机状态"
                    elif ch3_2_data[2] == 1:
                        ch3_2_data[2] = "放电状态"
                    elif ch3_2_data[2] == 2:
                        ch3_2_data[2] = "充电状态"
                    elif ch3_2_data[2] == 3:
                        ch3_2_data[2] = "测试完成"
                    elif ch3_2_data[2] == 4:
                        ch3_2_data[2] = "过压报警"
                    elif ch3_2_data[2] == 5:
                        ch3_2_data[2] = "低压报警"
                    elif ch3_2_data[2] == 6:
                        ch3_2_data[2] = "过流报警"
                    elif ch3_2_data[2] == 7:
                        ch3_2_data[2] = "过温报警"
                    elif ch3_2_data[2] == 8:
                        ch3_2_data[2] = "电池脱落或被保护"
                    elif ch3_2_data[2] == 9:
                        ch3_2_data[2] = "电池不充电报警"
                    else:
                        ch3_2_data[2] = "通信异常"

                    ch3_2_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[12])[2:]
                                + ("0x%02x" % ch3_read_data[13])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch3_2_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[28])[2:]
                                + ("0x%02x" % ch3_read_data[29])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch3_2_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[44])[2:]
                                + ("0x%02x" % ch3_read_data[45])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch3_2_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[60])[2:]
                                + ("0x%02x" % ch3_read_data[61])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch3_2_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[76])[2:]
                                + ("0x%02x" % ch3_read_data[77])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch3_2_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[92])[2:]
                                + ("0x%02x" % ch3_read_data[93])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch3_2_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[108])[2:]
                                + ("0x%02x" % ch3_read_data[109])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                if ch3_2_start_signal:
                    if ch3_2_data[2] == 0:
                        ch3_2_data[2] = "待机状态"
                    elif ch3_2_data[2] == 1:
                        ch3_2_data[2] = "放电状态"
                    elif ch3_2_data[2] == 2:
                        ch3_2_data[2] = "充电状态"
                    elif ch3_2_data[2] == 3:
                        ch3_2_data[2] = "测试完成"
                    elif ch3_2_data[2] == 4:
                        ch3_2_data[2] = "过压报警"
                    elif ch3_2_data[2] == 5:
                        ch3_2_data[2] = "低压报警"
                    elif ch3_2_data[2] == 6:
                        ch3_2_data[2] = "过流报警"
                    elif ch3_2_data[2] == 7:
                        ch3_2_data[2] = "过温报警"
                    elif ch3_2_data[2] == 8:
                        ch3_2_data[2] = "电池脱落或被保护"
                    elif ch3_2_data[2] == 9:
                        ch3_2_data[2] = "电池不充电报警"
                    else:
                        ch3_2_data[2] = "通信异常"

                    ch3_2_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[12])[2:]
                                + ("0x%02x" % ch3_read_data[13])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch3_2_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[28])[2:]
                                + ("0x%02x" % ch3_read_data[29])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch3_2_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[44])[2:]
                                + ("0x%02x" % ch3_read_data[45])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch3_2_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[60])[2:]
                                + ("0x%02x" % ch3_read_data[61])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch3_2_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[76])[2:]
                                + ("0x%02x" % ch3_read_data[77])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch3_2_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[92])[2:]
                                + ("0x%02x" % ch3_read_data[93])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch3_2_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[108])[2:]
                                + ("0x%02x" % ch3_read_data[109])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                ch3_3_data[2] = int(hex(ch3_read_data[4])[2:])
                if not ch3_3_start_signal:
                    if (
                        ch3_3_error_data == "过压报警"
                        or ch3_3_error_data == "低压报警"
                        or ch3_3_error_data == "过流报警"
                        or ch3_3_error_data == "过温报警"
                        or ch3_3_error_data == "电池脱落或被保护"
                        or ch3_3_error_data == "电池不充电报警"
                        or ch3_3_error_data == "测试完成"
                        or ch3_3_error_data == "容量不足"
                        or ch3_3_error_data == "NTC温度异常"
                    ):
                        ch3_3_data[2] = ch3_3_error_data
                    elif ch3_3_data[2] == 0:
                        ch3_3_data[2] = "待机状态"
                    elif ch3_3_data[2] == 1:
                        ch3_3_data[2] = "放电状态"
                    elif ch3_3_data[2] == 2:
                        ch3_3_data[2] = "充电状态"
                    elif ch3_3_data[2] == 3:
                        ch3_3_data[2] = "测试完成"
                    elif ch3_3_data[2] == 4:
                        ch3_3_data[2] = "过压报警"
                    elif ch3_3_data[2] == 5:
                        ch3_3_data[2] = "低压报警"
                    elif ch3_3_data[2] == 6:
                        ch3_3_data[2] = "过流报警"
                    elif ch3_3_data[2] == 7:
                        ch3_3_data[2] = "过温报警"
                    elif ch3_3_data[2] == 8:
                        ch3_3_data[2] = "电池脱落或被保护"
                    elif ch3_3_data[2] == 9:
                        ch3_3_data[2] = "电池不充电报警"
                    else:
                        ch3_3_data[2] = "通信异常"

                    ch3_3_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[14])[2:]
                                + ("0x%02x" % ch3_read_data[15])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch3_3_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[30])[2:]
                                + ("0x%02x" % ch3_read_data[31])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch3_3_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[46])[2:]
                                + ("0x%02x" % ch3_read_data[47])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch3_3_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[62])[2:]
                                + ("0x%02x" % ch3_read_data[63])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch3_3_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[78])[2:]
                                + ("0x%02x" % ch3_read_data[79])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch3_3_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[94])[2:]
                                + ("0x%02x" % ch3_read_data[95])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch3_3_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[110])[2:]
                                + ("0x%02x" % ch3_read_data[111])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                if ch3_3_start_signal:
                    if ch3_3_data[2] == 0:
                        ch3_3_data[2] = "待机状态"
                    elif ch3_3_data[2] == 1:
                        ch3_3_data[2] = "放电状态"
                    elif ch3_3_data[2] == 2:
                        ch3_3_data[2] = "充电状态"
                    elif ch3_3_data[2] == 3:
                        ch3_3_data[2] = "测试完成"
                    elif ch3_3_data[2] == 4:
                        ch3_3_data[2] = "过压报警"
                    elif ch3_3_data[2] == 5:
                        ch3_3_data[2] = "低压报警"
                    elif ch3_3_data[2] == 6:
                        ch3_3_data[2] = "过流报警"
                    elif ch3_3_data[2] == 7:
                        ch3_3_data[2] = "过温报警"
                    elif ch3_3_data[2] == 8:
                        ch3_3_data[2] = "电池脱落或被保护"
                    elif ch3_3_data[2] == 9:
                        ch3_3_data[2] = "电池不充电报警"
                    else:
                        ch3_3_data[2] = "通信异常"

                    ch3_3_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[14])[2:]
                                + ("0x%02x" % ch3_read_data[15])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch3_3_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[30])[2:]
                                + ("0x%02x" % ch3_read_data[31])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch3_3_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[46])[2:]
                                + ("0x%02x" % ch3_read_data[47])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch3_3_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[62])[2:]
                                + ("0x%02x" % ch3_read_data[63])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch3_3_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[78])[2:]
                                + ("0x%02x" % ch3_read_data[79])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch3_3_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[94])[2:]
                                + ("0x%02x" % ch3_read_data[95])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch3_3_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[110])[2:]
                                + ("0x%02x" % ch3_read_data[111])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                ch3_4_data[2] = int(hex(ch3_read_data[5])[2:])
                if not ch3_4_start_signal:
                    if (
                        ch3_4_error_data == "过压报警"
                        or ch3_4_error_data == "低压报警"
                        or ch3_4_error_data == "过流报警"
                        or ch3_4_error_data == "过温报警"
                        or ch3_4_error_data == "电池脱落或被保护"
                        or ch3_4_error_data == "电池不充电报警"
                        or ch3_4_error_data == "测试完成"
                        or ch3_4_error_data == "容量不足"
                        or ch3_4_error_data == "NTC温度异常"
                    ):
                        ch3_4_data[2] = ch3_4_error_data
                    elif ch3_4_data[2] == 0:
                        ch3_4_data[2] = "待机状态"
                    elif ch3_4_data[2] == 1:
                        ch3_4_data[2] = "放电状态"
                    elif ch3_4_data[2] == 2:
                        ch3_4_data[2] = "充电状态"
                    elif ch3_4_data[2] == 3:
                        ch3_4_data[2] = "测试完成"
                    elif ch3_4_data[2] == 4:
                        ch3_4_data[2] = "过压报警"
                    elif ch3_4_data[2] == 5:
                        ch3_4_data[2] = "低压报警"
                    elif ch3_4_data[2] == 6:
                        ch3_4_data[2] = "过流报警"
                    elif ch3_4_data[2] == 7:
                        ch3_4_data[2] = "过温报警"
                    elif ch3_4_data[2] == 8:
                        ch3_4_data[2] = "电池脱落或被保护"
                    elif ch3_4_data[2] == 9:
                        ch3_4_data[2] = "电池不充电报警"
                    else:
                        ch3_4_data[2] = "通信异常"

                    ch3_4_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[16])[2:]
                                + ("0x%02x" % ch3_read_data[17])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch3_4_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[32])[2:]
                                + ("0x%02x" % ch3_read_data[33])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch3_4_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[48])[2:]
                                + ("0x%02x" % ch3_read_data[49])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch3_4_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[64])[2:]
                                + ("0x%02x" % ch3_read_data[65])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch3_4_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[80])[2:]
                                + ("0x%02x" % ch3_read_data[81])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch3_4_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[96])[2:]
                                + ("0x%02x" % ch3_read_data[97])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch3_4_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[112])[2:]
                                + ("0x%02x" % ch3_read_data[113])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                if ch3_4_start_signal:
                    if ch3_4_data[2] == 0:
                        ch3_4_data[2] = "待机状态"
                    elif ch3_4_data[2] == 1:
                        ch3_4_data[2] = "放电状态"
                    elif ch3_4_data[2] == 2:
                        ch3_4_data[2] = "充电状态"
                    elif ch3_4_data[2] == 3:
                        ch3_4_data[2] = "测试完成"
                    elif ch3_4_data[2] == 4:
                        ch3_4_data[2] = "过压报警"
                    elif ch3_4_data[2] == 5:
                        ch3_4_data[2] = "低压报警"
                    elif ch3_4_data[2] == 6:
                        ch3_4_data[2] = "过流报警"
                    elif ch3_4_data[2] == 7:
                        ch3_4_data[2] = "过温报警"
                    elif ch3_4_data[2] == 8:
                        ch3_4_data[2] = "电池脱落或被保护"
                    elif ch3_4_data[2] == 9:
                        ch3_4_data[2] = "电池不充电报警"
                    else:
                        ch3_4_data[2] = "通信异常"

                    ch3_4_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[16])[2:]
                                + ("0x%02x" % ch3_read_data[17])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch3_4_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[32])[2:]
                                + ("0x%02x" % ch3_read_data[33])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch3_4_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[48])[2:]
                                + ("0x%02x" % ch3_read_data[49])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch3_4_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[64])[2:]
                                + ("0x%02x" % ch3_read_data[65])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch3_4_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[80])[2:]
                                + ("0x%02x" % ch3_read_data[81])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch3_4_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[96])[2:]
                                + ("0x%02x" % ch3_read_data[97])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch3_4_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[112])[2:]
                                + ("0x%02x" % ch3_read_data[113])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                ch3_5_data[2] = int(hex(ch3_read_data[6])[2:])
                if not ch3_5_start_signal:
                    if (
                        ch3_5_error_data == "过压报警"
                        or ch3_5_error_data == "低压报警"
                        or ch3_5_error_data == "过流报警"
                        or ch3_5_error_data == "过温报警"
                        or ch3_5_error_data == "电池脱落或被保护"
                        or ch3_5_error_data == "电池不充电报警"
                        or ch3_5_error_data == "测试完成"
                        or ch3_5_error_data == "容量不足"
                        or ch3_5_error_data == "NTC温度异常"
                    ):
                        ch3_5_data[2] = ch3_5_error_data
                    elif ch3_5_data[2] == 0:
                        ch3_5_data[2] = "待机状态"
                    elif ch3_5_data[2] == 1:
                        ch3_5_data[2] = "放电状态"
                    elif ch3_5_data[2] == 2:
                        ch3_5_data[2] = "充电状态"
                    elif ch3_5_data[2] == 3:
                        ch3_5_data[2] = "测试完成"
                    elif ch3_5_data[2] == 4:
                        ch3_5_data[2] = "过压报警"
                    elif ch3_5_data[2] == 5:
                        ch3_5_data[2] = "低压报警"
                    elif ch3_5_data[2] == 6:
                        ch3_5_data[2] = "过流报警"
                    elif ch3_5_data[2] == 7:
                        ch3_5_data[2] = "过温报警"
                    elif ch3_5_data[2] == 8:
                        ch3_5_data[2] = "电池脱落或被保护"
                    elif ch3_5_data[2] == 9:
                        ch3_5_data[2] = "电池不充电报警"
                    else:
                        ch3_5_data[2] = "通信异常"

                    ch3_5_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[18])[2:]
                                + ("0x%02x" % ch3_read_data[19])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch3_5_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[34])[2:]
                                + ("0x%02x" % ch3_read_data[35])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch3_5_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[50])[2:]
                                + ("0x%02x" % ch3_read_data[51])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch3_5_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[66])[2:]
                                + ("0x%02x" % ch3_read_data[67])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch3_5_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[82])[2:]
                                + ("0x%02x" % ch3_read_data[83])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch3_5_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[98])[2:]
                                + ("0x%02x" % ch3_read_data[99])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch3_5_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[114])[2:]
                                + ("0x%02x" % ch3_read_data[115])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                if ch3_5_start_signal:
                    if ch3_5_data[2] == 0:
                        ch3_5_data[2] = "待机状态"
                    elif ch3_5_data[2] == 1:
                        ch3_5_data[2] = "放电状态"
                    elif ch3_5_data[2] == 2:
                        ch3_5_data[2] = "充电状态"
                    elif ch3_5_data[2] == 3:
                        ch3_5_data[2] = "测试完成"
                    elif ch3_5_data[2] == 4:
                        ch3_5_data[2] = "过压报警"
                    elif ch3_5_data[2] == 5:
                        ch3_5_data[2] = "低压报警"
                    elif ch3_5_data[2] == 6:
                        ch3_5_data[2] = "过流报警"
                    elif ch3_5_data[2] == 7:
                        ch3_5_data[2] = "过温报警"
                    elif ch3_5_data[2] == 8:
                        ch3_5_data[2] = "电池脱落或被保护"
                    elif ch3_5_data[2] == 9:
                        ch3_5_data[2] = "电池不充电报警"
                    else:
                        ch3_5_data[2] = "通信异常"

                    ch3_5_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[18])[2:]
                                + ("0x%02x" % ch3_read_data[19])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch3_5_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[34])[2:]
                                + ("0x%02x" % ch3_read_data[35])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch3_5_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[50])[2:]
                                + ("0x%02x" % ch3_read_data[51])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch3_5_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[66])[2:]
                                + ("0x%02x" % ch3_read_data[67])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch3_5_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[82])[2:]
                                + ("0x%02x" % ch3_read_data[83])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch3_5_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[98])[2:]
                                + ("0x%02x" % ch3_read_data[99])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch3_5_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[114])[2:]
                                + ("0x%02x" % ch3_read_data[115])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                ch3_6_data[2] = int(hex(ch3_read_data[7])[2:])
                if not ch3_6_start_signal:
                    if (
                        ch3_6_error_data == "过压报警"
                        or ch3_6_error_data == "低压报警"
                        or ch3_6_error_data == "过流报警"
                        or ch3_6_error_data == "过温报警"
                        or ch3_6_error_data == "电池脱落或被保护"
                        or ch3_6_error_data == "电池不充电报警"
                        or ch3_6_error_data == "测试完成"
                        or ch3_6_error_data == "容量不足"
                        or ch3_6_error_data == "NTC温度异常"
                    ):
                        ch3_6_data[2] = ch3_6_error_data
                    elif ch3_6_data[2] == 0:
                        ch3_6_data[2] = "待机状态"
                    elif ch3_6_data[2] == 1:
                        ch3_6_data[2] = "放电状态"
                    elif ch3_6_data[2] == 2:
                        ch3_6_data[2] = "充电状态"
                    elif ch3_6_data[2] == 3:
                        ch3_6_data[2] = "测试完成"
                    elif ch3_6_data[2] == 4:
                        ch3_6_data[2] = "过压报警"
                    elif ch3_6_data[2] == 5:
                        ch3_6_data[2] = "低压报警"
                    elif ch3_6_data[2] == 6:
                        ch3_6_data[2] = "过流报警"
                    elif ch3_6_data[2] == 7:
                        ch3_6_data[2] = "过温报警"
                    elif ch3_6_data[2] == 8:
                        ch3_6_data[2] = "电池脱落或被保护"
                    elif ch3_6_data[2] == 9:
                        ch3_6_data[2] = "电池不充电报警"
                    else:
                        ch3_6_data[2] = "通信异常"

                    ch3_6_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[20])[2:]
                                + ("0x%02x" % ch3_read_data[21])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch3_6_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[36])[2:]
                                + ("0x%02x" % ch3_read_data[37])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch3_6_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[52])[2:]
                                + ("0x%02x" % ch3_read_data[53])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch3_6_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[68])[2:]
                                + ("0x%02x" % ch3_read_data[69])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch3_6_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[84])[2:]
                                + ("0x%02x" % ch3_read_data[85])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch3_6_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[100])[2:]
                                + ("0x%02x" % ch3_read_data[101])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch3_6_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[116])[2:]
                                + ("0x%02x" % ch3_read_data[117])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                if ch3_6_start_signal:
                    if ch3_6_data[2] == 0:
                        ch3_6_data[2] = "待机状态"
                    elif ch3_6_data[2] == 1:
                        ch3_6_data[2] = "放电状态"
                    elif ch3_6_data[2] == 2:
                        ch3_6_data[2] = "充电状态"
                    elif ch3_6_data[2] == 3:
                        ch3_6_data[2] = "测试完成"
                    elif ch3_6_data[2] == 4:
                        ch3_6_data[2] = "过压报警"
                    elif ch3_6_data[2] == 5:
                        ch3_6_data[2] = "低压报警"
                    elif ch3_6_data[2] == 6:
                        ch3_6_data[2] = "过流报警"
                    elif ch3_6_data[2] == 7:
                        ch3_6_data[2] = "过温报警"
                    elif ch3_6_data[2] == 8:
                        ch3_6_data[2] = "电池脱落或被保护"
                    elif ch3_6_data[2] == 9:
                        ch3_6_data[2] = "电池不充电报警"
                    else:
                        ch3_6_data[2] = "通信异常"

                    ch3_6_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[20])[2:]
                                + ("0x%02x" % ch3_read_data[21])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch3_6_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[36])[2:]
                                + ("0x%02x" % ch3_read_data[37])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch3_6_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[52])[2:]
                                + ("0x%02x" % ch3_read_data[53])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch3_6_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[68])[2:]
                                + ("0x%02x" % ch3_read_data[69])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch3_6_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[84])[2:]
                                + ("0x%02x" % ch3_read_data[85])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch3_6_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[100])[2:]
                                + ("0x%02x" % ch3_read_data[101])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch3_6_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[116])[2:]
                                + ("0x%02x" % ch3_read_data[117])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                ch3_7_data[2] = int(hex(ch3_read_data[8])[2:])
                if not ch3_7_start_signal:
                    if (
                        ch3_7_error_data == "过压报警"
                        or ch3_7_error_data == "低压报警"
                        or ch3_7_error_data == "过流报警"
                        or ch3_7_error_data == "过温报警"
                        or ch3_7_error_data == "电池脱落或被保护"
                        or ch3_7_error_data == "电池不充电报警"
                        or ch3_7_error_data == "测试完成"
                        or ch3_7_error_data == "容量不足"
                        or ch3_7_error_data == "NTC温度异常"
                    ):
                        ch3_7_data[2] = ch3_7_error_data
                    elif ch3_7_data[2] == 0:
                        ch3_7_data[2] = "待机状态"
                    elif ch3_7_data[2] == 1:
                        ch3_7_data[2] = "放电状态"
                    elif ch3_7_data[2] == 2:
                        ch3_7_data[2] = "充电状态"
                    elif ch3_7_data[2] == 3:
                        ch3_7_data[2] = "测试完成"
                    elif ch3_7_data[2] == 4:
                        ch3_7_data[2] = "过压报警"
                    elif ch3_7_data[2] == 5:
                        ch3_7_data[2] = "低压报警"
                    elif ch3_7_data[2] == 6:
                        ch3_7_data[2] = "过流报警"
                    elif ch3_7_data[2] == 7:
                        ch3_7_data[2] = "过温报警"
                    elif ch3_7_data[2] == 8:
                        ch3_7_data[2] = "电池脱落或被保护"
                    elif ch3_7_data[2] == 9:
                        ch3_7_data[2] = "电池不充电报警"
                    else:
                        ch3_7_data[2] = "通信异常"

                    ch3_7_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[22])[2:]
                                + ("0x%02x" % ch3_read_data[23])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch3_7_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[38])[2:]
                                + ("0x%02x" % ch3_read_data[39])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch3_7_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[54])[2:]
                                + ("0x%02x" % ch3_read_data[55])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch3_7_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[70])[2:]
                                + ("0x%02x" % ch3_read_data[71])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch3_7_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[86])[2:]
                                + ("0x%02x" % ch3_read_data[87])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch3_7_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[102])[2:]
                                + ("0x%02x" % ch3_read_data[103])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch3_7_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[118])[2:]
                                + ("0x%02x" % ch3_read_data[119])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                if ch3_7_start_signal:
                    if ch3_7_data[2] == 0:
                        ch3_7_data[2] = "待机状态"
                    elif ch3_7_data[2] == 1:
                        ch3_7_data[2] = "放电状态"
                    elif ch3_7_data[2] == 2:
                        ch3_7_data[2] = "充电状态"
                    elif ch3_7_data[2] == 3:
                        ch3_7_data[2] = "测试完成"
                    elif ch3_7_data[2] == 4:
                        ch3_7_data[2] = "过压报警"
                    elif ch3_7_data[2] == 5:
                        ch3_7_data[2] = "低压报警"
                    elif ch3_7_data[2] == 6:
                        ch3_7_data[2] = "过流报警"
                    elif ch3_7_data[2] == 7:
                        ch3_7_data[2] = "过温报警"
                    elif ch3_7_data[2] == 8:
                        ch3_7_data[2] = "电池脱落或被保护"
                    elif ch3_7_data[2] == 9:
                        ch3_7_data[2] = "电池不充电报警"
                    else:
                        ch3_7_data[2] = "通信异常"

                    ch3_7_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[22])[2:]
                                + ("0x%02x" % ch3_read_data[23])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch3_7_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[38])[2:]
                                + ("0x%02x" % ch3_read_data[39])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch3_7_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[54])[2:]
                                + ("0x%02x" % ch3_read_data[55])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch3_7_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[70])[2:]
                                + ("0x%02x" % ch3_read_data[71])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch3_7_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[86])[2:]
                                + ("0x%02x" % ch3_read_data[87])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch3_7_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[102])[2:]
                                + ("0x%02x" % ch3_read_data[103])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch3_7_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[118])[2:]
                                + ("0x%02x" % ch3_read_data[119])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                ch3_8_data[2] = int(hex(ch3_read_data[9])[2:])
                if not ch3_8_start_signal:
                    if (
                        ch3_8_error_data == "过压报警"
                        or ch3_8_error_data == "低压报警"
                        or ch3_8_error_data == "过流报警"
                        or ch3_8_error_data == "过温报警"
                        or ch3_8_error_data == "电池脱落或被保护"
                        or ch3_8_error_data == "电池不充电报警"
                        or ch3_8_error_data == "测试完成"
                        or ch3_8_error_data == "容量不足"
                        or ch3_8_error_data == "NTC温度异常"
                    ):
                        ch3_8_data[2] = ch3_8_error_data
                    elif ch3_8_data[2] == 0:
                        ch3_8_data[2] = "待机状态"
                    elif ch3_8_data[2] == 1:
                        ch3_8_data[2] = "放电状态"
                    elif ch3_8_data[2] == 2:
                        ch3_8_data[2] = "充电状态"
                    elif ch3_8_data[2] == 3:
                        ch3_8_data[2] = "测试完成"
                    elif ch3_8_data[2] == 4:
                        ch3_8_data[2] = "过压报警"
                    elif ch3_8_data[2] == 5:
                        ch3_8_data[2] = "低压报警"
                    elif ch3_8_data[2] == 6:
                        ch3_8_data[2] = "过流报警"
                    elif ch3_8_data[2] == 7:
                        ch3_8_data[2] = "过温报警"
                    elif ch3_8_data[2] == 8:
                        ch3_8_data[2] = "电池脱落或被保护"
                    elif ch3_8_data[2] == 9:
                        ch3_8_data[2] = "电池不充电报警"
                    else:
                        ch3_8_data[2] = "通信异常"

                    ch3_8_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[24])[2:]
                                + ("0x%02x" % ch3_read_data[25])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch3_8_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[40])[2:]
                                + ("0x%02x" % ch3_read_data[41])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch3_8_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[56])[2:]
                                + ("0x%02x" % ch3_read_data[57])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch3_8_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[72])[2:]
                                + ("0x%02x" % ch3_read_data[73])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch3_8_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[88])[2:]
                                + ("0x%02x" % ch3_read_data[89])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch3_8_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[104])[2:]
                                + ("0x%02x" % ch3_read_data[105])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch3_8_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[120])[2:]
                                + ("0x%02x" % ch3_read_data[121])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                if ch3_8_start_signal:
                    if ch3_8_data[2] == 0:
                        ch3_8_data[2] = "待机状态"
                    elif ch3_8_data[2] == 1:
                        ch3_8_data[2] = "放电状态"
                    elif ch3_8_data[2] == 2:
                        ch3_8_data[2] = "充电状态"
                    elif ch3_8_data[2] == 3:
                        ch3_8_data[2] = "测试完成"
                    elif ch3_8_data[2] == 4:
                        ch3_8_data[2] = "过压报警"
                    elif ch3_8_data[2] == 5:
                        ch3_8_data[2] = "低压报警"
                    elif ch3_8_data[2] == 6:
                        ch3_8_data[2] = "过流报警"
                    elif ch3_8_data[2] == 7:
                        ch3_8_data[2] = "过温报警"
                    elif ch3_8_data[2] == 8:
                        ch3_8_data[2] = "电池脱落或被保护"
                    elif ch3_8_data[2] == 9:
                        ch3_8_data[2] = "电池不充电报警"
                    else:
                        ch3_8_data[2] = "通信异常"

                    ch3_8_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[24])[2:]
                                + ("0x%02x" % ch3_read_data[25])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch3_8_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[40])[2:]
                                + ("0x%02x" % ch3_read_data[41])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch3_8_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[56])[2:]
                                + ("0x%02x" % ch3_read_data[57])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch3_8_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[72])[2:]
                                + ("0x%02x" % ch3_read_data[73])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch3_8_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[88])[2:]
                                + ("0x%02x" % ch3_read_data[89])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch3_8_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[104])[2:]
                                + ("0x%02x" % ch3_read_data[105])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch3_8_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data[120])[2:]
                                + ("0x%02x" % ch3_read_data[121])[2:],
                                16,
                            )
                        )
                        / 10
                    )

        if (
            ch4_1_signal == 1
            or ch4_2_signal == 1
            or ch4_3_signal == 1
            or ch4_4_signal == 1
            or ch4_5_signal == 1
            or ch4_6_signal == 1
            or ch4_7_signal == 1
            or ch4_8_signal == 1
        ):
            ch4_readcommend = "040300000000A5"
            ### 加锁读取数据
            ### 数据处理
            mutex.acquire()
            ch4_read_data = ser.readdata(com, ch4_readcommend)
            mutex.release()

            if ch4_read_data == "FF":
                ch4_1_data[2] = "通信异常"
                ch4_2_data[2] = "通信异常"
                ch4_3_data[2] = "通信异常"
                ch4_4_data[2] = "通信异常"
                ch4_5_data[2] = "通信异常"
                ch4_6_data[2] = "通信异常"
                ch4_7_data[2] = "通信异常"
                ch4_8_data[2] = "通信异常"
                # stop_test("ch4_1")
                # stop_test("ch4_2")
                # stop_test("ch4_3")
                # stop_test("ch4_4")
                # stop_test("ch4_5")
                # stop_test("ch4_6")
                # stop_test("ch4_7")
                # stop_test("ch4_8")

            else:
                ch4_1_data[2] = int(hex(ch4_read_data[2])[2:])

                if not ch4_1_start_signal:
                    if (
                        ch4_1_error_data == "过压报警"
                        or ch4_1_error_data == "低压报警"
                        or ch4_1_error_data == "过流报警"
                        or ch4_1_error_data == "过温报警"
                        or ch4_1_error_data == "电池脱落或被保护"
                        or ch4_1_error_data == "电池不充电报警"
                        or ch4_1_error_data == "测试完成"
                        or ch4_1_error_data == "容量不足"
                        or ch4_1_error_data == "NTC温度异常"
                    ):
                        ch4_1_data[2] = ch4_1_error_data
                    elif ch4_1_data[2] == 0:
                        ch4_1_data[2] = "待机状态"
                    elif ch4_1_data[2] == 1:
                        ch4_1_data[2] = "放电状态"
                    elif ch4_1_data[2] == 2:
                        ch4_1_data[2] = "充电状态"
                    elif ch4_1_data[2] == 3:
                        ch4_1_data[2] = "测试完成"
                    elif ch4_1_data[2] == 4:
                        ch4_1_data[2] = "过压报警"
                    elif ch4_1_data[2] == 5:
                        ch4_1_data[2] = "低压报警"
                    elif ch4_1_data[2] == 6:
                        ch4_1_data[2] = "过流报警"
                    elif ch4_1_data[2] == 7:
                        ch4_1_data[2] = "过温报警"
                    elif ch4_1_data[2] == 8:
                        ch4_1_data[2] = "电池脱落或被保护"
                    elif ch4_1_data[2] == 9:
                        ch4_1_data[2] = "电池不充电报警"
                    else:
                        ch4_1_data[2] = "通信异常"

                    ch4_1_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[10])[2:]
                                + ("0x%02x" % ch4_read_data[11])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch4_1_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[26])[2:]
                                + ("0x%02x" % ch4_read_data[27])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch4_1_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[42])[2:]
                                + ("0x%02x" % ch4_read_data[43])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch4_1_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[58])[2:]
                                + ("0x%02x" % ch4_read_data[59])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch4_1_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[74])[2:]
                                + ("0x%02x" % ch4_read_data[75])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch4_1_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[90])[2:]
                                + ("0x%02x" % ch4_read_data[91])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch4_1_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[106])[2:]
                                + ("0x%02x" % ch4_read_data[107])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                if ch4_1_start_signal:
                    if ch4_1_data[2] == 0:
                        ch4_1_data[2] = "待机状态"
                    elif ch4_1_data[2] == 1:
                        ch4_1_data[2] = "放电状态"
                    elif ch4_1_data[2] == 2:
                        ch4_1_data[2] = "充电状态"
                    elif ch4_1_data[2] == 3:
                        ch4_1_data[2] = "测试完成"
                    elif ch4_1_data[2] == 4:
                        ch4_1_data[2] = "过压报警"
                    elif ch4_1_data[2] == 5:
                        ch4_1_data[2] = "低压报警"
                    elif ch4_1_data[2] == 6:
                        ch4_1_data[2] = "过流报警"
                    elif ch4_1_data[2] == 7:
                        ch4_1_data[2] = "过温报警"
                    elif ch4_1_data[2] == 8:
                        ch4_1_data[2] = "电池脱落或被保护"
                    elif ch4_1_data[2] == 9:
                        ch4_1_data[2] = "电池不充电报警"
                    else:
                        ch4_1_data[2] = "通信异常"

                    ch4_1_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[10])[2:]
                                + ("0x%02x" % ch4_read_data[11])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch4_1_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[26])[2:]
                                + ("0x%02x" % ch4_read_data[27])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch4_1_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[42])[2:]
                                + ("0x%02x" % ch4_read_data[43])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch4_1_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[58])[2:]
                                + ("0x%02x" % ch4_read_data[59])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch4_1_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[74])[2:]
                                + ("0x%02x" % ch4_read_data[75])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch4_1_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[90])[2:]
                                + ("0x%02x" % ch4_read_data[91])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch4_1_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[106])[2:]
                                + ("0x%02x" % ch4_read_data[107])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                ch4_2_data[2] = int(hex(ch4_read_data[3])[2:])
                if not ch4_2_start_signal:
                    if (
                        ch4_2_error_data == "过压报警"
                        or ch4_2_error_data == "低压报警"
                        or ch4_2_error_data == "过流报警"
                        or ch4_2_error_data == "过温报警"
                        or ch4_2_error_data == "电池脱落或被保护"
                        or ch4_2_error_data == "电池不充电报警"
                        or ch4_2_error_data == "测试完成"
                        or ch4_2_error_data == "容量不足"
                        or ch4_2_error_data == "NTC温度异常"
                    ):
                        ch4_2_data[2] = ch4_2_error_data
                    elif ch4_2_data[2] == 0:
                        ch4_2_data[2] = "待机状态"
                    elif ch4_2_data[2] == 1:
                        ch4_2_data[2] = "放电状态"
                    elif ch4_2_data[2] == 2:
                        ch4_2_data[2] = "充电状态"
                    elif ch4_2_data[2] == 3:
                        ch4_2_data[2] = "测试完成"
                    elif ch4_2_data[2] == 4:
                        ch4_2_data[2] = "过压报警"
                    elif ch4_2_data[2] == 5:
                        ch4_2_data[2] = "低压报警"
                    elif ch4_2_data[2] == 6:
                        ch4_2_data[2] = "过流报警"
                    elif ch4_2_data[2] == 7:
                        ch4_2_data[2] = "过温报警"
                    elif ch4_2_data[2] == 8:
                        ch4_2_data[2] = "电池脱落或被保护"
                    elif ch4_2_data[2] == 9:
                        ch4_2_data[2] = "电池不充电报警"
                    else:
                        ch4_2_data[2] = "通信异常"

                    ch4_2_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[12])[2:]
                                + ("0x%02x" % ch4_read_data[13])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch4_2_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[28])[2:]
                                + ("0x%02x" % ch4_read_data[29])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch4_2_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[44])[2:]
                                + ("0x%02x" % ch4_read_data[45])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch4_2_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[60])[2:]
                                + ("0x%02x" % ch4_read_data[61])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch4_2_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[76])[2:]
                                + ("0x%02x" % ch4_read_data[77])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch4_2_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[92])[2:]
                                + ("0x%02x" % ch4_read_data[93])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch4_2_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[108])[2:]
                                + ("0x%02x" % ch4_read_data[109])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                if ch4_2_start_signal:
                    if ch4_2_data[2] == 0:
                        ch4_2_data[2] = "待机状态"
                    elif ch4_2_data[2] == 1:
                        ch4_2_data[2] = "放电状态"
                    elif ch4_2_data[2] == 2:
                        ch4_2_data[2] = "充电状态"
                    elif ch4_2_data[2] == 3:
                        ch4_2_data[2] = "测试完成"
                    elif ch4_2_data[2] == 4:
                        ch4_2_data[2] = "过压报警"
                    elif ch4_2_data[2] == 5:
                        ch4_2_data[2] = "低压报警"
                    elif ch4_2_data[2] == 6:
                        ch4_2_data[2] = "过流报警"
                    elif ch4_2_data[2] == 7:
                        ch4_2_data[2] = "过温报警"
                    elif ch4_2_data[2] == 8:
                        ch4_2_data[2] = "电池脱落或被保护"
                    elif ch4_2_data[2] == 9:
                        ch4_2_data[2] = "电池不充电报警"
                    else:
                        ch4_2_data[2] = "通信异常"

                    ch4_2_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[12])[2:]
                                + ("0x%02x" % ch4_read_data[13])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch4_2_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[28])[2:]
                                + ("0x%02x" % ch4_read_data[29])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch4_2_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[44])[2:]
                                + ("0x%02x" % ch4_read_data[45])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch4_2_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[60])[2:]
                                + ("0x%02x" % ch4_read_data[61])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch4_2_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[76])[2:]
                                + ("0x%02x" % ch4_read_data[77])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch4_2_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[92])[2:]
                                + ("0x%02x" % ch4_read_data[93])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch4_2_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[108])[2:]
                                + ("0x%02x" % ch4_read_data[109])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                ch4_3_data[2] = int(hex(ch4_read_data[4])[2:])
                if not ch4_3_start_signal:
                    if (
                        ch4_3_error_data == "过压报警"
                        or ch4_3_error_data == "低压报警"
                        or ch4_3_error_data == "过流报警"
                        or ch4_3_error_data == "过温报警"
                        or ch4_3_error_data == "电池脱落或被保护"
                        or ch4_3_error_data == "电池不充电报警"
                        or ch4_3_error_data == "测试完成"
                        or ch4_3_error_data == "容量不足"
                        or ch4_3_error_data == "NTC温度异常"
                    ):
                        ch4_3_data[2] = ch4_3_error_data
                    elif ch4_3_data[2] == 0:
                        ch4_3_data[2] = "待机状态"
                    elif ch4_3_data[2] == 1:
                        ch4_3_data[2] = "放电状态"
                    elif ch4_3_data[2] == 2:
                        ch4_3_data[2] = "充电状态"
                    elif ch4_3_data[2] == 3:
                        ch4_3_data[2] = "测试完成"
                    elif ch4_3_data[2] == 4:
                        ch4_3_data[2] = "过压报警"
                    elif ch4_3_data[2] == 5:
                        ch4_3_data[2] = "低压报警"
                    elif ch4_3_data[2] == 6:
                        ch4_3_data[2] = "过流报警"
                    elif ch4_3_data[2] == 7:
                        ch4_3_data[2] = "过温报警"
                    elif ch4_3_data[2] == 8:
                        ch4_3_data[2] = "电池脱落或被保护"
                    elif ch4_3_data[2] == 9:
                        ch4_3_data[2] = "电池不充电报警"
                    else:
                        ch4_3_data[2] = "通信异常"

                    ch4_3_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[14])[2:]
                                + ("0x%02x" % ch4_read_data[15])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch4_3_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[30])[2:]
                                + ("0x%02x" % ch4_read_data[31])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch4_3_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[46])[2:]
                                + ("0x%02x" % ch4_read_data[47])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch4_3_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[62])[2:]
                                + ("0x%02x" % ch4_read_data[63])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch4_3_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[78])[2:]
                                + ("0x%02x" % ch4_read_data[79])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch4_3_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[94])[2:]
                                + ("0x%02x" % ch4_read_data[95])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch4_3_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[110])[2:]
                                + ("0x%02x" % ch4_read_data[111])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                if ch4_3_start_signal:
                    if ch4_3_data[2] == 0:
                        ch4_3_data[2] = "待机状态"
                    elif ch4_3_data[2] == 1:
                        ch4_3_data[2] = "放电状态"
                    elif ch4_3_data[2] == 2:
                        ch4_3_data[2] = "充电状态"
                    elif ch4_3_data[2] == 3:
                        ch4_3_data[2] = "测试完成"
                    elif ch4_3_data[2] == 4:
                        ch4_3_data[2] = "过压报警"
                    elif ch4_3_data[2] == 5:
                        ch4_3_data[2] = "低压报警"
                    elif ch4_3_data[2] == 6:
                        ch4_3_data[2] = "过流报警"
                    elif ch4_3_data[2] == 7:
                        ch4_3_data[2] = "过温报警"
                    elif ch4_3_data[2] == 8:
                        ch4_3_data[2] = "电池脱落或被保护"
                    elif ch4_3_data[2] == 9:
                        ch4_3_data[2] = "电池不充电报警"
                    else:
                        ch4_3_data[2] = "通信异常"

                    ch4_3_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[14])[2:]
                                + ("0x%02x" % ch4_read_data[15])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch4_3_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[30])[2:]
                                + ("0x%02x" % ch4_read_data[31])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch4_3_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[46])[2:]
                                + ("0x%02x" % ch4_read_data[47])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch4_3_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[62])[2:]
                                + ("0x%02x" % ch4_read_data[63])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch4_3_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[78])[2:]
                                + ("0x%02x" % ch4_read_data[79])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch4_3_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[94])[2:]
                                + ("0x%02x" % ch4_read_data[95])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch4_3_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[110])[2:]
                                + ("0x%02x" % ch4_read_data[111])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                ch4_4_data[2] = int(hex(ch4_read_data[5])[2:])
                if not ch4_4_start_signal:
                    if (
                        ch4_4_error_data == "过压报警"
                        or ch4_4_error_data == "低压报警"
                        or ch4_4_error_data == "过流报警"
                        or ch4_4_error_data == "过温报警"
                        or ch4_4_error_data == "电池脱落或被保护"
                        or ch4_4_error_data == "电池不充电报警"
                        or ch4_4_error_data == "测试完成"
                        or ch4_4_error_data == "容量不足"
                        or ch4_4_error_data == "NTC温度异常"
                    ):
                        ch4_4_data[2] = ch4_4_error_data
                    elif ch4_4_data[2] == 0:
                        ch4_4_data[2] = "待机状态"
                    elif ch4_4_data[2] == 1:
                        ch4_4_data[2] = "放电状态"
                    elif ch4_4_data[2] == 2:
                        ch4_4_data[2] = "充电状态"
                    elif ch4_4_data[2] == 3:
                        ch4_4_data[2] = "测试完成"
                    elif ch4_4_data[2] == 4:
                        ch4_4_data[2] = "过压报警"
                    elif ch4_4_data[2] == 5:
                        ch4_4_data[2] = "低压报警"
                    elif ch4_4_data[2] == 6:
                        ch4_4_data[2] = "过流报警"
                    elif ch4_4_data[2] == 7:
                        ch4_4_data[2] = "过温报警"
                    elif ch4_4_data[2] == 8:
                        ch4_4_data[2] = "电池脱落或被保护"
                    elif ch4_4_data[2] == 9:
                        ch4_4_data[2] = "电池不充电报警"
                    else:
                        ch4_4_data[2] = "通信异常"

                    ch4_4_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[16])[2:]
                                + ("0x%02x" % ch4_read_data[17])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch4_4_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[32])[2:]
                                + ("0x%02x" % ch4_read_data[33])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch4_4_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[48])[2:]
                                + ("0x%02x" % ch4_read_data[49])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch4_4_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[64])[2:]
                                + ("0x%02x" % ch4_read_data[65])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch4_4_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[80])[2:]
                                + ("0x%02x" % ch4_read_data[81])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch4_4_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[96])[2:]
                                + ("0x%02x" % ch4_read_data[97])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch4_4_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[112])[2:]
                                + ("0x%02x" % ch4_read_data[113])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                if ch4_4_start_signal:
                    if ch4_4_data[2] == 0:
                        ch4_4_data[2] = "待机状态"
                    elif ch4_4_data[2] == 1:
                        ch4_4_data[2] = "放电状态"
                    elif ch4_4_data[2] == 2:
                        ch4_4_data[2] = "充电状态"
                    elif ch4_4_data[2] == 3:
                        ch4_4_data[2] = "测试完成"
                    elif ch4_4_data[2] == 4:
                        ch4_4_data[2] = "过压报警"
                    elif ch4_4_data[2] == 5:
                        ch4_4_data[2] = "低压报警"
                    elif ch4_4_data[2] == 6:
                        ch4_4_data[2] = "过流报警"
                    elif ch4_4_data[2] == 7:
                        ch4_4_data[2] = "过温报警"
                    elif ch4_4_data[2] == 8:
                        ch4_4_data[2] = "电池脱落或被保护"
                    elif ch4_4_data[2] == 9:
                        ch4_4_data[2] = "电池不充电报警"
                    else:
                        ch4_4_data[2] = "通信异常"

                    ch4_4_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[16])[2:]
                                + ("0x%02x" % ch4_read_data[17])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch4_4_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[32])[2:]
                                + ("0x%02x" % ch4_read_data[33])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch4_4_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[48])[2:]
                                + ("0x%02x" % ch4_read_data[49])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch4_4_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[64])[2:]
                                + ("0x%02x" % ch4_read_data[65])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch4_4_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[80])[2:]
                                + ("0x%02x" % ch4_read_data[81])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch4_4_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[96])[2:]
                                + ("0x%02x" % ch4_read_data[97])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch4_4_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[112])[2:]
                                + ("0x%02x" % ch4_read_data[113])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                ch4_5_data[2] = int(hex(ch4_read_data[6])[2:])
                if not ch4_5_start_signal:
                    if (
                        ch4_5_error_data == "过压报警"
                        or ch4_5_error_data == "低压报警"
                        or ch4_5_error_data == "过流报警"
                        or ch4_5_error_data == "过温报警"
                        or ch4_5_error_data == "电池脱落或被保护"
                        or ch4_5_error_data == "电池不充电报警"
                        or ch4_5_error_data == "测试完成"
                        or ch4_5_error_data == "容量不足"
                        or ch4_5_error_data == "NTC温度异常"
                    ):
                        ch4_5_data[2] = ch4_5_error_data
                    elif ch4_5_data[2] == 0:
                        ch4_5_data[2] = "待机状态"
                    elif ch4_5_data[2] == 1:
                        ch4_5_data[2] = "放电状态"
                    elif ch4_5_data[2] == 2:
                        ch4_5_data[2] = "充电状态"
                    elif ch4_5_data[2] == 3:
                        ch4_5_data[2] = "测试完成"
                    elif ch4_5_data[2] == 4:
                        ch4_5_data[2] = "过压报警"
                    elif ch4_5_data[2] == 5:
                        ch4_5_data[2] = "低压报警"
                    elif ch4_5_data[2] == 6:
                        ch4_5_data[2] = "过流报警"
                    elif ch4_5_data[2] == 7:
                        ch4_5_data[2] = "过温报警"
                    elif ch4_5_data[2] == 8:
                        ch4_5_data[2] = "电池脱落或被保护"
                    elif ch4_5_data[2] == 9:
                        ch4_5_data[2] = "电池不充电报警"
                    else:
                        ch4_5_data[2] = "通信异常"

                    ch4_5_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[18])[2:]
                                + ("0x%02x" % ch4_read_data[19])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch4_5_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[34])[2:]
                                + ("0x%02x" % ch4_read_data[35])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch4_5_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[50])[2:]
                                + ("0x%02x" % ch4_read_data[51])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch4_5_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[66])[2:]
                                + ("0x%02x" % ch4_read_data[67])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch4_5_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[82])[2:]
                                + ("0x%02x" % ch4_read_data[83])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch4_5_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[98])[2:]
                                + ("0x%02x" % ch4_read_data[99])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch4_5_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[114])[2:]
                                + ("0x%02x" % ch4_read_data[115])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                if ch4_5_start_signal:
                    if ch4_5_data[2] == 0:
                        ch4_5_data[2] = "待机状态"
                    elif ch4_5_data[2] == 1:
                        ch4_5_data[2] = "放电状态"
                    elif ch4_5_data[2] == 2:
                        ch4_5_data[2] = "充电状态"
                    elif ch4_5_data[2] == 3:
                        ch4_5_data[2] = "测试完成"
                    elif ch4_5_data[2] == 4:
                        ch4_5_data[2] = "过压报警"
                    elif ch4_5_data[2] == 5:
                        ch4_5_data[2] = "低压报警"
                    elif ch4_5_data[2] == 6:
                        ch4_5_data[2] = "过流报警"
                    elif ch4_5_data[2] == 7:
                        ch4_5_data[2] = "过温报警"
                    elif ch4_5_data[2] == 8:
                        ch4_5_data[2] = "电池脱落或被保护"
                    elif ch4_5_data[2] == 9:
                        ch4_5_data[2] = "电池不充电报警"
                    else:
                        ch4_5_data[2] = "通信异常"

                    ch4_5_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[18])[2:]
                                + ("0x%02x" % ch4_read_data[19])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch4_5_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[34])[2:]
                                + ("0x%02x" % ch4_read_data[35])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch4_5_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[50])[2:]
                                + ("0x%02x" % ch4_read_data[51])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch4_5_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[66])[2:]
                                + ("0x%02x" % ch4_read_data[67])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch4_5_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[82])[2:]
                                + ("0x%02x" % ch4_read_data[83])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch4_5_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[98])[2:]
                                + ("0x%02x" % ch4_read_data[99])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch4_5_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[114])[2:]
                                + ("0x%02x" % ch4_read_data[115])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                ch4_6_data[2] = int(hex(ch4_read_data[7])[2:])
                if not ch4_6_start_signal:
                    if (
                        ch4_6_error_data == "过压报警"
                        or ch4_6_error_data == "低压报警"
                        or ch4_6_error_data == "过流报警"
                        or ch4_6_error_data == "过温报警"
                        or ch4_6_error_data == "电池脱落或被保护"
                        or ch4_6_error_data == "电池不充电报警"
                        or ch4_6_error_data == "测试完成"
                        or ch4_6_error_data == "容量不足"
                        or ch4_6_error_data == "NTC温度异常"
                    ):
                        ch4_6_data[2] = ch4_6_error_data
                    elif ch4_6_data[2] == 0:
                        ch4_6_data[2] = "待机状态"
                    elif ch4_6_data[2] == 1:
                        ch4_6_data[2] = "放电状态"
                    elif ch4_6_data[2] == 2:
                        ch4_6_data[2] = "充电状态"
                    elif ch4_6_data[2] == 3:
                        ch4_6_data[2] = "测试完成"
                    elif ch4_6_data[2] == 4:
                        ch4_6_data[2] = "过压报警"
                    elif ch4_6_data[2] == 5:
                        ch4_6_data[2] = "低压报警"
                    elif ch4_6_data[2] == 6:
                        ch4_6_data[2] = "过流报警"
                    elif ch4_6_data[2] == 7:
                        ch4_6_data[2] = "过温报警"
                    elif ch4_6_data[2] == 8:
                        ch4_6_data[2] = "电池脱落或被保护"
                    elif ch4_6_data[2] == 9:
                        ch4_6_data[2] = "电池不充电报警"
                    else:
                        ch4_6_data[2] = "通信异常"

                    ch4_6_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[20])[2:]
                                + ("0x%02x" % ch4_read_data[21])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch4_6_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[36])[2:]
                                + ("0x%02x" % ch4_read_data[37])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch4_6_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[52])[2:]
                                + ("0x%02x" % ch4_read_data[53])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch4_6_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[68])[2:]
                                + ("0x%02x" % ch4_read_data[69])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch4_6_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[84])[2:]
                                + ("0x%02x" % ch4_read_data[85])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch4_6_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[100])[2:]
                                + ("0x%02x" % ch4_read_data[101])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch4_6_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[116])[2:]
                                + ("0x%02x" % ch4_read_data[117])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                if ch4_6_start_signal:
                    if ch4_6_data[2] == 0:
                        ch4_6_data[2] = "待机状态"
                    elif ch4_6_data[2] == 1:
                        ch4_6_data[2] = "放电状态"
                    elif ch4_6_data[2] == 2:
                        ch4_6_data[2] = "充电状态"
                    elif ch4_6_data[2] == 3:
                        ch4_6_data[2] = "测试完成"
                    elif ch4_6_data[2] == 4:
                        ch4_6_data[2] = "过压报警"
                    elif ch4_6_data[2] == 5:
                        ch4_6_data[2] = "低压报警"
                    elif ch4_6_data[2] == 6:
                        ch4_6_data[2] = "过流报警"
                    elif ch4_6_data[2] == 7:
                        ch4_6_data[2] = "过温报警"
                    elif ch4_6_data[2] == 8:
                        ch4_6_data[2] = "电池脱落或被保护"
                    elif ch4_6_data[2] == 9:
                        ch4_6_data[2] = "电池不充电报警"
                    else:
                        ch4_6_data[2] = "通信异常"

                    ch4_6_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[20])[2:]
                                + ("0x%02x" % ch4_read_data[21])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch4_6_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[36])[2:]
                                + ("0x%02x" % ch4_read_data[37])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch4_6_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[52])[2:]
                                + ("0x%02x" % ch4_read_data[53])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch4_6_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[68])[2:]
                                + ("0x%02x" % ch4_read_data[69])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch4_6_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[84])[2:]
                                + ("0x%02x" % ch4_read_data[85])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch4_6_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[100])[2:]
                                + ("0x%02x" % ch4_read_data[101])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch4_6_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[116])[2:]
                                + ("0x%02x" % ch4_read_data[117])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                ch4_7_data[2] = int(hex(ch4_read_data[8])[2:])
                if not ch4_7_start_signal:
                    if (
                        ch4_7_error_data == "过压报警"
                        or ch4_7_error_data == "低压报警"
                        or ch4_7_error_data == "过流报警"
                        or ch4_7_error_data == "过温报警"
                        or ch4_7_error_data == "电池脱落或被保护"
                        or ch4_7_error_data == "电池不充电报警"
                        or ch4_7_error_data == "测试完成"
                        or ch4_7_error_data == "容量不足"
                        or ch4_7_error_data == "NTC温度异常"
                    ):
                        ch4_7_data[2] = ch4_7_error_data
                    elif ch4_7_data[2] == 0:
                        ch4_7_data[2] = "待机状态"
                    elif ch4_7_data[2] == 1:
                        ch4_7_data[2] = "放电状态"
                    elif ch4_7_data[2] == 2:
                        ch4_7_data[2] = "充电状态"
                    elif ch4_7_data[2] == 3:
                        ch4_7_data[2] = "测试完成"
                    elif ch4_7_data[2] == 4:
                        ch4_7_data[2] = "过压报警"
                    elif ch4_7_data[2] == 5:
                        ch4_7_data[2] = "低压报警"
                    elif ch4_7_data[2] == 6:
                        ch4_7_data[2] = "过流报警"
                    elif ch4_7_data[2] == 7:
                        ch4_7_data[2] = "过温报警"
                    elif ch4_7_data[2] == 8:
                        ch4_7_data[2] = "电池脱落或被保护"
                    elif ch4_7_data[2] == 9:
                        ch4_7_data[2] = "电池不充电报警"
                    else:
                        ch4_7_data[2] = "通信异常"

                    ch4_7_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[22])[2:]
                                + ("0x%02x" % ch4_read_data[23])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch4_7_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[38])[2:]
                                + ("0x%02x" % ch4_read_data[39])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch4_7_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[54])[2:]
                                + ("0x%02x" % ch4_read_data[55])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch4_7_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[70])[2:]
                                + ("0x%02x" % ch4_read_data[71])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch4_7_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[86])[2:]
                                + ("0x%02x" % ch4_read_data[87])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch4_7_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[102])[2:]
                                + ("0x%02x" % ch4_read_data[103])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch4_7_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[118])[2:]
                                + ("0x%02x" % ch4_read_data[119])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                if ch4_7_start_signal:
                    if ch4_7_data[2] == 0:
                        ch4_7_data[2] = "待机状态"
                    elif ch4_7_data[2] == 1:
                        ch4_7_data[2] = "放电状态"
                    elif ch4_7_data[2] == 2:
                        ch4_7_data[2] = "充电状态"
                    elif ch4_7_data[2] == 3:
                        ch4_7_data[2] = "测试完成"
                    elif ch4_7_data[2] == 4:
                        ch4_7_data[2] = "过压报警"
                    elif ch4_7_data[2] == 5:
                        ch4_7_data[2] = "低压报警"
                    elif ch4_7_data[2] == 6:
                        ch4_7_data[2] = "过流报警"
                    elif ch4_7_data[2] == 7:
                        ch4_7_data[2] = "过温报警"
                    elif ch4_7_data[2] == 8:
                        ch4_7_data[2] = "电池脱落或被保护"
                    elif ch4_7_data[2] == 9:
                        ch4_7_data[2] = "电池不充电报警"
                    else:
                        ch4_7_data[2] = "通信异常"

                    ch4_7_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[22])[2:]
                                + ("0x%02x" % ch4_read_data[23])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch4_7_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[38])[2:]
                                + ("0x%02x" % ch4_read_data[39])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch4_7_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[54])[2:]
                                + ("0x%02x" % ch4_read_data[55])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch4_7_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[70])[2:]
                                + ("0x%02x" % ch4_read_data[71])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch4_7_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[86])[2:]
                                + ("0x%02x" % ch4_read_data[87])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch4_7_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[102])[2:]
                                + ("0x%02x" % ch4_read_data[103])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch4_7_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[118])[2:]
                                + ("0x%02x" % ch4_read_data[119])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                ch4_8_data[2] = int(hex(ch4_read_data[9])[2:])
                if not ch4_8_start_signal:
                    if (
                        ch4_8_error_data == "过压报警"
                        or ch4_8_error_data == "低压报警"
                        or ch4_8_error_data == "过流报警"
                        or ch4_8_error_data == "过温报警"
                        or ch4_8_error_data == "电池脱落或被保护"
                        or ch4_8_error_data == "电池不充电报警"
                        or ch4_8_error_data == "测试完成"
                        or ch4_8_error_data == "容量不足"
                        or ch4_8_error_data == "NTC温度异常"
                    ):
                        ch4_8_data[2] = ch4_8_error_data
                    elif ch4_8_data[2] == 0:
                        ch4_8_data[2] = "待机状态"
                    elif ch4_8_data[2] == 1:
                        ch4_8_data[2] = "放电状态"
                    elif ch4_8_data[2] == 2:
                        ch4_8_data[2] = "充电状态"
                    elif ch4_8_data[2] == 3:
                        ch4_8_data[2] = "测试完成"
                    elif ch4_8_data[2] == 4:
                        ch4_8_data[2] = "过压报警"
                    elif ch4_8_data[2] == 5:
                        ch4_8_data[2] = "低压报警"
                    elif ch4_8_data[2] == 6:
                        ch4_8_data[2] = "过流报警"
                    elif ch4_8_data[2] == 7:
                        ch4_8_data[2] = "过温报警"
                    elif ch4_8_data[2] == 8:
                        ch4_8_data[2] = "电池脱落或被保护"
                    elif ch4_8_data[2] == 9:
                        ch4_8_data[2] = "电池不充电报警"
                    else:
                        ch4_8_data[2] = "通信异常"

                    ch4_8_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[24])[2:]
                                + ("0x%02x" % ch4_read_data[25])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch4_8_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[40])[2:]
                                + ("0x%02x" % ch4_read_data[41])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch4_8_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[56])[2:]
                                + ("0x%02x" % ch4_read_data[57])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch4_8_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[72])[2:]
                                + ("0x%02x" % ch4_read_data[73])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch4_8_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[88])[2:]
                                + ("0x%02x" % ch4_read_data[89])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch4_8_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[104])[2:]
                                + ("0x%02x" % ch4_read_data[105])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch4_8_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[120])[2:]
                                + ("0x%02x" % ch4_read_data[121])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                if ch4_8_start_signal:
                    if ch4_8_data[2] == 0:
                        ch4_8_data[2] = "待机状态"
                    elif ch4_8_data[2] == 1:
                        ch4_8_data[2] = "放电状态"
                    elif ch4_8_data[2] == 2:
                        ch4_8_data[2] = "充电状态"
                    elif ch4_8_data[2] == 3:
                        ch4_8_data[2] = "测试完成"
                    elif ch4_8_data[2] == 4:
                        ch4_8_data[2] = "过压报警"
                    elif ch4_8_data[2] == 5:
                        ch4_8_data[2] = "低压报警"
                    elif ch4_8_data[2] == 6:
                        ch4_8_data[2] = "过流报警"
                    elif ch4_8_data[2] == 7:
                        ch4_8_data[2] = "过温报警"
                    elif ch4_8_data[2] == 8:
                        ch4_8_data[2] = "电池脱落或被保护"
                    elif ch4_8_data[2] == 9:
                        ch4_8_data[2] = "电池不充电报警"
                    else:
                        ch4_8_data[2] = "通信异常"

                    ch4_8_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[24])[2:]
                                + ("0x%02x" % ch4_read_data[25])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch4_8_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[40])[2:]
                                + ("0x%02x" % ch4_read_data[41])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch4_8_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[56])[2:]
                                + ("0x%02x" % ch4_read_data[57])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch4_8_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[72])[2:]
                                + ("0x%02x" % ch4_read_data[73])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch4_8_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[88])[2:]
                                + ("0x%02x" % ch4_read_data[89])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch4_8_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[104])[2:]
                                + ("0x%02x" % ch4_read_data[105])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch4_8_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data[120])[2:]
                                + ("0x%02x" % ch4_read_data[121])[2:],
                                16,
                            )
                        )
                        / 10
                    )

        if (
            ch5_1_signal == 1
            or ch5_2_signal == 1
            or ch5_3_signal == 1
            or ch5_4_signal == 1
            or ch5_5_signal == 1
            or ch5_6_signal == 1
            or ch5_7_signal == 1
            or ch5_8_signal == 1
        ):
            ch5_readcommend = "050300000000A5"
            ### 加锁读取数据
            ### 数据处理
            mutex.acquire()
            ch5_read_data = ser.readdata(com, ch5_readcommend)
            mutex.release()

            if ch5_read_data == "FF":
                ch5_1_data[2] = "通信异常"
                ch5_2_data[2] = "通信异常"
                ch5_3_data[2] = "通信异常"
                ch5_4_data[2] = "通信异常"
                ch5_5_data[2] = "通信异常"
                ch5_6_data[2] = "通信异常"
                ch5_7_data[2] = "通信异常"
                ch5_8_data[2] = "通信异常"
                # stop_test("ch5_1")
                # stop_test("ch5_2")
                # stop_test("ch5_3")
                # stop_test("ch5_4")
                # stop_test("ch5_5")
                # stop_test("ch5_6")
                # stop_test("ch5_7")
                # stop_test("ch5_8")

            else:
                ch5_1_data[2] = int(hex(ch5_read_data[2])[2:])

                if not ch5_1_start_signal:
                    if (
                        ch5_1_error_data == "过压报警"
                        or ch5_1_error_data == "低压报警"
                        or ch5_1_error_data == "过流报警"
                        or ch5_1_error_data == "过温报警"
                        or ch5_1_error_data == "电池脱落或被保护"
                        or ch5_1_error_data == "电池不充电报警"
                        or ch5_1_error_data == "测试完成"
                        or ch5_1_error_data == "容量不足"
                        or ch5_1_error_data == "NTC温度异常"
                    ):
                        ch5_1_data[2] = ch5_1_error_data
                    elif ch5_1_data[2] == 0:
                        ch5_1_data[2] = "待机状态"
                    elif ch5_1_data[2] == 1:
                        ch5_1_data[2] = "放电状态"
                    elif ch5_1_data[2] == 2:
                        ch5_1_data[2] = "充电状态"
                    elif ch5_1_data[2] == 3:
                        ch5_1_data[2] = "测试完成"
                    elif ch5_1_data[2] == 4:
                        ch5_1_data[2] = "过压报警"
                    elif ch5_1_data[2] == 5:
                        ch5_1_data[2] = "低压报警"
                    elif ch5_1_data[2] == 6:
                        ch5_1_data[2] = "过流报警"
                    elif ch5_1_data[2] == 7:
                        ch5_1_data[2] = "过温报警"
                    elif ch5_1_data[2] == 8:
                        ch5_1_data[2] = "电池脱落或被保护"
                    elif ch5_1_data[2] == 9:
                        ch5_1_data[2] = "电池不充电报警"
                    else:
                        ch5_1_data[2] = "通信异常"

                    ch5_1_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[10])[2:]
                                + ("0x%02x" % ch5_read_data[11])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch5_1_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[26])[2:]
                                + ("0x%02x" % ch5_read_data[27])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch5_1_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[42])[2:]
                                + ("0x%02x" % ch5_read_data[43])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch5_1_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[58])[2:]
                                + ("0x%02x" % ch5_read_data[59])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch5_1_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[74])[2:]
                                + ("0x%02x" % ch5_read_data[75])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch5_1_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[90])[2:]
                                + ("0x%02x" % ch5_read_data[91])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch5_1_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[106])[2:]
                                + ("0x%02x" % ch5_read_data[107])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                if ch5_1_start_signal:
                    if ch5_1_data[2] == 0:
                        ch5_1_data[2] = "待机状态"
                    elif ch5_1_data[2] == 1:
                        ch5_1_data[2] = "放电状态"
                    elif ch5_1_data[2] == 2:
                        ch5_1_data[2] = "充电状态"
                    elif ch5_1_data[2] == 3:
                        ch5_1_data[2] = "测试完成"
                    elif ch5_1_data[2] == 4:
                        ch5_1_data[2] = "过压报警"
                    elif ch5_1_data[2] == 5:
                        ch5_1_data[2] = "低压报警"
                    elif ch5_1_data[2] == 6:
                        ch5_1_data[2] = "过流报警"
                    elif ch5_1_data[2] == 7:
                        ch5_1_data[2] = "过温报警"
                    elif ch5_1_data[2] == 8:
                        ch5_1_data[2] = "电池脱落或被保护"
                    elif ch5_1_data[2] == 9:
                        ch5_1_data[2] = "电池不充电报警"
                    else:
                        ch5_1_data[2] = "通信异常"

                    ch5_1_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[10])[2:]
                                + ("0x%02x" % ch5_read_data[11])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch5_1_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[26])[2:]
                                + ("0x%02x" % ch5_read_data[27])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch5_1_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[42])[2:]
                                + ("0x%02x" % ch5_read_data[43])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch5_1_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[58])[2:]
                                + ("0x%02x" % ch5_read_data[59])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch5_1_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[74])[2:]
                                + ("0x%02x" % ch5_read_data[75])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch5_1_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[90])[2:]
                                + ("0x%02x" % ch5_read_data[91])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch5_1_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[106])[2:]
                                + ("0x%02x" % ch5_read_data[107])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                ch5_2_data[2] = int(hex(ch5_read_data[3])[2:])
                if not ch5_2_start_signal:
                    if (
                        ch5_2_error_data == "过压报警"
                        or ch5_2_error_data == "低压报警"
                        or ch5_2_error_data == "过流报警"
                        or ch5_2_error_data == "过温报警"
                        or ch5_2_error_data == "电池脱落或被保护"
                        or ch5_2_error_data == "电池不充电报警"
                        or ch5_2_error_data == "测试完成"
                        or ch5_2_error_data == "容量不足"
                        or ch5_2_error_data == "NTC温度异常"
                    ):
                        ch5_2_data[2] = ch5_2_error_data
                    elif ch5_2_data[2] == 0:
                        ch5_2_data[2] = "待机状态"
                    elif ch5_2_data[2] == 1:
                        ch5_2_data[2] = "放电状态"
                    elif ch5_2_data[2] == 2:
                        ch5_2_data[2] = "充电状态"
                    elif ch5_2_data[2] == 3:
                        ch5_2_data[2] = "测试完成"
                    elif ch5_2_data[2] == 4:
                        ch5_2_data[2] = "过压报警"
                    elif ch5_2_data[2] == 5:
                        ch5_2_data[2] = "低压报警"
                    elif ch5_2_data[2] == 6:
                        ch5_2_data[2] = "过流报警"
                    elif ch5_2_data[2] == 7:
                        ch5_2_data[2] = "过温报警"
                    elif ch5_2_data[2] == 8:
                        ch5_2_data[2] = "电池脱落或被保护"
                    elif ch5_2_data[2] == 9:
                        ch5_2_data[2] = "电池不充电报警"
                    else:
                        ch5_2_data[2] = "通信异常"

                    ch5_2_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[12])[2:]
                                + ("0x%02x" % ch5_read_data[13])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch5_2_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[28])[2:]
                                + ("0x%02x" % ch5_read_data[29])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch5_2_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[44])[2:]
                                + ("0x%02x" % ch5_read_data[45])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch5_2_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[60])[2:]
                                + ("0x%02x" % ch5_read_data[61])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch5_2_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[76])[2:]
                                + ("0x%02x" % ch5_read_data[77])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch5_2_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[92])[2:]
                                + ("0x%02x" % ch5_read_data[93])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch5_2_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[108])[2:]
                                + ("0x%02x" % ch5_read_data[109])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                if ch5_2_start_signal:
                    if ch5_2_data[2] == 0:
                        ch5_2_data[2] = "待机状态"
                    elif ch5_2_data[2] == 1:
                        ch5_2_data[2] = "放电状态"
                    elif ch5_2_data[2] == 2:
                        ch5_2_data[2] = "充电状态"
                    elif ch5_2_data[2] == 3:
                        ch5_2_data[2] = "测试完成"
                    elif ch5_2_data[2] == 4:
                        ch5_2_data[2] = "过压报警"
                    elif ch5_2_data[2] == 5:
                        ch5_2_data[2] = "低压报警"
                    elif ch5_2_data[2] == 6:
                        ch5_2_data[2] = "过流报警"
                    elif ch5_2_data[2] == 7:
                        ch5_2_data[2] = "过温报警"
                    elif ch5_2_data[2] == 8:
                        ch5_2_data[2] = "电池脱落或被保护"
                    elif ch5_2_data[2] == 9:
                        ch5_2_data[2] = "电池不充电报警"
                    else:
                        ch5_2_data[2] = "通信异常"

                    ch5_2_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[12])[2:]
                                + ("0x%02x" % ch5_read_data[13])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch5_2_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[28])[2:]
                                + ("0x%02x" % ch5_read_data[29])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch5_2_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[44])[2:]
                                + ("0x%02x" % ch5_read_data[45])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch5_2_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[60])[2:]
                                + ("0x%02x" % ch5_read_data[61])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch5_2_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[76])[2:]
                                + ("0x%02x" % ch5_read_data[77])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch5_2_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[92])[2:]
                                + ("0x%02x" % ch5_read_data[93])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch5_2_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[108])[2:]
                                + ("0x%02x" % ch5_read_data[109])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                ch5_3_data[2] = int(hex(ch5_read_data[4])[2:])
                if not ch5_3_start_signal:
                    if (
                        ch5_3_error_data == "过压报警"
                        or ch5_3_error_data == "低压报警"
                        or ch5_3_error_data == "过流报警"
                        or ch5_3_error_data == "过温报警"
                        or ch5_3_error_data == "电池脱落或被保护"
                        or ch5_3_error_data == "电池不充电报警"
                        or ch5_3_error_data == "测试完成"
                        or ch5_3_error_data == "容量不足"
                        or ch5_3_error_data == "NTC温度异常"
                    ):
                        ch5_3_data[2] = ch5_3_error_data
                    elif ch5_3_data[2] == 0:
                        ch5_3_data[2] = "待机状态"
                    elif ch5_3_data[2] == 1:
                        ch5_3_data[2] = "放电状态"
                    elif ch5_3_data[2] == 2:
                        ch5_3_data[2] = "充电状态"
                    elif ch5_3_data[2] == 3:
                        ch5_3_data[2] = "测试完成"
                    elif ch5_3_data[2] == 4:
                        ch5_3_data[2] = "过压报警"
                    elif ch5_3_data[2] == 5:
                        ch5_3_data[2] = "低压报警"
                    elif ch5_3_data[2] == 6:
                        ch5_3_data[2] = "过流报警"
                    elif ch5_3_data[2] == 7:
                        ch5_3_data[2] = "过温报警"
                    elif ch5_3_data[2] == 8:
                        ch5_3_data[2] = "电池脱落或被保护"
                    elif ch5_3_data[2] == 9:
                        ch5_3_data[2] = "电池不充电报警"
                    else:
                        ch5_3_data[2] = "通信异常"

                    ch5_3_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[14])[2:]
                                + ("0x%02x" % ch5_read_data[15])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch5_3_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[30])[2:]
                                + ("0x%02x" % ch5_read_data[31])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch5_3_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[46])[2:]
                                + ("0x%02x" % ch5_read_data[47])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch5_3_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[62])[2:]
                                + ("0x%02x" % ch5_read_data[63])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch5_3_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[78])[2:]
                                + ("0x%02x" % ch5_read_data[79])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch5_3_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[94])[2:]
                                + ("0x%02x" % ch5_read_data[95])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch5_3_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[110])[2:]
                                + ("0x%02x" % ch5_read_data[111])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                if ch5_3_start_signal:
                    if ch5_3_data[2] == 0:
                        ch5_3_data[2] = "待机状态"
                    elif ch5_3_data[2] == 1:
                        ch5_3_data[2] = "放电状态"
                    elif ch5_3_data[2] == 2:
                        ch5_3_data[2] = "充电状态"
                    elif ch5_3_data[2] == 3:
                        ch5_3_data[2] = "测试完成"
                    elif ch5_3_data[2] == 4:
                        ch5_3_data[2] = "过压报警"
                    elif ch5_3_data[2] == 5:
                        ch5_3_data[2] = "低压报警"
                    elif ch5_3_data[2] == 6:
                        ch5_3_data[2] = "过流报警"
                    elif ch5_3_data[2] == 7:
                        ch5_3_data[2] = "过温报警"
                    elif ch5_3_data[2] == 8:
                        ch5_3_data[2] = "电池脱落或被保护"
                    elif ch5_3_data[2] == 9:
                        ch5_3_data[2] = "电池不充电报警"
                    else:
                        ch5_3_data[2] = "通信异常"

                    ch5_3_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[14])[2:]
                                + ("0x%02x" % ch5_read_data[15])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch5_3_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[30])[2:]
                                + ("0x%02x" % ch5_read_data[31])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch5_3_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[46])[2:]
                                + ("0x%02x" % ch5_read_data[47])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch5_3_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[62])[2:]
                                + ("0x%02x" % ch5_read_data[63])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch5_3_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[78])[2:]
                                + ("0x%02x" % ch5_read_data[79])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch5_3_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[94])[2:]
                                + ("0x%02x" % ch5_read_data[95])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch5_3_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[110])[2:]
                                + ("0x%02x" % ch5_read_data[111])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                ch5_4_data[2] = int(hex(ch5_read_data[5])[2:])
                if not ch5_4_start_signal:
                    if (
                        ch5_4_error_data == "过压报警"
                        or ch5_4_error_data == "低压报警"
                        or ch5_4_error_data == "过流报警"
                        or ch5_4_error_data == "过温报警"
                        or ch5_4_error_data == "电池脱落或被保护"
                        or ch5_4_error_data == "电池不充电报警"
                        or ch5_4_error_data == "测试完成"
                        or ch5_4_error_data == "容量不足"
                        or ch5_4_error_data == "NTC温度异常"
                    ):
                        ch5_4_data[2] = ch5_4_error_data
                    elif ch5_4_data[2] == 0:
                        ch5_4_data[2] = "待机状态"
                    elif ch5_4_data[2] == 1:
                        ch5_4_data[2] = "放电状态"
                    elif ch5_4_data[2] == 2:
                        ch5_4_data[2] = "充电状态"
                    elif ch5_4_data[2] == 3:
                        ch5_4_data[2] = "测试完成"
                    elif ch5_4_data[2] == 4:
                        ch5_4_data[2] = "过压报警"
                    elif ch5_4_data[2] == 5:
                        ch5_4_data[2] = "低压报警"
                    elif ch5_4_data[2] == 6:
                        ch5_4_data[2] = "过流报警"
                    elif ch5_4_data[2] == 7:
                        ch5_4_data[2] = "过温报警"
                    elif ch5_4_data[2] == 8:
                        ch5_4_data[2] = "电池脱落或被保护"
                    elif ch5_4_data[2] == 9:
                        ch5_4_data[2] = "电池不充电报警"
                    else:
                        ch5_4_data[2] = "通信异常"

                    ch5_4_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[16])[2:]
                                + ("0x%02x" % ch5_read_data[17])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch5_4_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[32])[2:]
                                + ("0x%02x" % ch5_read_data[33])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch5_4_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[48])[2:]
                                + ("0x%02x" % ch5_read_data[49])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch5_4_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[64])[2:]
                                + ("0x%02x" % ch5_read_data[65])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch5_4_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[80])[2:]
                                + ("0x%02x" % ch5_read_data[81])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch5_4_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[96])[2:]
                                + ("0x%02x" % ch5_read_data[97])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch5_4_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[112])[2:]
                                + ("0x%02x" % ch5_read_data[113])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                if ch5_4_start_signal:
                    if ch5_4_data[2] == 0:
                        ch5_4_data[2] = "待机状态"
                    elif ch5_4_data[2] == 1:
                        ch5_4_data[2] = "放电状态"
                    elif ch5_4_data[2] == 2:
                        ch5_4_data[2] = "充电状态"
                    elif ch5_4_data[2] == 3:
                        ch5_4_data[2] = "测试完成"
                    elif ch5_4_data[2] == 4:
                        ch5_4_data[2] = "过压报警"
                    elif ch5_4_data[2] == 5:
                        ch5_4_data[2] = "低压报警"
                    elif ch5_4_data[2] == 6:
                        ch5_4_data[2] = "过流报警"
                    elif ch5_4_data[2] == 7:
                        ch5_4_data[2] = "过温报警"
                    elif ch5_4_data[2] == 8:
                        ch5_4_data[2] = "电池脱落或被保护"
                    elif ch5_4_data[2] == 9:
                        ch5_4_data[2] = "电池不充电报警"
                    else:
                        ch5_4_data[2] = "通信异常"

                    ch5_4_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[16])[2:]
                                + ("0x%02x" % ch5_read_data[17])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch5_4_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[32])[2:]
                                + ("0x%02x" % ch5_read_data[33])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch5_4_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[48])[2:]
                                + ("0x%02x" % ch5_read_data[49])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch5_4_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[64])[2:]
                                + ("0x%02x" % ch5_read_data[65])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch5_4_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[80])[2:]
                                + ("0x%02x" % ch5_read_data[81])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch5_4_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[96])[2:]
                                + ("0x%02x" % ch5_read_data[97])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch5_4_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[112])[2:]
                                + ("0x%02x" % ch5_read_data[113])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                ch5_5_data[2] = int(hex(ch5_read_data[6])[2:])
                if not ch5_5_start_signal:
                    if (
                        ch5_5_error_data == "过压报警"
                        or ch5_5_error_data == "低压报警"
                        or ch5_5_error_data == "过流报警"
                        or ch5_5_error_data == "过温报警"
                        or ch5_5_error_data == "电池脱落或被保护"
                        or ch5_5_error_data == "电池不充电报警"
                        or ch5_5_error_data == "测试完成"
                        or ch5_5_error_data == "容量不足"
                        or ch5_5_error_data == "NTC温度异常"
                    ):
                        ch5_5_data[2] = ch5_5_error_data
                    elif ch5_5_data[2] == 0:
                        ch5_5_data[2] = "待机状态"
                    elif ch5_5_data[2] == 1:
                        ch5_5_data[2] = "放电状态"
                    elif ch5_5_data[2] == 2:
                        ch5_5_data[2] = "充电状态"
                    elif ch5_5_data[2] == 3:
                        ch5_5_data[2] = "测试完成"
                    elif ch5_5_data[2] == 4:
                        ch5_5_data[2] = "过压报警"
                    elif ch5_5_data[2] == 5:
                        ch5_5_data[2] = "低压报警"
                    elif ch5_5_data[2] == 6:
                        ch5_5_data[2] = "过流报警"
                    elif ch5_5_data[2] == 7:
                        ch5_5_data[2] = "过温报警"
                    elif ch5_5_data[2] == 8:
                        ch5_5_data[2] = "电池脱落或被保护"
                    elif ch5_5_data[2] == 9:
                        ch5_5_data[2] = "电池不充电报警"
                    else:
                        ch5_5_data[2] = "通信异常"

                    ch5_5_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[18])[2:]
                                + ("0x%02x" % ch5_read_data[19])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch5_5_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[34])[2:]
                                + ("0x%02x" % ch5_read_data[35])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch5_5_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[50])[2:]
                                + ("0x%02x" % ch5_read_data[51])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch5_5_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[66])[2:]
                                + ("0x%02x" % ch5_read_data[67])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch5_5_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[82])[2:]
                                + ("0x%02x" % ch5_read_data[83])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch5_5_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[98])[2:]
                                + ("0x%02x" % ch5_read_data[99])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch5_5_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[114])[2:]
                                + ("0x%02x" % ch5_read_data[115])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                if ch5_5_start_signal:
                    if ch5_5_data[2] == 0:
                        ch5_5_data[2] = "待机状态"
                    elif ch5_5_data[2] == 1:
                        ch5_5_data[2] = "放电状态"
                    elif ch5_5_data[2] == 2:
                        ch5_5_data[2] = "充电状态"
                    elif ch5_5_data[2] == 3:
                        ch5_5_data[2] = "测试完成"
                    elif ch5_5_data[2] == 4:
                        ch5_5_data[2] = "过压报警"
                    elif ch5_5_data[2] == 5:
                        ch5_5_data[2] = "低压报警"
                    elif ch5_5_data[2] == 6:
                        ch5_5_data[2] = "过流报警"
                    elif ch5_5_data[2] == 7:
                        ch5_5_data[2] = "过温报警"
                    elif ch5_5_data[2] == 8:
                        ch5_5_data[2] = "电池脱落或被保护"
                    elif ch5_5_data[2] == 9:
                        ch5_5_data[2] = "电池不充电报警"
                    else:
                        ch5_5_data[2] = "通信异常"

                    ch5_5_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[18])[2:]
                                + ("0x%02x" % ch5_read_data[19])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch5_5_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[34])[2:]
                                + ("0x%02x" % ch5_read_data[35])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch5_5_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[50])[2:]
                                + ("0x%02x" % ch5_read_data[51])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch5_5_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[66])[2:]
                                + ("0x%02x" % ch5_read_data[67])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch5_5_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[82])[2:]
                                + ("0x%02x" % ch5_read_data[83])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch5_5_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[98])[2:]
                                + ("0x%02x" % ch5_read_data[99])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch5_5_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[114])[2:]
                                + ("0x%02x" % ch5_read_data[115])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                ch5_6_data[2] = int(hex(ch5_read_data[7])[2:])
                if not ch5_6_start_signal:
                    if (
                        ch5_6_error_data == "过压报警"
                        or ch5_6_error_data == "低压报警"
                        or ch5_6_error_data == "过流报警"
                        or ch5_6_error_data == "过温报警"
                        or ch5_6_error_data == "电池脱落或被保护"
                        or ch5_6_error_data == "电池不充电报警"
                        or ch5_6_error_data == "测试完成"
                        or ch5_6_error_data == "容量不足"
                        or ch5_6_error_data == "NTC温度异常"
                    ):
                        ch5_6_data[2] = ch5_6_error_data
                    elif ch5_6_data[2] == 0:
                        ch5_6_data[2] = "待机状态"
                    elif ch5_6_data[2] == 1:
                        ch5_6_data[2] = "放电状态"
                    elif ch5_6_data[2] == 2:
                        ch5_6_data[2] = "充电状态"
                    elif ch5_6_data[2] == 3:
                        ch5_6_data[2] = "测试完成"
                    elif ch5_6_data[2] == 4:
                        ch5_6_data[2] = "过压报警"
                    elif ch5_6_data[2] == 5:
                        ch5_6_data[2] = "低压报警"
                    elif ch5_6_data[2] == 6:
                        ch5_6_data[2] = "过流报警"
                    elif ch5_6_data[2] == 7:
                        ch5_6_data[2] = "过温报警"
                    elif ch5_6_data[2] == 8:
                        ch5_6_data[2] = "电池脱落或被保护"
                    elif ch5_6_data[2] == 9:
                        ch5_6_data[2] = "电池不充电报警"
                    else:
                        ch5_6_data[2] = "通信异常"

                    ch5_6_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[20])[2:]
                                + ("0x%02x" % ch5_read_data[21])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch5_6_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[36])[2:]
                                + ("0x%02x" % ch5_read_data[37])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch5_6_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[52])[2:]
                                + ("0x%02x" % ch5_read_data[53])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch5_6_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[68])[2:]
                                + ("0x%02x" % ch5_read_data[69])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch5_6_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[84])[2:]
                                + ("0x%02x" % ch5_read_data[85])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch5_6_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[100])[2:]
                                + ("0x%02x" % ch5_read_data[101])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch5_6_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[116])[2:]
                                + ("0x%02x" % ch5_read_data[117])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                if ch5_6_start_signal:
                    if ch5_6_data[2] == 0:
                        ch5_6_data[2] = "待机状态"
                    elif ch5_6_data[2] == 1:
                        ch5_6_data[2] = "放电状态"
                    elif ch5_6_data[2] == 2:
                        ch5_6_data[2] = "充电状态"
                    elif ch5_6_data[2] == 3:
                        ch5_6_data[2] = "测试完成"
                    elif ch5_6_data[2] == 4:
                        ch5_6_data[2] = "过压报警"
                    elif ch5_6_data[2] == 5:
                        ch5_6_data[2] = "低压报警"
                    elif ch5_6_data[2] == 6:
                        ch5_6_data[2] = "过流报警"
                    elif ch5_6_data[2] == 7:
                        ch5_6_data[2] = "过温报警"
                    elif ch5_6_data[2] == 8:
                        ch5_6_data[2] = "电池脱落或被保护"
                    elif ch5_6_data[2] == 9:
                        ch5_6_data[2] = "电池不充电报警"
                    else:
                        ch5_6_data[2] = "通信异常"

                    ch5_6_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[20])[2:]
                                + ("0x%02x" % ch5_read_data[21])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch5_6_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[36])[2:]
                                + ("0x%02x" % ch5_read_data[37])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch5_6_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[52])[2:]
                                + ("0x%02x" % ch5_read_data[53])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch5_6_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[68])[2:]
                                + ("0x%02x" % ch5_read_data[69])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch5_6_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[84])[2:]
                                + ("0x%02x" % ch5_read_data[85])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch5_6_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[100])[2:]
                                + ("0x%02x" % ch5_read_data[101])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch5_6_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[116])[2:]
                                + ("0x%02x" % ch5_read_data[117])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                ch5_7_data[2] = int(hex(ch5_read_data[8])[2:])
                if not ch5_7_start_signal:
                    if (
                        ch5_7_error_data == "过压报警"
                        or ch5_7_error_data == "低压报警"
                        or ch5_7_error_data == "过流报警"
                        or ch5_7_error_data == "过温报警"
                        or ch5_7_error_data == "电池脱落或被保护"
                        or ch5_7_error_data == "电池不充电报警"
                        or ch5_7_error_data == "测试完成"
                        or ch5_7_error_data == "容量不足"
                        or ch5_7_error_data == "NTC温度异常"
                    ):
                        ch5_7_data[2] = ch5_7_error_data
                    elif ch5_7_data[2] == 0:
                        ch5_7_data[2] = "待机状态"
                    elif ch5_7_data[2] == 1:
                        ch5_7_data[2] = "放电状态"
                    elif ch5_7_data[2] == 2:
                        ch5_7_data[2] = "充电状态"
                    elif ch5_7_data[2] == 3:
                        ch5_7_data[2] = "测试完成"
                    elif ch5_7_data[2] == 4:
                        ch5_7_data[2] = "过压报警"
                    elif ch5_7_data[2] == 5:
                        ch5_7_data[2] = "低压报警"
                    elif ch5_7_data[2] == 6:
                        ch5_7_data[2] = "过流报警"
                    elif ch5_7_data[2] == 7:
                        ch5_7_data[2] = "过温报警"
                    elif ch5_7_data[2] == 8:
                        ch5_7_data[2] = "电池脱落或被保护"
                    elif ch5_7_data[2] == 9:
                        ch5_7_data[2] = "电池不充电报警"
                    else:
                        ch5_7_data[2] = "通信异常"

                    ch5_7_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[22])[2:]
                                + ("0x%02x" % ch5_read_data[23])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch5_7_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[38])[2:]
                                + ("0x%02x" % ch5_read_data[39])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch5_7_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[54])[2:]
                                + ("0x%02x" % ch5_read_data[55])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch5_7_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[70])[2:]
                                + ("0x%02x" % ch5_read_data[71])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch5_7_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[86])[2:]
                                + ("0x%02x" % ch5_read_data[87])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch5_7_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[102])[2:]
                                + ("0x%02x" % ch5_read_data[103])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch5_7_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[118])[2:]
                                + ("0x%02x" % ch5_read_data[119])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                if ch5_7_start_signal:
                    if ch5_7_data[2] == 0:
                        ch5_7_data[2] = "待机状态"
                    elif ch5_7_data[2] == 1:
                        ch5_7_data[2] = "放电状态"
                    elif ch5_7_data[2] == 2:
                        ch5_7_data[2] = "充电状态"
                    elif ch5_7_data[2] == 3:
                        ch5_7_data[2] = "测试完成"
                    elif ch5_7_data[2] == 4:
                        ch5_7_data[2] = "过压报警"
                    elif ch5_7_data[2] == 5:
                        ch5_7_data[2] = "低压报警"
                    elif ch5_7_data[2] == 6:
                        ch5_7_data[2] = "过流报警"
                    elif ch5_7_data[2] == 7:
                        ch5_7_data[2] = "过温报警"
                    elif ch5_7_data[2] == 8:
                        ch5_7_data[2] = "电池脱落或被保护"
                    elif ch5_7_data[2] == 9:
                        ch5_7_data[2] = "电池不充电报警"
                    else:
                        ch5_7_data[2] = "通信异常"

                    ch5_7_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[22])[2:]
                                + ("0x%02x" % ch5_read_data[23])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch5_7_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[38])[2:]
                                + ("0x%02x" % ch5_read_data[39])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch5_7_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[54])[2:]
                                + ("0x%02x" % ch5_read_data[55])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch5_7_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[70])[2:]
                                + ("0x%02x" % ch5_read_data[71])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch5_7_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[86])[2:]
                                + ("0x%02x" % ch5_read_data[87])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch5_7_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[102])[2:]
                                + ("0x%02x" % ch5_read_data[103])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch5_7_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[118])[2:]
                                + ("0x%02x" % ch5_read_data[119])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                ch5_8_data[2] = int(hex(ch5_read_data[9])[2:])
                if not ch5_8_start_signal:
                    if (
                        ch5_8_error_data == "过压报警"
                        or ch5_8_error_data == "低压报警"
                        or ch5_8_error_data == "过流报警"
                        or ch5_8_error_data == "过温报警"
                        or ch5_8_error_data == "电池脱落或被保护"
                        or ch5_8_error_data == "电池不充电报警"
                        or ch5_8_error_data == "测试完成"
                        or ch5_8_error_data == "容量不足"
                        or ch5_8_error_data == "NTC温度异常"
                    ):
                        ch5_8_data[2] = ch5_8_error_data
                    elif ch5_8_data[2] == 0:
                        ch5_8_data[2] = "待机状态"
                    elif ch5_8_data[2] == 1:
                        ch5_8_data[2] = "放电状态"
                    elif ch5_8_data[2] == 2:
                        ch5_8_data[2] = "充电状态"
                    elif ch5_8_data[2] == 3:
                        ch5_8_data[2] = "测试完成"
                    elif ch5_8_data[2] == 4:
                        ch5_8_data[2] = "过压报警"
                    elif ch5_8_data[2] == 5:
                        ch5_8_data[2] = "低压报警"
                    elif ch5_8_data[2] == 6:
                        ch5_8_data[2] = "过流报警"
                    elif ch5_8_data[2] == 7:
                        ch5_8_data[2] = "过温报警"
                    elif ch5_8_data[2] == 8:
                        ch5_8_data[2] = "电池脱落或被保护"
                    elif ch5_8_data[2] == 9:
                        ch5_8_data[2] = "电池不充电报警"
                    else:
                        ch5_8_data[2] = "通信异常"

                    ch5_8_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[24])[2:]
                                + ("0x%02x" % ch5_read_data[25])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch5_8_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[40])[2:]
                                + ("0x%02x" % ch5_read_data[41])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch5_8_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[56])[2:]
                                + ("0x%02x" % ch5_read_data[57])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch5_8_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[72])[2:]
                                + ("0x%02x" % ch5_read_data[73])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch5_8_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[88])[2:]
                                + ("0x%02x" % ch5_read_data[89])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch5_8_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[104])[2:]
                                + ("0x%02x" % ch5_read_data[105])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch5_8_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[120])[2:]
                                + ("0x%02x" % ch5_read_data[121])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                if ch5_8_start_signal:
                    if ch5_8_data[2] == 0:
                        ch5_8_data[2] = "待机状态"
                    elif ch5_8_data[2] == 1:
                        ch5_8_data[2] = "放电状态"
                    elif ch5_8_data[2] == 2:
                        ch5_8_data[2] = "充电状态"
                    elif ch5_8_data[2] == 3:
                        ch5_8_data[2] = "测试完成"
                    elif ch5_8_data[2] == 4:
                        ch5_8_data[2] = "过压报警"
                    elif ch5_8_data[2] == 5:
                        ch5_8_data[2] = "低压报警"
                    elif ch5_8_data[2] == 6:
                        ch5_8_data[2] = "过流报警"
                    elif ch5_8_data[2] == 7:
                        ch5_8_data[2] = "过温报警"
                    elif ch5_8_data[2] == 8:
                        ch5_8_data[2] = "电池脱落或被保护"
                    elif ch5_8_data[2] == 9:
                        ch5_8_data[2] = "电池不充电报警"
                    else:
                        ch5_8_data[2] = "通信异常"

                    ch5_8_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[24])[2:]
                                + ("0x%02x" % ch5_read_data[25])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch5_8_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[40])[2:]
                                + ("0x%02x" % ch5_read_data[41])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch5_8_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[56])[2:]
                                + ("0x%02x" % ch5_read_data[57])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch5_8_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[72])[2:]
                                + ("0x%02x" % ch5_read_data[73])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch5_8_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[88])[2:]
                                + ("0x%02x" % ch5_read_data[89])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch5_8_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[104])[2:]
                                + ("0x%02x" % ch5_read_data[105])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch5_8_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data[120])[2:]
                                + ("0x%02x" % ch5_read_data[121])[2:],
                                16,
                            )
                        )
                        / 10
                    )

        if (
            ch6_1_signal == 1
            or ch6_2_signal == 1
            or ch6_3_signal == 1
            or ch6_4_signal == 1
            or ch6_5_signal == 1
            or ch6_6_signal == 1
            or ch6_7_signal == 1
            or ch6_8_signal == 1
        ):
            ch6_readcommend = "060300000000A5"
            ### 加锁读取数据
            ### 数据处理
            mutex.acquire()
            ch6_read_data = ser.readdata(com, ch6_readcommend)
            mutex.release()

            if ch6_read_data == "FF":
                ch6_1_data[2] = "通信异常"
                ch6_2_data[2] = "通信异常"
                ch6_3_data[2] = "通信异常"
                ch6_4_data[2] = "通信异常"
                ch6_5_data[2] = "通信异常"
                ch6_6_data[2] = "通信异常"
                ch6_7_data[2] = "通信异常"
                ch6_8_data[2] = "通信异常"
                # stop_test("ch6_1")
                # stop_test("ch6_2")
                # stop_test("ch6_3")
                # stop_test("ch6_4")
                # stop_test("ch6_5")
                # stop_test("ch6_6")
                # stop_test("ch6_7")
                # stop_test("ch6_8")

            else:
                ch6_1_data[2] = int(hex(ch6_read_data[2])[2:])

                if not ch6_1_start_signal:
                    if (
                        ch6_1_error_data == "过压报警"
                        or ch6_1_error_data == "低压报警"
                        or ch6_1_error_data == "过流报警"
                        or ch6_1_error_data == "过温报警"
                        or ch6_1_error_data == "电池脱落或被保护"
                        or ch6_1_error_data == "电池不充电报警"
                        or ch6_1_error_data == "测试完成"
                        or ch6_1_error_data == "容量不足"
                        or ch6_1_error_data == "NTC温度异常"
                    ):
                        ch6_1_data[2] = ch6_1_error_data
                    elif ch6_1_data[2] == 0:
                        ch6_1_data[2] = "待机状态"
                    elif ch6_1_data[2] == 1:
                        ch6_1_data[2] = "放电状态"
                    elif ch6_1_data[2] == 2:
                        ch6_1_data[2] = "充电状态"
                    elif ch6_1_data[2] == 3:
                        ch6_1_data[2] = "测试完成"
                    elif ch6_1_data[2] == 4:
                        ch6_1_data[2] = "过压报警"
                    elif ch6_1_data[2] == 5:
                        ch6_1_data[2] = "低压报警"
                    elif ch6_1_data[2] == 6:
                        ch6_1_data[2] = "过流报警"
                    elif ch6_1_data[2] == 7:
                        ch6_1_data[2] = "过温报警"
                    elif ch6_1_data[2] == 8:
                        ch6_1_data[2] = "电池脱落或被保护"
                    elif ch6_1_data[2] == 9:
                        ch6_1_data[2] = "电池不充电报警"
                    else:
                        ch6_1_data[2] = "通信异常"

                    ch6_1_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[10])[2:]
                                + ("0x%02x" % ch6_read_data[11])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch6_1_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[26])[2:]
                                + ("0x%02x" % ch6_read_data[27])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch6_1_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[42])[2:]
                                + ("0x%02x" % ch6_read_data[43])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch6_1_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[58])[2:]
                                + ("0x%02x" % ch6_read_data[59])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch6_1_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[74])[2:]
                                + ("0x%02x" % ch6_read_data[75])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch6_1_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[90])[2:]
                                + ("0x%02x" % ch6_read_data[91])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch6_1_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[106])[2:]
                                + ("0x%02x" % ch6_read_data[107])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                if ch6_1_start_signal:
                    if ch6_1_data[2] == 0:
                        ch6_1_data[2] = "待机状态"
                    elif ch6_1_data[2] == 1:
                        ch6_1_data[2] = "放电状态"
                    elif ch6_1_data[2] == 2:
                        ch6_1_data[2] = "充电状态"
                    elif ch6_1_data[2] == 3:
                        ch6_1_data[2] = "测试完成"
                    elif ch6_1_data[2] == 4:
                        ch6_1_data[2] = "过压报警"
                    elif ch6_1_data[2] == 5:
                        ch6_1_data[2] = "低压报警"
                    elif ch6_1_data[2] == 6:
                        ch6_1_data[2] = "过流报警"
                    elif ch6_1_data[2] == 7:
                        ch6_1_data[2] = "过温报警"
                    elif ch6_1_data[2] == 8:
                        ch6_1_data[2] = "电池脱落或被保护"
                    elif ch6_1_data[2] == 9:
                        ch6_1_data[2] = "电池不充电报警"
                    else:
                        ch6_1_data[2] = "通信异常"

                    ch6_1_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[10])[2:]
                                + ("0x%02x" % ch6_read_data[11])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch6_1_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[26])[2:]
                                + ("0x%02x" % ch6_read_data[27])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch6_1_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[42])[2:]
                                + ("0x%02x" % ch6_read_data[43])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch6_1_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[58])[2:]
                                + ("0x%02x" % ch6_read_data[59])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch6_1_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[74])[2:]
                                + ("0x%02x" % ch6_read_data[75])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch6_1_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[90])[2:]
                                + ("0x%02x" % ch6_read_data[91])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch6_1_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[106])[2:]
                                + ("0x%02x" % ch6_read_data[107])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                ch6_2_data[2] = int(hex(ch6_read_data[3])[2:])
                if not ch6_2_start_signal:
                    if (
                        ch6_2_error_data == "过压报警"
                        or ch6_2_error_data == "低压报警"
                        or ch6_2_error_data == "过流报警"
                        or ch6_2_error_data == "过温报警"
                        or ch6_2_error_data == "电池脱落或被保护"
                        or ch6_2_error_data == "电池不充电报警"
                        or ch6_2_error_data == "测试完成"
                        or ch6_2_error_data == "容量不足"
                        or ch6_2_error_data == "NTC温度异常"
                    ):
                        ch6_2_data[2] = ch6_2_error_data
                    elif ch6_2_data[2] == 0:
                        ch6_2_data[2] = "待机状态"
                    elif ch6_2_data[2] == 1:
                        ch6_2_data[2] = "放电状态"
                    elif ch6_2_data[2] == 2:
                        ch6_2_data[2] = "充电状态"
                    elif ch6_2_data[2] == 3:
                        ch6_2_data[2] = "测试完成"
                    elif ch6_2_data[2] == 4:
                        ch6_2_data[2] = "过压报警"
                    elif ch6_2_data[2] == 5:
                        ch6_2_data[2] = "低压报警"
                    elif ch6_2_data[2] == 6:
                        ch6_2_data[2] = "过流报警"
                    elif ch6_2_data[2] == 7:
                        ch6_2_data[2] = "过温报警"
                    elif ch6_2_data[2] == 8:
                        ch6_2_data[2] = "电池脱落或被保护"
                    elif ch6_2_data[2] == 9:
                        ch6_2_data[2] = "电池不充电报警"
                    else:
                        ch6_2_data[2] = "通信异常"

                    ch6_2_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[12])[2:]
                                + ("0x%02x" % ch6_read_data[13])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch6_2_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[28])[2:]
                                + ("0x%02x" % ch6_read_data[29])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch6_2_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[44])[2:]
                                + ("0x%02x" % ch6_read_data[45])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch6_2_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[60])[2:]
                                + ("0x%02x" % ch6_read_data[61])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch6_2_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[76])[2:]
                                + ("0x%02x" % ch6_read_data[77])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch6_2_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[92])[2:]
                                + ("0x%02x" % ch6_read_data[93])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch6_2_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[108])[2:]
                                + ("0x%02x" % ch6_read_data[109])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                if ch6_2_start_signal:
                    if ch6_2_data[2] == 0:
                        ch6_2_data[2] = "待机状态"
                    elif ch6_2_data[2] == 1:
                        ch6_2_data[2] = "放电状态"
                    elif ch6_2_data[2] == 2:
                        ch6_2_data[2] = "充电状态"
                    elif ch6_2_data[2] == 3:
                        ch6_2_data[2] = "测试完成"
                    elif ch6_2_data[2] == 4:
                        ch6_2_data[2] = "过压报警"
                    elif ch6_2_data[2] == 5:
                        ch6_2_data[2] = "低压报警"
                    elif ch6_2_data[2] == 6:
                        ch6_2_data[2] = "过流报警"
                    elif ch6_2_data[2] == 7:
                        ch6_2_data[2] = "过温报警"
                    elif ch6_2_data[2] == 8:
                        ch6_2_data[2] = "电池脱落或被保护"
                    elif ch6_2_data[2] == 9:
                        ch6_2_data[2] = "电池不充电报警"
                    else:
                        ch6_2_data[2] = "通信异常"

                    ch6_2_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[12])[2:]
                                + ("0x%02x" % ch6_read_data[13])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch6_2_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[28])[2:]
                                + ("0x%02x" % ch6_read_data[29])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch6_2_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[44])[2:]
                                + ("0x%02x" % ch6_read_data[45])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch6_2_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[60])[2:]
                                + ("0x%02x" % ch6_read_data[61])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch6_2_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[76])[2:]
                                + ("0x%02x" % ch6_read_data[77])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch6_2_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[92])[2:]
                                + ("0x%02x" % ch6_read_data[93])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch6_2_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[108])[2:]
                                + ("0x%02x" % ch6_read_data[109])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                ch6_3_data[2] = int(hex(ch6_read_data[4])[2:])
                if not ch6_3_start_signal:
                    if (
                        ch6_3_error_data == "过压报警"
                        or ch6_3_error_data == "低压报警"
                        or ch6_3_error_data == "过流报警"
                        or ch6_3_error_data == "过温报警"
                        or ch6_3_error_data == "电池脱落或被保护"
                        or ch6_3_error_data == "电池不充电报警"
                        or ch6_3_error_data == "测试完成"
                        or ch6_3_error_data == "容量不足"
                        or ch6_3_error_data == "NTC温度异常"
                    ):
                        ch6_3_data[2] = ch6_3_error_data
                    elif ch6_3_data[2] == 0:
                        ch6_3_data[2] = "待机状态"
                    elif ch6_3_data[2] == 1:
                        ch6_3_data[2] = "放电状态"
                    elif ch6_3_data[2] == 2:
                        ch6_3_data[2] = "充电状态"
                    elif ch6_3_data[2] == 3:
                        ch6_3_data[2] = "测试完成"
                    elif ch6_3_data[2] == 4:
                        ch6_3_data[2] = "过压报警"
                    elif ch6_3_data[2] == 5:
                        ch6_3_data[2] = "低压报警"
                    elif ch6_3_data[2] == 6:
                        ch6_3_data[2] = "过流报警"
                    elif ch6_3_data[2] == 7:
                        ch6_3_data[2] = "过温报警"
                    elif ch6_3_data[2] == 8:
                        ch6_3_data[2] = "电池脱落或被保护"
                    elif ch6_3_data[2] == 9:
                        ch6_3_data[2] = "电池不充电报警"
                    else:
                        ch6_3_data[2] = "通信异常"

                    ch6_3_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[14])[2:]
                                + ("0x%02x" % ch6_read_data[15])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch6_3_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[30])[2:]
                                + ("0x%02x" % ch6_read_data[31])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch6_3_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[46])[2:]
                                + ("0x%02x" % ch6_read_data[47])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch6_3_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[62])[2:]
                                + ("0x%02x" % ch6_read_data[63])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch6_3_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[78])[2:]
                                + ("0x%02x" % ch6_read_data[79])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch6_3_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[94])[2:]
                                + ("0x%02x" % ch6_read_data[95])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch6_3_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[110])[2:]
                                + ("0x%02x" % ch6_read_data[111])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                if ch6_3_start_signal:
                    if ch6_3_data[2] == 0:
                        ch6_3_data[2] = "待机状态"
                    elif ch6_3_data[2] == 1:
                        ch6_3_data[2] = "放电状态"
                    elif ch6_3_data[2] == 2:
                        ch6_3_data[2] = "充电状态"
                    elif ch6_3_data[2] == 3:
                        ch6_3_data[2] = "测试完成"
                    elif ch6_3_data[2] == 4:
                        ch6_3_data[2] = "过压报警"
                    elif ch6_3_data[2] == 5:
                        ch6_3_data[2] = "低压报警"
                    elif ch6_3_data[2] == 6:
                        ch6_3_data[2] = "过流报警"
                    elif ch6_3_data[2] == 7:
                        ch6_3_data[2] = "过温报警"
                    elif ch6_3_data[2] == 8:
                        ch6_3_data[2] = "电池脱落或被保护"
                    elif ch6_3_data[2] == 9:
                        ch6_3_data[2] = "电池不充电报警"
                    else:
                        ch6_3_data[2] = "通信异常"

                    ch6_3_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[14])[2:]
                                + ("0x%02x" % ch6_read_data[15])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch6_3_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[30])[2:]
                                + ("0x%02x" % ch6_read_data[31])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch6_3_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[46])[2:]
                                + ("0x%02x" % ch6_read_data[47])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch6_3_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[62])[2:]
                                + ("0x%02x" % ch6_read_data[63])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch6_3_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[78])[2:]
                                + ("0x%02x" % ch6_read_data[79])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch6_3_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[94])[2:]
                                + ("0x%02x" % ch6_read_data[95])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch6_3_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[110])[2:]
                                + ("0x%02x" % ch6_read_data[111])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                ch6_4_data[2] = int(hex(ch6_read_data[5])[2:])
                if not ch6_4_start_signal:
                    if (
                        ch6_4_error_data == "过压报警"
                        or ch6_4_error_data == "低压报警"
                        or ch6_4_error_data == "过流报警"
                        or ch6_4_error_data == "过温报警"
                        or ch6_4_error_data == "电池脱落或被保护"
                        or ch6_4_error_data == "电池不充电报警"
                        or ch6_4_error_data == "测试完成"
                        or ch6_4_error_data == "容量不足"
                        or ch6_4_error_data == "NTC温度异常"
                    ):
                        ch6_4_data[2] = ch6_4_error_data
                    elif ch6_4_data[2] == 0:
                        ch6_4_data[2] = "待机状态"
                    elif ch6_4_data[2] == 1:
                        ch6_4_data[2] = "放电状态"
                    elif ch6_4_data[2] == 2:
                        ch6_4_data[2] = "充电状态"
                    elif ch6_4_data[2] == 3:
                        ch6_4_data[2] = "测试完成"
                    elif ch6_4_data[2] == 4:
                        ch6_4_data[2] = "过压报警"
                    elif ch6_4_data[2] == 5:
                        ch6_4_data[2] = "低压报警"
                    elif ch6_4_data[2] == 6:
                        ch6_4_data[2] = "过流报警"
                    elif ch6_4_data[2] == 7:
                        ch6_4_data[2] = "过温报警"
                    elif ch6_4_data[2] == 8:
                        ch6_4_data[2] = "电池脱落或被保护"
                    elif ch6_4_data[2] == 9:
                        ch6_4_data[2] = "电池不充电报警"
                    else:
                        ch6_4_data[2] = "通信异常"

                    ch6_4_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[16])[2:]
                                + ("0x%02x" % ch6_read_data[17])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch6_4_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[32])[2:]
                                + ("0x%02x" % ch6_read_data[33])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch6_4_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[48])[2:]
                                + ("0x%02x" % ch6_read_data[49])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch6_4_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[64])[2:]
                                + ("0x%02x" % ch6_read_data[65])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch6_4_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[80])[2:]
                                + ("0x%02x" % ch6_read_data[81])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch6_4_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[96])[2:]
                                + ("0x%02x" % ch6_read_data[97])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch6_4_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[112])[2:]
                                + ("0x%02x" % ch6_read_data[113])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                if ch6_4_start_signal:
                    if ch6_4_data[2] == 0:
                        ch6_4_data[2] = "待机状态"
                    elif ch6_4_data[2] == 1:
                        ch6_4_data[2] = "放电状态"
                    elif ch6_4_data[2] == 2:
                        ch6_4_data[2] = "充电状态"
                    elif ch6_4_data[2] == 3:
                        ch6_4_data[2] = "测试完成"
                    elif ch6_4_data[2] == 4:
                        ch6_4_data[2] = "过压报警"
                    elif ch6_4_data[2] == 5:
                        ch6_4_data[2] = "低压报警"
                    elif ch6_4_data[2] == 6:
                        ch6_4_data[2] = "过流报警"
                    elif ch6_4_data[2] == 7:
                        ch6_4_data[2] = "过温报警"
                    elif ch6_4_data[2] == 8:
                        ch6_4_data[2] = "电池脱落或被保护"
                    elif ch6_4_data[2] == 9:
                        ch6_4_data[2] = "电池不充电报警"
                    else:
                        ch6_4_data[2] = "通信异常"

                    ch6_4_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[16])[2:]
                                + ("0x%02x" % ch6_read_data[17])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch6_4_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[32])[2:]
                                + ("0x%02x" % ch6_read_data[33])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch6_4_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[48])[2:]
                                + ("0x%02x" % ch6_read_data[49])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch6_4_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[64])[2:]
                                + ("0x%02x" % ch6_read_data[65])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch6_4_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[80])[2:]
                                + ("0x%02x" % ch6_read_data[81])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch6_4_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[96])[2:]
                                + ("0x%02x" % ch6_read_data[97])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch6_4_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[112])[2:]
                                + ("0x%02x" % ch6_read_data[113])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                ch6_5_data[2] = int(hex(ch6_read_data[6])[2:])
                if not ch6_5_start_signal:
                    if (
                        ch6_5_error_data == "过压报警"
                        or ch6_5_error_data == "低压报警"
                        or ch6_5_error_data == "过流报警"
                        or ch6_5_error_data == "过温报警"
                        or ch6_5_error_data == "电池脱落或被保护"
                        or ch6_5_error_data == "电池不充电报警"
                        or ch6_5_error_data == "测试完成"
                        or ch6_5_error_data == "容量不足"
                        or ch6_5_error_data == "NTC温度异常"
                    ):
                        ch6_5_data[2] = ch6_5_error_data
                    elif ch6_5_data[2] == 0:
                        ch6_5_data[2] = "待机状态"
                    elif ch6_5_data[2] == 1:
                        ch6_5_data[2] = "放电状态"
                    elif ch6_5_data[2] == 2:
                        ch6_5_data[2] = "充电状态"
                    elif ch6_5_data[2] == 3:
                        ch6_5_data[2] = "测试完成"
                    elif ch6_5_data[2] == 4:
                        ch6_5_data[2] = "过压报警"
                    elif ch6_5_data[2] == 5:
                        ch6_5_data[2] = "低压报警"
                    elif ch6_5_data[2] == 6:
                        ch6_5_data[2] = "过流报警"
                    elif ch6_5_data[2] == 7:
                        ch6_5_data[2] = "过温报警"
                    elif ch6_5_data[2] == 8:
                        ch6_5_data[2] = "电池脱落或被保护"
                    elif ch6_5_data[2] == 9:
                        ch6_5_data[2] = "电池不充电报警"
                    else:
                        ch6_5_data[2] = "通信异常"

                    ch6_5_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[18])[2:]
                                + ("0x%02x" % ch6_read_data[19])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch6_5_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[34])[2:]
                                + ("0x%02x" % ch6_read_data[35])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch6_5_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[50])[2:]
                                + ("0x%02x" % ch6_read_data[51])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch6_5_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[66])[2:]
                                + ("0x%02x" % ch6_read_data[67])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch6_5_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[82])[2:]
                                + ("0x%02x" % ch6_read_data[83])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch6_5_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[98])[2:]
                                + ("0x%02x" % ch6_read_data[99])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch6_5_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[114])[2:]
                                + ("0x%02x" % ch6_read_data[115])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                if ch6_5_start_signal:
                    if ch6_5_data[2] == 0:
                        ch6_5_data[2] = "待机状态"
                    elif ch6_5_data[2] == 1:
                        ch6_5_data[2] = "放电状态"
                    elif ch6_5_data[2] == 2:
                        ch6_5_data[2] = "充电状态"
                    elif ch6_5_data[2] == 3:
                        ch6_5_data[2] = "测试完成"
                    elif ch6_5_data[2] == 4:
                        ch6_5_data[2] = "过压报警"
                    elif ch6_5_data[2] == 5:
                        ch6_5_data[2] = "低压报警"
                    elif ch6_5_data[2] == 6:
                        ch6_5_data[2] = "过流报警"
                    elif ch6_5_data[2] == 7:
                        ch6_5_data[2] = "过温报警"
                    elif ch6_5_data[2] == 8:
                        ch6_5_data[2] = "电池脱落或被保护"
                    elif ch6_5_data[2] == 9:
                        ch6_5_data[2] = "电池不充电报警"
                    else:
                        ch6_5_data[2] = "通信异常"

                    ch6_5_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[18])[2:]
                                + ("0x%02x" % ch6_read_data[19])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch6_5_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[34])[2:]
                                + ("0x%02x" % ch6_read_data[35])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch6_5_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[50])[2:]
                                + ("0x%02x" % ch6_read_data[51])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch6_5_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[66])[2:]
                                + ("0x%02x" % ch6_read_data[67])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch6_5_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[82])[2:]
                                + ("0x%02x" % ch6_read_data[83])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch6_5_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[98])[2:]
                                + ("0x%02x" % ch6_read_data[99])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch6_5_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[114])[2:]
                                + ("0x%02x" % ch6_read_data[115])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                ch6_6_data[2] = int(hex(ch6_read_data[7])[2:])
                if not ch6_6_start_signal:
                    if (
                        ch6_6_error_data == "过压报警"
                        or ch6_6_error_data == "低压报警"
                        or ch6_6_error_data == "过流报警"
                        or ch6_6_error_data == "过温报警"
                        or ch6_6_error_data == "电池脱落或被保护"
                        or ch6_6_error_data == "电池不充电报警"
                        or ch6_6_error_data == "测试完成"
                        or ch6_6_error_data == "容量不足"
                        or ch6_6_error_data == "NTC温度异常"
                    ):
                        ch6_6_data[2] = ch6_6_error_data
                    elif ch6_6_data[2] == 0:
                        ch6_6_data[2] = "待机状态"
                    elif ch6_6_data[2] == 1:
                        ch6_6_data[2] = "放电状态"
                    elif ch6_6_data[2] == 2:
                        ch6_6_data[2] = "充电状态"
                    elif ch6_6_data[2] == 3:
                        ch6_6_data[2] = "测试完成"
                    elif ch6_6_data[2] == 4:
                        ch6_6_data[2] = "过压报警"
                    elif ch6_6_data[2] == 5:
                        ch6_6_data[2] = "低压报警"
                    elif ch6_6_data[2] == 6:
                        ch6_6_data[2] = "过流报警"
                    elif ch6_6_data[2] == 7:
                        ch6_6_data[2] = "过温报警"
                    elif ch6_6_data[2] == 8:
                        ch6_6_data[2] = "电池脱落或被保护"
                    elif ch6_6_data[2] == 9:
                        ch6_6_data[2] = "电池不充电报警"
                    else:
                        ch6_6_data[2] = "通信异常"

                    ch6_6_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[20])[2:]
                                + ("0x%02x" % ch6_read_data[21])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch6_6_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[36])[2:]
                                + ("0x%02x" % ch6_read_data[37])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch6_6_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[52])[2:]
                                + ("0x%02x" % ch6_read_data[53])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch6_6_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[68])[2:]
                                + ("0x%02x" % ch6_read_data[69])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch6_6_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[84])[2:]
                                + ("0x%02x" % ch6_read_data[85])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch6_6_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[100])[2:]
                                + ("0x%02x" % ch6_read_data[101])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch6_6_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[116])[2:]
                                + ("0x%02x" % ch6_read_data[117])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                if ch6_6_start_signal:
                    if ch6_6_data[2] == 0:
                        ch6_6_data[2] = "待机状态"
                    elif ch6_6_data[2] == 1:
                        ch6_6_data[2] = "放电状态"
                    elif ch6_6_data[2] == 2:
                        ch6_6_data[2] = "充电状态"
                    elif ch6_6_data[2] == 3:
                        ch6_6_data[2] = "测试完成"
                    elif ch6_6_data[2] == 4:
                        ch6_6_data[2] = "过压报警"
                    elif ch6_6_data[2] == 5:
                        ch6_6_data[2] = "低压报警"
                    elif ch6_6_data[2] == 6:
                        ch6_6_data[2] = "过流报警"
                    elif ch6_6_data[2] == 7:
                        ch6_6_data[2] = "过温报警"
                    elif ch6_6_data[2] == 8:
                        ch6_6_data[2] = "电池脱落或被保护"
                    elif ch6_6_data[2] == 9:
                        ch6_6_data[2] = "电池不充电报警"
                    else:
                        ch6_6_data[2] = "通信异常"

                    ch6_6_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[20])[2:]
                                + ("0x%02x" % ch6_read_data[21])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch6_6_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[36])[2:]
                                + ("0x%02x" % ch6_read_data[37])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch6_6_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[52])[2:]
                                + ("0x%02x" % ch6_read_data[53])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch6_6_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[68])[2:]
                                + ("0x%02x" % ch6_read_data[69])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch6_6_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[84])[2:]
                                + ("0x%02x" % ch6_read_data[85])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch6_6_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[100])[2:]
                                + ("0x%02x" % ch6_read_data[101])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch6_6_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[116])[2:]
                                + ("0x%02x" % ch6_read_data[117])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                ch6_7_data[2] = int(hex(ch6_read_data[8])[2:])
                if not ch6_7_start_signal:
                    if (
                        ch6_7_error_data == "过压报警"
                        or ch6_7_error_data == "低压报警"
                        or ch6_7_error_data == "过流报警"
                        or ch6_7_error_data == "过温报警"
                        or ch6_7_error_data == "电池脱落或被保护"
                        or ch6_7_error_data == "电池不充电报警"
                        or ch6_7_error_data == "测试完成"
                        or ch6_7_error_data == "容量不足"
                        or ch6_7_error_data == "NTC温度异常"
                    ):
                        ch6_7_data[2] = ch6_7_error_data
                    elif ch6_7_data[2] == 0:
                        ch6_7_data[2] = "待机状态"
                    elif ch6_7_data[2] == 1:
                        ch6_7_data[2] = "放电状态"
                    elif ch6_7_data[2] == 2:
                        ch6_7_data[2] = "充电状态"
                    elif ch6_7_data[2] == 3:
                        ch6_7_data[2] = "测试完成"
                    elif ch6_7_data[2] == 4:
                        ch6_7_data[2] = "过压报警"
                    elif ch6_7_data[2] == 5:
                        ch6_7_data[2] = "低压报警"
                    elif ch6_7_data[2] == 6:
                        ch6_7_data[2] = "过流报警"
                    elif ch6_7_data[2] == 7:
                        ch6_7_data[2] = "过温报警"
                    elif ch6_7_data[2] == 8:
                        ch6_7_data[2] = "电池脱落或被保护"
                    elif ch6_7_data[2] == 9:
                        ch6_7_data[2] = "电池不充电报警"
                    else:
                        ch6_7_data[2] = "通信异常"

                    ch6_7_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[22])[2:]
                                + ("0x%02x" % ch6_read_data[23])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch6_7_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[38])[2:]
                                + ("0x%02x" % ch6_read_data[39])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch6_7_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[54])[2:]
                                + ("0x%02x" % ch6_read_data[55])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch6_7_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[70])[2:]
                                + ("0x%02x" % ch6_read_data[71])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch6_7_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[86])[2:]
                                + ("0x%02x" % ch6_read_data[87])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch6_7_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[102])[2:]
                                + ("0x%02x" % ch6_read_data[103])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch6_7_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[118])[2:]
                                + ("0x%02x" % ch6_read_data[119])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                if ch6_7_start_signal:
                    if ch6_7_data[2] == 0:
                        ch6_7_data[2] = "待机状态"
                    elif ch6_7_data[2] == 1:
                        ch6_7_data[2] = "放电状态"
                    elif ch6_7_data[2] == 2:
                        ch6_7_data[2] = "充电状态"
                    elif ch6_7_data[2] == 3:
                        ch6_7_data[2] = "测试完成"
                    elif ch6_7_data[2] == 4:
                        ch6_7_data[2] = "过压报警"
                    elif ch6_7_data[2] == 5:
                        ch6_7_data[2] = "低压报警"
                    elif ch6_7_data[2] == 6:
                        ch6_7_data[2] = "过流报警"
                    elif ch6_7_data[2] == 7:
                        ch6_7_data[2] = "过温报警"
                    elif ch6_7_data[2] == 8:
                        ch6_7_data[2] = "电池脱落或被保护"
                    elif ch6_7_data[2] == 9:
                        ch6_7_data[2] = "电池不充电报警"
                    else:
                        ch6_7_data[2] = "通信异常"

                    ch6_7_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[22])[2:]
                                + ("0x%02x" % ch6_read_data[23])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch6_7_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[38])[2:]
                                + ("0x%02x" % ch6_read_data[39])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch6_7_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[54])[2:]
                                + ("0x%02x" % ch6_read_data[55])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch6_7_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[70])[2:]
                                + ("0x%02x" % ch6_read_data[71])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch6_7_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[86])[2:]
                                + ("0x%02x" % ch6_read_data[87])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch6_7_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[102])[2:]
                                + ("0x%02x" % ch6_read_data[103])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch6_7_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[118])[2:]
                                + ("0x%02x" % ch6_read_data[119])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                ch6_8_data[2] = int(hex(ch6_read_data[9])[2:])
                if not ch6_8_start_signal:
                    if (
                        ch6_8_error_data == "过压报警"
                        or ch6_8_error_data == "低压报警"
                        or ch6_8_error_data == "过流报警"
                        or ch6_8_error_data == "过温报警"
                        or ch6_8_error_data == "电池脱落或被保护"
                        or ch6_8_error_data == "电池不充电报警"
                        or ch6_8_error_data == "测试完成"
                        or ch6_8_error_data == "容量不足"
                        or ch6_8_error_data == "NTC温度异常"
                    ):
                        ch6_8_data[2] = ch6_8_error_data
                    elif ch6_8_data[2] == 0:
                        ch6_8_data[2] = "待机状态"
                    elif ch6_8_data[2] == 1:
                        ch6_8_data[2] = "放电状态"
                    elif ch6_8_data[2] == 2:
                        ch6_8_data[2] = "充电状态"
                    elif ch6_8_data[2] == 3:
                        ch6_8_data[2] = "测试完成"
                    elif ch6_8_data[2] == 4:
                        ch6_8_data[2] = "过压报警"
                    elif ch6_8_data[2] == 5:
                        ch6_8_data[2] = "低压报警"
                    elif ch6_8_data[2] == 6:
                        ch6_8_data[2] = "过流报警"
                    elif ch6_8_data[2] == 7:
                        ch6_8_data[2] = "过温报警"
                    elif ch6_8_data[2] == 8:
                        ch6_8_data[2] = "电池脱落或被保护"
                    elif ch6_8_data[2] == 9:
                        ch6_8_data[2] = "电池不充电报警"
                    else:
                        ch6_8_data[2] = "通信异常"

                    ch6_8_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[24])[2:]
                                + ("0x%02x" % ch6_read_data[25])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch6_8_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[40])[2:]
                                + ("0x%02x" % ch6_read_data[41])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch6_8_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[56])[2:]
                                + ("0x%02x" % ch6_read_data[57])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch6_8_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[72])[2:]
                                + ("0x%02x" % ch6_read_data[73])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch6_8_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[88])[2:]
                                + ("0x%02x" % ch6_read_data[89])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch6_8_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[104])[2:]
                                + ("0x%02x" % ch6_read_data[105])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch6_8_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[120])[2:]
                                + ("0x%02x" % ch6_read_data[121])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                if ch6_8_start_signal:
                    if ch6_8_data[2] == 0:
                        ch6_8_data[2] = "待机状态"
                    elif ch6_8_data[2] == 1:
                        ch6_8_data[2] = "放电状态"
                    elif ch6_8_data[2] == 2:
                        ch6_8_data[2] = "充电状态"
                    elif ch6_8_data[2] == 3:
                        ch6_8_data[2] = "测试完成"
                    elif ch6_8_data[2] == 4:
                        ch6_8_data[2] = "过压报警"
                    elif ch6_8_data[2] == 5:
                        ch6_8_data[2] = "低压报警"
                    elif ch6_8_data[2] == 6:
                        ch6_8_data[2] = "过流报警"
                    elif ch6_8_data[2] == 7:
                        ch6_8_data[2] = "过温报警"
                    elif ch6_8_data[2] == 8:
                        ch6_8_data[2] = "电池脱落或被保护"
                    elif ch6_8_data[2] == 9:
                        ch6_8_data[2] = "电池不充电报警"
                    else:
                        ch6_8_data[2] = "通信异常"

                    ch6_8_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[24])[2:]
                                + ("0x%02x" % ch6_read_data[25])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch6_8_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[40])[2:]
                                + ("0x%02x" % ch6_read_data[41])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch6_8_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[56])[2:]
                                + ("0x%02x" % ch6_read_data[57])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch6_8_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[72])[2:]
                                + ("0x%02x" % ch6_read_data[73])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch6_8_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[88])[2:]
                                + ("0x%02x" % ch6_read_data[89])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch6_8_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[104])[2:]
                                + ("0x%02x" % ch6_read_data[105])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch6_8_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data[120])[2:]
                                + ("0x%02x" % ch6_read_data[121])[2:],
                                16,
                            )
                        )
                        / 10
                    )

        if (
            ch7_1_signal == 1
            or ch7_2_signal == 1
            or ch7_3_signal == 1
            or ch7_4_signal == 1
            or ch7_5_signal == 1
            or ch7_6_signal == 1
            or ch7_7_signal == 1
            or ch7_8_signal == 1
        ):
            ch7_readcommend = "070300000000A5"
            ### 加锁读取数据
            ### 数据处理
            mutex.acquire()
            ch7_read_data = ser.readdata(com, ch7_readcommend)
            mutex.release()

            if ch7_read_data == "FF":
                ch7_1_data[2] = "通信异常"
                ch7_2_data[2] = "通信异常"
                ch7_3_data[2] = "通信异常"
                ch7_4_data[2] = "通信异常"
                ch7_5_data[2] = "通信异常"
                ch7_6_data[2] = "通信异常"
                ch7_7_data[2] = "通信异常"
                ch7_8_data[2] = "通信异常"
                # stop_test("ch7_1")
                # stop_test("ch7_2")
                # stop_test("ch7_3")
                # stop_test("ch7_4")
                # stop_test("ch7_5")
                # stop_test("ch7_6")
                # stop_test("ch7_7")
                # stop_test("ch7_8")

            else:
                ch7_1_data[2] = int(hex(ch7_read_data[2])[2:])

                if not ch7_1_start_signal:
                    if (
                        ch7_1_error_data == "过压报警"
                        or ch7_1_error_data == "低压报警"
                        or ch7_1_error_data == "过流报警"
                        or ch7_1_error_data == "过温报警"
                        or ch7_1_error_data == "电池脱落或被保护"
                        or ch7_1_error_data == "电池不充电报警"
                        or ch7_1_error_data == "测试完成"
                        or ch7_1_error_data == "容量不足"
                        or ch7_1_error_data == "NTC温度异常"
                    ):
                        ch7_1_data[2] = ch7_1_error_data
                    elif ch7_1_data[2] == 0:
                        ch7_1_data[2] = "待机状态"
                    elif ch7_1_data[2] == 1:
                        ch7_1_data[2] = "放电状态"
                    elif ch7_1_data[2] == 2:
                        ch7_1_data[2] = "充电状态"
                    elif ch7_1_data[2] == 3:
                        ch7_1_data[2] = "测试完成"
                    elif ch7_1_data[2] == 4:
                        ch7_1_data[2] = "过压报警"
                    elif ch7_1_data[2] == 5:
                        ch7_1_data[2] = "低压报警"
                    elif ch7_1_data[2] == 6:
                        ch7_1_data[2] = "过流报警"
                    elif ch7_1_data[2] == 7:
                        ch7_1_data[2] = "过温报警"
                    elif ch7_1_data[2] == 8:
                        ch7_1_data[2] = "电池脱落或被保护"
                    elif ch7_1_data[2] == 9:
                        ch7_1_data[2] = "电池不充电报警"
                    else:
                        ch7_1_data[2] = "通信异常"

                    ch7_1_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[10])[2:]
                                + ("0x%02x" % ch7_read_data[11])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch7_1_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[26])[2:]
                                + ("0x%02x" % ch7_read_data[27])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch7_1_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[42])[2:]
                                + ("0x%02x" % ch7_read_data[43])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch7_1_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[58])[2:]
                                + ("0x%02x" % ch7_read_data[59])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch7_1_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[74])[2:]
                                + ("0x%02x" % ch7_read_data[75])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch7_1_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[90])[2:]
                                + ("0x%02x" % ch7_read_data[91])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch7_1_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[106])[2:]
                                + ("0x%02x" % ch7_read_data[107])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                if ch7_1_start_signal:
                    if ch7_1_data[2] == 0:
                        ch7_1_data[2] = "待机状态"
                    elif ch7_1_data[2] == 1:
                        ch7_1_data[2] = "放电状态"
                    elif ch7_1_data[2] == 2:
                        ch7_1_data[2] = "充电状态"
                    elif ch7_1_data[2] == 3:
                        ch7_1_data[2] = "测试完成"
                    elif ch7_1_data[2] == 4:
                        ch7_1_data[2] = "过压报警"
                    elif ch7_1_data[2] == 5:
                        ch7_1_data[2] = "低压报警"
                    elif ch7_1_data[2] == 6:
                        ch7_1_data[2] = "过流报警"
                    elif ch7_1_data[2] == 7:
                        ch7_1_data[2] = "过温报警"
                    elif ch7_1_data[2] == 8:
                        ch7_1_data[2] = "电池脱落或被保护"
                    elif ch7_1_data[2] == 9:
                        ch7_1_data[2] = "电池不充电报警"
                    else:
                        ch7_1_data[2] = "通信异常"

                    ch7_1_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[10])[2:]
                                + ("0x%02x" % ch7_read_data[11])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch7_1_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[26])[2:]
                                + ("0x%02x" % ch7_read_data[27])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch7_1_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[42])[2:]
                                + ("0x%02x" % ch7_read_data[43])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch7_1_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[58])[2:]
                                + ("0x%02x" % ch7_read_data[59])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch7_1_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[74])[2:]
                                + ("0x%02x" % ch7_read_data[75])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch7_1_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[90])[2:]
                                + ("0x%02x" % ch7_read_data[91])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch7_1_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[106])[2:]
                                + ("0x%02x" % ch7_read_data[107])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                ch7_2_data[2] = int(hex(ch7_read_data[3])[2:])
                if not ch7_2_start_signal:
                    if (
                        ch7_2_error_data == "过压报警"
                        or ch7_2_error_data == "低压报警"
                        or ch7_2_error_data == "过流报警"
                        or ch7_2_error_data == "过温报警"
                        or ch7_2_error_data == "电池脱落或被保护"
                        or ch7_2_error_data == "电池不充电报警"
                        or ch7_2_error_data == "测试完成"
                        or ch7_2_error_data == "容量不足"
                        or ch7_2_error_data == "NTC温度异常"
                    ):
                        ch7_2_data[2] = ch7_2_error_data
                    elif ch7_2_data[2] == 0:
                        ch7_2_data[2] = "待机状态"
                    elif ch7_2_data[2] == 1:
                        ch7_2_data[2] = "放电状态"
                    elif ch7_2_data[2] == 2:
                        ch7_2_data[2] = "充电状态"
                    elif ch7_2_data[2] == 3:
                        ch7_2_data[2] = "测试完成"
                    elif ch7_2_data[2] == 4:
                        ch7_2_data[2] = "过压报警"
                    elif ch7_2_data[2] == 5:
                        ch7_2_data[2] = "低压报警"
                    elif ch7_2_data[2] == 6:
                        ch7_2_data[2] = "过流报警"
                    elif ch7_2_data[2] == 7:
                        ch7_2_data[2] = "过温报警"
                    elif ch7_2_data[2] == 8:
                        ch7_2_data[2] = "电池脱落或被保护"
                    elif ch7_2_data[2] == 9:
                        ch7_2_data[2] = "电池不充电报警"
                    else:
                        ch7_2_data[2] = "通信异常"

                    ch7_2_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[12])[2:]
                                + ("0x%02x" % ch7_read_data[13])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch7_2_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[28])[2:]
                                + ("0x%02x" % ch7_read_data[29])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch7_2_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[44])[2:]
                                + ("0x%02x" % ch7_read_data[45])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch7_2_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[60])[2:]
                                + ("0x%02x" % ch7_read_data[61])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch7_2_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[76])[2:]
                                + ("0x%02x" % ch7_read_data[77])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch7_2_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[92])[2:]
                                + ("0x%02x" % ch7_read_data[93])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch7_2_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[108])[2:]
                                + ("0x%02x" % ch7_read_data[109])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                if ch7_2_start_signal:
                    if ch7_2_data[2] == 0:
                        ch7_2_data[2] = "待机状态"
                    elif ch7_2_data[2] == 1:
                        ch7_2_data[2] = "放电状态"
                    elif ch7_2_data[2] == 2:
                        ch7_2_data[2] = "充电状态"
                    elif ch7_2_data[2] == 3:
                        ch7_2_data[2] = "测试完成"
                    elif ch7_2_data[2] == 4:
                        ch7_2_data[2] = "过压报警"
                    elif ch7_2_data[2] == 5:
                        ch7_2_data[2] = "低压报警"
                    elif ch7_2_data[2] == 6:
                        ch7_2_data[2] = "过流报警"
                    elif ch7_2_data[2] == 7:
                        ch7_2_data[2] = "过温报警"
                    elif ch7_2_data[2] == 8:
                        ch7_2_data[2] = "电池脱落或被保护"
                    elif ch7_2_data[2] == 9:
                        ch7_2_data[2] = "电池不充电报警"
                    else:
                        ch7_2_data[2] = "通信异常"

                    ch7_2_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[12])[2:]
                                + ("0x%02x" % ch7_read_data[13])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch7_2_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[28])[2:]
                                + ("0x%02x" % ch7_read_data[29])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch7_2_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[44])[2:]
                                + ("0x%02x" % ch7_read_data[45])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch7_2_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[60])[2:]
                                + ("0x%02x" % ch7_read_data[61])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch7_2_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[76])[2:]
                                + ("0x%02x" % ch7_read_data[77])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch7_2_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[92])[2:]
                                + ("0x%02x" % ch7_read_data[93])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch7_2_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[108])[2:]
                                + ("0x%02x" % ch7_read_data[109])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                ch7_3_data[2] = int(hex(ch7_read_data[4])[2:])
                if not ch7_3_start_signal:
                    if (
                        ch7_3_error_data == "过压报警"
                        or ch7_3_error_data == "低压报警"
                        or ch7_3_error_data == "过流报警"
                        or ch7_3_error_data == "过温报警"
                        or ch7_3_error_data == "电池脱落或被保护"
                        or ch7_3_error_data == "电池不充电报警"
                        or ch7_3_error_data == "测试完成"
                        or ch7_3_error_data == "容量不足"
                        or ch7_3_error_data == "NTC温度异常"
                    ):
                        ch7_3_data[2] = ch7_3_error_data
                    elif ch7_3_data[2] == 0:
                        ch7_3_data[2] = "待机状态"
                    elif ch7_3_data[2] == 1:
                        ch7_3_data[2] = "放电状态"
                    elif ch7_3_data[2] == 2:
                        ch7_3_data[2] = "充电状态"
                    elif ch7_3_data[2] == 3:
                        ch7_3_data[2] = "测试完成"
                    elif ch7_3_data[2] == 4:
                        ch7_3_data[2] = "过压报警"
                    elif ch7_3_data[2] == 5:
                        ch7_3_data[2] = "低压报警"
                    elif ch7_3_data[2] == 6:
                        ch7_3_data[2] = "过流报警"
                    elif ch7_3_data[2] == 7:
                        ch7_3_data[2] = "过温报警"
                    elif ch7_3_data[2] == 8:
                        ch7_3_data[2] = "电池脱落或被保护"
                    elif ch7_3_data[2] == 9:
                        ch7_3_data[2] = "电池不充电报警"
                    else:
                        ch7_3_data[2] = "通信异常"

                    ch7_3_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[14])[2:]
                                + ("0x%02x" % ch7_read_data[15])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch7_3_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[30])[2:]
                                + ("0x%02x" % ch7_read_data[31])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch7_3_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[46])[2:]
                                + ("0x%02x" % ch7_read_data[47])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch7_3_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[62])[2:]
                                + ("0x%02x" % ch7_read_data[63])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch7_3_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[78])[2:]
                                + ("0x%02x" % ch7_read_data[79])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch7_3_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[94])[2:]
                                + ("0x%02x" % ch7_read_data[95])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch7_3_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[110])[2:]
                                + ("0x%02x" % ch7_read_data[111])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                if ch7_3_start_signal:
                    if ch7_3_data[2] == 0:
                        ch7_3_data[2] = "待机状态"
                    elif ch7_3_data[2] == 1:
                        ch7_3_data[2] = "放电状态"
                    elif ch7_3_data[2] == 2:
                        ch7_3_data[2] = "充电状态"
                    elif ch7_3_data[2] == 3:
                        ch7_3_data[2] = "测试完成"
                    elif ch7_3_data[2] == 4:
                        ch7_3_data[2] = "过压报警"
                    elif ch7_3_data[2] == 5:
                        ch7_3_data[2] = "低压报警"
                    elif ch7_3_data[2] == 6:
                        ch7_3_data[2] = "过流报警"
                    elif ch7_3_data[2] == 7:
                        ch7_3_data[2] = "过温报警"
                    elif ch7_3_data[2] == 8:
                        ch7_3_data[2] = "电池脱落或被保护"
                    elif ch7_3_data[2] == 9:
                        ch7_3_data[2] = "电池不充电报警"
                    else:
                        ch7_3_data[2] = "通信异常"

                    ch7_3_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[14])[2:]
                                + ("0x%02x" % ch7_read_data[15])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch7_3_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[30])[2:]
                                + ("0x%02x" % ch7_read_data[31])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch7_3_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[46])[2:]
                                + ("0x%02x" % ch7_read_data[47])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch7_3_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[62])[2:]
                                + ("0x%02x" % ch7_read_data[63])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch7_3_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[78])[2:]
                                + ("0x%02x" % ch7_read_data[79])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch7_3_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[94])[2:]
                                + ("0x%02x" % ch7_read_data[95])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch7_3_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[110])[2:]
                                + ("0x%02x" % ch7_read_data[111])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                ch7_4_data[2] = int(hex(ch7_read_data[5])[2:])
                if not ch7_4_start_signal:
                    if (
                        ch7_4_error_data == "过压报警"
                        or ch7_4_error_data == "低压报警"
                        or ch7_4_error_data == "过流报警"
                        or ch7_4_error_data == "过温报警"
                        or ch7_4_error_data == "电池脱落或被保护"
                        or ch7_4_error_data == "电池不充电报警"
                        or ch7_4_error_data == "测试完成"
                        or ch7_4_error_data == "容量不足"
                        or ch7_4_error_data == "NTC温度异常"
                    ):
                        ch7_4_data[2] = ch7_4_error_data
                    elif ch7_4_data[2] == 0:
                        ch7_4_data[2] = "待机状态"
                    elif ch7_4_data[2] == 1:
                        ch7_4_data[2] = "放电状态"
                    elif ch7_4_data[2] == 2:
                        ch7_4_data[2] = "充电状态"
                    elif ch7_4_data[2] == 3:
                        ch7_4_data[2] = "测试完成"
                    elif ch7_4_data[2] == 4:
                        ch7_4_data[2] = "过压报警"
                    elif ch7_4_data[2] == 5:
                        ch7_4_data[2] = "低压报警"
                    elif ch7_4_data[2] == 6:
                        ch7_4_data[2] = "过流报警"
                    elif ch7_4_data[2] == 7:
                        ch7_4_data[2] = "过温报警"
                    elif ch7_4_data[2] == 8:
                        ch7_4_data[2] = "电池脱落或被保护"
                    elif ch7_4_data[2] == 9:
                        ch7_4_data[2] = "电池不充电报警"
                    else:
                        ch7_4_data[2] = "通信异常"

                    ch7_4_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[16])[2:]
                                + ("0x%02x" % ch7_read_data[17])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch7_4_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[32])[2:]
                                + ("0x%02x" % ch7_read_data[33])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch7_4_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[48])[2:]
                                + ("0x%02x" % ch7_read_data[49])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch7_4_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[64])[2:]
                                + ("0x%02x" % ch7_read_data[65])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch7_4_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[80])[2:]
                                + ("0x%02x" % ch7_read_data[81])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch7_4_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[96])[2:]
                                + ("0x%02x" % ch7_read_data[97])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch7_4_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[112])[2:]
                                + ("0x%02x" % ch7_read_data[113])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                if ch7_4_start_signal:
                    if ch7_4_data[2] == 0:
                        ch7_4_data[2] = "待机状态"
                    elif ch7_4_data[2] == 1:
                        ch7_4_data[2] = "放电状态"
                    elif ch7_4_data[2] == 2:
                        ch7_4_data[2] = "充电状态"
                    elif ch7_4_data[2] == 3:
                        ch7_4_data[2] = "测试完成"
                    elif ch7_4_data[2] == 4:
                        ch7_4_data[2] = "过压报警"
                    elif ch7_4_data[2] == 5:
                        ch7_4_data[2] = "低压报警"
                    elif ch7_4_data[2] == 6:
                        ch7_4_data[2] = "过流报警"
                    elif ch7_4_data[2] == 7:
                        ch7_4_data[2] = "过温报警"
                    elif ch7_4_data[2] == 8:
                        ch7_4_data[2] = "电池脱落或被保护"
                    elif ch7_4_data[2] == 9:
                        ch7_4_data[2] = "电池不充电报警"
                    else:
                        ch7_4_data[2] = "通信异常"

                    ch7_4_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[16])[2:]
                                + ("0x%02x" % ch7_read_data[17])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch7_4_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[32])[2:]
                                + ("0x%02x" % ch7_read_data[33])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch7_4_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[48])[2:]
                                + ("0x%02x" % ch7_read_data[49])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch7_4_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[64])[2:]
                                + ("0x%02x" % ch7_read_data[65])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch7_4_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[80])[2:]
                                + ("0x%02x" % ch7_read_data[81])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch7_4_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[96])[2:]
                                + ("0x%02x" % ch7_read_data[97])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch7_4_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[112])[2:]
                                + ("0x%02x" % ch7_read_data[113])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                ch7_5_data[2] = int(hex(ch7_read_data[6])[2:])
                if not ch7_5_start_signal:
                    if (
                        ch7_5_error_data == "过压报警"
                        or ch7_5_error_data == "低压报警"
                        or ch7_5_error_data == "过流报警"
                        or ch7_5_error_data == "过温报警"
                        or ch7_5_error_data == "电池脱落或被保护"
                        or ch7_5_error_data == "电池不充电报警"
                        or ch7_5_error_data == "测试完成"
                        or ch7_5_error_data == "容量不足"
                        or ch7_5_error_data == "NTC温度异常"
                    ):
                        ch7_5_data[2] = ch7_5_error_data
                    elif ch7_5_data[2] == 0:
                        ch7_5_data[2] = "待机状态"
                    elif ch7_5_data[2] == 1:
                        ch7_5_data[2] = "放电状态"
                    elif ch7_5_data[2] == 2:
                        ch7_5_data[2] = "充电状态"
                    elif ch7_5_data[2] == 3:
                        ch7_5_data[2] = "测试完成"
                    elif ch7_5_data[2] == 4:
                        ch7_5_data[2] = "过压报警"
                    elif ch7_5_data[2] == 5:
                        ch7_5_data[2] = "低压报警"
                    elif ch7_5_data[2] == 6:
                        ch7_5_data[2] = "过流报警"
                    elif ch7_5_data[2] == 7:
                        ch7_5_data[2] = "过温报警"
                    elif ch7_5_data[2] == 8:
                        ch7_5_data[2] = "电池脱落或被保护"
                    elif ch7_5_data[2] == 9:
                        ch7_5_data[2] = "电池不充电报警"
                    else:
                        ch7_5_data[2] = "通信异常"

                    ch7_5_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[18])[2:]
                                + ("0x%02x" % ch7_read_data[19])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch7_5_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[34])[2:]
                                + ("0x%02x" % ch7_read_data[35])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch7_5_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[50])[2:]
                                + ("0x%02x" % ch7_read_data[51])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch7_5_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[66])[2:]
                                + ("0x%02x" % ch7_read_data[67])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch7_5_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[82])[2:]
                                + ("0x%02x" % ch7_read_data[83])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch7_5_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[98])[2:]
                                + ("0x%02x" % ch7_read_data[99])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch7_5_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[114])[2:]
                                + ("0x%02x" % ch7_read_data[115])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                if ch7_5_start_signal:
                    if ch7_5_data[2] == 0:
                        ch7_5_data[2] = "待机状态"
                    elif ch7_5_data[2] == 1:
                        ch7_5_data[2] = "放电状态"
                    elif ch7_5_data[2] == 2:
                        ch7_5_data[2] = "充电状态"
                    elif ch7_5_data[2] == 3:
                        ch7_5_data[2] = "测试完成"
                    elif ch7_5_data[2] == 4:
                        ch7_5_data[2] = "过压报警"
                    elif ch7_5_data[2] == 5:
                        ch7_5_data[2] = "低压报警"
                    elif ch7_5_data[2] == 6:
                        ch7_5_data[2] = "过流报警"
                    elif ch7_5_data[2] == 7:
                        ch7_5_data[2] = "过温报警"
                    elif ch7_5_data[2] == 8:
                        ch7_5_data[2] = "电池脱落或被保护"
                    elif ch7_5_data[2] == 9:
                        ch7_5_data[2] = "电池不充电报警"
                    else:
                        ch7_5_data[2] = "通信异常"

                    ch7_5_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[18])[2:]
                                + ("0x%02x" % ch7_read_data[19])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch7_5_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[34])[2:]
                                + ("0x%02x" % ch7_read_data[35])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch7_5_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[50])[2:]
                                + ("0x%02x" % ch7_read_data[51])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch7_5_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[66])[2:]
                                + ("0x%02x" % ch7_read_data[67])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch7_5_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[82])[2:]
                                + ("0x%02x" % ch7_read_data[83])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch7_5_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[98])[2:]
                                + ("0x%02x" % ch7_read_data[99])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch7_5_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[114])[2:]
                                + ("0x%02x" % ch7_read_data[115])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                ch7_6_data[2] = int(hex(ch7_read_data[7])[2:])
                if not ch7_6_start_signal:
                    if (
                        ch7_6_error_data == "过压报警"
                        or ch7_6_error_data == "低压报警"
                        or ch7_6_error_data == "过流报警"
                        or ch7_6_error_data == "过温报警"
                        or ch7_6_error_data == "电池脱落或被保护"
                        or ch7_6_error_data == "电池不充电报警"
                        or ch7_6_error_data == "测试完成"
                        or ch7_6_error_data == "容量不足"
                        or ch7_6_error_data == "NTC温度异常"
                    ):
                        ch7_6_data[2] = ch7_6_error_data
                    elif ch7_6_data[2] == 0:
                        ch7_6_data[2] = "待机状态"
                    elif ch7_6_data[2] == 1:
                        ch7_6_data[2] = "放电状态"
                    elif ch7_6_data[2] == 2:
                        ch7_6_data[2] = "充电状态"
                    elif ch7_6_data[2] == 3:
                        ch7_6_data[2] = "测试完成"
                    elif ch7_6_data[2] == 4:
                        ch7_6_data[2] = "过压报警"
                    elif ch7_6_data[2] == 5:
                        ch7_6_data[2] = "低压报警"
                    elif ch7_6_data[2] == 6:
                        ch7_6_data[2] = "过流报警"
                    elif ch7_6_data[2] == 7:
                        ch7_6_data[2] = "过温报警"
                    elif ch7_6_data[2] == 8:
                        ch7_6_data[2] = "电池脱落或被保护"
                    elif ch7_6_data[2] == 9:
                        ch7_6_data[2] = "电池不充电报警"
                    else:
                        ch7_6_data[2] = "通信异常"

                    ch7_6_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[20])[2:]
                                + ("0x%02x" % ch7_read_data[21])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch7_6_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[36])[2:]
                                + ("0x%02x" % ch7_read_data[37])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch7_6_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[52])[2:]
                                + ("0x%02x" % ch7_read_data[53])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch7_6_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[68])[2:]
                                + ("0x%02x" % ch7_read_data[69])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch7_6_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[84])[2:]
                                + ("0x%02x" % ch7_read_data[85])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch7_6_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[100])[2:]
                                + ("0x%02x" % ch7_read_data[101])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch7_6_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[116])[2:]
                                + ("0x%02x" % ch7_read_data[117])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                if ch7_6_start_signal:
                    if ch7_6_data[2] == 0:
                        ch7_6_data[2] = "待机状态"
                    elif ch7_6_data[2] == 1:
                        ch7_6_data[2] = "放电状态"
                    elif ch7_6_data[2] == 2:
                        ch7_6_data[2] = "充电状态"
                    elif ch7_6_data[2] == 3:
                        ch7_6_data[2] = "测试完成"
                    elif ch7_6_data[2] == 4:
                        ch7_6_data[2] = "过压报警"
                    elif ch7_6_data[2] == 5:
                        ch7_6_data[2] = "低压报警"
                    elif ch7_6_data[2] == 6:
                        ch7_6_data[2] = "过流报警"
                    elif ch7_6_data[2] == 7:
                        ch7_6_data[2] = "过温报警"
                    elif ch7_6_data[2] == 8:
                        ch7_6_data[2] = "电池脱落或被保护"
                    elif ch7_6_data[2] == 9:
                        ch7_6_data[2] = "电池不充电报警"
                    else:
                        ch7_6_data[2] = "通信异常"

                    ch7_6_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[20])[2:]
                                + ("0x%02x" % ch7_read_data[21])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch7_6_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[36])[2:]
                                + ("0x%02x" % ch7_read_data[37])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch7_6_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[52])[2:]
                                + ("0x%02x" % ch7_read_data[53])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch7_6_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[68])[2:]
                                + ("0x%02x" % ch7_read_data[69])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch7_6_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[84])[2:]
                                + ("0x%02x" % ch7_read_data[85])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch7_6_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[100])[2:]
                                + ("0x%02x" % ch7_read_data[101])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch7_6_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[116])[2:]
                                + ("0x%02x" % ch7_read_data[117])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                ch7_7_data[2] = int(hex(ch7_read_data[8])[2:])
                if not ch7_7_start_signal:
                    if (
                        ch7_7_error_data == "过压报警"
                        or ch7_7_error_data == "低压报警"
                        or ch7_7_error_data == "过流报警"
                        or ch7_7_error_data == "过温报警"
                        or ch7_7_error_data == "电池脱落或被保护"
                        or ch7_7_error_data == "电池不充电报警"
                        or ch7_7_error_data == "测试完成"
                        or ch7_7_error_data == "容量不足"
                        or ch7_7_error_data == "NTC温度异常"
                    ):
                        ch7_7_data[2] = ch7_7_error_data
                    elif ch7_7_data[2] == 0:
                        ch7_7_data[2] = "待机状态"
                    elif ch7_7_data[2] == 1:
                        ch7_7_data[2] = "放电状态"
                    elif ch7_7_data[2] == 2:
                        ch7_7_data[2] = "充电状态"
                    elif ch7_7_data[2] == 3:
                        ch7_7_data[2] = "测试完成"
                    elif ch7_7_data[2] == 4:
                        ch7_7_data[2] = "过压报警"
                    elif ch7_7_data[2] == 5:
                        ch7_7_data[2] = "低压报警"
                    elif ch7_7_data[2] == 6:
                        ch7_7_data[2] = "过流报警"
                    elif ch7_7_data[2] == 7:
                        ch7_7_data[2] = "过温报警"
                    elif ch7_7_data[2] == 8:
                        ch7_7_data[2] = "电池脱落或被保护"
                    elif ch7_7_data[2] == 9:
                        ch7_7_data[2] = "电池不充电报警"
                    else:
                        ch7_7_data[2] = "通信异常"

                    ch7_7_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[22])[2:]
                                + ("0x%02x" % ch7_read_data[23])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch7_7_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[38])[2:]
                                + ("0x%02x" % ch7_read_data[39])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch7_7_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[54])[2:]
                                + ("0x%02x" % ch7_read_data[55])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch7_7_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[70])[2:]
                                + ("0x%02x" % ch7_read_data[71])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch7_7_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[86])[2:]
                                + ("0x%02x" % ch7_read_data[87])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch7_7_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[102])[2:]
                                + ("0x%02x" % ch7_read_data[103])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch7_7_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[118])[2:]
                                + ("0x%02x" % ch7_read_data[119])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                if ch7_7_start_signal:
                    if ch7_7_data[2] == 0:
                        ch7_7_data[2] = "待机状态"
                    elif ch7_7_data[2] == 1:
                        ch7_7_data[2] = "放电状态"
                    elif ch7_7_data[2] == 2:
                        ch7_7_data[2] = "充电状态"
                    elif ch7_7_data[2] == 3:
                        ch7_7_data[2] = "测试完成"
                    elif ch7_7_data[2] == 4:
                        ch7_7_data[2] = "过压报警"
                    elif ch7_7_data[2] == 5:
                        ch7_7_data[2] = "低压报警"
                    elif ch7_7_data[2] == 6:
                        ch7_7_data[2] = "过流报警"
                    elif ch7_7_data[2] == 7:
                        ch7_7_data[2] = "过温报警"
                    elif ch7_7_data[2] == 8:
                        ch7_7_data[2] = "电池脱落或被保护"
                    elif ch7_7_data[2] == 9:
                        ch7_7_data[2] = "电池不充电报警"
                    else:
                        ch7_7_data[2] = "通信异常"

                    ch7_7_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[22])[2:]
                                + ("0x%02x" % ch7_read_data[23])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch7_7_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[38])[2:]
                                + ("0x%02x" % ch7_read_data[39])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch7_7_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[54])[2:]
                                + ("0x%02x" % ch7_read_data[55])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch7_7_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[70])[2:]
                                + ("0x%02x" % ch7_read_data[71])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch7_7_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[86])[2:]
                                + ("0x%02x" % ch7_read_data[87])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch7_7_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[102])[2:]
                                + ("0x%02x" % ch7_read_data[103])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch7_7_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[118])[2:]
                                + ("0x%02x" % ch7_read_data[119])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                ch7_8_data[2] = int(hex(ch7_read_data[9])[2:])
                if not ch7_8_start_signal:
                    if (
                        ch7_8_error_data == "过压报警"
                        or ch7_8_error_data == "低压报警"
                        or ch7_8_error_data == "过流报警"
                        or ch7_8_error_data == "过温报警"
                        or ch7_8_error_data == "电池脱落或被保护"
                        or ch7_8_error_data == "电池不充电报警"
                        or ch7_8_error_data == "测试完成"
                        or ch7_8_error_data == "容量不足"
                        or ch7_8_error_data == "NTC温度异常"
                    ):
                        ch7_8_data[2] = ch7_8_error_data
                    elif ch7_8_data[2] == 0:
                        ch7_8_data[2] = "待机状态"
                    elif ch7_8_data[2] == 1:
                        ch7_8_data[2] = "放电状态"
                    elif ch7_8_data[2] == 2:
                        ch7_8_data[2] = "充电状态"
                    elif ch7_8_data[2] == 3:
                        ch7_8_data[2] = "测试完成"
                    elif ch7_8_data[2] == 4:
                        ch7_8_data[2] = "过压报警"
                    elif ch7_8_data[2] == 5:
                        ch7_8_data[2] = "低压报警"
                    elif ch7_8_data[2] == 6:
                        ch7_8_data[2] = "过流报警"
                    elif ch7_8_data[2] == 7:
                        ch7_8_data[2] = "过温报警"
                    elif ch7_8_data[2] == 8:
                        ch7_8_data[2] = "电池脱落或被保护"
                    elif ch7_8_data[2] == 9:
                        ch7_8_data[2] = "电池不充电报警"
                    else:
                        ch7_8_data[2] = "通信异常"

                    ch7_8_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[24])[2:]
                                + ("0x%02x" % ch7_read_data[25])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch7_8_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[40])[2:]
                                + ("0x%02x" % ch7_read_data[41])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch7_8_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[56])[2:]
                                + ("0x%02x" % ch7_read_data[57])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch7_8_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[72])[2:]
                                + ("0x%02x" % ch7_read_data[73])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch7_8_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[88])[2:]
                                + ("0x%02x" % ch7_read_data[89])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch7_8_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[104])[2:]
                                + ("0x%02x" % ch7_read_data[105])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch7_8_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[120])[2:]
                                + ("0x%02x" % ch7_read_data[121])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                if ch7_8_start_signal:
                    if ch7_8_data[2] == 0:
                        ch7_8_data[2] = "待机状态"
                    elif ch7_8_data[2] == 1:
                        ch7_8_data[2] = "放电状态"
                    elif ch7_8_data[2] == 2:
                        ch7_8_data[2] = "充电状态"
                    elif ch7_8_data[2] == 3:
                        ch7_8_data[2] = "测试完成"
                    elif ch7_8_data[2] == 4:
                        ch7_8_data[2] = "过压报警"
                    elif ch7_8_data[2] == 5:
                        ch7_8_data[2] = "低压报警"
                    elif ch7_8_data[2] == 6:
                        ch7_8_data[2] = "过流报警"
                    elif ch7_8_data[2] == 7:
                        ch7_8_data[2] = "过温报警"
                    elif ch7_8_data[2] == 8:
                        ch7_8_data[2] = "电池脱落或被保护"
                    elif ch7_8_data[2] == 9:
                        ch7_8_data[2] = "电池不充电报警"
                    else:
                        ch7_8_data[2] = "通信异常"

                    ch7_8_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[24])[2:]
                                + ("0x%02x" % ch7_read_data[25])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch7_8_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[40])[2:]
                                + ("0x%02x" % ch7_read_data[41])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch7_8_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[56])[2:]
                                + ("0x%02x" % ch7_read_data[57])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch7_8_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[72])[2:]
                                + ("0x%02x" % ch7_read_data[73])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch7_8_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[88])[2:]
                                + ("0x%02x" % ch7_read_data[89])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch7_8_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[104])[2:]
                                + ("0x%02x" % ch7_read_data[105])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch7_8_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data[120])[2:]
                                + ("0x%02x" % ch7_read_data[121])[2:],
                                16,
                            )
                        )
                        / 10
                    )

        if (
            ch8_1_signal == 1
            or ch8_2_signal == 1
            or ch8_3_signal == 1
            or ch8_4_signal == 1
            or ch8_5_signal == 1
            or ch8_6_signal == 1
            or ch8_7_signal == 1
            or ch8_8_signal == 1
        ):
            ch8_readcommend = "080300000000A5"
            ### 加锁读取数据
            ### 数据处理
            mutex.acquire()
            ch8_read_data = ser.readdata(com, ch8_readcommend)
            mutex.release()

            if ch8_read_data == "FF":
                ch8_1_data[2] = "通信异常"
                ch8_2_data[2] = "通信异常"
                ch8_3_data[2] = "通信异常"
                ch8_4_data[2] = "通信异常"
                ch8_5_data[2] = "通信异常"
                ch8_6_data[2] = "通信异常"
                ch8_7_data[2] = "通信异常"
                ch8_8_data[2] = "通信异常"
                # stop_test("ch8_1")
                # stop_test("ch8_2")
                # stop_test("ch8_3")
                # stop_test("ch8_4")
                # stop_test("ch8_5")
                # stop_test("ch8_6")
                # stop_test("ch8_7")
                # stop_test("ch8_8")

            else:
                ch8_1_data[2] = int(hex(ch8_read_data[2])[2:])

                if not ch8_1_start_signal:
                    if (
                        ch8_1_error_data == "过压报警"
                        or ch8_1_error_data == "低压报警"
                        or ch8_1_error_data == "过流报警"
                        or ch8_1_error_data == "过温报警"
                        or ch8_1_error_data == "电池脱落或被保护"
                        or ch8_1_error_data == "电池不充电报警"
                        or ch8_1_error_data == "测试完成"
                        or ch8_1_error_data == "容量不足"
                        or ch8_1_error_data == "NTC温度异常"
                    ):
                        ch8_1_data[2] = ch8_1_error_data
                    elif ch8_1_data[2] == 0:
                        ch8_1_data[2] = "待机状态"
                    elif ch8_1_data[2] == 1:
                        ch8_1_data[2] = "放电状态"
                    elif ch8_1_data[2] == 2:
                        ch8_1_data[2] = "充电状态"
                    elif ch8_1_data[2] == 3:
                        ch8_1_data[2] = "测试完成"
                    elif ch8_1_data[2] == 4:
                        ch8_1_data[2] = "过压报警"
                    elif ch8_1_data[2] == 5:
                        ch8_1_data[2] = "低压报警"
                    elif ch8_1_data[2] == 6:
                        ch8_1_data[2] = "过流报警"
                    elif ch8_1_data[2] == 7:
                        ch8_1_data[2] = "过温报警"
                    elif ch8_1_data[2] == 8:
                        ch8_1_data[2] = "电池脱落或被保护"
                    elif ch8_1_data[2] == 9:
                        ch8_1_data[2] = "电池不充电报警"
                    else:
                        ch8_1_data[2] = "通信异常"

                    ch8_1_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[10])[2:]
                                + ("0x%02x" % ch8_read_data[11])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch8_1_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[26])[2:]
                                + ("0x%02x" % ch8_read_data[27])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch8_1_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[42])[2:]
                                + ("0x%02x" % ch8_read_data[43])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch8_1_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[58])[2:]
                                + ("0x%02x" % ch8_read_data[59])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch8_1_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[74])[2:]
                                + ("0x%02x" % ch8_read_data[75])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch8_1_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[90])[2:]
                                + ("0x%02x" % ch8_read_data[91])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch8_1_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[106])[2:]
                                + ("0x%02x" % ch8_read_data[107])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                if ch8_1_start_signal:
                    if ch8_1_data[2] == 0:
                        ch8_1_data[2] = "待机状态"
                    elif ch8_1_data[2] == 1:
                        ch8_1_data[2] = "放电状态"
                    elif ch8_1_data[2] == 2:
                        ch8_1_data[2] = "充电状态"
                    elif ch8_1_data[2] == 3:
                        ch8_1_data[2] = "测试完成"
                    elif ch8_1_data[2] == 4:
                        ch8_1_data[2] = "过压报警"
                    elif ch8_1_data[2] == 5:
                        ch8_1_data[2] = "低压报警"
                    elif ch8_1_data[2] == 6:
                        ch8_1_data[2] = "过流报警"
                    elif ch8_1_data[2] == 7:
                        ch8_1_data[2] = "过温报警"
                    elif ch8_1_data[2] == 8:
                        ch8_1_data[2] = "电池脱落或被保护"
                    elif ch8_1_data[2] == 9:
                        ch8_1_data[2] = "电池不充电报警"
                    else:
                        ch8_1_data[2] = "通信异常"

                    ch8_1_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[10])[2:]
                                + ("0x%02x" % ch8_read_data[11])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch8_1_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[26])[2:]
                                + ("0x%02x" % ch8_read_data[27])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch8_1_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[42])[2:]
                                + ("0x%02x" % ch8_read_data[43])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch8_1_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[58])[2:]
                                + ("0x%02x" % ch8_read_data[59])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch8_1_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[74])[2:]
                                + ("0x%02x" % ch8_read_data[75])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch8_1_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[90])[2:]
                                + ("0x%02x" % ch8_read_data[91])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch8_1_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[106])[2:]
                                + ("0x%02x" % ch8_read_data[107])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                ch8_2_data[2] = int(hex(ch8_read_data[3])[2:])
                if not ch8_2_start_signal:
                    if (
                        ch8_2_error_data == "过压报警"
                        or ch8_2_error_data == "低压报警"
                        or ch8_2_error_data == "过流报警"
                        or ch8_2_error_data == "过温报警"
                        or ch8_2_error_data == "电池脱落或被保护"
                        or ch8_2_error_data == "电池不充电报警"
                        or ch8_2_error_data == "测试完成"
                        or ch8_2_error_data == "容量不足"
                        or ch8_2_error_data == "NTC温度异常"
                    ):
                        ch8_2_data[2] = ch8_2_error_data
                    elif ch8_2_data[2] == 0:
                        ch8_2_data[2] = "待机状态"
                    elif ch8_2_data[2] == 1:
                        ch8_2_data[2] = "放电状态"
                    elif ch8_2_data[2] == 2:
                        ch8_2_data[2] = "充电状态"
                    elif ch8_2_data[2] == 3:
                        ch8_2_data[2] = "测试完成"
                    elif ch8_2_data[2] == 4:
                        ch8_2_data[2] = "过压报警"
                    elif ch8_2_data[2] == 5:
                        ch8_2_data[2] = "低压报警"
                    elif ch8_2_data[2] == 6:
                        ch8_2_data[2] = "过流报警"
                    elif ch8_2_data[2] == 7:
                        ch8_2_data[2] = "过温报警"
                    elif ch8_2_data[2] == 8:
                        ch8_2_data[2] = "电池脱落或被保护"
                    elif ch8_2_data[2] == 9:
                        ch8_2_data[2] = "电池不充电报警"
                    else:
                        ch8_2_data[2] = "通信异常"

                    ch8_2_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[12])[2:]
                                + ("0x%02x" % ch8_read_data[13])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch8_2_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[28])[2:]
                                + ("0x%02x" % ch8_read_data[29])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch8_2_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[44])[2:]
                                + ("0x%02x" % ch8_read_data[45])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch8_2_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[60])[2:]
                                + ("0x%02x" % ch8_read_data[61])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch8_2_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[76])[2:]
                                + ("0x%02x" % ch8_read_data[77])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch8_2_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[92])[2:]
                                + ("0x%02x" % ch8_read_data[93])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch8_2_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[108])[2:]
                                + ("0x%02x" % ch8_read_data[109])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                if ch8_2_start_signal:
                    if ch8_2_data[2] == 0:
                        ch8_2_data[2] = "待机状态"
                    elif ch8_2_data[2] == 1:
                        ch8_2_data[2] = "放电状态"
                    elif ch8_2_data[2] == 2:
                        ch8_2_data[2] = "充电状态"
                    elif ch8_2_data[2] == 3:
                        ch8_2_data[2] = "测试完成"
                    elif ch8_2_data[2] == 4:
                        ch8_2_data[2] = "过压报警"
                    elif ch8_2_data[2] == 5:
                        ch8_2_data[2] = "低压报警"
                    elif ch8_2_data[2] == 6:
                        ch8_2_data[2] = "过流报警"
                    elif ch8_2_data[2] == 7:
                        ch8_2_data[2] = "过温报警"
                    elif ch8_2_data[2] == 8:
                        ch8_2_data[2] = "电池脱落或被保护"
                    elif ch8_2_data[2] == 9:
                        ch8_2_data[2] = "电池不充电报警"
                    else:
                        ch8_2_data[2] = "通信异常"

                    ch8_2_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[12])[2:]
                                + ("0x%02x" % ch8_read_data[13])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch8_2_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[28])[2:]
                                + ("0x%02x" % ch8_read_data[29])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch8_2_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[44])[2:]
                                + ("0x%02x" % ch8_read_data[45])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch8_2_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[60])[2:]
                                + ("0x%02x" % ch8_read_data[61])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch8_2_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[76])[2:]
                                + ("0x%02x" % ch8_read_data[77])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch8_2_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[92])[2:]
                                + ("0x%02x" % ch8_read_data[93])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch8_2_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[108])[2:]
                                + ("0x%02x" % ch8_read_data[109])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                ch8_3_data[2] = int(hex(ch8_read_data[4])[2:])
                if not ch8_3_start_signal:
                    if (
                        ch8_3_error_data == "过压报警"
                        or ch8_3_error_data == "低压报警"
                        or ch8_3_error_data == "过流报警"
                        or ch8_3_error_data == "过温报警"
                        or ch8_3_error_data == "电池脱落或被保护"
                        or ch8_3_error_data == "电池不充电报警"
                        or ch8_3_error_data == "测试完成"
                        or ch8_3_error_data == "容量不足"
                        or ch8_3_error_data == "NTC温度异常"
                    ):
                        ch8_3_data[2] = ch8_3_error_data
                    elif ch8_3_data[2] == 0:
                        ch8_3_data[2] = "待机状态"
                    elif ch8_3_data[2] == 1:
                        ch8_3_data[2] = "放电状态"
                    elif ch8_3_data[2] == 2:
                        ch8_3_data[2] = "充电状态"
                    elif ch8_3_data[2] == 3:
                        ch8_3_data[2] = "测试完成"
                    elif ch8_3_data[2] == 4:
                        ch8_3_data[2] = "过压报警"
                    elif ch8_3_data[2] == 5:
                        ch8_3_data[2] = "低压报警"
                    elif ch8_3_data[2] == 6:
                        ch8_3_data[2] = "过流报警"
                    elif ch8_3_data[2] == 7:
                        ch8_3_data[2] = "过温报警"
                    elif ch8_3_data[2] == 8:
                        ch8_3_data[2] = "电池脱落或被保护"
                    elif ch8_3_data[2] == 9:
                        ch8_3_data[2] = "电池不充电报警"
                    else:
                        ch8_3_data[2] = "通信异常"

                    ch8_3_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[14])[2:]
                                + ("0x%02x" % ch8_read_data[15])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch8_3_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[30])[2:]
                                + ("0x%02x" % ch8_read_data[31])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch8_3_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[46])[2:]
                                + ("0x%02x" % ch8_read_data[47])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch8_3_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[62])[2:]
                                + ("0x%02x" % ch8_read_data[63])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch8_3_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[78])[2:]
                                + ("0x%02x" % ch8_read_data[79])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch8_3_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[94])[2:]
                                + ("0x%02x" % ch8_read_data[95])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch8_3_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[110])[2:]
                                + ("0x%02x" % ch8_read_data[111])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                if ch8_3_start_signal:
                    if ch8_3_data[2] == 0:
                        ch8_3_data[2] = "待机状态"
                    elif ch8_3_data[2] == 1:
                        ch8_3_data[2] = "放电状态"
                    elif ch8_3_data[2] == 2:
                        ch8_3_data[2] = "充电状态"
                    elif ch8_3_data[2] == 3:
                        ch8_3_data[2] = "测试完成"
                    elif ch8_3_data[2] == 4:
                        ch8_3_data[2] = "过压报警"
                    elif ch8_3_data[2] == 5:
                        ch8_3_data[2] = "低压报警"
                    elif ch8_3_data[2] == 6:
                        ch8_3_data[2] = "过流报警"
                    elif ch8_3_data[2] == 7:
                        ch8_3_data[2] = "过温报警"
                    elif ch8_3_data[2] == 8:
                        ch8_3_data[2] = "电池脱落或被保护"
                    elif ch8_3_data[2] == 9:
                        ch8_3_data[2] = "电池不充电报警"
                    else:
                        ch8_3_data[2] = "通信异常"

                    ch8_3_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[14])[2:]
                                + ("0x%02x" % ch8_read_data[15])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch8_3_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[30])[2:]
                                + ("0x%02x" % ch8_read_data[31])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch8_3_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[46])[2:]
                                + ("0x%02x" % ch8_read_data[47])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch8_3_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[62])[2:]
                                + ("0x%02x" % ch8_read_data[63])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch8_3_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[78])[2:]
                                + ("0x%02x" % ch8_read_data[79])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch8_3_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[94])[2:]
                                + ("0x%02x" % ch8_read_data[95])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch8_3_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[110])[2:]
                                + ("0x%02x" % ch8_read_data[111])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                ch8_4_data[2] = int(hex(ch8_read_data[5])[2:])
                if not ch8_4_start_signal:
                    if (
                        ch8_4_error_data == "过压报警"
                        or ch8_4_error_data == "低压报警"
                        or ch8_4_error_data == "过流报警"
                        or ch8_4_error_data == "过温报警"
                        or ch8_4_error_data == "电池脱落或被保护"
                        or ch8_4_error_data == "电池不充电报警"
                        or ch8_4_error_data == "测试完成"
                        or ch8_4_error_data == "容量不足"
                        or ch8_4_error_data == "NTC温度异常"
                    ):
                        ch8_4_data[2] = ch8_4_error_data
                    elif ch8_4_data[2] == 0:
                        ch8_4_data[2] = "待机状态"
                    elif ch8_4_data[2] == 1:
                        ch8_4_data[2] = "放电状态"
                    elif ch8_4_data[2] == 2:
                        ch8_4_data[2] = "充电状态"
                    elif ch8_4_data[2] == 3:
                        ch8_4_data[2] = "测试完成"
                    elif ch8_4_data[2] == 4:
                        ch8_4_data[2] = "过压报警"
                    elif ch8_4_data[2] == 5:
                        ch8_4_data[2] = "低压报警"
                    elif ch8_4_data[2] == 6:
                        ch8_4_data[2] = "过流报警"
                    elif ch8_4_data[2] == 7:
                        ch8_4_data[2] = "过温报警"
                    elif ch8_4_data[2] == 8:
                        ch8_4_data[2] = "电池脱落或被保护"
                    elif ch8_4_data[2] == 9:
                        ch8_4_data[2] = "电池不充电报警"
                    else:
                        ch8_4_data[2] = "通信异常"

                    ch8_4_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[16])[2:]
                                + ("0x%02x" % ch8_read_data[17])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch8_4_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[32])[2:]
                                + ("0x%02x" % ch8_read_data[33])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch8_4_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[48])[2:]
                                + ("0x%02x" % ch8_read_data[49])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch8_4_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[64])[2:]
                                + ("0x%02x" % ch8_read_data[65])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch8_4_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[80])[2:]
                                + ("0x%02x" % ch8_read_data[81])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch8_4_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[96])[2:]
                                + ("0x%02x" % ch8_read_data[97])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch8_4_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[112])[2:]
                                + ("0x%02x" % ch8_read_data[113])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                if ch8_4_start_signal:
                    if ch8_4_data[2] == 0:
                        ch8_4_data[2] = "待机状态"
                    elif ch8_4_data[2] == 1:
                        ch8_4_data[2] = "放电状态"
                    elif ch8_4_data[2] == 2:
                        ch8_4_data[2] = "充电状态"
                    elif ch8_4_data[2] == 3:
                        ch8_4_data[2] = "测试完成"
                    elif ch8_4_data[2] == 4:
                        ch8_4_data[2] = "过压报警"
                    elif ch8_4_data[2] == 5:
                        ch8_4_data[2] = "低压报警"
                    elif ch8_4_data[2] == 6:
                        ch8_4_data[2] = "过流报警"
                    elif ch8_4_data[2] == 7:
                        ch8_4_data[2] = "过温报警"
                    elif ch8_4_data[2] == 8:
                        ch8_4_data[2] = "电池脱落或被保护"
                    elif ch8_4_data[2] == 9:
                        ch8_4_data[2] = "电池不充电报警"
                    else:
                        ch8_4_data[2] = "通信异常"

                    ch8_4_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[16])[2:]
                                + ("0x%02x" % ch8_read_data[17])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch8_4_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[32])[2:]
                                + ("0x%02x" % ch8_read_data[33])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch8_4_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[48])[2:]
                                + ("0x%02x" % ch8_read_data[49])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch8_4_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[64])[2:]
                                + ("0x%02x" % ch8_read_data[65])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch8_4_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[80])[2:]
                                + ("0x%02x" % ch8_read_data[81])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch8_4_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[96])[2:]
                                + ("0x%02x" % ch8_read_data[97])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch8_4_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[112])[2:]
                                + ("0x%02x" % ch8_read_data[113])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                ch8_5_data[2] = int(hex(ch8_read_data[6])[2:])
                if not ch8_5_start_signal:
                    if (
                        ch8_5_error_data == "过压报警"
                        or ch8_5_error_data == "低压报警"
                        or ch8_5_error_data == "过流报警"
                        or ch8_5_error_data == "过温报警"
                        or ch8_5_error_data == "电池脱落或被保护"
                        or ch8_5_error_data == "电池不充电报警"
                        or ch8_5_error_data == "测试完成"
                        or ch8_5_error_data == "容量不足"
                        or ch8_5_error_data == "NTC温度异常"
                    ):
                        ch8_5_data[2] = ch8_5_error_data
                    elif ch8_5_data[2] == 0:
                        ch8_5_data[2] = "待机状态"
                    elif ch8_5_data[2] == 1:
                        ch8_5_data[2] = "放电状态"
                    elif ch8_5_data[2] == 2:
                        ch8_5_data[2] = "充电状态"
                    elif ch8_5_data[2] == 3:
                        ch8_5_data[2] = "测试完成"
                    elif ch8_5_data[2] == 4:
                        ch8_5_data[2] = "过压报警"
                    elif ch8_5_data[2] == 5:
                        ch8_5_data[2] = "低压报警"
                    elif ch8_5_data[2] == 6:
                        ch8_5_data[2] = "过流报警"
                    elif ch8_5_data[2] == 7:
                        ch8_5_data[2] = "过温报警"
                    elif ch8_5_data[2] == 8:
                        ch8_5_data[2] = "电池脱落或被保护"
                    elif ch8_5_data[2] == 9:
                        ch8_5_data[2] = "电池不充电报警"
                    else:
                        ch8_5_data[2] = "通信异常"

                    ch8_5_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[18])[2:]
                                + ("0x%02x" % ch8_read_data[19])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch8_5_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[34])[2:]
                                + ("0x%02x" % ch8_read_data[35])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch8_5_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[50])[2:]
                                + ("0x%02x" % ch8_read_data[51])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch8_5_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[66])[2:]
                                + ("0x%02x" % ch8_read_data[67])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch8_5_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[82])[2:]
                                + ("0x%02x" % ch8_read_data[83])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch8_5_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[98])[2:]
                                + ("0x%02x" % ch8_read_data[99])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch8_5_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[114])[2:]
                                + ("0x%02x" % ch8_read_data[115])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                if ch8_5_start_signal:
                    if ch8_5_data[2] == 0:
                        ch8_5_data[2] = "待机状态"
                    elif ch8_5_data[2] == 1:
                        ch8_5_data[2] = "放电状态"
                    elif ch8_5_data[2] == 2:
                        ch8_5_data[2] = "充电状态"
                    elif ch8_5_data[2] == 3:
                        ch8_5_data[2] = "测试完成"
                    elif ch8_5_data[2] == 4:
                        ch8_5_data[2] = "过压报警"
                    elif ch8_5_data[2] == 5:
                        ch8_5_data[2] = "低压报警"
                    elif ch8_5_data[2] == 6:
                        ch8_5_data[2] = "过流报警"
                    elif ch8_5_data[2] == 7:
                        ch8_5_data[2] = "过温报警"
                    elif ch8_5_data[2] == 8:
                        ch8_5_data[2] = "电池脱落或被保护"
                    elif ch8_5_data[2] == 9:
                        ch8_5_data[2] = "电池不充电报警"
                    else:
                        ch8_5_data[2] = "通信异常"

                    ch8_5_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[18])[2:]
                                + ("0x%02x" % ch8_read_data[19])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch8_5_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[34])[2:]
                                + ("0x%02x" % ch8_read_data[35])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch8_5_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[50])[2:]
                                + ("0x%02x" % ch8_read_data[51])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch8_5_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[66])[2:]
                                + ("0x%02x" % ch8_read_data[67])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch8_5_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[82])[2:]
                                + ("0x%02x" % ch8_read_data[83])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch8_5_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[98])[2:]
                                + ("0x%02x" % ch8_read_data[99])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch8_5_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[114])[2:]
                                + ("0x%02x" % ch8_read_data[115])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                ch8_6_data[2] = int(hex(ch8_read_data[7])[2:])
                if not ch8_6_start_signal:
                    if (
                        ch8_6_error_data == "过压报警"
                        or ch8_6_error_data == "低压报警"
                        or ch8_6_error_data == "过流报警"
                        or ch8_6_error_data == "过温报警"
                        or ch8_6_error_data == "电池脱落或被保护"
                        or ch8_6_error_data == "电池不充电报警"
                        or ch8_6_error_data == "测试完成"
                        or ch8_6_error_data == "容量不足"
                        or ch8_6_error_data == "NTC温度异常"
                    ):
                        ch8_6_data[2] = ch8_6_error_data
                    elif ch8_6_data[2] == 0:
                        ch8_6_data[2] = "待机状态"
                    elif ch8_6_data[2] == 1:
                        ch8_6_data[2] = "放电状态"
                    elif ch8_6_data[2] == 2:
                        ch8_6_data[2] = "充电状态"
                    elif ch8_6_data[2] == 3:
                        ch8_6_data[2] = "测试完成"
                    elif ch8_6_data[2] == 4:
                        ch8_6_data[2] = "过压报警"
                    elif ch8_6_data[2] == 5:
                        ch8_6_data[2] = "低压报警"
                    elif ch8_6_data[2] == 6:
                        ch8_6_data[2] = "过流报警"
                    elif ch8_6_data[2] == 7:
                        ch8_6_data[2] = "过温报警"
                    elif ch8_6_data[2] == 8:
                        ch8_6_data[2] = "电池脱落或被保护"
                    elif ch8_6_data[2] == 9:
                        ch8_6_data[2] = "电池不充电报警"
                    else:
                        ch8_6_data[2] = "通信异常"

                    ch8_6_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[20])[2:]
                                + ("0x%02x" % ch8_read_data[21])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch8_6_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[36])[2:]
                                + ("0x%02x" % ch8_read_data[37])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch8_6_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[52])[2:]
                                + ("0x%02x" % ch8_read_data[53])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch8_6_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[68])[2:]
                                + ("0x%02x" % ch8_read_data[69])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch8_6_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[84])[2:]
                                + ("0x%02x" % ch8_read_data[85])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch8_6_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[100])[2:]
                                + ("0x%02x" % ch8_read_data[101])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch8_6_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[116])[2:]
                                + ("0x%02x" % ch8_read_data[117])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                if ch8_6_start_signal:
                    if ch8_6_data[2] == 0:
                        ch8_6_data[2] = "待机状态"
                    elif ch8_6_data[2] == 1:
                        ch8_6_data[2] = "放电状态"
                    elif ch8_6_data[2] == 2:
                        ch8_6_data[2] = "充电状态"
                    elif ch8_6_data[2] == 3:
                        ch8_6_data[2] = "测试完成"
                    elif ch8_6_data[2] == 4:
                        ch8_6_data[2] = "过压报警"
                    elif ch8_6_data[2] == 5:
                        ch8_6_data[2] = "低压报警"
                    elif ch8_6_data[2] == 6:
                        ch8_6_data[2] = "过流报警"
                    elif ch8_6_data[2] == 7:
                        ch8_6_data[2] = "过温报警"
                    elif ch8_6_data[2] == 8:
                        ch8_6_data[2] = "电池脱落或被保护"
                    elif ch8_6_data[2] == 9:
                        ch8_6_data[2] = "电池不充电报警"
                    else:
                        ch8_6_data[2] = "通信异常"

                    ch8_6_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[20])[2:]
                                + ("0x%02x" % ch8_read_data[21])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch8_6_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[36])[2:]
                                + ("0x%02x" % ch8_read_data[37])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch8_6_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[52])[2:]
                                + ("0x%02x" % ch8_read_data[53])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch8_6_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[68])[2:]
                                + ("0x%02x" % ch8_read_data[69])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch8_6_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[84])[2:]
                                + ("0x%02x" % ch8_read_data[85])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch8_6_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[100])[2:]
                                + ("0x%02x" % ch8_read_data[101])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch8_6_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[116])[2:]
                                + ("0x%02x" % ch8_read_data[117])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                ch8_7_data[2] = int(hex(ch8_read_data[8])[2:])
                if not ch8_7_start_signal:
                    if (
                        ch8_7_error_data == "过压报警"
                        or ch8_7_error_data == "低压报警"
                        or ch8_7_error_data == "过流报警"
                        or ch8_7_error_data == "过温报警"
                        or ch8_7_error_data == "电池脱落或被保护"
                        or ch8_7_error_data == "电池不充电报警"
                        or ch8_7_error_data == "测试完成"
                        or ch8_7_error_data == "容量不足"
                        or ch8_7_error_data == "NTC温度异常"
                    ):
                        ch8_7_data[2] = ch8_7_error_data
                    elif ch8_7_data[2] == 0:
                        ch8_7_data[2] = "待机状态"
                    elif ch8_7_data[2] == 1:
                        ch8_7_data[2] = "放电状态"
                    elif ch8_7_data[2] == 2:
                        ch8_7_data[2] = "充电状态"
                    elif ch8_7_data[2] == 3:
                        ch8_7_data[2] = "测试完成"
                    elif ch8_7_data[2] == 4:
                        ch8_7_data[2] = "过压报警"
                    elif ch8_7_data[2] == 5:
                        ch8_7_data[2] = "低压报警"
                    elif ch8_7_data[2] == 6:
                        ch8_7_data[2] = "过流报警"
                    elif ch8_7_data[2] == 7:
                        ch8_7_data[2] = "过温报警"
                    elif ch8_7_data[2] == 8:
                        ch8_7_data[2] = "电池脱落或被保护"
                    elif ch8_7_data[2] == 9:
                        ch8_7_data[2] = "电池不充电报警"
                    else:
                        ch8_7_data[2] = "通信异常"

                    ch8_7_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[22])[2:]
                                + ("0x%02x" % ch8_read_data[23])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch8_7_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[38])[2:]
                                + ("0x%02x" % ch8_read_data[39])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch8_7_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[54])[2:]
                                + ("0x%02x" % ch8_read_data[55])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch8_7_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[70])[2:]
                                + ("0x%02x" % ch8_read_data[71])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch8_7_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[86])[2:]
                                + ("0x%02x" % ch8_read_data[87])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch8_7_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[102])[2:]
                                + ("0x%02x" % ch8_read_data[103])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch8_7_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[118])[2:]
                                + ("0x%02x" % ch8_read_data[119])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                if ch8_7_start_signal:
                    if ch8_7_data[2] == 0:
                        ch8_7_data[2] = "待机状态"
                    elif ch8_7_data[2] == 1:
                        ch8_7_data[2] = "放电状态"
                    elif ch8_7_data[2] == 2:
                        ch8_7_data[2] = "充电状态"
                    elif ch8_7_data[2] == 3:
                        ch8_7_data[2] = "测试完成"
                    elif ch8_7_data[2] == 4:
                        ch8_7_data[2] = "过压报警"
                    elif ch8_7_data[2] == 5:
                        ch8_7_data[2] = "低压报警"
                    elif ch8_7_data[2] == 6:
                        ch8_7_data[2] = "过流报警"
                    elif ch8_7_data[2] == 7:
                        ch8_7_data[2] = "过温报警"
                    elif ch8_7_data[2] == 8:
                        ch8_7_data[2] = "电池脱落或被保护"
                    elif ch8_7_data[2] == 9:
                        ch8_7_data[2] = "电池不充电报警"
                    else:
                        ch8_7_data[2] = "通信异常"

                    ch8_7_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[22])[2:]
                                + ("0x%02x" % ch8_read_data[23])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch8_7_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[38])[2:]
                                + ("0x%02x" % ch8_read_data[39])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch8_7_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[54])[2:]
                                + ("0x%02x" % ch8_read_data[55])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch8_7_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[70])[2:]
                                + ("0x%02x" % ch8_read_data[71])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch8_7_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[86])[2:]
                                + ("0x%02x" % ch8_read_data[87])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch8_7_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[102])[2:]
                                + ("0x%02x" % ch8_read_data[103])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch8_7_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[118])[2:]
                                + ("0x%02x" % ch8_read_data[119])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                ch8_8_data[2] = int(hex(ch8_read_data[9])[2:])
                if not ch8_8_start_signal:
                    if (
                        ch8_8_error_data == "过压报警"
                        or ch8_8_error_data == "低压报警"
                        or ch8_8_error_data == "过流报警"
                        or ch8_8_error_data == "过温报警"
                        or ch8_8_error_data == "电池脱落或被保护"
                        or ch8_8_error_data == "电池不充电报警"
                        or ch8_8_error_data == "测试完成"
                        or ch8_8_error_data == "容量不足"
                        or ch8_8_error_data == "NTC温度异常"
                    ):
                        ch8_8_data[2] = ch8_8_error_data
                    elif ch8_8_data[2] == 0:
                        ch8_8_data[2] = "待机状态"
                    elif ch8_8_data[2] == 1:
                        ch8_8_data[2] = "放电状态"
                    elif ch8_8_data[2] == 2:
                        ch8_8_data[2] = "充电状态"
                    elif ch8_8_data[2] == 3:
                        ch8_8_data[2] = "测试完成"
                    elif ch8_8_data[2] == 4:
                        ch8_8_data[2] = "过压报警"
                    elif ch8_8_data[2] == 5:
                        ch8_8_data[2] = "低压报警"
                    elif ch8_8_data[2] == 6:
                        ch8_8_data[2] = "过流报警"
                    elif ch8_8_data[2] == 7:
                        ch8_8_data[2] = "过温报警"
                    elif ch8_8_data[2] == 8:
                        ch8_8_data[2] = "电池脱落或被保护"
                    elif ch8_8_data[2] == 9:
                        ch8_8_data[2] = "电池不充电报警"
                    else:
                        ch8_8_data[2] = "通信异常"

                    ch8_8_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[24])[2:]
                                + ("0x%02x" % ch8_read_data[25])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch8_8_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[40])[2:]
                                + ("0x%02x" % ch8_read_data[41])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch8_8_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[56])[2:]
                                + ("0x%02x" % ch8_read_data[57])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch8_8_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[72])[2:]
                                + ("0x%02x" % ch8_read_data[73])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch8_8_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[88])[2:]
                                + ("0x%02x" % ch8_read_data[89])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch8_8_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[104])[2:]
                                + ("0x%02x" % ch8_read_data[105])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch8_8_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[120])[2:]
                                + ("0x%02x" % ch8_read_data[121])[2:],
                                16,
                            )
                        )
                        / 10
                    )

                if ch8_8_start_signal:
                    if ch8_8_data[2] == 0:
                        ch8_8_data[2] = "待机状态"
                    elif ch8_8_data[2] == 1:
                        ch8_8_data[2] = "放电状态"
                    elif ch8_8_data[2] == 2:
                        ch8_8_data[2] = "充电状态"
                    elif ch8_8_data[2] == 3:
                        ch8_8_data[2] = "测试完成"
                    elif ch8_8_data[2] == 4:
                        ch8_8_data[2] = "过压报警"
                    elif ch8_8_data[2] == 5:
                        ch8_8_data[2] = "低压报警"
                    elif ch8_8_data[2] == 6:
                        ch8_8_data[2] = "过流报警"
                    elif ch8_8_data[2] == 7:
                        ch8_8_data[2] = "过温报警"
                    elif ch8_8_data[2] == 8:
                        ch8_8_data[2] = "电池脱落或被保护"
                    elif ch8_8_data[2] == 9:
                        ch8_8_data[2] = "电池不充电报警"
                    else:
                        ch8_8_data[2] = "通信异常"

                    ch8_8_data[3] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[24])[2:]
                                + ("0x%02x" % ch8_read_data[25])[2:],
                                16,
                            )
                        )
                        / 1000
                    )
                    ch8_8_data[4] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[40])[2:]
                                + ("0x%02x" % ch8_read_data[41])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch8_8_data[5] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[56])[2:]
                                + ("0x%02x" % ch8_read_data[57])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch8_8_data[6] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[72])[2:]
                                + ("0x%02x" % ch8_read_data[73])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch8_8_data[7] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[88])[2:]
                                + ("0x%02x" % ch8_read_data[89])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch8_8_data[8] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[104])[2:]
                                + ("0x%02x" % ch8_read_data[105])[2:],
                                16,
                            )
                        )
                        / 10
                    )
                    ch8_8_data[9] = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data[120])[2:]
                                + ("0x%02x" % ch8_read_data[121])[2:],
                                16,
                            )
                        )
                        / 10
                    )


def main_update():
    global main_signal

    global ch1_1_state_value
    global ch1_2_state_value
    global ch1_3_state_value
    global ch1_4_state_value
    global ch1_5_state_value
    global ch1_6_state_value
    global ch1_7_state_value
    global ch1_8_state_value

    global ch2_1_state_value
    global ch2_2_state_value
    global ch2_3_state_value
    global ch2_4_state_value
    global ch2_5_state_value
    global ch2_6_state_value
    global ch2_7_state_value
    global ch2_8_state_value

    global ch3_1_state_value
    global ch3_2_state_value
    global ch3_3_state_value
    global ch3_4_state_value
    global ch3_5_state_value
    global ch3_6_state_value
    global ch3_7_state_value
    global ch3_8_state_value

    global ch4_1_state_value
    global ch4_2_state_value
    global ch4_3_state_value
    global ch4_4_state_value
    global ch4_5_state_value
    global ch4_6_state_value
    global ch4_7_state_value
    global ch4_8_state_value

    global ch5_1_state_value
    global ch5_2_state_value
    global ch5_3_state_value
    global ch5_4_state_value
    global ch5_5_state_value
    global ch5_6_state_value
    global ch5_7_state_value
    global ch5_8_state_value

    global ch6_1_state_value
    global ch6_2_state_value
    global ch6_3_state_value
    global ch6_4_state_value
    global ch6_5_state_value
    global ch6_6_state_value
    global ch6_7_state_value
    global ch6_8_state_value

    global ch7_1_state_value
    global ch7_2_state_value
    global ch7_3_state_value
    global ch7_4_state_value
    global ch7_5_state_value
    global ch7_6_state_value
    global ch7_7_state_value
    global ch7_8_state_value

    global ch8_1_state_value
    global ch8_2_state_value
    global ch8_3_state_value
    global ch8_4_state_value
    global ch8_5_state_value
    global ch8_6_state_value
    global ch8_7_state_value
    global ch8_8_state_value

    global ch1_1_data
    global ch1_2_data
    global ch1_3_data
    global ch1_4_data
    global ch1_5_data
    global ch1_6_data
    global ch1_7_data
    global ch1_8_data

    global ch2_1_data
    global ch2_2_data
    global ch2_3_data
    global ch2_4_data
    global ch2_5_data
    global ch2_6_data
    global ch2_7_data
    global ch2_8_data

    global ch3_1_data
    global ch3_2_data
    global ch3_3_data
    global ch3_4_data
    global ch3_5_data
    global ch3_6_data
    global ch3_7_data
    global ch3_8_data

    global ch4_1_data
    global ch4_2_data
    global ch4_3_data
    global ch4_4_data
    global ch4_5_data
    global ch4_6_data
    global ch4_7_data
    global ch4_8_data

    global ch5_1_data
    global ch5_2_data
    global ch5_3_data
    global ch5_4_data
    global ch5_5_data
    global ch5_6_data
    global ch5_7_data
    global ch5_8_data

    global ch6_1_data
    global ch6_2_data
    global ch6_3_data
    global ch6_4_data
    global ch6_5_data
    global ch6_6_data
    global ch6_7_data
    global ch6_8_data

    global ch7_1_data
    global ch7_2_data
    global ch7_3_data
    global ch7_4_data
    global ch7_5_data
    global ch7_6_data
    global ch7_7_data
    global ch7_8_data

    global ch8_1_data
    global ch8_2_data
    global ch8_3_data
    global ch8_4_data
    global ch8_5_data
    global ch8_6_data
    global ch8_7_data
    global ch8_8_data

    global ch1_1_log
    global ch1_2_log
    global ch1_3_log
    global ch1_4_log
    global ch1_5_log
    global ch1_6_log
    global ch1_7_log
    global ch1_8_log

    global ch1_1_signal
    global ch1_2_signal
    global ch1_3_signal
    global ch1_4_signal
    global ch1_5_signal
    global ch1_6_signal
    global ch1_7_signal
    global ch1_8_signal

    global ch2_1_signal
    global ch2_2_signal
    global ch2_3_signal
    global ch2_4_signal
    global ch2_5_signal
    global ch2_6_signal
    global ch2_7_signal
    global ch2_8_signal

    global ch3_1_signal
    global ch3_2_signal
    global ch3_3_signal
    global ch3_4_signal
    global ch3_5_signal
    global ch3_6_signal
    global ch3_7_signal
    global ch3_8_signal

    global ch4_1_signal
    global ch4_2_signal
    global ch4_3_signal
    global ch4_4_signal
    global ch4_5_signal
    global ch4_6_signal
    global ch4_7_signal
    global ch4_8_signal

    global ch5_1_signal
    global ch5_2_signal
    global ch5_3_signal
    global ch5_4_signal
    global ch5_5_signal
    global ch5_6_signal
    global ch5_7_signal
    global ch5_8_signal

    global ch6_1_signal
    global ch6_2_signal
    global ch6_3_signal
    global ch6_4_signal
    global ch6_5_signal
    global ch6_6_signal
    global ch6_7_signal
    global ch6_8_signal

    global ch7_1_signal
    global ch7_2_signal
    global ch7_3_signal
    global ch7_4_signal
    global ch7_5_signal
    global ch7_6_signal
    global ch7_7_signal
    global ch7_8_signal

    global ch8_1_signal
    global ch8_2_signal
    global ch8_3_signal
    global ch8_4_signal
    global ch8_5_signal
    global ch8_6_signal
    global ch8_7_signal
    global ch8_8_signal

    global ch1_1_error_data
    global ch1_2_error_data
    global ch1_3_error_data
    global ch1_4_error_data
    global ch1_5_error_data
    global ch1_6_error_data
    global ch1_7_error_data
    global ch1_8_error_data

    global ch2_1_error_data
    global ch2_2_error_data
    global ch2_3_error_data
    global ch2_4_error_data
    global ch2_5_error_data
    global ch2_6_error_data
    global ch2_7_error_data
    global ch2_8_error_data

    global ch3_1_error_data
    global ch3_2_error_data
    global ch3_3_error_data
    global ch3_4_error_data
    global ch3_5_error_data
    global ch3_6_error_data
    global ch3_7_error_data
    global ch3_8_error_data

    global ch4_1_error_data
    global ch4_2_error_data
    global ch4_3_error_data
    global ch4_4_error_data
    global ch4_5_error_data
    global ch4_6_error_data
    global ch4_7_error_data
    global ch4_8_error_data

    global ch5_1_error_data
    global ch5_2_error_data
    global ch5_3_error_data
    global ch5_4_error_data
    global ch5_5_error_data
    global ch5_6_error_data
    global ch5_7_error_data
    global ch5_8_error_data

    global ch6_1_error_data
    global ch6_2_error_data
    global ch6_3_error_data
    global ch6_4_error_data
    global ch6_5_error_data
    global ch6_6_error_data
    global ch6_7_error_data
    global ch6_8_error_data

    global ch7_1_error_data
    global ch7_2_error_data
    global ch7_3_error_data
    global ch7_4_error_data
    global ch7_5_error_data
    global ch7_6_error_data
    global ch7_7_error_data
    global ch7_8_error_data

    global ch8_1_error_data
    global ch8_2_error_data
    global ch8_3_error_data
    global ch8_4_error_data
    global ch8_5_error_data
    global ch8_6_error_data
    global ch8_7_error_data
    global ch8_8_error_data

    global ch1_1_signal_ntc
    global ch1_2_signal_ntc
    global ch1_3_signal_ntc
    global ch1_4_signal_ntc
    global ch1_5_signal_ntc
    global ch1_6_signal_ntc
    global ch1_7_signal_ntc
    global ch1_8_signal_ntc

    global ch2_1_signal_ntc
    global ch2_2_signal_ntc
    global ch2_3_signal_ntc
    global ch2_4_signal_ntc
    global ch2_5_signal_ntc
    global ch2_6_signal_ntc
    global ch2_7_signal_ntc
    global ch2_8_signal_ntc

    global ch3_1_signal_ntc
    global ch3_2_signal_ntc
    global ch3_3_signal_ntc
    global ch3_4_signal_ntc
    global ch3_5_signal_ntc
    global ch3_6_signal_ntc
    global ch3_7_signal_ntc
    global ch3_8_signal_ntc

    global ch4_1_signal_ntc
    global ch4_2_signal_ntc
    global ch4_3_signal_ntc
    global ch4_4_signal_ntc
    global ch4_5_signal_ntc
    global ch4_6_signal_ntc
    global ch4_7_signal_ntc
    global ch4_8_signal_ntc

    global ch5_1_signal_ntc
    global ch5_2_signal_ntc
    global ch5_3_signal_ntc
    global ch5_4_signal_ntc
    global ch5_5_signal_ntc
    global ch5_6_signal_ntc
    global ch5_7_signal_ntc
    global ch5_8_signal_ntc

    global ch6_1_signal_ntc
    global ch6_2_signal_ntc
    global ch6_3_signal_ntc
    global ch6_4_signal_ntc
    global ch6_5_signal_ntc
    global ch6_6_signal_ntc
    global ch6_7_signal_ntc
    global ch6_8_signal_ntc

    global ch7_1_signal_ntc
    global ch7_2_signal_ntc
    global ch7_3_signal_ntc
    global ch7_4_signal_ntc
    global ch7_5_signal_ntc
    global ch7_6_signal_ntc
    global ch7_7_signal_ntc
    global ch7_8_signal_ntc

    global ch8_1_signal_ntc
    global ch8_2_signal_ntc
    global ch8_3_signal_ntc
    global ch8_4_signal_ntc
    global ch8_5_signal_ntc
    global ch8_6_signal_ntc
    global ch8_7_signal_ntc
    global ch8_8_signal_ntc

    global ch1_1_battery_capacity
    global ch1_2_battery_capacity
    global ch1_3_battery_capacity
    global ch1_4_battery_capacity
    global ch1_5_battery_capacity
    global ch1_6_battery_capacity
    global ch1_7_battery_capacity
    global ch1_8_battery_capacity

    global ch2_1_battery_capacity
    global ch2_2_battery_capacity
    global ch2_3_battery_capacity
    global ch2_4_battery_capacity
    global ch2_5_battery_capacity
    global ch2_6_battery_capacity
    global ch2_7_battery_capacity
    global ch2_8_battery_capacity

    global ch3_1_battery_capacity
    global ch3_2_battery_capacity
    global ch3_3_battery_capacity
    global ch3_4_battery_capacity
    global ch3_5_battery_capacity
    global ch3_6_battery_capacity
    global ch3_7_battery_capacity
    global ch3_8_battery_capacity

    global ch4_1_battery_capacity
    global ch4_2_battery_capacity
    global ch4_3_battery_capacity
    global ch4_4_battery_capacity
    global ch4_5_battery_capacity
    global ch4_6_battery_capacity
    global ch4_7_battery_capacity
    global ch4_8_battery_capacity

    global ch5_1_battery_capacity
    global ch5_2_battery_capacity
    global ch5_3_battery_capacity
    global ch5_4_battery_capacity
    global ch5_5_battery_capacity
    global ch5_6_battery_capacity
    global ch5_7_battery_capacity
    global ch5_8_battery_capacity

    global ch6_1_battery_capacity
    global ch6_2_battery_capacity
    global ch6_3_battery_capacity
    global ch6_4_battery_capacity
    global ch6_5_battery_capacity
    global ch6_6_battery_capacity
    global ch6_7_battery_capacity
    global ch6_8_battery_capacity

    global ch7_1_battery_capacity
    global ch7_2_battery_capacity
    global ch7_3_battery_capacity
    global ch7_4_battery_capacity
    global ch7_5_battery_capacity
    global ch7_6_battery_capacity
    global ch7_7_battery_capacity
    global ch7_8_battery_capacity

    global ch8_1_battery_capacity
    global ch8_2_battery_capacity
    global ch8_3_battery_capacity
    global ch8_4_battery_capacity
    global ch8_5_battery_capacity
    global ch8_6_battery_capacity
    global ch8_7_battery_capacity
    global ch8_8_battery_capacity

    print("main_update")

    while True:
        time.sleep(1)
        if (
            ch1_1_data[2] == "充电状态"
            or ch1_1_data[2] == "放电状态"
            or ch1_1_data[2] == "测试完成"
            or ch1_1_data[2] == "待机状态"
            or ch1_1_data[2] == "容量不足"
            or ch1_1_data[2] == 0
            or ch1_1_data[2] == 1
            or ch1_1_data[2] == 2
            or ch1_1_data[2] == 3
        ):
            if ch1_1_data[2] == "待机状态":
                ch1_1_state_value["text"] = ch1_1_data[2]
                ch1_1_state_value["bg"] = "#919191"

            if ch1_1_data[2] == "测试完成":
                ch1_1_state_value["text"] = ch1_1_data[2]
                ch1_1_state_value["bg"] = "#63D0A4"

            if ch1_1_data[2] == "放电状态" or ch1_1_data[2] == "充电状态":
                ch1_1_state_value["text"] = ch1_1_data[2]
                ch1_1_state_value["bg"] = "#48A9EB"

            if ch1_1_data[2] == "容量不足":
                ch1_1_state_value["text"] = ch1_1_data[2]
                ch1_1_state_value["bg"] = "#F031A4"

            if ch1_1_signal == 1:
                ch1_1_log.append(
                    [
                        "Now-State:",
                        ch1_1_data[2],
                        ch1_1_data[3],
                        ch1_1_data[4],
                        ch1_1_data[5],
                        ch1_1_data[6],
                        ch1_1_data[7],
                    ]
                )
                if ch1_1_data[5] > 50:
                    pass
                else:
                    if math.fabs(ch1_1_data[5] - ch1_1_data[6]) > 5:
                        ch1_1_signal_ntc = ch1_1_signal_ntc + 1
                        if ch1_1_signal_ntc > 11:
                            ch1_1_error_data = "NTC温度异常"
                        else:
                            pass
                    else:
                        ch1_1_signal_ntc = 0

                if ch1_1_data[2] == "测试完成":
                    if (
                        ch1_1_data[8] < ch1_1_battery_capacity
                        or ch1_1_data[9] < ch1_1_battery_capacity
                    ):
                        ch1_1_error_data = "容量不足"
                        ch1_1_log.append(["Test-State", ch1_1_error_data])

                        ch1_1_log.append(["Input-Electric-all:", ch1_1_data[9]])

                        ch1_1_log.append(["Output-Electric-all:", ch1_1_data[8]])

                        endtime = datetime.datetime.now()
                        ch1_1_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # # stop_test("ch1_1")
                    else:
                        ch1_1_error_data = ch1_1_data[2]

                        ch1_1_log.append(["Test-State", ch1_1_data[2]])

                        ch1_1_log.append(["Input-Electric-all:", ch1_1_data[9]])

                        ch1_1_log.append(["Output-Electric-all:", ch1_1_data[8]])

                        endtime = datetime.datetime.now()
                        ch1_1_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # # stop_test("ch1_1")

        if (
            ch1_1_data[2] == "过压报警"
            or ch1_1_data[2] == "低压报警"
            or ch1_1_data[2] == "过流报警"
            or ch1_1_data[2] == "过温报警"
            or ch1_1_data[2] == "电池脱落或被保护"
            or ch1_1_data[2] == "电池不充电报警"
            or ch1_1_data[2] == "通信异常"
            or ch1_1_data[2] == "NTC温度异常"
            or ch1_1_data[2] == 4
            or ch1_1_data[2] == 5
            or ch1_1_data[2] == 6
            or ch1_1_data[2] == 7
            or ch1_1_data[2] == 8
            or ch1_1_data[2] == 9
        ):

            ch1_1_error_data = ch1_1_data[2]
            ch1_1_state_value["text"] = ch1_1_data[2]
            ch1_1_state_value["bg"] = "red"
            if ch1_1_signal == 1:
                ch1_1_log.append(
                    [
                        "Error-State:",
                        ch1_1_data[2],
                        ch1_1_data[3],
                        ch1_1_data[4],
                        ch1_1_data[5],
                        ch1_1_data[6],
                        ch1_1_data[7],
                    ]
                )

                errorendtime = datetime.datetime.now()
                ch1_1_log.append(
                    ["Error-End-Time", errorendtime.strftime("%Y-%m-%d %H:%M:%S")]
                )

                # # stop_test("ch1_1")

        if (
            ch1_2_data[2] == "充电状态"
            or ch1_2_data[2] == "放电状态"
            or ch1_2_data[2] == "测试完成"
            or ch1_2_data[2] == "待机状态"
            or ch1_2_data[2] == "容量不足"
            or ch1_2_data[2] == 0
            or ch1_2_data[2] == 1
            or ch1_2_data[2] == 2
            or ch1_2_data[2] == 3
        ):
            if ch1_2_data[2] == "待机状态":
                ch1_2_state_value["text"] = ch1_2_data[2]
                ch1_2_state_value["bg"] = "#919191"

            if ch1_2_data[2] == "测试完成":
                ch1_2_state_value["text"] = ch1_2_data[2]
                ch1_2_state_value["bg"] = "#63D0A4"

            if ch1_2_data[2] == "放电状态" or ch1_2_data[2] == "充电状态":
                ch1_2_state_value["text"] = ch1_2_data[2]
                ch1_2_state_value["bg"] = "#48A9EB"

            if ch1_2_data[2] == "容量不足":
                ch1_2_state_value["text"] = ch1_2_data[2]
                ch1_2_state_value["bg"] = "#F031A4"

            if ch1_2_signal == 1:
                ch1_2_log.append(
                    [
                        "Now-State:",
                        ch1_2_data[2],
                        ch1_2_data[3],
                        ch1_2_data[4],
                        ch1_2_data[5],
                        ch1_2_data[6],
                        ch1_2_data[7],
                    ]
                )
                if ch1_2_data[5] > 50:
                    pass
                else:
                    if math.fabs(ch1_2_data[5] - ch1_2_data[6]) > 5:
                        ch1_2_signal_ntc = ch1_2_signal_ntc + 1
                        if ch1_2_signal_ntc > 11:
                            ch1_2_error_data = "NTC温度异常"
                        else:
                            pass
                    else:
                        ch1_2_signal_ntc = 0

                if ch1_2_data[2] == "测试完成":
                    if (
                        ch1_2_data[8] < ch1_2_battery_capacity
                        or ch1_2_data[9] < ch1_2_battery_capacity
                    ):
                        ch1_2_error_data = "容量不足"
                        ch1_2_log.append(["Test-State", ch1_2_error_data])

                        ch1_2_log.append(["Input-Electric-all:", ch1_2_data[9]])

                        ch1_2_log.append(["Output-Electric-all:", ch1_2_data[8]])

                        endtime = datetime.datetime.now()
                        ch1_2_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # # stop_test("ch1_2")
                    else:
                        ch1_2_error_data = ch1_2_data[2]

                        ch1_2_log.append(["Test-State", ch1_2_data[2]])

                        ch1_2_log.append(["Input-Electric-all:", ch1_2_data[9]])

                        ch1_2_log.append(["Output-Electric-all:", ch1_2_data[8]])

                        endtime = datetime.datetime.now()
                        ch1_2_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch1_2")

        if (
            ch1_2_data[2] == "过压报警"
            or ch1_2_data[2] == "低压报警"
            or ch1_2_data[2] == "过流报警"
            or ch1_2_data[2] == "过温报警"
            or ch1_2_data[2] == "电池脱落或被保护"
            or ch1_2_data[2] == "电池不充电报警"
            or ch1_2_data[2] == "通信异常"
            or ch1_2_data[2] == "NTC温度异常"
            or ch1_2_data[2] == 4
            or ch1_2_data[2] == 5
            or ch1_2_data[2] == 6
            or ch1_2_data[2] == 7
            or ch1_2_data[2] == 8
            or ch1_2_data[2] == 9
        ):

            ch1_2_error_data = ch1_2_data[2]
            ch1_2_state_value["text"] = ch1_2_data[2]
            ch1_2_state_value["bg"] = "red"
            if ch1_2_signal == 1:
                ch1_2_log.append(
                    [
                        "Error-State:",
                        ch1_2_data[2],
                        ch1_2_data[3],
                        ch1_2_data[4],
                        ch1_2_data[5],
                        ch1_2_data[6],
                        ch1_2_data[7],
                    ]
                )

                errorendtime = datetime.datetime.now()
                ch1_2_log.append(
                    ["Error-End-Time", errorendtime.strftime("%Y-%m-%d %H:%M:%S")]
                )

                # stop_test("ch1_2")

        if (
            ch1_3_data[2] == "充电状态"
            or ch1_3_data[2] == "放电状态"
            or ch1_3_data[2] == "测试完成"
            or ch1_3_data[2] == "待机状态"
            or ch1_3_data[2] == "容量不足"
            or ch1_3_data[2] == 0
            or ch1_3_data[2] == 1
            or ch1_3_data[2] == 2
            or ch1_3_data[2] == 3
        ):
            if ch1_3_data[2] == "待机状态":
                ch1_3_state_value["text"] = ch1_3_data[2]
                ch1_3_state_value["bg"] = "#919191"

            if ch1_3_data[2] == "测试完成":
                ch1_3_state_value["text"] = ch1_3_data[2]
                ch1_3_state_value["bg"] = "#63D0A4"

            if ch1_3_data[2] == "放电状态" or ch1_3_data[2] == "充电状态":
                ch1_3_state_value["text"] = ch1_3_data[2]
                ch1_3_state_value["bg"] = "#48A9EB"

            if ch1_3_data[2] == "容量不足":
                ch1_3_state_value["text"] = ch1_3_data[2]
                ch1_3_state_value["bg"] = "#F031A4"

            if ch1_3_signal == 1:
                ch1_3_log.append(
                    [
                        "Now-State:",
                        ch1_3_data[2],
                        ch1_3_data[3],
                        ch1_3_data[4],
                        ch1_3_data[5],
                        ch1_3_data[6],
                        ch1_3_data[7],
                    ]
                )
                if ch1_3_data[5] > 50:
                    pass
                else:
                    if math.fabs(ch1_3_data[5] - ch1_3_data[6]) > 5:
                        ch1_3_signal_ntc = ch1_3_signal_ntc + 1
                        if ch1_3_signal_ntc > 11:
                            ch1_3_error_data = "NTC温度异常"
                        else:
                            pass
                    else:
                        ch1_3_signal_ntc = 0

                if ch1_3_data[2] == "测试完成":
                    if (
                        ch1_3_data[8] < ch1_3_battery_capacity
                        or ch1_3_data[9] < ch1_3_battery_capacity
                    ):
                        ch1_3_error_data = "容量不足"
                        ch1_3_log.append(["Test-State", ch1_3_error_data])

                        ch1_3_log.append(["Input-Electric-all:", ch1_3_data[9]])

                        ch1_3_log.append(["Output-Electric-all:", ch1_3_data[8]])

                        endtime = datetime.datetime.now()
                        ch1_3_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch1_3")
                    else:
                        ch1_3_error_data = ch1_3_data[2]

                        ch1_3_log.append(["Test-State", ch1_3_data[2]])

                        ch1_3_log.append(["Input-Electric-all:", ch1_3_data[9]])

                        ch1_3_log.append(["Output-Electric-all:", ch1_3_data[8]])

                        endtime = datetime.datetime.now()
                        ch1_3_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch1_3")

        if (
            ch1_3_data[2] == "过压报警"
            or ch1_3_data[2] == "低压报警"
            or ch1_3_data[2] == "过流报警"
            or ch1_3_data[2] == "过温报警"
            or ch1_3_data[2] == "电池脱落或被保护"
            or ch1_3_data[2] == "电池不充电报警"
            or ch1_3_data[2] == "通信异常"
            or ch1_3_data[2] == 4
            or ch1_3_data[2] == 5
            or ch1_3_data[2] == 6
            or ch1_3_data[2] == 7
            or ch1_3_data[2] == 8
            or ch1_3_data[2] == 9
            or ch1_3_data[2] == "NTC温度异常"
        ):

            ch1_3_error_data = ch1_3_data[2]
            ch1_3_state_value["text"] = ch1_3_data[2]
            ch1_3_state_value["bg"] = "red"
            if ch1_3_signal == 1:
                ch1_3_log.append(
                    [
                        "Error-State:",
                        ch1_3_data[2],
                        ch1_3_data[3],
                        ch1_3_data[4],
                        ch1_3_data[5],
                        ch1_3_data[6],
                        ch1_3_data[7],
                    ]
                )

                errorendtime = datetime.datetime.now()
                ch1_3_log.append(
                    ["Error-End-Time", errorendtime.strftime("%Y-%m-%d %H:%M:%S")]
                )

                # stop_test("ch1_3")

        if (
            ch1_4_data[2] == "充电状态"
            or ch1_4_data[2] == "放电状态"
            or ch1_4_data[2] == "测试完成"
            or ch1_4_data[2] == "待机状态"
            or ch1_4_data[2] == "容量不足"
            or ch1_4_data[2] == 0
            or ch1_4_data[2] == 1
            or ch1_4_data[2] == 2
            or ch1_4_data[2] == 3
        ):
            if ch1_4_data[2] == "待机状态":
                ch1_4_state_value["text"] = ch1_4_data[2]
                ch1_4_state_value["bg"] = "#919191"

            if ch1_4_data[2] == "测试完成":
                ch1_4_state_value["text"] = ch1_4_data[2]
                ch1_4_state_value["bg"] = "#63D0A4"

            if ch1_4_data[2] == "放电状态" or ch1_4_data[2] == "充电状态":
                ch1_4_state_value["text"] = ch1_4_data[2]
                ch1_4_state_value["bg"] = "#48A9EB"

            if ch1_4_data[2] == "容量不足":
                ch1_4_state_value["text"] = ch1_4_data[2]
                ch1_4_state_value["bg"] = "#F031A4"

            if ch1_4_signal == 1:
                ch1_4_log.append(
                    [
                        "Now-State:",
                        ch1_4_data[2],
                        ch1_4_data[3],
                        ch1_4_data[4],
                        ch1_4_data[5],
                        ch1_4_data[6],
                        ch1_4_data[7],
                    ]
                )
                if ch1_4_data[5] > 50:
                    pass
                else:
                    if math.fabs(ch1_4_data[5] - ch1_4_data[6]) > 5:
                        ch1_4_signal_ntc = ch1_4_signal_ntc + 1
                        if ch1_4_signal_ntc > 11:
                            ch1_4_error_data = "NTC温度异常"
                        else:
                            pass
                    else:
                        ch1_4_signal_ntc = 0

                if ch1_4_data[2] == "测试完成":
                    if (
                        ch1_4_data[8] < ch1_4_battery_capacity
                        or ch1_4_data[9] < ch1_4_battery_capacity
                    ):
                        ch1_4_error_data = "容量不足"
                        ch1_4_log.append(["Test-State", ch1_4_error_data])

                        ch1_4_log.append(["Input-Electric-all:", ch1_4_data[9]])

                        ch1_4_log.append(["Output-Electric-all:", ch1_4_data[8]])

                        endtime = datetime.datetime.now()
                        ch1_4_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch1_4")
                    else:
                        ch1_4_error_data = ch1_4_data[2]

                        ch1_4_log.append(["Test-State", ch1_4_data[2]])

                        ch1_4_log.append(["Input-Electric-all:", ch1_4_data[9]])

                        ch1_4_log.append(["Output-Electric-all:", ch1_4_data[8]])

                        endtime = datetime.datetime.now()
                        ch1_4_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch1_4")

        if (
            ch1_4_data[2] == "过压报警"
            or ch1_4_data[2] == "低压报警"
            or ch1_4_data[2] == "过流报警"
            or ch1_4_data[2] == "过温报警"
            or ch1_4_data[2] == "电池脱落或被保护"
            or ch1_4_data[2] == "电池不充电报警"
            or ch1_4_data[2] == "通信异常"
            or ch1_4_data[2] == "NTC温度异常"
            or ch1_4_data[2] == 4
            or ch1_4_data[2] == 5
            or ch1_4_data[2] == 6
            or ch1_4_data[2] == 7
            or ch1_4_data[2] == 8
            or ch1_4_data[2] == 9
        ):

            ch1_4_error_data = ch1_4_data[2]
            ch1_4_state_value["text"] = ch1_4_data[2]
            ch1_4_state_value["bg"] = "red"
            if ch1_4_signal == 1:
                ch1_4_log.append(
                    [
                        "Error-State:",
                        ch1_4_data[2],
                        ch1_4_data[3],
                        ch1_4_data[4],
                        ch1_4_data[5],
                        ch1_4_data[6],
                        ch1_4_data[7],
                    ]
                )

                errorendtime = datetime.datetime.now()
                ch1_4_log.append(
                    ["Error-End-Time", errorendtime.strftime("%Y-%m-%d %H:%M:%S")]
                )

                # stop_test("ch1_4")

        if (
            ch1_5_data[2] == "充电状态"
            or ch1_5_data[2] == "放电状态"
            or ch1_5_data[2] == "测试完成"
            or ch1_5_data[2] == "待机状态"
            or ch1_5_data[2] == "容量不足"
            or ch1_5_data[2] == 0
            or ch1_5_data[2] == 1
            or ch1_5_data[2] == 2
            or ch1_5_data[2] == 3
        ):
            if ch1_5_data[2] == "待机状态":
                ch1_5_state_value["text"] = ch1_5_data[2]
                ch1_5_state_value["bg"] = "#919191"

            if ch1_5_data[2] == "测试完成":
                ch1_5_state_value["text"] = ch1_5_data[2]
                ch1_5_state_value["bg"] = "#63D0A4"

            if ch1_5_data[2] == "放电状态" or ch1_5_data[2] == "充电状态":
                ch1_5_state_value["text"] = ch1_5_data[2]
                ch1_5_state_value["bg"] = "#48A9EB"

            if ch1_5_data[2] == "容量不足":
                ch1_5_state_value["text"] = ch1_5_data[2]
                ch1_5_state_value["bg"] = "#F031A4"

            if ch1_5_signal == 1:
                ch1_5_log.append(
                    [
                        "Now-State:",
                        ch1_5_data[2],
                        ch1_5_data[3],
                        ch1_5_data[4],
                        ch1_5_data[5],
                        ch1_5_data[6],
                        ch1_5_data[7],
                    ]
                )

                if ch1_5_data[5] > 50:
                    pass
                else:
                    if math.fabs(ch1_5_data[5] - ch1_5_data[6]) > 5:
                        ch1_5_signal_ntc = ch1_5_signal_ntc + 1
                        if ch1_5_signal_ntc > 11:
                            ch1_5_error_data = "NTC温度异常"
                        else:
                            pass
                    else:
                        ch1_5_signal_ntc = 0

                if ch1_5_data[2] == "测试完成":
                    if (
                        ch1_5_data[8] < ch1_5_battery_capacity
                        or ch1_5_data[9] < ch1_5_battery_capacity
                    ):
                        ch1_5_error_data = "容量不足"
                        ch1_5_log.append(["Test-State", ch1_5_error_data])

                        ch1_5_log.append(["Input-Electric-all:", ch1_5_data[9]])

                        ch1_5_log.append(["Output-Electric-all:", ch1_5_data[8]])

                        endtime = datetime.datetime.now()
                        ch1_5_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch1_5")
                    else:
                        ch1_5_error_data = ch1_5_data[2]

                        ch1_5_log.append(["Test-State", ch1_5_data[2]])

                        ch1_5_log.append(["Input-Electric-all:", ch1_5_data[9]])

                        ch1_5_log.append(["Output-Electric-all:", ch1_5_data[8]])

                        endtime = datetime.datetime.now()
                        ch1_5_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch1_5")

        if (
            ch1_5_data[2] == "过压报警"
            or ch1_5_data[2] == "低压报警"
            or ch1_5_data[2] == "过流报警"
            or ch1_5_data[2] == "过温报警"
            or ch1_5_data[2] == "电池脱落或被保护"
            or ch1_5_data[2] == "电池不充电报警"
            or ch1_5_data[2] == "通信异常"
            or ch1_5_data[2] == "NTC温度异常"
            or ch1_5_data[2] == 4
            or ch1_5_data[2] == 5
            or ch1_5_data[2] == 6
            or ch1_5_data[2] == 7
            or ch1_5_data[2] == 8
            or ch1_5_data[2] == 9
        ):

            ch1_5_error_data = ch1_5_data[2]
            ch1_5_state_value["text"] = ch1_5_data[2]
            ch1_5_state_value["bg"] = "red"
            if ch1_5_signal == 1:
                ch1_5_log.append(
                    [
                        "Error-State:",
                        ch1_5_data[2],
                        ch1_5_data[3],
                        ch1_5_data[4],
                        ch1_5_data[5],
                        ch1_5_data[6],
                        ch1_5_data[7],
                    ]
                )

                errorendtime = datetime.datetime.now()
                ch1_5_log.append(
                    ["Error-End-Time", errorendtime.strftime("%Y-%m-%d %H:%M:%S")]
                )

                # stop_test("ch1_5")

        if (
            ch1_6_data[2] == "充电状态"
            or ch1_6_data[2] == "放电状态"
            or ch1_6_data[2] == "测试完成"
            or ch1_6_data[2] == "待机状态"
            or ch1_6_data[2] == "容量不足"
            or ch1_6_data[2] == 0
            or ch1_6_data[2] == 1
            or ch1_6_data[2] == 2
            or ch1_6_data[2] == 3
        ):
            if ch1_6_data[2] == "待机状态":
                ch1_6_state_value["text"] = ch1_6_data[2]
                ch1_6_state_value["bg"] = "#919191"

            if ch1_6_data[2] == "测试完成":
                ch1_6_state_value["text"] = ch1_6_data[2]
                ch1_6_state_value["bg"] = "#63D0A4"

            if ch1_6_data[2] == "放电状态" or ch1_6_data[2] == "充电状态":
                ch1_6_state_value["text"] = ch1_6_data[2]
                ch1_6_state_value["bg"] = "#48A9EB"

            if ch1_6_data[2] == "容量不足":
                ch1_6_state_value["text"] = ch1_6_data[2]
                ch1_6_state_value["bg"] = "#F031A4"

            if ch1_6_signal == 1:
                ch1_6_log.append(
                    [
                        "Now-State:",
                        ch1_6_data[2],
                        ch1_6_data[3],
                        ch1_6_data[4],
                        ch1_6_data[5],
                        ch1_6_data[6],
                        ch1_6_data[7],
                    ]
                )

                if ch1_6_data[5] > 50:
                    pass
                else:
                    if math.fabs(ch1_6_data[5] - ch1_6_data[6]) > 5:
                        ch1_6_signal_ntc = ch1_6_signal_ntc + 1
                        if ch1_6_signal_ntc > 11:
                            ch1_6_error_data = "NTC温度异常"
                        else:
                            pass
                    else:
                        ch1_6_signal_ntc = 0

                if ch1_6_data[2] == "测试完成":
                    if (
                        ch1_6_data[8] < ch1_6_battery_capacity
                        or ch1_6_data[9] < ch1_6_battery_capacity
                    ):
                        ch1_6_error_data = "容量不足"
                        ch1_6_log.append(["Test-State", ch1_6_error_data])

                        ch1_6_log.append(["Input-Electric-all:", ch1_6_data[9]])

                        ch1_6_log.append(["Output-Electric-all:", ch1_6_data[8]])

                        endtime = datetime.datetime.now()
                        ch1_6_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch1_6")
                    else:
                        ch1_6_error_data = ch1_6_data[2]

                        ch1_6_log.append(["Test-State", ch1_6_data[2]])

                        ch1_6_log.append(["Input-Electric-all:", ch1_6_data[9]])

                        ch1_6_log.append(["Output-Electric-all:", ch1_6_data[8]])

                        endtime = datetime.datetime.now()
                        ch1_6_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch1_6")

        if (
            ch1_6_data[2] == "过压报警"
            or ch1_6_data[2] == "低压报警"
            or ch1_6_data[2] == "过流报警"
            or ch1_6_data[2] == "过温报警"
            or ch1_6_data[2] == "电池脱落或被保护"
            or ch1_6_data[2] == "电池不充电报警"
            or ch1_6_data[2] == "通信异常"
            or ch1_6_data[2] == "NTC温度异常"
            or ch1_6_data[2] == 4
            or ch1_6_data[2] == 5
            or ch1_6_data[2] == 6
            or ch1_6_data[2] == 7
            or ch1_6_data[2] == 8
            or ch1_6_data[2] == 9
        ):

            ch1_6_error_data = ch1_6_data[2]
            ch1_6_state_value["text"] = ch1_6_data[2]
            ch1_6_state_value["bg"] = "red"
            if ch1_6_signal == 1:
                ch1_6_log.append(
                    [
                        "Error-State:",
                        ch1_6_data[2],
                        ch1_6_data[3],
                        ch1_6_data[4],
                        ch1_6_data[5],
                        ch1_6_data[6],
                        ch1_6_data[7],
                    ]
                )

                errorendtime = datetime.datetime.now()
                ch1_6_log.append(
                    ["Error-End-Time", errorendtime.strftime("%Y-%m-%d %H:%M:%S")]
                )

                # stop_test("ch1_6")

        if (
            ch1_7_data[2] == "充电状态"
            or ch1_7_data[2] == "放电状态"
            or ch1_7_data[2] == "测试完成"
            or ch1_7_data[2] == "待机状态"
            or ch1_7_data[2] == "容量不足"
            or ch1_7_data[2] == 0
            or ch1_7_data[2] == 1
            or ch1_7_data[2] == 2
            or ch1_7_data[2] == 3
        ):
            if ch1_7_data[2] == "待机状态":
                ch1_7_state_value["text"] = ch1_7_data[2]
                ch1_7_state_value["bg"] = "#919191"

            if ch1_7_data[2] == "测试完成":
                ch1_7_state_value["text"] = ch1_7_data[2]
                ch1_7_state_value["bg"] = "#63D0A4"

            if ch1_7_data[2] == "放电状态" or ch1_7_data[2] == "充电状态":
                ch1_7_state_value["text"] = ch1_7_data[2]
                ch1_7_state_value["bg"] = "#48A9EB"

            if ch1_7_data[2] == "容量不足":
                ch1_7_state_value["text"] = ch1_7_data[2]
                ch1_7_state_value["bg"] = "#F031A4"

            if ch1_7_signal == 1:
                ch1_7_log.append(
                    [
                        "Now-State:",
                        ch1_7_data[2],
                        ch1_7_data[3],
                        ch1_7_data[4],
                        ch1_7_data[5],
                        ch1_7_data[6],
                        ch1_7_data[7],
                    ]
                )
                if ch1_7_data[5] > 50:
                    pass
                else:
                    if math.fabs(ch1_7_data[5] - ch1_7_data[6]) > 5:
                        ch1_7_signal_ntc = ch1_7_signal_ntc + 1
                        if ch1_7_signal_ntc > 11:
                            ch1_7_error_data = "NTC温度异常"
                        else:
                            pass
                    else:
                        ch1_7_signal_ntc = 0

                if ch1_7_data[2] == "测试完成":
                    if (
                        ch1_7_data[8] < ch1_7_battery_capacity
                        or ch1_7_data[9] < ch1_7_battery_capacity
                    ):
                        ch1_7_error_data = "容量不足"
                        ch1_7_log.append(["Test-State", ch1_7_error_data])

                        ch1_7_log.append(["Input-Electric-all:", ch1_7_data[9]])

                        ch1_7_log.append(["Output-Electric-all:", ch1_7_data[8]])

                        endtime = datetime.datetime.now()
                        ch1_7_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch1_7")
                    else:
                        ch1_7_error_data = ch1_7_data[2]

                        ch1_7_log.append(["Test-State", ch1_7_data[2]])

                        ch1_7_log.append(["Input-Electric-all:", ch1_7_data[9]])

                        ch1_7_log.append(["Output-Electric-all:", ch1_7_data[8]])

                        endtime = datetime.datetime.now()
                        ch1_7_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch1_7")

        if (
            ch1_7_data[2] == "过压报警"
            or ch1_7_data[2] == "低压报警"
            or ch1_7_data[2] == "过流报警"
            or ch1_7_data[2] == "过温报警"
            or ch1_7_data[2] == "电池脱落或被保护"
            or ch1_7_data[2] == "电池不充电报警"
            or ch1_7_data[2] == "通信异常"
            or ch1_7_data[2] == "NTC温度异常"
            or ch1_7_data[2] == 4
            or ch1_7_data[2] == 5
            or ch1_7_data[2] == 6
            or ch1_7_data[2] == 7
            or ch1_7_data[2] == 8
            or ch1_7_data[2] == 9
        ):

            ch1_7_error_data = ch1_7_data[2]
            ch1_7_state_value["text"] = ch1_7_data[2]
            ch1_7_state_value["bg"] = "red"
            if ch1_7_signal == 1:
                ch1_7_log.append(
                    [
                        "Error-State:",
                        ch1_7_data[2],
                        ch1_7_data[3],
                        ch1_7_data[4],
                        ch1_7_data[5],
                        ch1_7_data[6],
                        ch1_7_data[7],
                    ]
                )

                errorendtime = datetime.datetime.now()
                ch1_7_log.append(
                    ["Error-End-Time", errorendtime.strftime("%Y-%m-%d %H:%M:%S")]
                )

                # stop_test("ch1_7")

        if (
            ch1_8_data[2] == "充电状态"
            or ch1_8_data[2] == "放电状态"
            or ch1_8_data[2] == "测试完成"
            or ch1_8_data[2] == "待机状态"
            or ch1_8_data[2] == "容量不足"
            or ch1_8_data[2] == 0
            or ch1_8_data[2] == 1
            or ch1_8_data[2] == 2
            or ch1_8_data[2] == 3
        ):
            if ch1_8_data[2] == "待机状态":
                ch1_8_state_value["text"] = ch1_8_data[2]
                ch1_8_state_value["bg"] = "#919191"

            if ch1_8_data[2] == "测试完成":
                ch1_8_state_value["text"] = ch1_8_data[2]
                ch1_8_state_value["bg"] = "#63D0A4"

            if ch1_8_data[2] == "放电状态" or ch1_8_data[2] == "充电状态":
                ch1_8_state_value["text"] = ch1_8_data[2]
                ch1_8_state_value["bg"] = "#48A9EB"

            if ch1_8_data[2] == "容量不足":
                ch1_8_state_value["text"] = ch1_8_data[2]
                ch1_8_state_value["bg"] = "#F031A4"

            if ch1_8_signal == 1:
                ch1_8_log.append(
                    [
                        "Now-State:",
                        ch1_8_data[2],
                        ch1_8_data[3],
                        ch1_8_data[4],
                        ch1_8_data[5],
                        ch1_8_data[6],
                        ch1_8_data[7],
                    ]
                )
                if ch1_8_data[5] > 50:
                    pass
                else:
                    if math.fabs(ch1_8_data[5] - ch1_8_data[6]) > 5:
                        ch1_8_signal_ntc = ch1_8_signal_ntc + 1
                        if ch1_8_signal_ntc > 11:
                            ch1_8_error_data = "NTC温度异常"
                        else:
                            pass
                    else:
                        ch1_8_signal_ntc = 0

                if ch1_8_data[2] == "测试完成":
                    if (
                        ch1_8_data[8] < ch1_8_battery_capacity
                        or ch1_8_data[9] < ch1_8_battery_capacity
                    ):
                        ch1_8_error_data = "容量不足"
                        ch1_8_log.append(["Test-State", ch1_8_error_data])

                        ch1_8_log.append(["Input-Electric-all:", ch1_8_data[9]])

                        ch1_8_log.append(["Output-Electric-all:", ch1_8_data[8]])

                        endtime = datetime.datetime.now()
                        ch1_8_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch1_8")
                    else:
                        ch1_8_error_data = ch1_8_data[2]

                        ch1_8_log.append(["Test-State", ch1_8_data[2]])

                        ch1_8_log.append(["Input-Electric-all:", ch1_8_data[9]])

                        ch1_8_log.append(["Output-Electric-all:", ch1_8_data[8]])

                        endtime = datetime.datetime.now()
                        ch1_8_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch1_8")

        if (
            ch1_8_data[2] == "过压报警"
            or ch1_8_data[2] == "低压报警"
            or ch1_8_data[2] == "过流报警"
            or ch1_8_data[2] == "过温报警"
            or ch1_8_data[2] == "电池脱落或被保护"
            or ch1_8_data[2] == "电池不充电报警"
            or ch1_8_data[2] == "通信异常"
            or ch1_8_data[2] == "NTC温度异常"
            or ch1_8_data[2] == 4
            or ch1_8_data[2] == 5
            or ch1_8_data[2] == 6
            or ch1_8_data[2] == 7
            or ch1_8_data[2] == 8
            or ch1_8_data[2] == 9
        ):

            ch1_8_error_data = ch1_8_data[2]
            ch1_8_state_value["text"] = ch1_8_data[2]
            ch1_8_state_value["bg"] = "red"
            if ch1_8_signal == 1:
                ch1_8_log.append(
                    [
                        "Error-State:",
                        ch1_8_data[2],
                        ch1_8_data[3],
                        ch1_8_data[4],
                        ch1_8_data[5],
                        ch1_8_data[6],
                        ch1_8_data[7],
                    ]
                )

                errorendtime = datetime.datetime.now()
                ch1_8_log.append(
                    ["Error-End-Time", errorendtime.strftime("%Y-%m-%d %H:%M:%S")]
                )

                # stop_test("ch1_8")

        if (
            ch2_1_data[2] == "充电状态"
            or ch2_1_data[2] == "放电状态"
            or ch2_1_data[2] == "测试完成"
            or ch2_1_data[2] == "待机状态"
            or ch2_1_data[2] == "容量不足"
            or ch2_1_data[2] == 0
            or ch2_1_data[2] == 1
            or ch2_1_data[2] == 2
            or ch2_1_data[2] == 3
        ):
            if ch2_1_data[2] == "待机状态":
                ch2_1_state_value["text"] = ch2_1_data[2]
                ch2_1_state_value["bg"] = "#919191"

            if ch2_1_data[2] == "测试完成":
                ch2_1_state_value["text"] = ch2_1_data[2]
                ch2_1_state_value["bg"] = "#63D0A4"

            if ch2_1_data[2] == "放电状态" or ch2_1_data[2] == "充电状态":
                ch2_1_state_value["text"] = ch2_1_data[2]
                ch2_1_state_value["bg"] = "#48A9EB"

            if ch2_1_data[2] == "容量不足":
                ch2_1_state_value["text"] = ch2_1_data[2]
                ch2_1_state_value["bg"] = "#F031A4"

            if ch2_1_signal == 1:
                ch2_1_log.append(
                    [
                        "Now-State:",
                        ch2_1_data[2],
                        ch2_1_data[3],
                        ch2_1_data[4],
                        ch2_1_data[5],
                        ch2_1_data[6],
                        ch2_1_data[7],
                    ]
                )
                if ch2_1_data[5] > 50:
                    pass
                else:
                    if math.fabs(ch2_1_data[5] - ch2_1_data[6]) > 5:
                        ch2_1_signal_ntc = ch2_1_signal_ntc + 1
                        if ch2_1_signal_ntc > 11:
                            ch2_1_error_data = "NTC温度异常"
                        else:
                            pass
                    else:
                        ch2_1_signal_ntc = 0

                if ch2_1_data[2] == "测试完成":
                    if (
                        ch2_1_data[8] < ch2_1_battery_capacity
                        or ch2_1_data[9] < ch2_1_battery_capacity
                    ):
                        ch2_1_error_data = "容量不足"
                        ch2_1_log.append(["Test-State", ch2_1_error_data])

                        ch2_1_log.append(["Input-Electric-all:", ch2_1_data[9]])

                        ch2_1_log.append(["Output-Electric-all:", ch2_1_data[8]])

                        endtime = datetime.datetime.now()
                        ch2_1_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch2_1")
                    else:
                        ch2_1_error_data = ch2_1_data[2]

                        ch2_1_log.append(["Test-State", ch2_1_data[2]])

                        ch2_1_log.append(["Input-Electric-all:", ch2_1_data[9]])

                        ch2_1_log.append(["Output-Electric-all:", ch2_1_data[8]])

                        endtime = datetime.datetime.now()
                        ch2_1_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch2_1")

        if (
            ch2_1_data[2] == "过压报警"
            or ch2_1_data[2] == "低压报警"
            or ch2_1_data[2] == "过流报警"
            or ch2_1_data[2] == "过温报警"
            or ch2_1_data[2] == "电池脱落或被保护"
            or ch2_1_data[2] == "电池不充电报警"
            or ch2_1_data[2] == "通信异常"
            or ch2_1_data[2] == "NTC温度异常"
            or ch2_1_data[2] == 4
            or ch2_1_data[2] == 5
            or ch2_1_data[2] == 6
            or ch2_1_data[2] == 7
            or ch2_1_data[2] == 8
            or ch2_1_data[2] == 9
        ):

            ch2_1_error_data = ch2_1_data[2]
            ch2_1_state_value["text"] = ch2_1_data[2]
            ch2_1_state_value["bg"] = "red"
            if ch2_1_signal == 1:
                ch2_1_log.append(
                    [
                        "Error-State:",
                        ch2_1_data[2],
                        ch2_1_data[3],
                        ch2_1_data[4],
                        ch2_1_data[5],
                        ch2_1_data[6],
                        ch2_1_data[7],
                    ]
                )

                errorendtime = datetime.datetime.now()
                ch2_1_log.append(
                    ["Error-End-Time", errorendtime.strftime("%Y-%m-%d %H:%M:%S")]
                )

                # stop_test("ch2_1")

        if (
            ch2_2_data[2] == "充电状态"
            or ch2_2_data[2] == "放电状态"
            or ch2_2_data[2] == "测试完成"
            or ch2_2_data[2] == "待机状态"
            or ch2_2_data[2] == "容量不足"
            or ch2_2_data[2] == 0
            or ch2_2_data[2] == 1
            or ch2_2_data[2] == 2
            or ch2_2_data[2] == 3
        ):
            if ch2_2_data[2] == "待机状态":
                ch2_2_state_value["text"] = ch2_2_data[2]
                ch2_2_state_value["bg"] = "#919191"

            if ch2_2_data[2] == "测试完成":
                ch2_2_state_value["text"] = ch2_2_data[2]
                ch2_2_state_value["bg"] = "#63D0A4"

            if ch2_2_data[2] == "放电状态" or ch2_2_data[2] == "充电状态":
                ch2_2_state_value["text"] = ch2_2_data[2]
                ch2_2_state_value["bg"] = "#48A9EB"

            if ch2_2_data[2] == "容量不足":
                ch2_2_state_value["text"] = ch2_2_data[2]
                ch2_2_state_value["bg"] = "#F031A4"

            if ch2_2_signal == 1:
                ch2_2_log.append(
                    [
                        "Now-State:",
                        ch2_2_data[2],
                        ch2_2_data[3],
                        ch2_2_data[4],
                        ch2_2_data[5],
                        ch2_2_data[6],
                        ch2_2_data[7],
                    ]
                )

                if ch2_2_data[5] > 50:
                    pass
                else:
                    if math.fabs(ch2_2_data[5] - ch2_2_data[6]) > 5:
                        ch2_2_signal_ntc = ch2_2_signal_ntc + 1
                        if ch2_2_signal_ntc > 11:
                            ch2_2_error_data = "NTC温度异常"
                        else:
                            pass
                    else:
                        ch2_2_signal_ntc = 0

                if ch2_2_data[2] == "测试完成":
                    if (
                        ch2_2_data[8] < ch2_2_battery_capacity
                        or ch2_2_data[9] < ch2_2_battery_capacity
                    ):
                        ch2_2_error_data = "容量不足"
                        ch2_2_log.append(["Test-State", ch2_2_error_data])

                        ch2_2_log.append(["Input-Electric-all:", ch2_2_data[9]])

                        ch2_2_log.append(["Output-Electric-all:", ch2_2_data[8]])

                        endtime = datetime.datetime.now()
                        ch2_2_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch2_2")
                    else:
                        ch2_2_error_data = ch2_2_data[2]

                        ch2_2_log.append(["Test-State", ch2_2_data[2]])

                        ch2_2_log.append(["Input-Electric-all:", ch2_2_data[9]])

                        ch2_2_log.append(["Output-Electric-all:", ch2_2_data[8]])

                        endtime = datetime.datetime.now()
                        ch2_2_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch2_2")

        if (
            ch2_2_data[2] == "过压报警"
            or ch2_2_data[2] == "低压报警"
            or ch2_2_data[2] == "过流报警"
            or ch2_2_data[2] == "过温报警"
            or ch2_2_data[2] == "电池脱落或被保护"
            or ch2_2_data[2] == "电池不充电报警"
            or ch2_2_data[2] == "通信异常"
            or ch2_2_data[2] == "NTC温度异常"
            or ch2_2_data[2] == 4
            or ch2_2_data[2] == 5
            or ch2_2_data[2] == 6
            or ch2_2_data[2] == 7
            or ch2_2_data[2] == 8
            or ch2_2_data[2] == 9
        ):

            ch2_2_error_data = ch2_2_data[2]
            ch2_2_state_value["text"] = ch2_2_data[2]
            ch2_2_state_value["bg"] = "red"
            if ch2_2_signal == 1:
                ch2_2_log.append(
                    [
                        "Error-State:",
                        ch2_2_data[2],
                        ch2_2_data[3],
                        ch2_2_data[4],
                        ch2_2_data[5],
                        ch2_2_data[6],
                        ch2_2_data[7],
                    ]
                )

                errorendtime = datetime.datetime.now()
                ch2_2_log.append(
                    ["Error-End-Time", errorendtime.strftime("%Y-%m-%d %H:%M:%S")]
                )

                # stop_test("ch2_2")

        if (
            ch2_3_data[2] == "充电状态"
            or ch2_3_data[2] == "放电状态"
            or ch2_3_data[2] == "测试完成"
            or ch2_3_data[2] == "待机状态"
            or ch2_3_data[2] == "容量不足"
            or ch2_3_data[2] == 0
            or ch2_3_data[2] == 1
            or ch2_3_data[2] == 2
            or ch2_3_data[2] == 3
        ):
            if ch2_3_data[2] == "待机状态":
                ch2_3_state_value["text"] = ch2_3_data[2]
                ch2_3_state_value["bg"] = "#919191"

            if ch2_3_data[2] == "测试完成":
                ch2_3_state_value["text"] = ch2_3_data[2]
                ch2_3_state_value["bg"] = "#63D0A4"

            if ch2_3_data[2] == "放电状态" or ch2_3_data[2] == "充电状态":
                ch2_3_state_value["text"] = ch2_3_data[2]
                ch2_3_state_value["bg"] = "#48A9EB"

            if ch2_3_data[2] == "容量不足":
                ch2_3_state_value["text"] = ch2_3_data[2]
                ch2_3_state_value["bg"] = "#F031A4"

            if ch2_3_signal == 1:
                ch2_3_log.append(
                    [
                        "Now-State:",
                        ch2_3_data[2],
                        ch2_3_data[3],
                        ch2_3_data[4],
                        ch2_3_data[5],
                        ch2_3_data[6],
                        ch2_3_data[7],
                    ]
                )
                if ch2_3_data[5] > 50:
                    pass
                else:
                    if math.fabs(ch2_3_data[5] - ch2_3_data[6]) > 5:
                        ch2_3_signal_ntc = ch2_3_signal_ntc + 1
                        if ch2_3_signal_ntc > 11:
                            ch2_3_error_data = "NTC温度异常"
                        else:
                            pass
                    else:
                        ch2_3_signal_ntc = 0

                if ch2_3_data[2] == "测试完成":
                    if (
                        ch2_3_data[8] < ch2_3_battery_capacity
                        or ch2_3_data[9] < ch2_3_battery_capacity
                    ):
                        ch2_3_error_data = "容量不足"
                        ch2_3_log.append(["Test-State", ch2_3_error_data])

                        ch2_3_log.append(["Input-Electric-all:", ch2_3_data[9]])

                        ch2_3_log.append(["Output-Electric-all:", ch2_3_data[8]])

                        endtime = datetime.datetime.now()
                        ch2_3_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch2_3")
                    else:
                        ch2_3_error_data = ch2_3_data[2]

                        ch2_3_log.append(["Test-State", ch2_3_data[2]])

                        ch2_3_log.append(["Input-Electric-all:", ch2_3_data[9]])

                        ch2_3_log.append(["Output-Electric-all:", ch2_3_data[8]])

                        endtime = datetime.datetime.now()
                        ch2_3_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch2_3")

        if (
            ch2_3_data[2] == "过压报警"
            or ch2_3_data[2] == "低压报警"
            or ch2_3_data[2] == "过流报警"
            or ch2_3_data[2] == "过温报警"
            or ch2_3_data[2] == "电池脱落或被保护"
            or ch2_3_data[2] == "电池不充电报警"
            or ch2_3_data[2] == "通信异常"
            or ch2_3_data[2] == "NTC温度异常"
            or ch2_3_data[2] == 4
            or ch2_3_data[2] == 5
            or ch2_3_data[2] == 6
            or ch2_3_data[2] == 7
            or ch2_3_data[2] == 8
            or ch2_3_data[2] == 9
        ):

            ch2_3_error_data = ch2_3_data[2]
            ch2_3_state_value["text"] = ch2_3_data[2]
            ch2_3_state_value["bg"] = "red"
            if ch2_3_signal == 1:
                ch2_3_log.append(
                    [
                        "Error-State:",
                        ch2_3_data[2],
                        ch2_3_data[3],
                        ch2_3_data[4],
                        ch2_3_data[5],
                        ch2_3_data[6],
                        ch2_3_data[7],
                    ]
                )

                errorendtime = datetime.datetime.now()
                ch2_3_log.append(
                    ["Error-End-Time", errorendtime.strftime("%Y-%m-%d %H:%M:%S")]
                )

                # stop_test("ch2_3")

        if (
            ch2_4_data[2] == "充电状态"
            or ch2_4_data[2] == "放电状态"
            or ch2_4_data[2] == "测试完成"
            or ch2_4_data[2] == "待机状态"
            or ch2_4_data[2] == "容量不足"
            or ch2_4_data[2] == 0
            or ch2_4_data[2] == 1
            or ch2_4_data[2] == 2
            or ch2_4_data[2] == 3
        ):
            if ch2_4_data[2] == "待机状态":
                ch2_4_state_value["text"] = ch2_4_data[2]
                ch2_4_state_value["bg"] = "#919191"

            if ch2_4_data[2] == "测试完成":
                ch2_4_state_value["text"] = ch2_4_data[2]
                ch2_4_state_value["bg"] = "#63D0A4"

            if ch2_4_data[2] == "放电状态" or ch2_4_data[2] == "充电状态":
                ch2_4_state_value["text"] = ch2_4_data[2]
                ch2_4_state_value["bg"] = "#48A9EB"

            if ch2_4_data[2] == "容量不足":
                ch2_4_state_value["text"] = ch2_4_data[2]
                ch2_4_state_value["bg"] = "#F031A4"

            if ch2_4_signal == 1:
                ch2_4_log.append(
                    [
                        "Now-State:",
                        ch2_4_data[2],
                        ch2_4_data[3],
                        ch2_4_data[4],
                        ch2_4_data[5],
                        ch2_4_data[6],
                        ch2_4_data[7],
                    ]
                )
                if ch2_4_data[5] > 50:
                    pass
                else:
                    if math.fabs(ch2_4_data[5] - ch2_4_data[6]) > 5:
                        ch2_4_signal_ntc = ch2_4_signal_ntc + 1
                        if ch2_4_signal_ntc > 11:
                            ch2_4_error_data = "NTC温度异常"
                        else:
                            pass
                    else:
                        ch2_4_signal_ntc = 0

                if ch2_4_data[2] == "测试完成":
                    if (
                        ch2_4_data[8] < ch2_4_battery_capacity
                        or ch2_4_data[9] < ch2_4_battery_capacity
                    ):
                        ch2_4_error_data = "容量不足"
                        ch2_4_log.append(["Test-State", ch2_4_error_data])

                        ch2_4_log.append(["Input-Electric-all:", ch2_4_data[9]])

                        ch2_4_log.append(["Output-Electric-all:", ch2_4_data[8]])

                        endtime = datetime.datetime.now()
                        ch2_4_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch2_4")
                    else:
                        ch2_4_error_data = ch2_4_data[2]

                        ch2_4_log.append(["Test-State", ch2_4_data[2]])

                        ch2_4_log.append(["Input-Electric-all:", ch2_4_data[9]])

                        ch2_4_log.append(["Output-Electric-all:", ch2_4_data[8]])

                        endtime = datetime.datetime.now()
                        ch2_4_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch2_4")

        if (
            ch2_4_data[2] == "过压报警"
            or ch2_4_data[2] == "低压报警"
            or ch2_4_data[2] == "过流报警"
            or ch2_4_data[2] == "过温报警"
            or ch2_4_data[2] == "电池脱落或被保护"
            or ch2_4_data[2] == "电池不充电报警"
            or ch2_4_data[2] == "通信异常"
            or ch2_4_data[2] == "NTC温度异常"
            or ch2_4_data[2] == 4
            or ch2_4_data[2] == 5
            or ch2_4_data[2] == 6
            or ch2_4_data[2] == 7
            or ch2_4_data[2] == 8
            or ch2_4_data[2] == 9
        ):

            ch2_4_error_data = ch2_4_data[2]
            ch2_4_state_value["text"] = ch2_4_data[2]
            ch2_4_state_value["bg"] = "red"
            if ch2_4_signal == 1:
                ch2_4_log.append(
                    [
                        "Error-State:",
                        ch2_4_data[2],
                        ch2_4_data[3],
                        ch2_4_data[4],
                        ch2_4_data[5],
                        ch2_4_data[6],
                        ch2_4_data[7],
                    ]
                )

                errorendtime = datetime.datetime.now()
                ch2_4_log.append(
                    ["Error-End-Time", errorendtime.strftime("%Y-%m-%d %H:%M:%S")]
                )

                # stop_test("ch2_4")

        if (
            ch2_5_data[2] == "充电状态"
            or ch2_5_data[2] == "放电状态"
            or ch2_5_data[2] == "测试完成"
            or ch2_5_data[2] == "待机状态"
            or ch2_5_data[2] == "容量不足"
            or ch2_5_data[2] == 0
            or ch2_5_data[2] == 1
            or ch2_5_data[2] == 2
            or ch2_5_data[2] == 3
        ):
            if ch2_5_data[2] == "待机状态":
                ch2_5_state_value["text"] = ch2_5_data[2]
                ch2_5_state_value["bg"] = "#919191"

            if ch2_5_data[2] == "测试完成":
                ch2_5_state_value["text"] = ch2_5_data[2]
                ch2_5_state_value["bg"] = "#63D0A4"

            if ch2_5_data[2] == "放电状态" or ch2_5_data[2] == "充电状态":
                ch2_5_state_value["text"] = ch2_5_data[2]
                ch2_5_state_value["bg"] = "#48A9EB"

            if ch2_5_data[2] == "容量不足":
                ch2_5_state_value["text"] = ch2_5_data[2]
                ch2_5_state_value["bg"] = "#F031A4"

            if ch2_5_signal == 1:
                ch2_5_log.append(
                    [
                        "Now-State:",
                        ch2_5_data[2],
                        ch2_5_data[3],
                        ch2_5_data[4],
                        ch2_5_data[5],
                        ch2_5_data[6],
                        ch2_5_data[7],
                    ]
                )
                if ch2_5_data[5] > 50:
                    pass
                else:
                    if math.fabs(ch2_5_data[5] - ch2_5_data[6]) > 5:
                        ch2_5_signal_ntc = ch2_5_signal_ntc + 1
                        if ch2_5_signal_ntc > 11:
                            ch2_5_error_data = "NTC温度异常"
                        else:
                            pass
                    else:
                        ch2_5_signal_ntc = 0

                if ch2_5_data[2] == "测试完成":
                    if (
                        ch2_5_data[8] < ch2_5_battery_capacity
                        or ch2_5_data[9] < ch2_5_battery_capacity
                    ):
                        ch2_5_error_data = "容量不足"
                        ch2_5_log.append(["Test-State", ch2_5_error_data])

                        ch2_5_log.append(["Input-Electric-all:", ch2_5_data[9]])

                        ch2_5_log.append(["Output-Electric-all:", ch2_5_data[8]])

                        endtime = datetime.datetime.now()
                        ch2_5_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch2_5")
                    else:
                        ch2_5_error_data = ch2_5_data[2]

                        ch2_5_log.append(["Test-State", ch2_5_data[2]])

                        ch2_5_log.append(["Input-Electric-all:", ch2_5_data[9]])

                        ch2_5_log.append(["Output-Electric-all:", ch2_5_data[8]])

                        endtime = datetime.datetime.now()
                        ch2_5_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch2_5")

        if (
            ch2_5_data[2] == "过压报警"
            or ch2_5_data[2] == "低压报警"
            or ch2_5_data[2] == "过流报警"
            or ch2_5_data[2] == "过温报警"
            or ch2_5_data[2] == "电池脱落或被保护"
            or ch2_5_data[2] == "电池不充电报警"
            or ch2_5_data[2] == "通信异常"
            or ch2_5_data[2] == "NTC温度异常"
            or ch2_5_data[2] == 4
            or ch2_5_data[2] == 5
            or ch2_5_data[2] == 6
            or ch2_5_data[2] == 7
            or ch2_5_data[2] == 8
            or ch2_5_data[2] == 9
        ):

            ch2_5_error_data = ch2_5_data[2]
            ch2_5_state_value["text"] = ch2_5_data[2]
            ch2_5_state_value["bg"] = "red"
            if ch2_5_signal == 1:
                ch2_5_log.append(
                    [
                        "Error-State:",
                        ch2_5_data[2],
                        ch2_5_data[3],
                        ch2_5_data[4],
                        ch2_5_data[5],
                        ch2_5_data[6],
                        ch2_5_data[7],
                    ]
                )

                errorendtime = datetime.datetime.now()
                ch2_5_log.append(
                    ["Error-End-Time", errorendtime.strftime("%Y-%m-%d %H:%M:%S")]
                )

                # stop_test("ch2_5")

        if (
            ch2_6_data[2] == "充电状态"
            or ch2_6_data[2] == "放电状态"
            or ch2_6_data[2] == "测试完成"
            or ch2_6_data[2] == "待机状态"
            or ch2_6_data[2] == "容量不足"
            or ch2_6_data[2] == 0
            or ch2_6_data[2] == 1
            or ch2_6_data[2] == 2
            or ch2_6_data[2] == 3
        ):
            if ch2_6_data[2] == "待机状态":
                ch2_6_state_value["text"] = ch2_6_data[2]
                ch2_6_state_value["bg"] = "#919191"

            if ch2_6_data[2] == "测试完成":
                ch2_6_state_value["text"] = ch2_6_data[2]
                ch2_6_state_value["bg"] = "#63D0A4"

            if ch2_6_data[2] == "放电状态" or ch2_6_data[2] == "充电状态":
                ch2_6_state_value["text"] = ch2_6_data[2]
                ch2_6_state_value["bg"] = "#48A9EB"

            if ch2_6_data[2] == "容量不足":
                ch2_6_state_value["text"] = ch2_6_data[2]
                ch2_6_state_value["bg"] = "#F031A4"

            if ch2_6_signal == 1:
                ch2_6_log.append(
                    [
                        "Now-State:",
                        ch2_6_data[2],
                        ch2_6_data[3],
                        ch2_6_data[4],
                        ch2_6_data[5],
                        ch2_6_data[6],
                        ch2_6_data[7],
                    ]
                )
                if ch2_6_data[5] > 50:
                    pass
                else:
                    if math.fabs(ch2_6_data[5] - ch2_6_data[6]) > 5:
                        ch2_6_signal_ntc = ch2_6_signal_ntc + 1
                        if ch2_6_signal_ntc > 11:
                            ch2_6_error_data = "NTC温度异常"
                        else:
                            pass
                    else:
                        ch2_6_signal_ntc = 0

                if ch2_6_data[2] == "测试完成":
                    if (
                        ch2_6_data[8] < ch2_6_battery_capacity
                        or ch2_6_data[9] < ch2_6_battery_capacity
                    ):
                        ch2_6_error_data = "容量不足"
                        ch2_6_log.append(["Test-State", ch2_6_error_data])

                        ch2_6_log.append(["Input-Electric-all:", ch2_6_data[9]])

                        ch2_6_log.append(["Output-Electric-all:", ch2_6_data[8]])

                        endtime = datetime.datetime.now()
                        ch2_6_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch2_6")
                    else:
                        ch2_6_error_data = ch2_6_data[2]

                        ch2_6_log.append(["Test-State", ch2_6_data[2]])

                        ch2_6_log.append(["Input-Electric-all:", ch2_6_data[9]])

                        ch2_6_log.append(["Output-Electric-all:", ch2_6_data[8]])

                        endtime = datetime.datetime.now()
                        ch2_6_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch2_6")

        if (
            ch2_6_data[2] == "过压报警"
            or ch2_6_data[2] == "低压报警"
            or ch2_6_data[2] == "过流报警"
            or ch2_6_data[2] == "过温报警"
            or ch2_6_data[2] == "电池脱落或被保护"
            or ch2_6_data[2] == "电池不充电报警"
            or ch2_6_data[2] == "通信异常"
            or ch2_6_data[2] == "NTC温度异常"
            or ch2_6_data[2] == 4
            or ch2_6_data[2] == 5
            or ch2_6_data[2] == 6
            or ch2_6_data[2] == 7
            or ch2_6_data[2] == 8
            or ch2_6_data[2] == 9
        ):

            ch2_6_error_data = ch2_6_data[2]
            ch2_6_state_value["text"] = ch2_6_data[2]
            ch2_6_state_value["bg"] = "red"
            if ch2_6_signal == 1:
                ch2_6_log.append(
                    [
                        "Error-State:",
                        ch2_6_data[2],
                        ch2_6_data[3],
                        ch2_6_data[4],
                        ch2_6_data[5],
                        ch2_6_data[6],
                        ch2_6_data[7],
                    ]
                )

                errorendtime = datetime.datetime.now()
                ch2_6_log.append(
                    ["Error-End-Time", errorendtime.strftime("%Y-%m-%d %H:%M:%S")]
                )

                # stop_test("ch2_6")

        if (
            ch2_7_data[2] == "充电状态"
            or ch2_7_data[2] == "放电状态"
            or ch2_7_data[2] == "测试完成"
            or ch2_7_data[2] == "待机状态"
            or ch2_7_data[2] == "容量不足"
            or ch2_7_data[2] == 0
            or ch2_7_data[2] == 1
            or ch2_7_data[2] == 2
            or ch2_7_data[2] == 3
        ):
            if ch2_7_data[2] == "待机状态":
                ch2_7_state_value["text"] = ch2_7_data[2]
                ch2_7_state_value["bg"] = "#919191"

            if ch2_7_data[2] == "测试完成":
                ch2_7_state_value["text"] = ch2_7_data[2]
                ch2_7_state_value["bg"] = "#63D0A4"

            if ch2_7_data[2] == "放电状态" or ch2_7_data[2] == "充电状态":
                ch2_7_state_value["text"] = ch2_7_data[2]
                ch2_7_state_value["bg"] = "#48A9EB"

            if ch2_7_data[2] == "容量不足":
                ch2_7_state_value["text"] = ch2_7_data[2]
                ch2_7_state_value["bg"] = "#F031A4"

            if ch2_7_signal == 1:
                ch2_7_log.append(
                    [
                        "Now-State:",
                        ch2_7_data[2],
                        ch2_7_data[3],
                        ch2_7_data[4],
                        ch2_7_data[5],
                        ch2_7_data[6],
                        ch2_7_data[7],
                    ]
                )
                if ch2_7_data[5] > 50:
                    pass
                else:
                    if math.fabs(ch2_7_data[5] - ch2_7_data[6]) > 5:
                        ch2_7_signal_ntc = ch2_7_signal_ntc + 1
                        if ch2_7_signal_ntc > 11:
                            ch2_7_error_data = "NTC温度异常"
                        else:
                            pass
                    else:
                        ch2_7_signal_ntc = 0

                if ch2_7_data[2] == "测试完成":
                    if (
                        ch2_7_data[8] < ch2_7_battery_capacity
                        or ch2_7_data[9] < ch2_7_battery_capacity
                    ):
                        ch2_7_error_data = "容量不足"
                        ch2_7_log.append(["Test-State", ch2_7_error_data])

                        ch2_7_log.append(["Input-Electric-all:", ch2_7_data[9]])

                        ch2_7_log.append(["Output-Electric-all:", ch2_7_data[8]])

                        endtime = datetime.datetime.now()
                        ch2_7_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch2_7")
                    else:
                        ch2_7_error_data = ch2_7_data[2]

                        ch2_7_log.append(["Test-State", ch2_7_data[2]])

                        ch2_7_log.append(["Input-Electric-all:", ch2_7_data[9]])

                        ch2_7_log.append(["Output-Electric-all:", ch2_7_data[8]])

                        endtime = datetime.datetime.now()
                        ch2_7_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch2_7")

        if (
            ch2_7_data[2] == "过压报警"
            or ch2_7_data[2] == "低压报警"
            or ch2_7_data[2] == "过流报警"
            or ch2_7_data[2] == "过温报警"
            or ch2_7_data[2] == "电池脱落或被保护"
            or ch2_7_data[2] == "电池不充电报警"
            or ch2_7_data[2] == "通信异常"
            or ch2_7_data[2] == "NTC温度异常"
            or ch2_7_data[2] == 4
            or ch2_7_data[2] == 5
            or ch2_7_data[2] == 6
            or ch2_7_data[2] == 7
            or ch2_7_data[2] == 8
            or ch2_7_data[2] == 9
        ):

            ch2_7_error_data = ch2_7_data[2]
            ch2_7_state_value["text"] = ch2_7_data[2]
            ch2_7_state_value["bg"] = "red"
            if ch2_7_signal == 1:
                ch2_7_log.append(
                    [
                        "Error-State:",
                        ch2_7_data[2],
                        ch2_7_data[3],
                        ch2_7_data[4],
                        ch2_7_data[5],
                        ch2_7_data[6],
                        ch2_7_data[7],
                    ]
                )

                errorendtime = datetime.datetime.now()
                ch2_7_log.append(
                    ["Error-End-Time", errorendtime.strftime("%Y-%m-%d %H:%M:%S")]
                )

                # stop_test("ch2_7")

        if (
            ch2_8_data[2] == "充电状态"
            or ch2_8_data[2] == "放电状态"
            or ch2_8_data[2] == "测试完成"
            or ch2_8_data[2] == "待机状态"
            or ch2_8_data[2] == "容量不足"
            or ch2_8_data[2] == 0
            or ch2_8_data[2] == 1
            or ch2_8_data[2] == 2
            or ch2_8_data[2] == 3
        ):
            if ch2_8_data[2] == "待机状态":
                ch2_8_state_value["text"] = ch2_8_data[2]
                ch2_8_state_value["bg"] = "#919191"

            if ch2_8_data[2] == "测试完成":
                ch2_8_state_value["text"] = ch2_8_data[2]
                ch2_8_state_value["bg"] = "#63D0A4"

            if ch2_8_data[2] == "放电状态" or ch2_8_data[2] == "充电状态":
                ch2_8_state_value["text"] = ch2_8_data[2]
                ch2_8_state_value["bg"] = "#48A9EB"

            if ch2_8_data[2] == "容量不足":
                ch2_8_state_value["text"] = ch2_8_data[2]
                ch2_8_state_value["bg"] = "#F031A4"

            if ch2_8_signal == 1:
                ch2_8_log.append(
                    [
                        "Now-State:",
                        ch2_8_data[2],
                        ch2_8_data[3],
                        ch2_8_data[4],
                        ch2_8_data[5],
                        ch2_8_data[6],
                        ch2_8_data[7],
                    ]
                )
                if ch2_8_data[5] > 50:
                    pass
                else:
                    if math.fabs(ch2_8_data[5] - ch2_8_data[6]) > 5:
                        ch2_8_signal_ntc = ch2_8_signal_ntc + 1
                        if ch2_8_signal_ntc > 11:
                            ch2_8_error_data = "NTC温度异常"
                        else:
                            pass
                    else:
                        ch2_8_signal_ntc = 0

                if ch2_8_data[2] == "测试完成":
                    if (
                        ch2_8_data[8] < ch2_8_battery_capacity
                        or ch2_8_data[9] < ch2_8_battery_capacity
                    ):
                        ch2_8_error_data = "容量不足"
                        ch2_8_log.append(["Test-State", ch2_8_error_data])

                        ch2_8_log.append(["Input-Electric-all:", ch2_8_data[9]])

                        ch2_8_log.append(["Output-Electric-all:", ch2_8_data[8]])

                        endtime = datetime.datetime.now()
                        ch2_8_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch2_8")
                    else:
                        ch2_8_error_data = ch2_8_data[2]

                        ch2_8_log.append(["Test-State", ch2_8_data[2]])

                        ch2_8_log.append(["Input-Electric-all:", ch2_8_data[9]])

                        ch2_8_log.append(["Output-Electric-all:", ch2_8_data[8]])

                        endtime = datetime.datetime.now()
                        ch2_8_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch2_8")

        if (
            ch2_8_data[2] == "过压报警"
            or ch2_8_data[2] == "低压报警"
            or ch2_8_data[2] == "过流报警"
            or ch2_8_data[2] == "过温报警"
            or ch2_8_data[2] == "电池脱落或被保护"
            or ch2_8_data[2] == "电池不充电报警"
            or ch2_8_data[2] == "通信异常"
            or ch2_8_data[2] == "NTC温度异常"
            or ch2_8_data[2] == 4
            or ch2_8_data[2] == 5
            or ch2_8_data[2] == 6
            or ch2_8_data[2] == 7
            or ch2_8_data[2] == 8
            or ch2_8_data[2] == 9
        ):

            ch2_8_error_data = ch2_8_data[2]
            ch2_8_state_value["text"] = ch2_8_data[2]
            ch2_8_state_value["bg"] = "red"
            if ch2_8_signal == 1:
                ch2_8_log.append(
                    [
                        "Error-State:",
                        ch2_8_data[2],
                        ch2_8_data[3],
                        ch2_8_data[4],
                        ch2_8_data[5],
                        ch2_8_data[6],
                        ch2_8_data[7],
                    ]
                )

                errorendtime = datetime.datetime.now()
                ch2_8_log.append(
                    ["Error-End-Time", errorendtime.strftime("%Y-%m-%d %H:%M:%S")]
                )

                # stop_test("ch2_8")

        if (
            ch3_1_data[2] == "充电状态"
            or ch3_1_data[2] == "放电状态"
            or ch3_1_data[2] == "测试完成"
            or ch3_1_data[2] == "待机状态"
            or ch3_1_data[2] == "容量不足"
            or ch3_1_data[2] == 0
            or ch3_1_data[2] == 1
            or ch3_1_data[2] == 2
            or ch3_1_data[2] == 3
        ):
            if ch3_1_data[2] == "待机状态":
                ch3_1_state_value["text"] = ch3_1_data[2]
                ch3_1_state_value["bg"] = "#919191"

            if ch3_1_data[2] == "测试完成":
                ch3_1_state_value["text"] = ch3_1_data[2]
                ch3_1_state_value["bg"] = "#63D0A4"

            if ch3_1_data[2] == "放电状态" or ch3_1_data[2] == "充电状态":
                ch3_1_state_value["text"] = ch3_1_data[2]
                ch3_1_state_value["bg"] = "#48A9EB"

            if ch3_1_data[2] == "容量不足":
                ch3_1_state_value["text"] = ch3_1_data[2]
                ch3_1_state_value["bg"] = "#F031A4"

            if ch3_1_signal == 1:
                ch3_1_log.append(
                    [
                        "Now-State:",
                        ch3_1_data[2],
                        ch3_1_data[3],
                        ch3_1_data[4],
                        ch3_1_data[5],
                        ch3_1_data[6],
                        ch3_1_data[7],
                    ]
                )
                if ch3_1_data[5] > 50:
                    pass
                else:
                    if math.fabs(ch3_1_data[5] - ch3_1_data[6]) > 5:
                        ch3_1_signal_ntc = ch3_1_signal_ntc + 1
                        if ch3_1_signal_ntc > 11:
                            ch3_1_error_data = "NTC温度异常"
                        else:
                            pass
                    else:
                        ch3_1_signal_ntc = 0

                if ch3_1_data[2] == "测试完成":
                    if (
                        ch3_1_data[8] < ch3_1_battery_capacity
                        or ch3_1_data[9] < ch3_1_battery_capacity
                    ):
                        ch3_1_error_data = "容量不足"
                        ch3_1_log.append(["Test-State", ch3_1_error_data])

                        ch3_1_log.append(["Input-Electric-all:", ch3_1_data[9]])

                        ch3_1_log.append(["Output-Electric-all:", ch3_1_data[8]])

                        endtime = datetime.datetime.now()
                        ch3_1_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch3_1")
                    else:
                        ch3_1_error_data = ch3_1_data[2]

                        ch3_1_log.append(["Test-State", ch3_1_data[2]])

                        ch3_1_log.append(["Input-Electric-all:", ch3_1_data[9]])

                        ch3_1_log.append(["Output-Electric-all:", ch3_1_data[8]])

                        endtime = datetime.datetime.now()
                        ch3_1_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch3_1")

        if (
            ch3_1_data[2] == "过压报警"
            or ch3_1_data[2] == "低压报警"
            or ch3_1_data[2] == "过流报警"
            or ch3_1_data[2] == "过温报警"
            or ch3_1_data[2] == "电池脱落或被保护"
            or ch3_1_data[2] == "电池不充电报警"
            or ch3_1_data[2] == "通信异常"
            or ch3_1_data[2] == "NTC温度异常"
            or ch3_1_data[2] == 4
            or ch3_1_data[2] == 5
            or ch3_1_data[2] == 6
            or ch3_1_data[2] == 7
            or ch3_1_data[2] == 8
            or ch3_1_data[2] == 9
        ):

            ch3_1_error_data = ch3_1_data[2]
            ch3_1_state_value["text"] = ch3_1_data[2]
            ch3_1_state_value["bg"] = "red"
            if ch3_1_signal == 1:
                ch3_1_log.append(
                    [
                        "Error-State:",
                        ch3_1_data[2],
                        ch3_1_data[3],
                        ch3_1_data[4],
                        ch3_1_data[5],
                        ch3_1_data[6],
                        ch3_1_data[7],
                    ]
                )

                errorendtime = datetime.datetime.now()
                ch3_1_log.append(
                    ["Error-End-Time", errorendtime.strftime("%Y-%m-%d %H:%M:%S")]
                )

                # stop_test("ch3_1")

        if (
            ch3_2_data[2] == "充电状态"
            or ch3_2_data[2] == "放电状态"
            or ch3_2_data[2] == "测试完成"
            or ch3_2_data[2] == "待机状态"
            or ch3_2_data[2] == "容量不足"
            or ch3_2_data[2] == 0
            or ch3_2_data[2] == 1
            or ch3_2_data[2] == 2
            or ch3_2_data[2] == 3
        ):
            if ch3_2_data[2] == "待机状态":
                ch3_2_state_value["text"] = ch3_2_data[2]
                ch3_2_state_value["bg"] = "#919191"

            if ch3_2_data[2] == "测试完成":
                ch3_2_state_value["text"] = ch3_2_data[2]
                ch3_2_state_value["bg"] = "#63D0A4"

            if ch3_2_data[2] == "放电状态" or ch3_2_data[2] == "充电状态":
                ch3_2_state_value["text"] = ch3_2_data[2]
                ch3_2_state_value["bg"] = "#48A9EB"

            if ch3_2_data[2] == "容量不足":
                ch3_2_state_value["text"] = ch3_2_data[2]
                ch3_2_state_value["bg"] = "#F031A4"

            if ch3_2_signal == 1:
                ch3_2_log.append(
                    [
                        "Now-State:",
                        ch3_2_data[2],
                        ch3_2_data[3],
                        ch3_2_data[4],
                        ch3_2_data[5],
                        ch3_2_data[6],
                        ch3_2_data[7],
                    ]
                )

                if ch3_2_data[5] > 50:
                    pass
                else:
                    if math.fabs(ch3_2_data[5] - ch3_2_data[6]) > 5:
                        ch3_2_signal_ntc = ch3_2_signal_ntc + 1
                        if ch3_2_signal_ntc > 11:
                            ch3_2_error_data = "NTC温度异常"
                        else:
                            pass
                    else:
                        ch3_2_signal_ntc = 0

                if ch3_2_data[2] == "测试完成":
                    if (
                        ch3_2_data[8] < ch3_2_battery_capacity
                        or ch3_2_data[9] < ch3_2_battery_capacity
                    ):
                        ch3_2_error_data = "容量不足"
                        ch3_2_log.append(["Test-State", ch3_2_error_data])

                        ch3_2_log.append(["Input-Electric-all:", ch3_2_data[9]])

                        ch3_2_log.append(["Output-Electric-all:", ch3_2_data[8]])

                        endtime = datetime.datetime.now()
                        ch3_2_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch3_2")
                    else:
                        ch3_2_error_data = ch3_2_data[2]

                        ch3_2_log.append(["Test-State", ch3_2_data[2]])

                        ch3_2_log.append(["Input-Electric-all:", ch3_2_data[9]])

                        ch3_2_log.append(["Output-Electric-all:", ch3_2_data[8]])

                        endtime = datetime.datetime.now()
                        ch3_2_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch3_2")

        if (
            ch3_2_data[2] == "过压报警"
            or ch3_2_data[2] == "低压报警"
            or ch3_2_data[2] == "过流报警"
            or ch3_2_data[2] == "过温报警"
            or ch3_2_data[2] == "电池脱落或被保护"
            or ch3_2_data[2] == "电池不充电报警"
            or ch3_2_data[2] == "通信异常"
            or ch3_2_data[2] == "NTC温度异常"
            or ch3_2_data[2] == 4
            or ch3_2_data[2] == 5
            or ch3_2_data[2] == 6
            or ch3_2_data[2] == 7
            or ch3_2_data[2] == 8
            or ch3_2_data[2] == 9
        ):

            ch3_2_error_data = ch3_2_data[2]
            ch3_2_state_value["text"] = ch3_2_data[2]
            ch3_2_state_value["bg"] = "red"
            if ch3_2_signal == 1:
                ch3_2_log.append(
                    [
                        "Error-State:",
                        ch3_2_data[2],
                        ch3_2_data[3],
                        ch3_2_data[4],
                        ch3_2_data[5],
                        ch3_2_data[6],
                        ch3_2_data[7],
                    ]
                )

                errorendtime = datetime.datetime.now()
                ch3_2_log.append(
                    ["Error-End-Time", errorendtime.strftime("%Y-%m-%d %H:%M:%S")]
                )

                # stop_test("ch3_2")

        if (
            ch3_3_data[2] == "充电状态"
            or ch3_3_data[2] == "放电状态"
            or ch3_3_data[2] == "测试完成"
            or ch3_3_data[2] == "待机状态"
            or ch3_3_data[2] == "容量不足"
            or ch3_3_data[2] == 0
            or ch3_3_data[2] == 1
            or ch3_3_data[2] == 2
            or ch3_3_data[2] == 3
        ):
            if ch3_3_data[2] == "待机状态":
                ch3_3_state_value["text"] = ch3_3_data[2]
                ch3_3_state_value["bg"] = "#919191"

            if ch3_3_data[2] == "测试完成":
                ch3_3_state_value["text"] = ch3_3_data[2]
                ch3_3_state_value["bg"] = "#63D0A4"

            if ch3_3_data[2] == "放电状态" or ch3_3_data[2] == "充电状态":
                ch3_3_state_value["text"] = ch3_3_data[2]
                ch3_3_state_value["bg"] = "#48A9EB"

            if ch3_3_data[2] == "容量不足":
                ch3_3_state_value["text"] = ch3_3_data[2]
                ch3_3_state_value["bg"] = "#F031A4"

            if ch3_3_signal == 1:
                ch3_3_log.append(
                    [
                        "Now-State:",
                        ch3_3_data[2],
                        ch3_3_data[3],
                        ch3_3_data[4],
                        ch3_3_data[5],
                        ch3_3_data[6],
                        ch3_3_data[7],
                    ]
                )
                if ch3_3_data[5] > 50:
                    pass
                else:
                    if math.fabs(ch3_3_data[5] - ch3_3_data[6]) > 5:
                        ch3_3_signal_ntc = ch3_3_signal_ntc + 1
                        if ch3_3_signal_ntc > 11:
                            ch3_3_error_data = "NTC温度异常"
                        else:
                            pass
                    else:
                        ch3_3_signal_ntc = 0

                if ch3_3_data[2] == "测试完成":
                    if (
                        ch3_3_data[8] < ch3_3_battery_capacity
                        or ch3_3_data[9] < ch3_3_battery_capacity
                    ):
                        ch3_3_error_data = "容量不足"
                        ch3_3_log.append(["Test-State", ch3_3_error_data])

                        ch3_3_log.append(["Input-Electric-all:", ch3_3_data[9]])

                        ch3_3_log.append(["Output-Electric-all:", ch3_3_data[8]])

                        endtime = datetime.datetime.now()
                        ch3_3_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch3_3")
                    else:
                        ch3_3_error_data = ch3_3_data[2]

                        ch3_3_log.append(["Test-State", ch3_3_data[2]])

                        ch3_3_log.append(["Input-Electric-all:", ch3_3_data[9]])

                        ch3_3_log.append(["Output-Electric-all:", ch3_3_data[8]])

                        endtime = datetime.datetime.now()
                        ch3_3_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch3_3")

        if (
            ch3_3_data[2] == "过压报警"
            or ch3_3_data[2] == "低压报警"
            or ch3_3_data[2] == "过流报警"
            or ch3_3_data[2] == "过温报警"
            or ch3_3_data[2] == "电池脱落或被保护"
            or ch3_3_data[2] == "电池不充电报警"
            or ch3_3_data[2] == "通信异常"
            or ch3_3_data[2] == "NTC温度异常"
            or ch3_3_data[2] == 4
            or ch3_3_data[2] == 5
            or ch3_3_data[2] == 6
            or ch3_3_data[2] == 7
            or ch3_3_data[2] == 8
            or ch3_3_data[2] == 9
        ):

            ch3_3_error_data = ch3_3_data[2]
            ch3_3_state_value["text"] = ch3_3_data[2]
            ch3_3_state_value["bg"] = "red"
            if ch3_3_signal == 1:
                ch3_3_log.append(
                    [
                        "Error-State:",
                        ch3_3_data[2],
                        ch3_3_data[3],
                        ch3_3_data[4],
                        ch3_3_data[5],
                        ch3_3_data[6],
                        ch3_3_data[7],
                    ]
                )

                errorendtime = datetime.datetime.now()
                ch3_3_log.append(
                    ["Error-End-Time", errorendtime.strftime("%Y-%m-%d %H:%M:%S")]
                )

                # stop_test("ch3_3")

        if (
            ch3_4_data[2] == "充电状态"
            or ch3_4_data[2] == "放电状态"
            or ch3_4_data[2] == "测试完成"
            or ch3_4_data[2] == "待机状态"
            or ch3_4_data[2] == "容量不足"
            or ch3_4_data[2] == 0
            or ch3_4_data[2] == 1
            or ch3_4_data[2] == 2
            or ch3_4_data[2] == 3
        ):
            if ch3_4_data[2] == "待机状态":
                ch3_4_state_value["text"] = ch3_4_data[2]
                ch3_4_state_value["bg"] = "#919191"

            if ch3_4_data[2] == "测试完成":
                ch3_4_state_value["text"] = ch3_4_data[2]
                ch3_4_state_value["bg"] = "#63D0A4"

            if ch3_4_data[2] == "放电状态" or ch3_4_data[2] == "充电状态":
                ch3_4_state_value["text"] = ch3_4_data[2]
                ch3_4_state_value["bg"] = "#48A9EB"

            if ch3_4_data[2] == "容量不足":
                ch3_4_state_value["text"] = ch3_4_data[2]
                ch3_4_state_value["bg"] = "#F031A4"

            if ch3_4_signal == 1:
                ch3_4_log.append(
                    [
                        "Now-State:",
                        ch3_4_data[2],
                        ch3_4_data[3],
                        ch3_4_data[4],
                        ch3_4_data[5],
                        ch3_4_data[6],
                        ch3_4_data[7],
                    ]
                )
                if ch3_4_data[5] > 50:
                    pass
                else:
                    if math.fabs(ch3_4_data[5] - ch3_4_data[6]) > 5:
                        ch3_4_signal_ntc = ch3_4_signal_ntc + 1
                        if ch3_4_signal_ntc > 11:
                            ch3_4_error_data = "NTC温度异常"
                        else:
                            pass
                    else:
                        ch3_4_signal_ntc = 0

                if ch3_4_data[2] == "测试完成":
                    if (
                        ch3_4_data[8] < ch3_4_battery_capacity
                        or ch3_4_data[9] < ch3_4_battery_capacity
                    ):
                        ch3_4_error_data = "容量不足"
                        ch3_4_log.append(["Test-State", ch3_4_error_data])

                        ch3_4_log.append(["Input-Electric-all:", ch3_4_data[9]])

                        ch3_4_log.append(["Output-Electric-all:", ch3_4_data[8]])

                        endtime = datetime.datetime.now()
                        ch3_4_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch3_4")
                    else:
                        ch3_4_error_data = ch3_4_data[2]

                        ch3_4_log.append(["Test-State", ch3_4_data[2]])

                        ch3_4_log.append(["Input-Electric-all:", ch3_4_data[9]])

                        ch3_4_log.append(["Output-Electric-all:", ch3_4_data[8]])

                        endtime = datetime.datetime.now()
                        ch3_4_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch3_4")

        if (
            ch3_4_data[2] == "过压报警"
            or ch3_4_data[2] == "低压报警"
            or ch3_4_data[2] == "过流报警"
            or ch3_4_data[2] == "过温报警"
            or ch3_4_data[2] == "电池脱落或被保护"
            or ch3_4_data[2] == "电池不充电报警"
            or ch3_4_data[2] == "通信异常"
            or ch3_4_data[2] == "NTC温度异常"
            or ch3_4_data[2] == 4
            or ch3_4_data[2] == 5
            or ch3_4_data[2] == 6
            or ch3_4_data[2] == 7
            or ch3_4_data[2] == 8
            or ch3_4_data[2] == 9
        ):

            ch3_4_error_data = ch3_4_data[2]
            ch3_4_state_value["text"] = ch3_4_data[2]
            ch3_4_state_value["bg"] = "red"
            if ch3_4_signal == 1:
                ch3_4_log.append(
                    [
                        "Error-State:",
                        ch3_4_data[2],
                        ch3_4_data[3],
                        ch3_4_data[4],
                        ch3_4_data[5],
                        ch3_4_data[6],
                        ch3_4_data[7],
                    ]
                )

                errorendtime = datetime.datetime.now()
                ch3_4_log.append(
                    ["Error-End-Time", errorendtime.strftime("%Y-%m-%d %H:%M:%S")]
                )

                # stop_test("ch3_4")

        if (
            ch3_5_data[2] == "充电状态"
            or ch3_5_data[2] == "放电状态"
            or ch3_5_data[2] == "测试完成"
            or ch3_5_data[2] == "待机状态"
            or ch3_5_data[2] == "容量不足"
            or ch3_5_data[2] == 0
            or ch3_5_data[2] == 1
            or ch3_5_data[2] == 2
            or ch3_5_data[2] == 3
        ):
            if ch3_5_data[2] == "待机状态":
                ch3_5_state_value["text"] = ch3_5_data[2]
                ch3_5_state_value["bg"] = "#919191"

            if ch3_5_data[2] == "测试完成":
                ch3_5_state_value["text"] = ch3_5_data[2]
                ch3_5_state_value["bg"] = "#63D0A4"

            if ch3_5_data[2] == "放电状态" or ch3_5_data[2] == "充电状态":
                ch3_5_state_value["text"] = ch3_5_data[2]
                ch3_5_state_value["bg"] = "#48A9EB"

            if ch3_5_data[2] == "容量不足":
                ch3_5_state_value["text"] = ch3_5_data[2]
                ch3_5_state_value["bg"] = "#F031A4"

            if ch3_5_signal == 1:
                ch3_5_log.append(
                    [
                        "Now-State:",
                        ch3_5_data[2],
                        ch3_5_data[3],
                        ch3_5_data[4],
                        ch3_5_data[5],
                        ch3_5_data[6],
                        ch3_5_data[7],
                    ]
                )
                if ch3_5_data[5] > 50:
                    pass
                else:
                    if math.fabs(ch3_5_data[5] - ch3_5_data[6]) > 5:
                        ch3_5_signal_ntc = ch3_5_signal_ntc + 1
                        if ch3_5_signal_ntc > 11:
                            ch3_5_error_data = "NTC温度异常"
                        else:
                            pass
                    else:
                        ch3_5_signal_ntc = 0

                if ch3_5_data[2] == "测试完成":
                    if (
                        ch3_5_data[8] < ch3_5_battery_capacity
                        or ch3_5_data[9] < ch3_5_battery_capacity
                    ):
                        ch3_5_error_data = "容量不足"
                        ch3_5_log.append(["Test-State", ch3_5_error_data])

                        ch3_5_log.append(["Input-Electric-all:", ch3_5_data[9]])

                        ch3_5_log.append(["Output-Electric-all:", ch3_5_data[8]])

                        endtime = datetime.datetime.now()
                        ch3_5_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch3_5")
                    else:
                        ch3_5_error_data = ch3_5_data[2]

                        ch3_5_log.append(["Test-State", ch3_5_data[2]])

                        ch3_5_log.append(["Input-Electric-all:", ch3_5_data[9]])

                        ch3_5_log.append(["Output-Electric-all:", ch3_5_data[8]])

                        endtime = datetime.datetime.now()
                        ch3_5_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch3_5")

        if (
            ch3_5_data[2] == "过压报警"
            or ch3_5_data[2] == "低压报警"
            or ch3_5_data[2] == "过流报警"
            or ch3_5_data[2] == "过温报警"
            or ch3_5_data[2] == "电池脱落或被保护"
            or ch3_5_data[2] == "电池不充电报警"
            or ch3_5_data[2] == "通信异常"
            or ch3_5_data[2] == "NTC温度异常"
            or ch3_5_data[2] == 4
            or ch3_5_data[2] == 5
            or ch3_5_data[2] == 6
            or ch3_5_data[2] == 7
            or ch3_5_data[2] == 8
            or ch3_5_data[2] == 9
        ):

            ch3_5_error_data = ch3_5_data[2]
            ch3_5_state_value["text"] = ch3_5_data[2]
            ch3_5_state_value["bg"] = "red"
            if ch3_5_signal == 1:
                ch3_5_log.append(
                    [
                        "Error-State:",
                        ch3_5_data[2],
                        ch3_5_data[3],
                        ch3_5_data[4],
                        ch3_5_data[5],
                        ch3_5_data[6],
                        ch3_5_data[7],
                    ]
                )

                errorendtime = datetime.datetime.now()
                ch3_5_log.append(
                    ["Error-End-Time", errorendtime.strftime("%Y-%m-%d %H:%M:%S")]
                )

                # stop_test("ch3_5")

        if (
            ch3_6_data[2] == "充电状态"
            or ch3_6_data[2] == "放电状态"
            or ch3_6_data[2] == "测试完成"
            or ch3_6_data[2] == "待机状态"
            or ch3_6_data[2] == "容量不足"
            or ch3_6_data[2] == 0
            or ch3_6_data[2] == 1
            or ch3_6_data[2] == 2
            or ch3_6_data[2] == 3
        ):
            if ch3_6_data[2] == "待机状态":
                ch3_6_state_value["text"] = ch3_6_data[2]
                ch3_6_state_value["bg"] = "#919191"

            if ch3_6_data[2] == "测试完成":
                ch3_6_state_value["text"] = ch3_6_data[2]
                ch3_6_state_value["bg"] = "#63D0A4"

            if ch3_6_data[2] == "放电状态" or ch3_6_data[2] == "充电状态":
                ch3_6_state_value["text"] = ch3_6_data[2]
                ch3_6_state_value["bg"] = "#48A9EB"

            if ch3_6_data[2] == "容量不足":
                ch3_6_state_value["text"] = ch3_6_data[2]
                ch3_6_state_value["bg"] = "#F031A4"

            if ch3_6_signal == 1:
                ch3_6_log.append(
                    [
                        "Now-State:",
                        ch3_6_data[2],
                        ch3_6_data[3],
                        ch3_6_data[4],
                        ch3_6_data[5],
                        ch3_6_data[6],
                        ch3_6_data[7],
                    ]
                )
                if ch3_6_data[5] > 50:
                    pass
                else:
                    if math.fabs(ch3_6_data[5] - ch3_6_data[6]) > 5:
                        ch3_6_signal_ntc = ch3_6_signal_ntc + 1
                        if ch3_6_signal_ntc > 11:
                            ch3_6_error_data = "NTC温度异常"
                        else:
                            pass
                    else:
                        ch3_6_signal_ntc = 0

                if ch3_6_data[2] == "测试完成":
                    if (
                        ch3_6_data[8] < ch3_6_battery_capacity
                        or ch3_6_data[9] < ch3_6_battery_capacity
                    ):
                        ch3_6_error_data = "容量不足"
                        ch3_6_log.append(["Test-State", ch3_6_error_data])

                        ch3_6_log.append(["Input-Electric-all:", ch3_6_data[9]])

                        ch3_6_log.append(["Output-Electric-all:", ch3_6_data[8]])

                        endtime = datetime.datetime.now()
                        ch3_6_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch3_6")
                    else:
                        ch3_6_error_data = ch3_6_data[2]

                        ch3_6_log.append(["Test-State", ch3_6_data[2]])

                        ch3_6_log.append(["Input-Electric-all:", ch3_6_data[9]])

                        ch3_6_log.append(["Output-Electric-all:", ch3_6_data[8]])

                        endtime = datetime.datetime.now()
                        ch3_6_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch3_6")

        if (
            ch3_6_data[2] == "过压报警"
            or ch3_6_data[2] == "低压报警"
            or ch3_6_data[2] == "过流报警"
            or ch3_6_data[2] == "过温报警"
            or ch3_6_data[2] == "电池脱落或被保护"
            or ch3_6_data[2] == "电池不充电报警"
            or ch3_6_data[2] == "通信异常"
            or ch3_6_data[2] == "NTC温度异常"
            or ch3_6_data[2] == 4
            or ch3_6_data[2] == 5
            or ch3_6_data[2] == 6
            or ch3_6_data[2] == 7
            or ch3_6_data[2] == 8
            or ch3_6_data[2] == 9
        ):

            ch3_6_error_data = ch3_6_data[2]
            ch3_6_state_value["text"] = ch3_6_data[2]
            ch3_6_state_value["bg"] = "red"
            if ch3_6_signal == 1:
                ch3_6_log.append(
                    [
                        "Error-State:",
                        ch3_6_data[2],
                        ch3_6_data[3],
                        ch3_6_data[4],
                        ch3_6_data[5],
                        ch3_6_data[6],
                        ch3_6_data[7],
                    ]
                )

                errorendtime = datetime.datetime.now()
                ch3_6_log.append(
                    ["Error-End-Time", errorendtime.strftime("%Y-%m-%d %H:%M:%S")]
                )

                # stop_test("ch3_6")

        if (
            ch3_7_data[2] == "充电状态"
            or ch3_7_data[2] == "放电状态"
            or ch3_7_data[2] == "测试完成"
            or ch3_7_data[2] == "待机状态"
            or ch3_7_data[2] == "容量不足"
            or ch3_7_data[2] == 0
            or ch3_7_data[2] == 1
            or ch3_7_data[2] == 2
            or ch3_7_data[2] == 3
        ):
            if ch3_7_data[2] == "待机状态":
                ch3_7_state_value["text"] = ch3_7_data[2]
                ch3_7_state_value["bg"] = "#919191"

            if ch3_7_data[2] == "测试完成":
                ch3_7_state_value["text"] = ch3_7_data[2]
                ch3_7_state_value["bg"] = "#63D0A4"

            if ch3_7_data[2] == "放电状态" or ch3_7_data[2] == "充电状态":
                ch3_7_state_value["text"] = ch3_7_data[2]
                ch3_7_state_value["bg"] = "#48A9EB"

            if ch3_7_data[2] == "容量不足":
                ch3_7_state_value["text"] = ch3_7_data[2]
                ch3_7_state_value["bg"] = "#F031A4"

            if ch3_7_signal == 1:
                ch3_7_log.append(
                    [
                        "Now-State:",
                        ch3_7_data[2],
                        ch3_7_data[3],
                        ch3_7_data[4],
                        ch3_7_data[5],
                        ch3_7_data[6],
                        ch3_7_data[7],
                    ]
                )
                if ch3_7_data[5] > 50:
                    pass
                else:
                    if math.fabs(ch3_7_data[5] - ch3_7_data[6]) > 5:
                        ch3_7_signal_ntc = ch3_7_signal_ntc + 1
                        if ch3_7_signal_ntc > 11:
                            ch3_7_error_data = "NTC温度异常"
                        else:
                            pass
                    else:
                        ch3_7_signal_ntc = 0

                if ch3_7_data[2] == "测试完成":
                    if (
                        ch3_7_data[8] < ch3_7_battery_capacity
                        or ch3_7_data[9] < ch3_7_battery_capacity
                    ):
                        ch3_7_error_data = "容量不足"
                        ch3_7_log.append(["Test-State", ch3_7_error_data])

                        ch3_7_log.append(["Input-Electric-all:", ch3_7_data[9]])

                        ch3_7_log.append(["Output-Electric-all:", ch3_7_data[8]])

                        endtime = datetime.datetime.now()
                        ch3_7_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch3_7")
                    else:
                        ch3_7_error_data = ch3_7_data[2]

                        ch3_7_log.append(["Test-State", ch3_7_data[2]])

                        ch3_7_log.append(["Input-Electric-all:", ch3_7_data[9]])

                        ch3_7_log.append(["Output-Electric-all:", ch3_7_data[8]])

                        endtime = datetime.datetime.now()
                        ch3_7_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch3_7")

        if (
            ch3_7_data[2] == "过压报警"
            or ch3_7_data[2] == "低压报警"
            or ch3_7_data[2] == "过流报警"
            or ch3_7_data[2] == "过温报警"
            or ch3_7_data[2] == "电池脱落或被保护"
            or ch3_7_data[2] == "电池不充电报警"
            or ch3_7_data[2] == "通信异常"
            or ch3_7_data[2] == "NTC温度异常"
            or ch3_7_data[2] == 4
            or ch3_7_data[2] == 5
            or ch3_7_data[2] == 6
            or ch3_7_data[2] == 7
            or ch3_7_data[2] == 8
            or ch3_7_data[2] == 9
        ):

            ch3_7_error_data = ch3_7_data[2]
            ch3_7_state_value["text"] = ch3_7_data[2]
            ch3_7_state_value["bg"] = "red"
            if ch3_7_signal == 1:
                ch3_7_log.append(
                    [
                        "Error-State:",
                        ch3_7_data[2],
                        ch3_7_data[3],
                        ch3_7_data[4],
                        ch3_7_data[5],
                        ch3_7_data[6],
                        ch3_7_data[7],
                    ]
                )

                errorendtime = datetime.datetime.now()
                ch3_7_log.append(
                    ["Error-End-Time", errorendtime.strftime("%Y-%m-%d %H:%M:%S")]
                )

                # stop_test("ch3_7")

        if (
            ch3_8_data[2] == "充电状态"
            or ch3_8_data[2] == "放电状态"
            or ch3_8_data[2] == "测试完成"
            or ch3_8_data[2] == "待机状态"
            or ch3_8_data[2] == "容量不足"
            or ch3_8_data[2] == 0
            or ch3_8_data[2] == 1
            or ch3_8_data[2] == 2
            or ch3_8_data[2] == 3
        ):
            if ch3_8_data[2] == "待机状态":
                ch3_8_state_value["text"] = ch3_8_data[2]
                ch3_8_state_value["bg"] = "#919191"

            if ch3_8_data[2] == "测试完成":
                ch3_8_state_value["text"] = ch3_8_data[2]
                ch3_8_state_value["bg"] = "#63D0A4"

            if ch3_8_data[2] == "放电状态" or ch3_8_data[2] == "充电状态":
                ch3_8_state_value["text"] = ch3_8_data[2]
                ch3_8_state_value["bg"] = "#48A9EB"

            if ch3_8_data[2] == "容量不足":
                ch3_8_state_value["text"] = ch3_8_data[2]
                ch3_8_state_value["bg"] = "#F031A4"

            if ch3_8_signal == 1:
                ch3_8_log.append(
                    [
                        "Now-State:",
                        ch3_8_data[2],
                        ch3_8_data[3],
                        ch3_8_data[4],
                        ch3_8_data[5],
                        ch3_8_data[6],
                        ch3_8_data[7],
                    ]
                )
                if ch3_8_data[5] > 50:
                    pass
                else:
                    if math.fabs(ch3_8_data[5] - ch3_8_data[6]) > 5:
                        ch3_8_signal_ntc = ch3_8_signal_ntc + 1
                        if ch3_8_signal_ntc > 11:
                            ch3_8_error_data = "NTC温度异常"
                        else:
                            pass
                    else:
                        ch3_8_signal_ntc = 0

                if ch3_8_data[2] == "测试完成":
                    if (
                        ch3_8_data[8] < ch3_8_battery_capacity
                        or ch3_8_data[9] < ch3_8_battery_capacity
                    ):
                        ch3_8_error_data = "容量不足"
                        ch3_8_log.append(["Test-State", ch3_8_error_data])

                        ch3_8_log.append(["Input-Electric-all:", ch3_8_data[9]])

                        ch3_8_log.append(["Output-Electric-all:", ch3_8_data[8]])

                        endtime = datetime.datetime.now()
                        ch3_8_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch3_8")
                    else:
                        ch3_8_error_data = ch3_8_data[2]

                        ch3_8_log.append(["Test-State", ch3_8_data[2]])

                        ch3_8_log.append(["Input-Electric-all:", ch3_8_data[9]])

                        ch3_8_log.append(["Output-Electric-all:", ch3_8_data[8]])

                        endtime = datetime.datetime.now()
                        ch3_8_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch3_8")

        if (
            ch3_8_data[2] == "过压报警"
            or ch3_8_data[2] == "低压报警"
            or ch3_8_data[2] == "过流报警"
            or ch3_8_data[2] == "过温报警"
            or ch3_8_data[2] == "电池脱落或被保护"
            or ch3_8_data[2] == "电池不充电报警"
            or ch3_8_data[2] == "通信异常"
            or ch3_8_data[2] == "NTC温度异常"
            or ch3_8_data[2] == 4
            or ch3_8_data[2] == 5
            or ch3_8_data[2] == 6
            or ch3_8_data[2] == 7
            or ch3_8_data[2] == 8
            or ch3_8_data[2] == 9
        ):

            ch3_8_error_data = ch3_8_data[2]
            ch3_8_state_value["text"] = ch3_8_data[2]
            ch3_8_state_value["bg"] = "red"
            if ch3_8_signal == 1:
                ch3_8_log.append(
                    [
                        "Error-State:",
                        ch3_8_data[2],
                        ch3_8_data[3],
                        ch3_8_data[4],
                        ch3_8_data[5],
                        ch3_8_data[6],
                        ch3_8_data[7],
                    ]
                )

                errorendtime = datetime.datetime.now()
                ch3_8_log.append(
                    ["Error-End-Time", errorendtime.strftime("%Y-%m-%d %H:%M:%S")]
                )

                # stop_test("ch3_8")

        if (
            ch4_1_data[2] == "充电状态"
            or ch4_1_data[2] == "放电状态"
            or ch4_1_data[2] == "测试完成"
            or ch4_1_data[2] == "待机状态"
            or ch4_1_data[2] == "容量不足"
            or ch4_1_data[2] == 0
            or ch4_1_data[2] == 1
            or ch4_1_data[2] == 2
            or ch4_1_data[2] == 3
        ):
            if ch4_1_data[2] == "待机状态":
                ch4_1_state_value["text"] = ch4_1_data[2]
                ch4_1_state_value["bg"] = "#919191"

            if ch4_1_data[2] == "测试完成":
                ch4_1_state_value["text"] = ch4_1_data[2]
                ch4_1_state_value["bg"] = "#63D0A4"

            if ch4_1_data[2] == "放电状态" or ch4_1_data[2] == "充电状态":
                ch4_1_state_value["text"] = ch4_1_data[2]
                ch4_1_state_value["bg"] = "#48A9EB"

            if ch4_1_data[2] == "容量不足":
                ch4_1_state_value["text"] = ch4_1_data[2]
                ch4_1_state_value["bg"] = "#F031A4"

            if ch4_1_signal == 1:
                ch4_1_log.append(
                    [
                        "Now-State:",
                        ch4_1_data[2],
                        ch4_1_data[3],
                        ch4_1_data[4],
                        ch4_1_data[5],
                        ch4_1_data[6],
                        ch4_1_data[7],
                    ]
                )
                if ch4_1_data[5] > 50:
                    pass
                else:
                    if math.fabs(ch4_1_data[5] - ch4_1_data[6]) > 5:
                        ch4_1_signal_ntc = ch4_1_signal_ntc + 1
                        if ch4_1_signal_ntc > 11:
                            ch4_1_error_data = "NTC温度异常"
                        else:
                            pass
                    else:
                        ch4_1_signal_ntc = 0

                if ch4_1_data[2] == "测试完成":
                    if (
                        ch4_1_data[8] < ch4_1_battery_capacity
                        or ch4_1_data[9] < ch4_1_battery_capacity
                    ):
                        ch4_1_error_data = "容量不足"
                        ch4_1_log.append(["Test-State", ch4_1_error_data])

                        ch4_1_log.append(["Input-Electric-all:", ch4_1_data[9]])

                        ch4_1_log.append(["Output-Electric-all:", ch4_1_data[8]])

                        endtime = datetime.datetime.now()
                        ch4_1_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch4_1")
                    else:
                        ch4_1_error_data = ch4_1_data[2]

                        ch4_1_log.append(["Test-State", ch4_1_data[2]])

                        ch4_1_log.append(["Input-Electric-all:", ch4_1_data[9]])

                        ch4_1_log.append(["Output-Electric-all:", ch4_1_data[8]])

                        endtime = datetime.datetime.now()
                        ch4_1_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch4_1")

        if (
            ch4_1_data[2] == "过压报警"
            or ch4_1_data[2] == "低压报警"
            or ch4_1_data[2] == "过流报警"
            or ch4_1_data[2] == "过温报警"
            or ch4_1_data[2] == "电池脱落或被保护"
            or ch4_1_data[2] == "电池不充电报警"
            or ch4_1_data[2] == "通信异常"
            or ch4_1_data[2] == "NTC温度异常"
            or ch4_1_data[2] == 4
            or ch4_1_data[2] == 5
            or ch4_1_data[2] == 6
            or ch4_1_data[2] == 7
            or ch4_1_data[2] == 8
            or ch4_1_data[2] == 9
        ):

            ch4_1_error_data = ch4_1_data[2]
            ch4_1_state_value["text"] = ch4_1_data[2]
            ch4_1_state_value["bg"] = "red"
            if ch4_1_signal == 1:
                ch4_1_log.append(
                    [
                        "Error-State:",
                        ch4_1_data[2],
                        ch4_1_data[3],
                        ch4_1_data[4],
                        ch4_1_data[5],
                        ch4_1_data[6],
                        ch4_1_data[7],
                    ]
                )

                errorendtime = datetime.datetime.now()
                ch4_1_log.append(
                    ["Error-End-Time", errorendtime.strftime("%Y-%m-%d %H:%M:%S")]
                )

                # stop_test("ch4_1")

        if (
            ch4_2_data[2] == "充电状态"
            or ch4_2_data[2] == "放电状态"
            or ch4_2_data[2] == "测试完成"
            or ch4_2_data[2] == "待机状态"
            or ch4_2_data[2] == "容量不足"
            or ch4_2_data[2] == 0
            or ch4_2_data[2] == 1
            or ch4_2_data[2] == 2
            or ch4_2_data[2] == 3
        ):
            if ch4_2_data[2] == "待机状态":
                ch4_2_state_value["text"] = ch4_2_data[2]
                ch4_2_state_value["bg"] = "#919191"

            if ch4_2_data[2] == "测试完成":
                ch4_2_state_value["text"] = ch4_2_data[2]
                ch4_2_state_value["bg"] = "#63D0A4"

            if ch4_2_data[2] == "放电状态" or ch4_2_data[2] == "充电状态":
                ch4_2_state_value["text"] = ch4_2_data[2]
                ch4_2_state_value["bg"] = "#48A9EB"

            if ch4_2_data[2] == "容量不足":
                ch4_2_state_value["text"] = ch4_2_data[2]
                ch4_2_state_value["bg"] = "#F031A4"

            if ch4_2_signal == 1:
                ch4_2_log.append(
                    [
                        "Now-State:",
                        ch4_2_data[2],
                        ch4_2_data[3],
                        ch4_2_data[4],
                        ch4_2_data[5],
                        ch4_2_data[6],
                        ch4_2_data[7],
                    ]
                )

                if ch4_2_data[5] > 50:
                    pass
                else:
                    if math.fabs(ch4_2_data[5] - ch4_2_data[6]) > 5:
                        ch4_2_signal_ntc = ch4_2_signal_ntc + 1
                        if ch4_2_signal_ntc > 11:
                            ch4_2_error_data = "NTC温度异常"
                        else:
                            pass
                    else:
                        ch4_1_signal_ntc = 0

                if ch4_2_data[2] == "测试完成":
                    if (
                        ch4_2_data[8] < ch4_2_battery_capacity
                        or ch4_2_data[9] < ch4_2_battery_capacity
                    ):
                        ch4_2_error_data = "容量不足"
                        ch4_2_log.append(["Test-State", ch4_2_error_data])

                        ch4_2_log.append(["Input-Electric-all:", ch4_2_data[9]])

                        ch4_2_log.append(["Output-Electric-all:", ch4_2_data[8]])

                        endtime = datetime.datetime.now()
                        ch4_2_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch4_2")
                    else:
                        ch4_2_error_data = ch4_2_data[2]

                        ch4_2_log.append(["Test-State", ch4_2_data[2]])

                        ch4_2_log.append(["Input-Electric-all:", ch4_2_data[9]])

                        ch4_2_log.append(["Output-Electric-all:", ch4_2_data[8]])

                        endtime = datetime.datetime.now()
                        ch4_2_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch4_2")

        if (
            ch4_2_data[2] == "过压报警"
            or ch4_2_data[2] == "低压报警"
            or ch4_2_data[2] == "过流报警"
            or ch4_2_data[2] == "过温报警"
            or ch4_2_data[2] == "电池脱落或被保护"
            or ch4_2_data[2] == "电池不充电报警"
            or ch4_2_data[2] == "通信异常"
            or ch4_2_data[2] == "NTC温度异常"
            or ch4_2_data[2] == 4
            or ch4_2_data[2] == 5
            or ch4_2_data[2] == 6
            or ch4_2_data[2] == 7
            or ch4_2_data[2] == 8
            or ch4_2_data[2] == 9
        ):

            ch4_2_error_data = ch4_2_data[2]
            ch4_2_state_value["text"] = ch4_2_data[2]
            ch4_2_state_value["bg"] = "red"
            if ch4_2_signal == 1:
                ch4_2_log.append(
                    [
                        "Error-State:",
                        ch4_2_data[2],
                        ch4_2_data[3],
                        ch4_2_data[4],
                        ch4_2_data[5],
                        ch4_2_data[6],
                        ch4_2_data[7],
                    ]
                )

                errorendtime = datetime.datetime.now()
                ch4_2_log.append(
                    ["Error-End-Time", errorendtime.strftime("%Y-%m-%d %H:%M:%S")]
                )

                # stop_test("ch4_2")

        if (
            ch4_3_data[2] == "充电状态"
            or ch4_3_data[2] == "放电状态"
            or ch4_3_data[2] == "测试完成"
            or ch4_3_data[2] == "待机状态"
            or ch4_3_data[2] == "容量不足"
            or ch4_3_data[2] == 0
            or ch4_3_data[2] == 1
            or ch4_3_data[2] == 2
            or ch4_3_data[2] == 3
        ):
            if ch4_3_data[2] == "待机状态":
                ch4_3_state_value["text"] = ch4_3_data[2]
                ch4_3_state_value["bg"] = "#919191"

            if ch4_3_data[2] == "测试完成":
                ch4_3_state_value["text"] = ch4_3_data[2]
                ch4_3_state_value["bg"] = "#63D0A4"

            if ch4_3_data[2] == "放电状态" or ch4_3_data[2] == "充电状态":
                ch4_3_state_value["text"] = ch4_3_data[2]
                ch4_3_state_value["bg"] = "#48A9EB"

            if ch4_3_data[2] == "容量不足":
                ch4_3_state_value["text"] = ch4_3_data[2]
                ch4_3_state_value["bg"] = "#F031A4"

            if ch4_3_signal == 1:
                ch4_3_log.append(
                    [
                        "Now-State:",
                        ch4_3_data[2],
                        ch4_3_data[3],
                        ch4_3_data[4],
                        ch4_3_data[5],
                        ch4_3_data[6],
                        ch4_3_data[7],
                    ]
                )
                if ch4_3_data[5] > 50:
                    pass
                else:
                    if math.fabs(ch4_3_data[5] - ch4_3_data[6]) > 5:
                        ch4_3_signal_ntc = ch4_3_signal_ntc + 1
                        if ch4_3_signal_ntc > 11:
                            ch4_3_error_data = "NTC温度异常"
                        else:
                            pass
                    else:
                        ch4_3_signal_ntc = 0

                if ch4_3_data[2] == "测试完成":
                    if (
                        ch4_3_data[8] < ch4_3_battery_capacity
                        or ch4_3_data[9] < ch4_3_battery_capacity
                    ):
                        ch4_3_error_data = "容量不足"
                        ch4_3_log.append(["Test-State", ch4_3_error_data])

                        ch4_3_log.append(["Input-Electric-all:", ch4_3_data[9]])

                        ch4_3_log.append(["Output-Electric-all:", ch4_3_data[8]])

                        endtime = datetime.datetime.now()
                        ch4_3_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch4_3")
                    else:
                        ch4_3_error_data = ch4_3_data[2]

                        ch4_3_log.append(["Test-State", ch4_3_data[2]])

                        ch4_3_log.append(["Input-Electric-all:", ch4_3_data[9]])

                        ch4_3_log.append(["Output-Electric-all:", ch4_3_data[8]])

                        endtime = datetime.datetime.now()
                        ch4_3_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch4_3")

        if (
            ch4_3_data[2] == "过压报警"
            or ch4_3_data[2] == "低压报警"
            or ch4_3_data[2] == "过流报警"
            or ch4_3_data[2] == "过温报警"
            or ch4_3_data[2] == "电池脱落或被保护"
            or ch4_3_data[2] == "电池不充电报警"
            or ch4_3_data[2] == "通信异常"
            or ch4_3_data[2] == "NTC温度异常"
            or ch4_3_data[2] == 4
            or ch4_3_data[2] == 5
            or ch4_3_data[2] == 6
            or ch4_3_data[2] == 7
            or ch4_3_data[2] == 8
            or ch4_3_data[2] == 9
        ):

            ch4_3_error_data = ch4_3_data[2]
            ch4_3_state_value["text"] = ch4_3_data[2]
            ch4_3_state_value["bg"] = "red"
            if ch4_3_signal == 1:
                ch4_3_log.append(
                    [
                        "Error-State:",
                        ch4_3_data[2],
                        ch4_3_data[3],
                        ch4_3_data[4],
                        ch4_3_data[5],
                        ch4_3_data[6],
                        ch4_3_data[7],
                    ]
                )

                errorendtime = datetime.datetime.now()
                ch4_3_log.append(
                    ["Error-End-Time", errorendtime.strftime("%Y-%m-%d %H:%M:%S")]
                )

                # stop_test("ch4_3")

        if (
            ch4_4_data[2] == "充电状态"
            or ch4_4_data[2] == "放电状态"
            or ch4_4_data[2] == "测试完成"
            or ch4_4_data[2] == "待机状态"
            or ch4_4_data[2] == "容量不足"
            or ch4_4_data[2] == 0
            or ch4_4_data[2] == 1
            or ch4_4_data[2] == 2
            or ch4_4_data[2] == 3
        ):
            if ch4_4_data[2] == "待机状态":
                ch4_4_state_value["text"] = ch4_4_data[2]
                ch4_4_state_value["bg"] = "#919191"

            if ch4_4_data[2] == "测试完成":
                ch4_4_state_value["text"] = ch4_4_data[2]
                ch4_4_state_value["bg"] = "#63D0A4"

            if ch4_4_data[2] == "放电状态" or ch4_4_data[2] == "充电状态":
                ch4_4_state_value["text"] = ch4_4_data[2]
                ch4_4_state_value["bg"] = "#48A9EB"

            if ch4_4_data[2] == "容量不足":
                ch4_4_state_value["text"] = ch4_4_data[2]
                ch4_4_state_value["bg"] = "#F031A4"

            if ch4_4_signal == 1:
                ch4_4_log.append(
                    [
                        "Now-State:",
                        ch4_4_data[2],
                        ch4_4_data[3],
                        ch4_4_data[4],
                        ch4_4_data[5],
                        ch4_4_data[6],
                        ch4_4_data[7],
                    ]
                )
                if ch4_4_data[5] > 50:
                    pass
                else:
                    if math.fabs(ch4_4_data[5] - ch4_4_data[6]) > 5:
                        ch4_4_signal_ntc = ch4_4_signal_ntc + 1
                        if ch4_4_signal_ntc > 11:
                            ch4_4_error_data = "NTC温度异常"
                        else:
                            pass
                    else:
                        ch4_4_signal_ntc = 0

                if ch4_4_data[2] == "测试完成":
                    if (
                        ch4_4_data[8] < ch4_4_battery_capacity
                        or ch4_4_data[9] < ch4_4_battery_capacity
                    ):
                        ch4_4_error_data = "容量不足"
                        ch4_4_log.append(["Test-State", ch4_4_error_data])

                        ch4_4_log.append(["Input-Electric-all:", ch4_4_data[9]])

                        ch4_4_log.append(["Output-Electric-all:", ch4_4_data[8]])

                        endtime = datetime.datetime.now()
                        ch4_4_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch4_4")
                    else:
                        ch4_4_error_data = ch4_4_data[2]

                        ch4_4_log.append(["Test-State", ch4_4_data[2]])

                        ch4_4_log.append(["Input-Electric-all:", ch4_4_data[9]])

                        ch4_4_log.append(["Output-Electric-all:", ch4_4_data[8]])

                        endtime = datetime.datetime.now()
                        ch4_4_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch4_4")

        if (
            ch4_4_data[2] == "过压报警"
            or ch4_4_data[2] == "低压报警"
            or ch4_4_data[2] == "过流报警"
            or ch4_4_data[2] == "过温报警"
            or ch4_4_data[2] == "电池脱落或被保护"
            or ch4_4_data[2] == "电池不充电报警"
            or ch4_4_data[2] == "通信异常"
            or ch4_4_data[2] == "NTC温度异常"
            or ch4_4_data[2] == 4
            or ch4_4_data[2] == 5
            or ch4_4_data[2] == 6
            or ch4_4_data[2] == 7
            or ch4_4_data[2] == 8
            or ch4_4_data[2] == 9
        ):

            ch4_4_error_data = ch4_4_data[2]
            ch4_4_state_value["text"] = ch4_4_data[2]
            ch4_4_state_value["bg"] = "red"
            if ch4_4_signal == 1:
                ch4_4_log.append(
                    [
                        "Error-State:",
                        ch4_4_data[2],
                        ch4_4_data[3],
                        ch4_4_data[4],
                        ch4_4_data[5],
                        ch4_4_data[6],
                        ch4_4_data[7],
                    ]
                )

                errorendtime = datetime.datetime.now()
                ch4_4_log.append(
                    ["Error-End-Time", errorendtime.strftime("%Y-%m-%d %H:%M:%S")]
                )

                # stop_test("ch4_4")

        if (
            ch4_5_data[2] == "充电状态"
            or ch4_5_data[2] == "放电状态"
            or ch4_5_data[2] == "测试完成"
            or ch4_5_data[2] == "待机状态"
            or ch4_5_data[2] == "容量不足"
            or ch4_5_data[2] == 0
            or ch4_5_data[2] == 1
            or ch4_5_data[2] == 2
            or ch4_5_data[2] == 3
        ):
            if ch4_5_data[2] == "待机状态":
                ch4_5_state_value["text"] = ch4_5_data[2]
                ch4_5_state_value["bg"] = "#919191"

            if ch4_5_data[2] == "测试完成":
                ch4_5_state_value["text"] = ch4_5_data[2]
                ch4_5_state_value["bg"] = "#63D0A4"

            if ch4_5_data[2] == "放电状态" or ch4_5_data[2] == "充电状态":
                ch4_5_state_value["text"] = ch4_5_data[2]
                ch4_5_state_value["bg"] = "#48A9EB"

            if ch4_5_data[2] == "容量不足":
                ch4_5_state_value["text"] = ch4_5_data[2]
                ch4_5_state_value["bg"] = "#F031A4"

            if ch4_5_signal == 1:
                ch4_5_log.append(
                    [
                        "Now-State:",
                        ch4_5_data[2],
                        ch4_5_data[3],
                        ch4_5_data[4],
                        ch4_5_data[5],
                        ch4_5_data[6],
                        ch4_5_data[7],
                    ]
                )
                if ch4_5_data[5] > 50:
                    pass
                else:
                    if math.fabs(ch4_5_data[5] - ch4_5_data[6]) > 5:
                        ch4_5_signal_ntc = ch4_5_signal_ntc + 1
                        if ch4_5_signal_ntc > 11:
                            ch4_5_error_data = "NTC温度异常"
                        else:
                            pass
                    else:
                        ch4_5_signal_ntc = 0

                if ch4_5_data[2] == "测试完成":
                    if (
                        ch4_5_data[8] < ch4_5_battery_capacity
                        or ch4_5_data[9] < ch4_5_battery_capacity
                    ):
                        ch4_5_error_data = "容量不足"
                        ch4_5_log.append(["Test-State", ch4_5_error_data])

                        ch4_5_log.append(["Input-Electric-all:", ch4_5_data[9]])

                        ch4_5_log.append(["Output-Electric-all:", ch4_5_data[8]])

                        endtime = datetime.datetime.now()
                        ch4_5_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch4_5")
                    else:
                        ch4_5_error_data = ch4_5_data[2]

                        ch4_5_log.append(["Test-State", ch4_5_data[2]])

                        ch4_5_log.append(["Input-Electric-all:", ch4_5_data[9]])

                        ch4_5_log.append(["Output-Electric-all:", ch4_5_data[8]])

                        endtime = datetime.datetime.now()
                        ch4_5_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch4_5")

        if (
            ch4_5_data[2] == "过压报警"
            or ch4_5_data[2] == "低压报警"
            or ch4_5_data[2] == "过流报警"
            or ch4_5_data[2] == "过温报警"
            or ch4_5_data[2] == "电池脱落或被保护"
            or ch4_5_data[2] == "电池不充电报警"
            or ch4_5_data[2] == "通信异常"
            or ch4_5_data[2] == "NTC温度异常"
            or ch4_5_data[2] == 4
            or ch4_5_data[2] == 5
            or ch4_5_data[2] == 6
            or ch4_5_data[2] == 7
            or ch4_5_data[2] == 8
            or ch4_5_data[2] == 9
        ):

            ch4_5_error_data = ch4_5_data[2]
            ch4_5_state_value["text"] = ch4_5_data[2]
            ch4_5_state_value["bg"] = "red"
            if ch4_5_signal == 1:
                ch4_5_log.append(
                    [
                        "Error-State:",
                        ch4_5_data[2],
                        ch4_5_data[3],
                        ch4_5_data[4],
                        ch4_5_data[5],
                        ch4_5_data[6],
                        ch4_5_data[7],
                    ]
                )

                errorendtime = datetime.datetime.now()
                ch4_5_log.append(
                    ["Error-End-Time", errorendtime.strftime("%Y-%m-%d %H:%M:%S")]
                )

                # stop_test("ch4_5")

        if (
            ch4_6_data[2] == "充电状态"
            or ch4_6_data[2] == "放电状态"
            or ch4_6_data[2] == "测试完成"
            or ch4_6_data[2] == "待机状态"
            or ch4_6_data[2] == "容量不足"
            or ch4_6_data[2] == 0
            or ch4_6_data[2] == 1
            or ch4_6_data[2] == 2
            or ch4_6_data[2] == 3
        ):
            if ch4_6_data[2] == "待机状态":
                ch4_6_state_value["text"] = ch4_6_data[2]
                ch4_6_state_value["bg"] = "#919191"

            if ch4_6_data[2] == "测试完成":
                ch4_6_state_value["text"] = ch4_6_data[2]
                ch4_6_state_value["bg"] = "#63D0A4"

            if ch4_6_data[2] == "放电状态" or ch4_6_data[2] == "充电状态":
                ch4_6_state_value["text"] = ch4_6_data[2]
                ch4_6_state_value["bg"] = "#48A9EB"

            if ch4_6_data[2] == "容量不足":
                ch4_6_state_value["text"] = ch4_6_data[2]
                ch4_6_state_value["bg"] = "#F031A4"

            if ch4_6_signal == 1:
                ch4_6_log.append(
                    [
                        "Now-State:",
                        ch4_6_data[2],
                        ch4_6_data[3],
                        ch4_6_data[4],
                        ch4_6_data[5],
                        ch4_6_data[6],
                        ch4_6_data[7],
                    ]
                )
                if ch4_6_data[5] > 50:
                    pass
                else:
                    if math.fabs(ch4_6_data[5] - ch4_6_data[6]) > 5:
                        ch4_6_signal_ntc = ch4_6_signal_ntc + 1
                        if ch4_6_signal_ntc > 11:
                            ch4_6_error_data = "NTC温度异常"
                        else:
                            pass
                    else:
                        ch4_6_signal_ntc = 0

                if ch4_6_data[2] == "测试完成":
                    if (
                        ch4_6_data[8] < ch4_6_battery_capacity
                        or ch4_6_data[9] < ch4_6_battery_capacity
                    ):
                        ch4_6_error_data = "容量不足"
                        ch4_6_log.append(["Test-State", ch4_6_error_data])

                        ch4_6_log.append(["Input-Electric-all:", ch4_6_data[9]])

                        ch4_6_log.append(["Output-Electric-all:", ch4_6_data[8]])

                        endtime = datetime.datetime.now()
                        ch4_6_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch4_6")
                    else:
                        ch4_6_error_data = ch4_6_data[2]

                        ch4_6_log.append(["Test-State", ch4_6_data[2]])

                        ch4_6_log.append(["Input-Electric-all:", ch4_6_data[9]])

                        ch4_6_log.append(["Output-Electric-all:", ch4_6_data[8]])

                        endtime = datetime.datetime.now()
                        ch4_6_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch4_6")

        if (
            ch4_6_data[2] == "过压报警"
            or ch4_6_data[2] == "低压报警"
            or ch4_6_data[2] == "过流报警"
            or ch4_6_data[2] == "过温报警"
            or ch4_6_data[2] == "电池脱落或被保护"
            or ch4_6_data[2] == "电池不充电报警"
            or ch4_6_data[2] == "通信异常"
            or ch4_6_data[2] == "NTC温度异常"
            or ch4_6_data[2] == 4
            or ch4_6_data[2] == 5
            or ch4_6_data[2] == 6
            or ch4_6_data[2] == 7
            or ch4_6_data[2] == 8
            or ch4_6_data[2] == 9
        ):

            ch4_6_error_data = ch4_6_data[2]
            ch4_6_state_value["text"] = ch4_6_data[2]
            ch4_6_state_value["bg"] = "red"
            if ch4_6_signal == 1:
                ch4_6_log.append(
                    [
                        "Error-State:",
                        ch4_6_data[2],
                        ch4_6_data[3],
                        ch4_6_data[4],
                        ch4_6_data[5],
                        ch4_6_data[6],
                        ch4_6_data[7],
                    ]
                )

                errorendtime = datetime.datetime.now()
                ch4_6_log.append(
                    ["Error-End-Time", errorendtime.strftime("%Y-%m-%d %H:%M:%S")]
                )

                # stop_test("ch4_6")

        if (
            ch4_7_data[2] == "充电状态"
            or ch4_7_data[2] == "放电状态"
            or ch4_7_data[2] == "测试完成"
            or ch4_7_data[2] == "待机状态"
            or ch4_7_data[2] == "容量不足"
            or ch4_7_data[2] == 0
            or ch4_7_data[2] == 1
            or ch4_7_data[2] == 2
            or ch4_7_data[2] == 3
        ):
            if ch4_7_data[2] == "待机状态":
                ch4_7_state_value["text"] = ch4_7_data[2]
                ch4_7_state_value["bg"] = "#919191"

            if ch4_7_data[2] == "测试完成":
                ch4_7_state_value["text"] = ch4_7_data[2]
                ch4_7_state_value["bg"] = "#63D0A4"

            if ch4_7_data[2] == "放电状态" or ch4_7_data[2] == "充电状态":
                ch4_7_state_value["text"] = ch4_7_data[2]
                ch4_7_state_value["bg"] = "#48A9EB"

            if ch4_7_data[2] == "容量不足":
                ch4_7_state_value["text"] = ch4_7_data[2]
                ch4_7_state_value["bg"] = "#F031A4"

            if ch4_7_signal == 1:
                ch4_7_log.append(
                    [
                        "Now-State:",
                        ch4_7_data[2],
                        ch4_7_data[3],
                        ch4_7_data[4],
                        ch4_7_data[5],
                        ch4_7_data[6],
                        ch4_7_data[7],
                    ]
                )
                if ch4_7_data[5] > 50:
                    pass
                else:
                    if math.fabs(ch4_7_data[5] - ch4_7_data[6]) > 5:
                        ch4_7_signal_ntc = ch4_7_signal_ntc + 1
                        if ch4_7_signal_ntc > 11:
                            ch4_7_error_data = "NTC温度异常"
                        else:
                            pass
                    else:
                        ch4_7_signal_ntc = 0

                if ch4_7_data[2] == "测试完成":
                    if (
                        ch4_7_data[8] < ch4_7_battery_capacity
                        or ch4_7_data[9] < ch4_7_battery_capacity
                    ):
                        ch4_7_error_data = "容量不足"
                        ch4_7_log.append(["Test-State", ch4_7_error_data])

                        ch4_7_log.append(["Input-Electric-all:", ch4_7_data[9]])

                        ch4_7_log.append(["Output-Electric-all:", ch4_7_data[8]])

                        endtime = datetime.datetime.now()
                        ch4_7_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch4_7")
                    else:
                        ch4_7_error_data = ch4_7_data[2]

                        ch4_7_log.append(["Test-State", ch4_7_data[2]])

                        ch4_7_log.append(["Input-Electric-all:", ch4_7_data[9]])

                        ch4_7_log.append(["Output-Electric-all:", ch4_7_data[8]])

                        endtime = datetime.datetime.now()
                        ch4_7_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch4_7")

        if (
            ch4_7_data[2] == "过压报警"
            or ch4_7_data[2] == "低压报警"
            or ch4_7_data[2] == "过流报警"
            or ch4_7_data[2] == "过温报警"
            or ch4_7_data[2] == "电池脱落或被保护"
            or ch4_7_data[2] == "电池不充电报警"
            or ch4_7_data[2] == "通信异常"
            or ch4_7_data[2] == "NTC温度异常"
            or ch4_7_data[2] == 4
            or ch4_7_data[2] == 5
            or ch4_7_data[2] == 6
            or ch4_7_data[2] == 7
            or ch4_7_data[2] == 8
            or ch4_7_data[2] == 9
        ):

            ch4_7_error_data = ch4_7_data[2]
            ch4_7_state_value["text"] = ch4_7_data[2]
            ch4_7_state_value["bg"] = "red"
            if ch4_7_signal == 1:
                ch4_7_log.append(
                    [
                        "Error-State:",
                        ch4_7_data[2],
                        ch4_7_data[3],
                        ch4_7_data[4],
                        ch4_7_data[5],
                        ch4_7_data[6],
                        ch4_7_data[7],
                    ]
                )

                errorendtime = datetime.datetime.now()
                ch4_7_log.append(
                    ["Error-End-Time", errorendtime.strftime("%Y-%m-%d %H:%M:%S")]
                )

                # stop_test("ch4_7")

        if (
            ch4_8_data[2] == "充电状态"
            or ch4_8_data[2] == "放电状态"
            or ch4_8_data[2] == "测试完成"
            or ch4_8_data[2] == "待机状态"
            or ch4_8_data[2] == "容量不足"
            or ch4_8_data[2] == 0
            or ch4_8_data[2] == 1
            or ch4_8_data[2] == 2
            or ch4_8_data[2] == 3
        ):
            if ch4_8_data[2] == "待机状态":
                ch4_8_state_value["text"] = ch4_8_data[2]
                ch4_8_state_value["bg"] = "#919191"

            if ch4_8_data[2] == "测试完成":
                ch4_8_state_value["text"] = ch4_8_data[2]
                ch4_8_state_value["bg"] = "#63D0A4"

            if ch4_8_data[2] == "放电状态" or ch4_8_data[2] == "充电状态":
                ch4_8_state_value["text"] = ch4_8_data[2]
                ch4_8_state_value["bg"] = "#48A9EB"

            if ch4_8_data[2] == "容量不足":
                ch4_8_state_value["text"] = ch4_8_data[2]
                ch4_8_state_value["bg"] = "#F031A4"

            if ch4_8_signal == 1:
                ch4_8_log.append(
                    [
                        "Now-State:",
                        ch4_8_data[2],
                        ch4_8_data[3],
                        ch4_8_data[4],
                        ch4_8_data[5],
                        ch4_8_data[6],
                        ch4_8_data[7],
                    ]
                )
                if ch4_8_data[5] > 50:
                    pass
                else:
                    if math.fabs(ch4_8_data[5] - ch4_8_data[6]) > 5:
                        ch4_8_signal_ntc = ch4_8_signal_ntc + 1
                        if ch4_8_signal_ntc > 11:
                            ch4_8_error_data = "NTC温度异常"
                        else:
                            pass
                    else:
                        ch4_8_signal_ntc = 0

                if ch4_8_data[2] == "测试完成":
                    if (
                        ch4_8_data[8] < ch4_8_battery_capacity
                        or ch4_8_data[9] < ch4_8_battery_capacity
                    ):
                        ch4_8_error_data = "容量不足"
                        ch4_8_log.append(["Test-State", ch4_8_error_data])

                        ch4_8_log.append(["Input-Electric-all:", ch4_8_data[9]])

                        ch4_8_log.append(["Output-Electric-all:", ch4_8_data[8]])

                        endtime = datetime.datetime.now()
                        ch4_8_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch4_8")
                    else:
                        ch4_8_error_data = ch4_8_data[2]

                        ch4_8_log.append(["Test-State", ch4_8_data[2]])

                        ch4_8_log.append(["Input-Electric-all:", ch4_8_data[9]])

                        ch4_8_log.append(["Output-Electric-all:", ch4_8_data[8]])

                        endtime = datetime.datetime.now()
                        ch4_8_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch4_8")

        if (
            ch4_8_data[2] == "过压报警"
            or ch4_8_data[2] == "低压报警"
            or ch4_8_data[2] == "过流报警"
            or ch4_8_data[2] == "过温报警"
            or ch4_8_data[2] == "电池脱落或被保护"
            or ch4_8_data[2] == "电池不充电报警"
            or ch4_8_data[2] == "通信异常"
            or ch4_8_data[2] == "NTC温度异常"
            or ch4_8_data[2] == 4
            or ch4_8_data[2] == 5
            or ch4_8_data[2] == 6
            or ch4_8_data[2] == 7
            or ch4_8_data[2] == 8
            or ch4_8_data[2] == 9
        ):

            ch4_8_error_data = ch4_8_data[2]
            ch4_8_state_value["text"] = ch4_8_data[2]
            ch4_8_state_value["bg"] = "red"
            if ch4_8_signal == 1:
                ch4_8_log.append(
                    [
                        "Error-State:",
                        ch4_8_data[2],
                        ch4_8_data[3],
                        ch4_8_data[4],
                        ch4_8_data[5],
                        ch4_8_data[6],
                        ch4_8_data[7],
                    ]
                )

                errorendtime = datetime.datetime.now()
                ch4_8_log.append(
                    ["Error-End-Time", errorendtime.strftime("%Y-%m-%d %H:%M:%S")]
                )

                # stop_test("ch4_8")

        if (
            ch5_1_data[2] == "充电状态"
            or ch5_1_data[2] == "放电状态"
            or ch5_1_data[2] == "测试完成"
            or ch5_1_data[2] == "待机状态"
            or ch5_1_data[2] == 0
            or ch5_1_data[2] == 1
            or ch5_1_data[2] == 2
            or ch5_1_data[2] == 3
        ):
            if ch5_1_data[2] == "待机状态":
                ch5_1_state_value["text"] = ch5_1_data[2]
                ch5_1_state_value["bg"] = "#919191"

            if ch5_1_data[2] == "测试完成":
                ch5_1_state_value["text"] = ch5_1_data[2]
                ch5_1_state_value["bg"] = "#63D0A4"

            if ch5_1_data[2] == "放电状态" or ch5_1_data[2] == "充电状态":
                ch5_1_state_value["text"] = ch5_1_data[2]
                ch5_1_state_value["bg"] = "#48A9EB"

            if ch5_1_data[2] == "容量不足":
                ch5_1_state_value["text"] = ch5_1_data[2]
                ch5_1_state_value["bg"] = "#F031A4"

            if ch5_1_signal == 1:
                ch5_1_log.append(
                    [
                        "Now-State:",
                        ch5_1_data[2],
                        ch5_1_data[3],
                        ch5_1_data[4],
                        ch5_1_data[5],
                        ch5_1_data[6],
                        ch5_1_data[7],
                    ]
                )
                if ch5_1_data[5] > 50:
                    pass
                else:
                    if math.fabs(ch5_1_data[5] - ch5_1_data[6]) > 5:
                        ch5_1_signal_ntc = ch5_1_signal_ntc + 1
                        if ch5_1_signal_ntc > 11:
                            ch5_1_error_data = "NTC温度异常"
                        else:
                            pass
                    else:
                        ch5_1_signal_ntc = 0

                if ch5_1_data[2] == "测试完成":
                    if (
                        ch5_1_data[8] < ch5_1_battery_capacity
                        or ch5_1_data[9] < ch5_1_battery_capacity
                    ):
                        ch5_1_error_data = "容量不足"
                        ch5_1_log.append(["Test-State", ch5_1_error_data])

                        ch5_1_log.append(["Input-Electric-all:", ch5_1_data[9]])

                        ch5_1_log.append(["Output-Electric-all:", ch5_1_data[8]])

                        endtime = datetime.datetime.now()
                        ch5_1_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch5_1")
                    else:
                        ch5_1_error_data = ch5_1_data[2]

                        ch5_1_log.append(["Test-State", ch5_1_data[2]])

                        ch5_1_log.append(["Input-Electric-all:", ch5_1_data[9]])

                        ch5_1_log.append(["Output-Electric-all:", ch5_1_data[8]])

                        endtime = datetime.datetime.now()
                        ch5_1_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch5_1")

        if (
            ch5_1_data[2] == "过压报警"
            or ch5_1_data[2] == "低压报警"
            or ch5_1_data[2] == "过流报警"
            or ch5_1_data[2] == "过温报警"
            or ch5_1_data[2] == "电池脱落或被保护"
            or ch5_1_data[2] == "电池不充电报警"
            or ch5_1_data[2] == "通信异常"
            or ch5_1_data[2] == "NTC温度异常"
            or ch5_1_data[2] == 4
            or ch5_1_data[2] == 5
            or ch5_1_data[2] == 6
            or ch5_1_data[2] == 7
            or ch5_1_data[2] == 8
            or ch5_1_data[2] == 9
        ):

            ch5_1_error_data = ch5_1_data[2]
            ch5_1_state_value["text"] = ch5_1_data[2]
            ch5_1_state_value["bg"] = "red"
            if ch5_1_signal == 1:
                ch5_1_log.append(
                    [
                        "Error-State:",
                        ch5_1_data[2],
                        ch5_1_data[3],
                        ch5_1_data[4],
                        ch5_1_data[5],
                        ch5_1_data[6],
                        ch5_1_data[7],
                    ]
                )

                errorendtime = datetime.datetime.now()
                ch5_1_log.append(
                    ["Error-End-Time", errorendtime.strftime("%Y-%m-%d %H:%M:%S")]
                )

                # stop_test("ch5_1")

        if (
            ch5_2_data[2] == "充电状态"
            or ch5_2_data[2] == "放电状态"
            or ch5_2_data[2] == "测试完成"
            or ch5_2_data[2] == "待机状态"
            or ch5_2_data[2] == "容量不足"
            or ch5_2_data[2] == 0
            or ch5_2_data[2] == 1
            or ch5_2_data[2] == 2
            or ch5_2_data[2] == 3
        ):
            if ch5_2_data[2] == "待机状态":
                ch5_2_state_value["text"] = ch5_2_data[2]
                ch5_2_state_value["bg"] = "#919191"

            if ch5_2_data[2] == "测试完成":
                ch5_2_state_value["text"] = ch5_2_data[2]
                ch5_2_state_value["bg"] = "#63D0A4"

            if ch5_2_data[2] == "放电状态" or ch5_2_data[2] == "充电状态":
                ch5_2_state_value["text"] = ch5_2_data[2]
                ch5_2_state_value["bg"] = "#48A9EB"

            if ch5_2_data[2] == "容量不足":
                ch5_2_state_value["text"] = ch5_2_data[2]
                ch5_2_state_value["bg"] = "#F031A4"

            if ch5_2_signal == 1:
                ch5_2_log.append(
                    [
                        "Now-State:",
                        ch5_2_data[2],
                        ch5_2_data[3],
                        ch5_2_data[4],
                        ch5_2_data[5],
                        ch5_2_data[6],
                        ch5_2_data[7],
                    ]
                )

                if ch5_2_data[5] > 50:
                    pass
                else:
                    if math.fabs(ch5_2_data[5] - ch5_2_data[6]) > 5:
                        ch5_2_signal_ntc = ch5_2_signal_ntc + 1
                        if ch5_2_signal_ntc > 11:
                            ch5_2_error_data = "NTC温度异常"
                        else:
                            pass
                    else:
                        ch5_2_signal_ntc = 0

                if ch5_2_data[2] == "测试完成":
                    if (
                        ch5_2_data[8] < ch5_2_battery_capacity
                        or ch5_2_data[9] < ch5_2_battery_capacity
                    ):
                        ch5_2_error_data = "容量不足"
                        ch5_2_log.append(["Test-State", ch5_2_error_data])

                        ch5_2_log.append(["Input-Electric-all:", ch5_2_data[9]])

                        ch5_2_log.append(["Output-Electric-all:", ch5_2_data[8]])

                        endtime = datetime.datetime.now()
                        ch5_2_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch5_2")
                    else:
                        ch5_2_error_data = ch5_2_data[2]

                        ch5_2_log.append(["Test-State", ch5_2_data[2]])

                        ch5_2_log.append(["Input-Electric-all:", ch5_2_data[9]])

                        ch5_2_log.append(["Output-Electric-all:", ch5_2_data[8]])

                        endtime = datetime.datetime.now()
                        ch5_2_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch5_2")

        if (
            ch5_2_data[2] == "过压报警"
            or ch5_2_data[2] == "低压报警"
            or ch5_2_data[2] == "过流报警"
            or ch5_2_data[2] == "过温报警"
            or ch5_2_data[2] == "电池脱落或被保护"
            or ch5_2_data[2] == "电池不充电报警"
            or ch5_2_data[2] == "通信异常"
            or ch5_2_data[2] == "NTC温度异常"
            or ch5_2_data[2] == 4
            or ch5_2_data[2] == 5
            or ch5_2_data[2] == 6
            or ch5_2_data[2] == 7
            or ch5_2_data[2] == 8
            or ch5_2_data[2] == 9
        ):

            ch5_2_error_data = ch5_2_data[2]
            ch5_2_state_value["text"] = ch5_2_data[2]
            ch5_2_state_value["bg"] = "red"
            if ch5_2_signal == 1:
                ch5_2_log.append(
                    [
                        "Error-State:",
                        ch5_2_data[2],
                        ch5_2_data[3],
                        ch5_2_data[4],
                        ch5_2_data[5],
                        ch5_2_data[6],
                        ch5_2_data[7],
                    ]
                )

                errorendtime = datetime.datetime.now()
                ch5_2_log.append(
                    ["Error-End-Time", errorendtime.strftime("%Y-%m-%d %H:%M:%S")]
                )

                # stop_test("ch5_2")

        if (
            ch5_3_data[2] == "充电状态"
            or ch5_3_data[2] == "放电状态"
            or ch5_3_data[2] == "测试完成"
            or ch5_3_data[2] == "待机状态"
            or ch5_3_data[2] == "容量不足"
            or ch5_3_data[2] == 0
            or ch5_3_data[2] == 1
            or ch5_3_data[2] == 2
            or ch5_3_data[2] == 3
        ):
            if ch5_3_data[2] == "待机状态":
                ch5_3_state_value["text"] = ch5_3_data[2]
                ch5_3_state_value["bg"] = "#919191"

            if ch5_3_data[2] == "测试完成":
                ch5_3_state_value["text"] = ch5_3_data[2]
                ch5_3_state_value["bg"] = "#63D0A4"

            if ch5_3_data[2] == "放电状态" or ch5_3_data[2] == "充电状态":
                ch5_3_state_value["text"] = ch5_3_data[2]
                ch5_3_state_value["bg"] = "#48A9EB"

            if ch5_3_data[2] == "容量不足":
                ch5_3_state_value["text"] = ch5_3_data[2]
                ch5_3_state_value["bg"] = "#F031A4"

            if ch5_3_signal == 1:
                ch5_3_log.append(
                    [
                        "Now-State:",
                        ch5_3_data[2],
                        ch5_3_data[3],
                        ch5_3_data[4],
                        ch5_3_data[5],
                        ch5_3_data[6],
                        ch5_3_data[7],
                    ]
                )
                if ch5_3_data[5] > 50:
                    pass
                else:
                    if math.fabs(ch5_3_data[5] - ch5_3_data[6]) > 5:
                        ch5_3_signal_ntc = ch5_3_signal_ntc + 1
                        if ch5_3_signal_ntc > 11:
                            ch5_3_error_data = "NTC温度异常"
                        else:
                            pass
                    else:
                        ch5_3_signal_ntc = 0

                if ch5_3_data[2] == "测试完成":
                    if (
                        ch5_3_data[8] < ch5_3_battery_capacity
                        or ch5_3_data[9] < ch5_3_battery_capacity
                    ):
                        ch5_3_error_data = "容量不足"
                        ch5_3_log.append(["Test-State", ch5_3_error_data])

                        ch5_3_log.append(["Input-Electric-all:", ch5_3_data[9]])

                        ch5_3_log.append(["Output-Electric-all:", ch5_3_data[8]])

                        endtime = datetime.datetime.now()
                        ch5_3_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch5_3")
                    else:
                        ch5_3_error_data = ch5_3_data[2]

                        ch5_3_log.append(["Test-State", ch5_3_data[2]])

                        ch5_3_log.append(["Input-Electric-all:", ch5_3_data[9]])

                        ch5_3_log.append(["Output-Electric-all:", ch5_3_data[8]])

                        endtime = datetime.datetime.now()
                        ch5_3_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch5_3")

        if (
            ch5_3_data[2] == "过压报警"
            or ch5_3_data[2] == "低压报警"
            or ch5_3_data[2] == "过流报警"
            or ch5_3_data[2] == "过温报警"
            or ch5_3_data[2] == "电池脱落或被保护"
            or ch5_3_data[2] == "电池不充电报警"
            or ch5_3_data[2] == "通信异常"
            or ch5_3_data[2] == "NTC温度异常"
            or ch5_3_data[2] == 4
            or ch5_3_data[2] == 5
            or ch5_3_data[2] == 6
            or ch5_3_data[2] == 7
            or ch5_3_data[2] == 8
            or ch5_3_data[2] == 9
        ):

            ch5_3_error_data = ch5_3_data[2]
            ch5_3_state_value["text"] = ch5_3_data[2]
            ch5_3_state_value["bg"] = "red"
            if ch5_3_signal == 1:
                ch5_3_log.append(
                    [
                        "Error-State:",
                        ch5_3_data[2],
                        ch5_3_data[3],
                        ch5_3_data[4],
                        ch5_3_data[5],
                        ch5_3_data[6],
                        ch5_3_data[7],
                    ]
                )

                errorendtime = datetime.datetime.now()
                ch5_3_log.append(
                    ["Error-End-Time", errorendtime.strftime("%Y-%m-%d %H:%M:%S")]
                )

                # stop_test("ch5_3")

        if (
            ch5_4_data[2] == "充电状态"
            or ch5_4_data[2] == "放电状态"
            or ch5_4_data[2] == "测试完成"
            or ch5_4_data[2] == "待机状态"
            or ch5_4_data[2] == "容量不足"
            or ch5_4_data[2] == 0
            or ch5_4_data[2] == 1
            or ch5_4_data[2] == 2
            or ch5_4_data[2] == 3
        ):
            if ch5_4_data[2] == "待机状态":
                ch5_4_state_value["text"] = ch5_4_data[2]
                ch5_4_state_value["bg"] = "#919191"

            if ch5_4_data[2] == "测试完成":
                ch5_4_state_value["text"] = ch5_4_data[2]
                ch5_4_state_value["bg"] = "#63D0A4"

            if ch5_4_data[2] == "放电状态" or ch5_4_data[2] == "充电状态":
                ch5_4_state_value["text"] = ch5_4_data[2]
                ch5_4_state_value["bg"] = "#48A9EB"

            if ch5_4_data[2] == "容量不足":
                ch5_4_state_value["text"] = ch5_4_data[2]
                ch5_4_state_value["bg"] = "#F031A4"

            if ch5_4_signal == 1:
                ch5_4_log.append(
                    [
                        "Now-State:",
                        ch5_4_data[2],
                        ch5_4_data[3],
                        ch5_4_data[4],
                        ch5_4_data[5],
                        ch5_4_data[6],
                        ch5_4_data[7],
                    ]
                )
                if ch5_4_data[5] > 50:
                    pass
                else:
                    if math.fabs(ch5_4_data[5] - ch5_4_data[6]) > 5:
                        ch5_4_signal_ntc = ch5_4_signal_ntc + 1
                        if ch5_4_signal_ntc > 11:
                            ch5_4_error_data = "NTC温度异常"
                        else:
                            pass
                    else:
                        ch5_4_signal_ntc = 0

                if ch5_4_data[2] == "测试完成":
                    if (
                        ch5_4_data[8] < ch5_4_battery_capacity
                        or ch5_4_data[9] < ch5_4_battery_capacity
                    ):
                        ch5_4_error_data = "容量不足"
                        ch5_4_log.append(["Test-State", ch5_4_error_data])

                        ch5_4_log.append(["Input-Electric-all:", ch5_4_data[9]])

                        ch5_4_log.append(["Output-Electric-all:", ch5_4_data[8]])

                        endtime = datetime.datetime.now()
                        ch5_4_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch5_4")
                    else:
                        ch5_4_error_data = ch5_4_data[2]

                        ch5_4_log.append(["Test-State", ch5_4_data[2]])

                        ch5_4_log.append(["Input-Electric-all:", ch5_4_data[9]])

                        ch5_4_log.append(["Output-Electric-all:", ch5_4_data[8]])

                        endtime = datetime.datetime.now()
                        ch5_4_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch5_4")

        if (
            ch5_4_data[2] == "过压报警"
            or ch5_4_data[2] == "低压报警"
            or ch5_4_data[2] == "过流报警"
            or ch5_4_data[2] == "过温报警"
            or ch5_4_data[2] == "电池脱落或被保护"
            or ch5_4_data[2] == "电池不充电报警"
            or ch5_4_data[2] == "通信异常"
            or ch5_4_data[2] == "NTC温度异常"
            or ch5_4_data[2] == 4
            or ch5_4_data[2] == 5
            or ch5_4_data[2] == 6
            or ch5_4_data[2] == 7
            or ch5_4_data[2] == 8
            or ch5_4_data[2] == 9
        ):

            ch5_4_error_data = ch5_4_data[2]
            ch5_4_state_value["text"] = ch5_4_data[2]
            ch5_4_state_value["bg"] = "red"
            if ch5_4_signal == 1:
                ch5_4_log.append(
                    [
                        "Error-State:",
                        ch5_4_data[2],
                        ch5_4_data[3],
                        ch5_4_data[4],
                        ch5_4_data[5],
                        ch5_4_data[6],
                        ch5_4_data[7],
                    ]
                )

                errorendtime = datetime.datetime.now()
                ch5_4_log.append(
                    ["Error-End-Time", errorendtime.strftime("%Y-%m-%d %H:%M:%S")]
                )

                # stop_test("ch5_4")

        if (
            ch5_5_data[2] == "充电状态"
            or ch5_5_data[2] == "放电状态"
            or ch5_5_data[2] == "测试完成"
            or ch5_5_data[2] == "待机状态"
            or ch5_5_data[2] == "容量不足"
            or ch5_5_data[2] == 0
            or ch5_5_data[2] == 1
            or ch5_5_data[2] == 2
            or ch5_5_data[2] == 3
        ):
            if ch5_5_data[2] == "待机状态":
                ch5_5_state_value["text"] = ch5_5_data[2]
                ch5_5_state_value["bg"] = "#919191"

            if ch5_5_data[2] == "测试完成":
                ch5_5_state_value["text"] = ch5_5_data[2]
                ch5_5_state_value["bg"] = "#63D0A4"

            if ch5_5_data[2] == "放电状态" or ch5_5_data[2] == "充电状态":
                ch5_5_state_value["text"] = ch5_5_data[2]
                ch5_5_state_value["bg"] = "#48A9EB"

            if ch5_5_data[2] == "容量不足":
                ch5_5_state_value["text"] = ch5_5_data[2]
                ch5_5_state_value["bg"] = "#F031A4"

            if ch5_5_signal == 1:
                ch5_5_log.append(
                    [
                        "Now-State:",
                        ch5_5_data[2],
                        ch5_5_data[3],
                        ch5_5_data[4],
                        ch5_5_data[5],
                        ch5_5_data[6],
                        ch5_5_data[7],
                    ]
                )
                if ch5_5_data[5] > 50:
                    pass
                else:
                    if math.fabs(ch5_5_data[5] - ch5_5_data[6]) > 5:
                        ch5_5_signal_ntc = ch5_5_signal_ntc + 1
                        if ch5_5_signal_ntc > 11:
                            ch5_5_error_data = "NTC温度异常"
                        else:
                            pass
                    else:
                        ch5_5_signal_ntc = 0

                if ch5_5_data[2] == "测试完成":
                    if (
                        ch5_5_data[8] < ch5_5_battery_capacity
                        or ch5_5_data[9] < ch5_5_battery_capacity
                    ):
                        ch5_5_error_data = "容量不足"
                        ch5_5_log.append(["Test-State", ch5_5_error_data])

                        ch5_5_log.append(["Input-Electric-all:", ch5_5_data[9]])

                        ch5_5_log.append(["Output-Electric-all:", ch5_5_data[8]])

                        endtime = datetime.datetime.now()
                        ch5_5_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch5_5")
                    else:
                        ch5_5_error_data = ch5_5_data[2]

                        ch5_5_log.append(["Test-State", ch5_5_data[2]])

                        ch5_5_log.append(["Input-Electric-all:", ch5_5_data[9]])

                        ch5_5_log.append(["Output-Electric-all:", ch5_5_data[8]])

                        endtime = datetime.datetime.now()
                        ch5_5_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch5_5")

        if (
            ch5_5_data[2] == "过压报警"
            or ch5_5_data[2] == "低压报警"
            or ch5_5_data[2] == "过流报警"
            or ch5_5_data[2] == "过温报警"
            or ch5_5_data[2] == "电池脱落或被保护"
            or ch5_5_data[2] == "电池不充电报警"
            or ch5_5_data[2] == "通信异常"
            or ch5_5_data[2] == "NTC温度异常"
            or ch5_5_data[2] == 4
            or ch5_5_data[2] == 5
            or ch5_5_data[2] == 6
            or ch5_5_data[2] == 7
            or ch5_5_data[2] == 8
            or ch5_5_data[2] == 9
        ):

            ch5_5_error_data = ch5_5_data[2]
            ch5_5_state_value["text"] = ch5_5_data[2]
            ch5_5_state_value["bg"] = "red"
            if ch5_5_signal == 1:
                ch5_5_log.append(
                    [
                        "Error-State:",
                        ch5_5_data[2],
                        ch5_5_data[3],
                        ch5_5_data[4],
                        ch5_5_data[5],
                        ch5_5_data[6],
                        ch5_5_data[7],
                    ]
                )

                errorendtime = datetime.datetime.now()
                ch5_5_log.append(
                    ["Error-End-Time", errorendtime.strftime("%Y-%m-%d %H:%M:%S")]
                )

                # stop_test("ch5_5")

        if (
            ch5_6_data[2] == "充电状态"
            or ch5_6_data[2] == "放电状态"
            or ch5_6_data[2] == "测试完成"
            or ch5_6_data[2] == "待机状态"
            or ch5_6_data[2] == "容量不足"
            or ch5_6_data[2] == 0
            or ch5_6_data[2] == 1
            or ch5_6_data[2] == 2
            or ch5_6_data[2] == 3
        ):
            if ch5_6_data[2] == "待机状态":
                ch5_6_state_value["text"] = ch5_6_data[2]
                ch5_6_state_value["bg"] = "#919191"

            if ch5_6_data[2] == "测试完成":
                ch5_6_state_value["text"] = ch5_6_data[2]
                ch5_6_state_value["bg"] = "#63D0A4"

            if ch5_6_data[2] == "放电状态" or ch5_6_data[2] == "充电状态":
                ch5_6_state_value["text"] = ch5_6_data[2]
                ch5_6_state_value["bg"] = "#48A9EB"

            if ch5_6_data[2] == "容量不足":
                ch5_6_state_value["text"] = ch5_6_data[2]
                ch5_6_state_value["bg"] = "#F031A4"

            if ch5_6_signal == 1:
                ch5_6_log.append(
                    [
                        "Now-State:",
                        ch5_6_data[2],
                        ch5_6_data[3],
                        ch5_6_data[4],
                        ch5_6_data[5],
                        ch5_6_data[6],
                        ch5_6_data[7],
                    ]
                )
                if ch5_6_data[5] > 50:
                    pass
                else:
                    if math.fabs(ch5_6_data[5] - ch5_6_data[6]) > 5:
                        ch5_6_signal_ntc = ch5_6_signal_ntc + 1
                        if ch5_6_signal_ntc > 11:
                            ch5_6_error_data = "NTC温度异常"
                        else:
                            pass
                    else:
                        ch5_6_signal_ntc = 0

                if ch5_6_data[2] == "测试完成":
                    if (
                        ch5_6_data[8] < ch5_6_battery_capacity
                        or ch5_6_data[9] < ch5_6_battery_capacity
                    ):
                        ch5_6_error_data = "容量不足"
                        ch5_6_log.append(["Test-State", ch5_6_error_data])

                        ch5_6_log.append(["Input-Electric-all:", ch5_6_data[9]])

                        ch5_6_log.append(["Output-Electric-all:", ch5_6_data[8]])

                        endtime = datetime.datetime.now()
                        ch5_6_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch5_6")
                    else:
                        ch5_6_error_data = ch5_6_data[2]

                        ch5_6_log.append(["Test-State", ch5_6_data[2]])

                        ch5_6_log.append(["Input-Electric-all:", ch5_6_data[9]])

                        ch5_6_log.append(["Output-Electric-all:", ch5_6_data[8]])

                        endtime = datetime.datetime.now()
                        ch5_6_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch5_6")

        if (
            ch5_6_data[2] == "过压报警"
            or ch5_6_data[2] == "低压报警"
            or ch5_6_data[2] == "过流报警"
            or ch5_6_data[2] == "过温报警"
            or ch5_6_data[2] == "电池脱落或被保护"
            or ch5_6_data[2] == "电池不充电报警"
            or ch5_6_data[2] == "通信异常"
            or ch5_6_data[2] == "NTC温度异常"
            or ch5_6_data[2] == 4
            or ch5_6_data[2] == 5
            or ch5_6_data[2] == 6
            or ch5_6_data[2] == 7
            or ch5_6_data[2] == 8
            or ch5_6_data[2] == 9
        ):

            ch5_6_error_data = ch5_6_data[2]
            ch5_6_state_value["text"] = ch5_6_data[2]
            ch5_6_state_value["bg"] = "red"
            if ch5_6_signal == 1:
                ch5_6_log.append(
                    [
                        "Error-State:",
                        ch5_6_data[2],
                        ch5_6_data[3],
                        ch5_6_data[4],
                        ch5_6_data[5],
                        ch5_6_data[6],
                        ch5_6_data[7],
                    ]
                )

                errorendtime = datetime.datetime.now()
                ch5_6_log.append(
                    ["Error-End-Time", errorendtime.strftime("%Y-%m-%d %H:%M:%S")]
                )

                # stop_test("ch5_6")

        if (
            ch5_7_data[2] == "充电状态"
            or ch5_7_data[2] == "放电状态"
            or ch5_7_data[2] == "测试完成"
            or ch5_7_data[2] == "待机状态"
            or ch5_7_data[2] == "容量不足"
            or ch5_7_data[2] == 0
            or ch5_7_data[2] == 1
            or ch5_7_data[2] == 2
            or ch5_7_data[2] == 3
        ):
            if ch5_7_data[2] == "待机状态":
                ch5_7_state_value["text"] = ch5_7_data[2]
                ch5_7_state_value["bg"] = "#919191"

            if ch5_7_data[2] == "测试完成":
                ch5_7_state_value["text"] = ch5_7_data[2]
                ch5_7_state_value["bg"] = "#63D0A4"

            if ch5_7_data[2] == "放电状态" or ch5_7_data[2] == "充电状态":
                ch5_7_state_value["text"] = ch5_7_data[2]
                ch5_7_state_value["bg"] = "#48A9EB"

            if ch5_7_data[2] == "容量不足":
                ch5_7_state_value["text"] = ch5_7_data[2]
                ch5_7_state_value["bg"] = "#F031A4"

            if ch5_7_signal == 1:
                ch5_7_log.append(
                    [
                        "Now-State:",
                        ch5_7_data[2],
                        ch5_7_data[3],
                        ch5_7_data[4],
                        ch5_7_data[5],
                        ch5_7_data[6],
                        ch5_7_data[7],
                    ]
                )
                if ch5_7_data[5] > 50:
                    pass
                else:
                    if math.fabs(ch5_7_data[5] - ch5_7_data[6]) > 5:
                        ch5_7_signal_ntc = ch5_7_signal_ntc + 1
                        if ch5_7_signal_ntc > 11:
                            ch5_7_error_data = "NTC温度异常"
                        else:
                            pass
                    else:
                        ch5_7_signal_ntc = 0

                if ch5_7_data[2] == "测试完成":
                    if (
                        ch5_7_data[8] < ch5_7_battery_capacity
                        or ch5_7_data[9] < ch5_7_battery_capacity
                    ):
                        ch5_7_error_data = "容量不足"
                        ch5_7_log.append(["Test-State", ch5_7_error_data])

                        ch5_7_log.append(["Input-Electric-all:", ch5_7_data[9]])

                        ch5_7_log.append(["Output-Electric-all:", ch5_7_data[8]])

                        endtime = datetime.datetime.now()
                        ch5_7_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch5_7")
                    else:
                        ch5_7_error_data = ch5_7_data[2]

                        ch5_7_log.append(["Test-State", ch5_7_data[2]])

                        ch5_7_log.append(["Input-Electric-all:", ch5_7_data[9]])

                        ch5_7_log.append(["Output-Electric-all:", ch5_7_data[8]])

                        endtime = datetime.datetime.now()
                        ch5_7_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch5_7")

        if (
            ch5_7_data[2] == "过压报警"
            or ch5_7_data[2] == "低压报警"
            or ch5_7_data[2] == "过流报警"
            or ch5_7_data[2] == "过温报警"
            or ch5_7_data[2] == "电池脱落或被保护"
            or ch5_7_data[2] == "电池不充电报警"
            or ch5_7_data[2] == "通信异常"
            or ch5_7_data[2] == "NTC温度异常"
            or ch5_7_data[2] == 4
            or ch5_7_data[2] == 5
            or ch5_7_data[2] == 6
            or ch5_7_data[2] == 7
            or ch5_7_data[2] == 8
            or ch5_7_data[2] == 9
        ):

            ch5_7_error_data = ch5_7_data[2]
            ch5_7_state_value["text"] = ch5_7_data[2]
            ch5_7_state_value["bg"] = "red"
            if ch5_7_signal == 1:
                ch5_7_log.append(
                    [
                        "Error-State:",
                        ch5_7_data[2],
                        ch5_7_data[3],
                        ch5_7_data[4],
                        ch5_7_data[5],
                        ch5_7_data[6],
                        ch5_7_data[7],
                    ]
                )

                errorendtime = datetime.datetime.now()
                ch5_7_log.append(
                    ["Error-End-Time", errorendtime.strftime("%Y-%m-%d %H:%M:%S")]
                )

                # stop_test("ch5_7")

        if (
            ch5_8_data[2] == "充电状态"
            or ch5_8_data[2] == "放电状态"
            or ch5_8_data[2] == "测试完成"
            or ch5_8_data[2] == "待机状态"
            or ch5_8_data[2] == "容量不足"
            or ch5_8_data[2] == 0
            or ch5_8_data[2] == 1
            or ch5_8_data[2] == 2
            or ch5_8_data[2] == 3
        ):
            if ch5_8_data[2] == "待机状态":
                ch5_8_state_value["text"] = ch5_8_data[2]
                ch5_8_state_value["bg"] = "#919191"

            if ch5_8_data[2] == "测试完成":
                ch5_8_state_value["text"] = ch5_8_data[2]
                ch5_8_state_value["bg"] = "#63D0A4"

            if ch5_8_data[2] == "放电状态" or ch5_8_data[2] == "充电状态":
                ch5_8_state_value["text"] = ch5_8_data[2]
                ch5_8_state_value["bg"] = "#48A9EB"

            if ch5_8_data[2] == "容量不足":
                ch5_8_state_value["text"] = ch5_8_data[2]
                ch5_8_state_value["bg"] = "#F031A4"

            if ch5_8_signal == 1:
                ch5_8_log.append(
                    [
                        "Now-State:",
                        ch5_8_data[2],
                        ch5_8_data[3],
                        ch5_8_data[4],
                        ch5_8_data[5],
                        ch5_8_data[6],
                        ch5_8_data[7],
                    ]
                )
                if ch5_8_data[5] > 50:
                    pass
                else:
                    if math.fabs(ch5_8_data[5] - ch5_8_data[6]) > 5:
                        ch5_8_signal_ntc = ch5_8_signal_ntc + 1
                        if ch5_8_signal_ntc > 11:
                            ch5_8_error_data = "NTC温度异常"
                        else:
                            pass
                    else:
                        ch5_8_signal_ntc = 0

                if ch5_8_data[2] == "测试完成":
                    if (
                        ch5_8_data[8] < ch5_8_battery_capacity
                        or ch5_8_data[9] < ch5_8_battery_capacity
                    ):
                        ch5_8_error_data = "容量不足"
                        ch5_8_log.append(["Test-State", ch5_8_error_data])

                        ch5_8_log.append(["Input-Electric-all:", ch5_8_data[9]])

                        ch5_8_log.append(["Output-Electric-all:", ch5_8_data[8]])

                        endtime = datetime.datetime.now()
                        ch5_8_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch5_8")
                    else:
                        ch5_8_error_data = ch5_8_data[2]

                        ch5_8_log.append(["Test-State", ch5_8_data[2]])

                        ch5_8_log.append(["Input-Electric-all:", ch5_8_data[9]])

                        ch5_8_log.append(["Output-Electric-all:", ch5_8_data[8]])

                        endtime = datetime.datetime.now()
                        ch5_8_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch5_8")

        if (
            ch5_8_data[2] == "过压报警"
            or ch5_8_data[2] == "低压报警"
            or ch5_8_data[2] == "过流报警"
            or ch5_8_data[2] == "过温报警"
            or ch5_8_data[2] == "电池脱落或被保护"
            or ch5_8_data[2] == "电池不充电报警"
            or ch5_8_data[2] == "通信异常"
            or ch5_8_data[2] == "NTC温度异常"
            or ch5_8_data[2] == 4
            or ch5_8_data[2] == 5
            or ch5_8_data[2] == 6
            or ch5_8_data[2] == 7
            or ch5_8_data[2] == 8
            or ch5_8_data[2] == 9
        ):

            ch5_8_error_data = ch5_8_data[2]
            ch5_8_state_value["text"] = ch5_8_data[2]
            ch5_8_state_value["bg"] = "red"
            if ch5_8_signal == 1:
                ch5_8_log.append(
                    [
                        "Error-State:",
                        ch5_8_data[2],
                        ch5_8_data[3],
                        ch5_8_data[4],
                        ch5_8_data[5],
                        ch5_8_data[6],
                        ch5_8_data[7],
                    ]
                )

                errorendtime = datetime.datetime.now()
                ch5_8_log.append(
                    ["Error-End-Time", errorendtime.strftime("%Y-%m-%d %H:%M:%S")]
                )

                # stop_test("ch5_8")

        if (
            ch6_1_data[2] == "充电状态"
            or ch6_1_data[2] == "放电状态"
            or ch6_1_data[2] == "测试完成"
            or ch6_1_data[2] == "待机状态"
            or ch6_1_data[2] == "容量不足"
            or ch6_1_data[2] == 0
            or ch6_1_data[2] == 1
            or ch6_1_data[2] == 2
            or ch6_1_data[2] == 3
        ):
            if ch6_1_data[2] == "待机状态":
                ch6_1_state_value["text"] = ch6_1_data[2]
                ch6_1_state_value["bg"] = "#919191"

            if ch6_1_data[2] == "测试完成":
                ch6_1_state_value["text"] = ch6_1_data[2]
                ch6_1_state_value["bg"] = "#63D0A4"

            if ch6_1_data[2] == "放电状态" or ch6_1_data[2] == "充电状态":
                ch6_1_state_value["text"] = ch6_1_data[2]
                ch6_1_state_value["bg"] = "#48A9EB"

            if ch6_1_data[2] == "容量不足":
                ch6_1_state_value["text"] = ch6_1_data[2]
                ch6_1_state_value["bg"] = "#F031A4"

            if ch6_1_signal == 1:
                ch6_1_log.append(
                    [
                        "Now-State:",
                        ch6_1_data[2],
                        ch6_1_data[3],
                        ch6_1_data[4],
                        ch6_1_data[5],
                        ch6_1_data[6],
                        ch6_1_data[7],
                    ]
                )
                if ch6_1_data[5] > 50:
                    pass
                else:
                    if math.fabs(ch6_1_data[5] - ch6_1_data[6]) > 5:
                        ch6_1_signal_ntc = ch6_1_signal_ntc + 1
                        if ch6_1_signal_ntc > 11:
                            ch6_1_error_data = "NTC温度异常"
                        else:
                            pass
                    else:
                        ch6_1_signal_ntc = 0

                if ch6_1_data[2] == "测试完成":
                    if (
                        ch6_1_data[8] < ch6_1_battery_capacity
                        or ch6_1_data[9] < ch6_1_battery_capacity
                    ):
                        ch6_1_error_data = "容量不足"
                        ch6_1_log.append(["Test-State", ch6_1_error_data])

                        ch6_1_log.append(["Input-Electric-all:", ch6_1_data[9]])

                        ch6_1_log.append(["Output-Electric-all:", ch6_1_data[8]])

                        endtime = datetime.datetime.now()
                        ch6_1_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch6_1")
                    else:
                        ch6_1_error_data = ch6_1_data[2]

                        ch6_1_log.append(["Test-State", ch6_1_data[2]])

                        ch6_1_log.append(["Input-Electric-all:", ch6_1_data[9]])

                        ch6_1_log.append(["Output-Electric-all:", ch6_1_data[8]])

                        endtime = datetime.datetime.now()
                        ch6_1_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch6_1")

        if (
            ch6_1_data[2] == "过压报警"
            or ch6_1_data[2] == "低压报警"
            or ch6_1_data[2] == "过流报警"
            or ch6_1_data[2] == "过温报警"
            or ch6_1_data[2] == "电池脱落或被保护"
            or ch6_1_data[2] == "电池不充电报警"
            or ch6_1_data[2] == "通信异常"
            or ch6_1_data[2] == "NTC温度异常"
            or ch6_1_data[2] == 4
            or ch6_1_data[2] == 5
            or ch6_1_data[2] == 6
            or ch6_1_data[2] == 7
            or ch6_1_data[2] == 8
            or ch6_1_data[2] == 9
        ):

            ch6_1_error_data = ch6_1_data[2]
            ch6_1_state_value["text"] = ch6_1_data[2]
            ch6_1_state_value["bg"] = "red"
            if ch6_1_signal == 1:
                ch6_1_log.append(
                    [
                        "Error-State:",
                        ch6_1_data[2],
                        ch6_1_data[3],
                        ch6_1_data[4],
                        ch6_1_data[5],
                        ch6_1_data[6],
                        ch6_1_data[7],
                    ]
                )

                errorendtime = datetime.datetime.now()
                ch6_1_log.append(
                    ["Error-End-Time", errorendtime.strftime("%Y-%m-%d %H:%M:%S")]
                )

                # stop_test("ch6_1")

        if (
            ch6_2_data[2] == "充电状态"
            or ch6_2_data[2] == "放电状态"
            or ch6_2_data[2] == "测试完成"
            or ch6_2_data[2] == "待机状态"
            or ch6_2_data[2] == "容量不足"
            or ch6_2_data[2] == 0
            or ch6_2_data[2] == 1
            or ch6_2_data[2] == 2
            or ch6_2_data[2] == 3
        ):
            if ch6_2_data[2] == "待机状态":
                ch6_2_state_value["text"] = ch6_2_data[2]
                ch6_2_state_value["bg"] = "#919191"

            if ch6_2_data[2] == "测试完成":
                ch6_2_state_value["text"] = ch6_2_data[2]
                ch6_2_state_value["bg"] = "#63D0A4"

            if ch6_2_data[2] == "放电状态" or ch6_2_data[2] == "充电状态":
                ch6_2_state_value["text"] = ch6_2_data[2]
                ch6_2_state_value["bg"] = "#48A9EB"

            if ch6_2_data[2] == "容量不足":
                ch6_2_state_value["text"] = ch6_2_data[2]
                ch6_2_state_value["bg"] = "#F031A4"

            if ch6_2_signal == 1:
                ch6_2_log.append(
                    [
                        "Now-State:",
                        ch6_2_data[2],
                        ch6_2_data[3],
                        ch6_2_data[4],
                        ch6_2_data[5],
                        ch6_2_data[6],
                        ch6_2_data[7],
                    ]
                )

                if ch6_2_data[5] > 50:
                    pass
                else:
                    if math.fabs(ch6_2_data[5] - ch6_2_data[6]) > 5:
                        ch6_2_signal_ntc = ch6_2_signal_ntc + 1
                        if ch6_2_signal_ntc > 11:
                            ch6_2_error_data = "NTC温度异常"
                        else:
                            pass
                    else:
                        ch6_2_signal_ntc = 0

                if ch6_2_data[2] == "测试完成":
                    if (
                        ch6_2_data[8] < ch6_2_battery_capacity
                        or ch6_2_data[9] < ch6_2_battery_capacity
                    ):
                        ch6_2_error_data = "容量不足"
                        ch6_2_log.append(["Test-State", ch6_2_error_data])

                        ch6_2_log.append(["Input-Electric-all:", ch6_2_data[9]])

                        ch6_2_log.append(["Output-Electric-all:", ch6_2_data[8]])

                        endtime = datetime.datetime.now()
                        ch6_2_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch6_2")
                    else:
                        ch6_2_error_data = ch6_2_data[2]

                        ch6_2_log.append(["Test-State", ch6_2_data[2]])

                        ch6_2_log.append(["Input-Electric-all:", ch6_2_data[9]])

                        ch6_2_log.append(["Output-Electric-all:", ch6_2_data[8]])

                        endtime = datetime.datetime.now()
                        ch6_2_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch6_2")

        if (
            ch6_2_data[2] == "过压报警"
            or ch6_2_data[2] == "低压报警"
            or ch6_2_data[2] == "过流报警"
            or ch6_2_data[2] == "过温报警"
            or ch6_2_data[2] == "电池脱落或被保护"
            or ch6_2_data[2] == "电池不充电报警"
            or ch6_2_data[2] == "通信异常"
            or ch6_2_data[2] == "NTC温度异常"
            or ch6_2_data[2] == 4
            or ch6_2_data[2] == 5
            or ch6_2_data[2] == 6
            or ch6_2_data[2] == 7
            or ch6_2_data[2] == 8
            or ch6_2_data[2] == 9
        ):

            ch6_2_error_data = ch6_2_data[2]
            ch6_2_state_value["text"] = ch6_2_data[2]
            ch6_2_state_value["bg"] = "red"
            if ch6_2_signal == 1:
                ch6_2_log.append(
                    [
                        "Error-State:",
                        ch6_2_data[2],
                        ch6_2_data[3],
                        ch6_2_data[4],
                        ch6_2_data[5],
                        ch6_2_data[6],
                        ch6_2_data[7],
                    ]
                )

                errorendtime = datetime.datetime.now()
                ch6_2_log.append(
                    ["Error-End-Time", errorendtime.strftime("%Y-%m-%d %H:%M:%S")]
                )

                # stop_test("ch6_2")

        if (
            ch6_3_data[2] == "充电状态"
            or ch6_3_data[2] == "放电状态"
            or ch6_3_data[2] == "测试完成"
            or ch6_3_data[2] == "待机状态"
            or ch6_3_data[2] == "容量不足"
            or ch6_3_data[2] == 0
            or ch6_3_data[2] == 1
            or ch6_3_data[2] == 2
            or ch6_3_data[2] == 3
        ):
            if ch6_3_data[2] == "待机状态":
                ch6_3_state_value["text"] = ch6_3_data[2]
                ch6_3_state_value["bg"] = "#919191"

            if ch6_3_data[2] == "测试完成":
                ch6_3_state_value["text"] = ch6_3_data[2]
                ch6_3_state_value["bg"] = "#63D0A4"

            if ch6_3_data[2] == "放电状态" or ch6_3_data[2] == "充电状态":
                ch6_3_state_value["text"] = ch6_3_data[2]
                ch6_3_state_value["bg"] = "#48A9EB"

            if ch6_3_data[2] == "容量不足":
                ch6_3_state_value["text"] = ch6_3_data[2]
                ch6_3_state_value["bg"] = "#F031A4"

            if ch6_3_signal == 1:
                ch6_3_log.append(
                    [
                        "Now-State:",
                        ch6_3_data[2],
                        ch6_3_data[3],
                        ch6_3_data[4],
                        ch6_3_data[5],
                        ch6_3_data[6],
                        ch6_3_data[7],
                    ]
                )
                if ch6_3_data[5] > 50:
                    pass
                else:
                    if math.fabs(ch6_3_data[5] - ch6_3_data[6]) > 5:
                        ch6_3_signal_ntc = ch6_3_signal_ntc + 1
                        if ch6_3_signal_ntc > 11:
                            ch6_3_error_data = "NTC温度异常"
                        else:
                            pass
                    else:
                        ch6_3_signal_ntc = 0

                if ch6_3_data[2] == "测试完成":
                    if (
                        ch6_3_data[8] < ch6_3_battery_capacity
                        or ch6_3_data[9] < ch6_3_battery_capacity
                    ):
                        ch6_3_error_data = "容量不足"
                        ch6_3_log.append(["Test-State", ch6_3_error_data])

                        ch6_3_log.append(["Input-Electric-all:", ch6_3_data[9]])

                        ch6_3_log.append(["Output-Electric-all:", ch6_3_data[8]])

                        endtime = datetime.datetime.now()
                        ch6_3_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch6_3")
                    else:
                        ch6_3_error_data = ch6_3_data[2]

                        ch6_3_log.append(["Test-State", ch6_3_data[2]])

                        ch6_3_log.append(["Input-Electric-all:", ch6_3_data[9]])

                        ch6_3_log.append(["Output-Electric-all:", ch6_3_data[8]])

                        endtime = datetime.datetime.now()
                        ch6_3_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch6_3")

        if (
            ch6_3_data[2] == "过压报警"
            or ch6_3_data[2] == "低压报警"
            or ch6_3_data[2] == "过流报警"
            or ch6_3_data[2] == "过温报警"
            or ch6_3_data[2] == "电池脱落或被保护"
            or ch6_3_data[2] == "电池不充电报警"
            or ch6_3_data[2] == "通信异常"
            or ch6_3_data[2] == "NTC温度异常"
            or ch6_3_data[2] == 4
            or ch6_3_data[2] == 5
            or ch6_3_data[2] == 6
            or ch6_3_data[2] == 7
            or ch6_3_data[2] == 8
            or ch6_3_data[2] == 9
        ):

            ch6_3_error_data = ch6_3_data[2]
            ch6_3_state_value["text"] = ch6_3_data[2]
            ch6_3_state_value["bg"] = "red"
            if ch6_3_signal == 1:
                ch6_3_log.append(
                    [
                        "Error-State:",
                        ch6_3_data[2],
                        ch6_3_data[3],
                        ch6_3_data[4],
                        ch6_3_data[5],
                        ch6_3_data[6],
                        ch6_3_data[7],
                    ]
                )

                errorendtime = datetime.datetime.now()
                ch6_3_log.append(
                    ["Error-End-Time", errorendtime.strftime("%Y-%m-%d %H:%M:%S")]
                )

                # stop_test("ch6_3")

        if (
            ch6_4_data[2] == "充电状态"
            or ch6_4_data[2] == "放电状态"
            or ch6_4_data[2] == "测试完成"
            or ch6_4_data[2] == "待机状态"
            or ch6_4_data[2] == "容量不足"
            or ch6_4_data[2] == 0
            or ch6_4_data[2] == 1
            or ch6_4_data[2] == 2
            or ch6_4_data[2] == 3
        ):
            if ch6_4_data[2] == "待机状态":
                ch6_4_state_value["text"] = ch6_4_data[2]
                ch6_4_state_value["bg"] = "#919191"

            if ch6_4_data[2] == "测试完成":
                ch6_4_state_value["text"] = ch6_4_data[2]
                ch6_4_state_value["bg"] = "#63D0A4"

            if ch6_4_data[2] == "放电状态" or ch6_4_data[2] == "充电状态":
                ch6_4_state_value["text"] = ch6_4_data[2]
                ch6_4_state_value["bg"] = "#48A9EB"

            if ch6_4_data[2] == "容量不足":
                ch6_4_state_value["text"] = ch6_4_data[2]
                ch6_4_state_value["bg"] = "#F031A4"

            if ch6_4_signal == 1:
                ch6_4_log.append(
                    [
                        "Now-State:",
                        ch6_4_data[2],
                        ch6_4_data[3],
                        ch6_4_data[4],
                        ch6_4_data[5],
                        ch6_4_data[6],
                        ch6_4_data[7],
                    ]
                )
                if ch6_4_data[5] > 50:
                    pass
                else:
                    if math.fabs(ch6_4_data[5] - ch6_4_data[6]) > 5:
                        ch6_4_signal_ntc = ch6_4_signal_ntc + 1
                        if ch6_4_signal_ntc > 11:
                            ch6_4_error_data = "NTC温度异常"
                        else:
                            pass
                    else:
                        ch6_4_signal_ntc = 0

                if ch6_4_data[2] == "测试完成":
                    if (
                        ch6_4_data[8] < ch6_4_battery_capacity
                        or ch6_4_data[9] < ch6_4_battery_capacity
                    ):
                        ch6_4_error_data = "容量不足"
                        ch6_4_log.append(["Test-State", ch6_4_error_data])

                        ch6_4_log.append(["Input-Electric-all:", ch6_4_data[9]])

                        ch6_4_log.append(["Output-Electric-all:", ch6_4_data[8]])

                        endtime = datetime.datetime.now()
                        ch6_4_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch6_4")
                    else:
                        ch6_4_error_data = ch6_4_data[2]

                        ch6_4_log.append(["Test-State", ch6_4_data[2]])

                        ch6_4_log.append(["Input-Electric-all:", ch6_4_data[9]])

                        ch6_4_log.append(["Output-Electric-all:", ch6_4_data[8]])

                        endtime = datetime.datetime.now()
                        ch6_4_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch6_4")

        if (
            ch6_4_data[2] == "过压报警"
            or ch6_4_data[2] == "低压报警"
            or ch6_4_data[2] == "过流报警"
            or ch6_4_data[2] == "过温报警"
            or ch6_4_data[2] == "电池脱落或被保护"
            or ch6_4_data[2] == "电池不充电报警"
            or ch6_4_data[2] == "通信异常"
            or ch6_4_data[2] == "NTC温度异常"
            or ch6_4_data[2] == 4
            or ch6_4_data[2] == 5
            or ch6_4_data[2] == 6
            or ch6_4_data[2] == 7
            or ch6_4_data[2] == 8
            or ch6_4_data[2] == 9
        ):

            ch6_4_error_data = ch6_4_data[2]
            ch6_4_state_value["text"] = ch6_4_data[2]
            ch6_4_state_value["bg"] = "red"
            if ch6_4_signal == 1:
                ch6_4_log.append(
                    [
                        "Error-State:",
                        ch6_4_data[2],
                        ch6_4_data[3],
                        ch6_4_data[4],
                        ch6_4_data[5],
                        ch6_4_data[6],
                        ch6_4_data[7],
                    ]
                )

                errorendtime = datetime.datetime.now()
                ch6_4_log.append(
                    ["Error-End-Time", errorendtime.strftime("%Y-%m-%d %H:%M:%S")]
                )

                # stop_test("ch6_4")

        if (
            ch6_5_data[2] == "充电状态"
            or ch6_5_data[2] == "放电状态"
            or ch6_5_data[2] == "测试完成"
            or ch6_5_data[2] == "待机状态"
            or ch6_5_data[2] == "容量不足"
            or ch6_5_data[2] == 0
            or ch6_5_data[2] == 1
            or ch6_5_data[2] == 2
            or ch6_5_data[2] == 3
        ):
            if ch6_5_data[2] == "待机状态":
                ch6_5_state_value["text"] = ch6_5_data[2]
                ch6_5_state_value["bg"] = "#919191"

            if ch6_5_data[2] == "测试完成":
                ch6_5_state_value["text"] = ch6_5_data[2]
                ch6_5_state_value["bg"] = "#63D0A4"

            if ch6_5_data[2] == "放电状态" or ch6_5_data[2] == "充电状态":
                ch6_5_state_value["text"] = ch6_5_data[2]
                ch6_5_state_value["bg"] = "#48A9EB"

            if ch6_5_data[2] == "容量不足":
                ch6_5_state_value["text"] = ch6_5_data[2]
                ch6_5_state_value["bg"] = "#F031A4"

            if ch6_5_signal == 1:
                ch6_5_log.append(
                    [
                        "Now-State:",
                        ch6_5_data[2],
                        ch6_5_data[3],
                        ch6_5_data[4],
                        ch6_5_data[5],
                        ch6_5_data[6],
                        ch6_5_data[7],
                    ]
                )
                if ch6_5_data[5] > 50:
                    pass
                else:
                    if math.fabs(ch6_5_data[5] - ch6_5_data[6]) > 5:
                        ch6_5_signal_ntc = ch6_5_signal_ntc + 1
                        if ch6_5_signal_ntc > 11:
                            ch6_5_error_data = "NTC温度异常"
                        else:
                            pass
                    else:
                        ch6_5_signal_ntc = 0

                if ch6_5_data[2] == "测试完成":
                    if (
                        ch6_5_data[8] < ch6_5_battery_capacity
                        or ch6_5_data[9] < ch6_5_battery_capacity
                    ):
                        ch6_5_error_data = "容量不足"
                        ch6_5_log.append(["Test-State", ch6_5_error_data])

                        ch6_5_log.append(["Input-Electric-all:", ch6_5_data[9]])

                        ch6_5_log.append(["Output-Electric-all:", ch6_5_data[8]])

                        endtime = datetime.datetime.now()
                        ch6_5_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch6_5")
                    else:
                        ch6_5_error_data = ch6_5_data[2]

                        ch6_5_log.append(["Test-State", ch6_5_data[2]])

                        ch6_5_log.append(["Input-Electric-all:", ch6_5_data[9]])

                        ch6_5_log.append(["Output-Electric-all:", ch6_5_data[8]])

                        endtime = datetime.datetime.now()
                        ch6_5_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch6_5")

        if (
            ch6_5_data[2] == "过压报警"
            or ch6_5_data[2] == "低压报警"
            or ch6_5_data[2] == "过流报警"
            or ch6_5_data[2] == "过温报警"
            or ch6_5_data[2] == "电池脱落或被保护"
            or ch6_5_data[2] == "电池不充电报警"
            or ch6_5_data[2] == "通信异常"
            or ch6_5_data[2] == "NTC温度异常"
            or ch6_5_data[2] == 4
            or ch6_5_data[2] == 5
            or ch6_5_data[2] == 6
            or ch6_5_data[2] == 7
            or ch6_5_data[2] == 8
            or ch6_5_data[2] == 9
        ):

            ch6_5_error_data = ch6_5_data[2]
            ch6_5_state_value["text"] = ch6_5_data[2]
            ch6_5_state_value["bg"] = "red"
            if ch6_5_signal == 1:
                ch6_5_log.append(
                    [
                        "Error-State:",
                        ch6_5_data[2],
                        ch6_5_data[3],
                        ch6_5_data[4],
                        ch6_5_data[5],
                        ch6_5_data[6],
                        ch6_5_data[7],
                    ]
                )

                errorendtime = datetime.datetime.now()
                ch6_5_log.append(
                    ["Error-End-Time", errorendtime.strftime("%Y-%m-%d %H:%M:%S")]
                )

                # stop_test("ch6_5")

        if (
            ch6_6_data[2] == "充电状态"
            or ch6_6_data[2] == "放电状态"
            or ch6_6_data[2] == "测试完成"
            or ch6_6_data[2] == "待机状态"
            or ch6_6_data[2] == "容量不足"
            or ch6_6_data[2] == 0
            or ch6_6_data[2] == 1
            or ch6_6_data[2] == 2
            or ch6_6_data[2] == 3
        ):
            if ch6_6_data[2] == "待机状态":
                ch6_6_state_value["text"] = ch6_6_data[2]
                ch6_6_state_value["bg"] = "#919191"

            if ch6_6_data[2] == "测试完成":
                ch6_6_state_value["text"] = ch6_6_data[2]
                ch6_6_state_value["bg"] = "#63D0A4"

            if ch6_6_data[2] == "放电状态" or ch6_6_data[2] == "充电状态":
                ch6_6_state_value["text"] = ch6_6_data[2]
                ch6_6_state_value["bg"] = "#48A9EB"

            if ch6_6_data[2] == "容量不足":
                ch6_6_state_value["text"] = ch6_6_data[2]
                ch6_6_state_value["bg"] = "#F031A4"

            if ch6_6_signal == 1:
                ch6_6_log.append(
                    [
                        "Now-State:",
                        ch6_6_data[2],
                        ch6_6_data[3],
                        ch6_6_data[4],
                        ch6_6_data[5],
                        ch6_6_data[6],
                        ch6_6_data[7],
                    ]
                )
                if ch6_6_data[5] > 50:
                    pass
                else:
                    if math.fabs(ch6_6_data[5] - ch6_6_data[6]) > 5:
                        ch6_6_signal_ntc = ch6_6_signal_ntc + 1
                        if ch6_6_signal_ntc > 11:
                            ch6_6_error_data = "NTC温度异常"
                        else:
                            pass
                    else:
                        ch6_6_signal_ntc = 0

                if ch6_6_data[2] == "测试完成":
                    if (
                        ch6_6_data[8] < ch6_6_battery_capacity
                        or ch6_6_data[9] < ch6_6_battery_capacity
                    ):
                        ch6_6_error_data = "容量不足"
                        ch6_6_log.append(["Test-State", ch6_6_error_data])

                        ch6_6_log.append(["Input-Electric-all:", ch6_6_data[9]])

                        ch6_6_log.append(["Output-Electric-all:", ch6_6_data[8]])

                        endtime = datetime.datetime.now()
                        ch6_6_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch6_6")
                    else:
                        ch6_6_error_data = ch6_6_data[2]

                        ch6_6_log.append(["Test-State", ch6_6_data[2]])

                        ch6_6_log.append(["Input-Electric-all:", ch6_6_data[9]])

                        ch6_6_log.append(["Output-Electric-all:", ch6_6_data[8]])

                        endtime = datetime.datetime.now()
                        ch6_6_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch6_6")

        if (
            ch6_6_data[2] == "过压报警"
            or ch6_6_data[2] == "低压报警"
            or ch6_6_data[2] == "过流报警"
            or ch6_6_data[2] == "过温报警"
            or ch6_6_data[2] == "电池脱落或被保护"
            or ch6_6_data[2] == "电池不充电报警"
            or ch6_6_data[2] == "通信异常"
            or ch6_6_data[2] == "NTC温度异常"
            or ch6_6_data[2] == 4
            or ch6_6_data[2] == 5
            or ch6_6_data[2] == 6
            or ch6_6_data[2] == 7
            or ch6_6_data[2] == 8
            or ch6_6_data[2] == 9
        ):

            ch6_6_error_data = ch6_6_data[2]
            ch6_6_state_value["text"] = ch6_6_data[2]
            ch6_6_state_value["bg"] = "red"
            if ch6_6_signal == 1:
                ch6_6_log.append(
                    [
                        "Error-State:",
                        ch6_6_data[2],
                        ch6_6_data[3],
                        ch6_6_data[4],
                        ch6_6_data[5],
                        ch6_6_data[6],
                        ch6_6_data[7],
                    ]
                )

                errorendtime = datetime.datetime.now()
                ch6_6_log.append(
                    ["Error-End-Time", errorendtime.strftime("%Y-%m-%d %H:%M:%S")]
                )

                # stop_test("ch6_6")

        if (
            ch6_7_data[2] == "充电状态"
            or ch6_7_data[2] == "放电状态"
            or ch6_7_data[2] == "测试完成"
            or ch6_7_data[2] == "待机状态"
            or ch6_7_data[2] == "容量不足"
            or ch6_7_data[2] == 0
            or ch6_7_data[2] == 1
            or ch6_7_data[2] == 2
            or ch6_7_data[2] == 3
        ):
            if ch6_7_data[2] == "待机状态":
                ch6_7_state_value["text"] = ch6_7_data[2]
                ch6_7_state_value["bg"] = "#919191"

            if ch6_7_data[2] == "测试完成":
                ch6_7_state_value["text"] = ch6_7_data[2]
                ch6_7_state_value["bg"] = "#63D0A4"

            if ch6_7_data[2] == "放电状态" or ch6_7_data[2] == "充电状态":
                ch6_7_state_value["text"] = ch6_7_data[2]
                ch6_7_state_value["bg"] = "#48A9EB"

            if ch6_7_data[2] == "容量不足":
                ch6_7_state_value["text"] = ch6_7_data[2]
                ch6_7_state_value["bg"] = "#F031A4"

            if ch6_7_signal == 1:
                ch6_7_log.append(
                    [
                        "Now-State:",
                        ch6_7_data[2],
                        ch6_7_data[3],
                        ch6_7_data[4],
                        ch6_7_data[5],
                        ch6_7_data[6],
                        ch6_7_data[7],
                    ]
                )
                if ch6_7_data[5] > 50:
                    pass
                else:
                    if math.fabs(ch6_7_data[5] - ch6_7_data[6]) > 5:
                        ch6_7_signal_ntc = ch6_7_signal_ntc + 1
                        if ch6_7_signal_ntc > 11:
                            ch6_7_error_data = "NTC温度异常"
                        else:
                            pass
                    else:
                        ch6_7_signal_ntc = 0

                if ch6_7_data[2] == "测试完成":
                    if (
                        ch6_7_data[8] < ch6_7_battery_capacity
                        or ch6_7_data[9] < ch6_7_battery_capacity
                    ):
                        ch6_7_error_data = "容量不足"
                        ch6_7_log.append(["Test-State", ch6_7_error_data])

                        ch6_7_log.append(["Input-Electric-all:", ch6_7_data[9]])

                        ch6_7_log.append(["Output-Electric-all:", ch6_7_data[8]])

                        endtime = datetime.datetime.now()
                        ch6_7_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch6_7")
                    else:
                        ch6_7_error_data = ch6_7_data[2]

                        ch6_7_log.append(["Test-State", ch6_7_data[2]])

                        ch6_7_log.append(["Input-Electric-all:", ch6_7_data[9]])

                        ch6_7_log.append(["Output-Electric-all:", ch6_7_data[8]])

                        endtime = datetime.datetime.now()
                        ch6_7_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch6_7")

        if (
            ch6_7_data[2] == "过压报警"
            or ch6_7_data[2] == "低压报警"
            or ch6_7_data[2] == "过流报警"
            or ch6_7_data[2] == "过温报警"
            or ch6_7_data[2] == "电池脱落或被保护"
            or ch6_7_data[2] == "电池不充电报警"
            or ch6_7_data[2] == "通信异常"
            or ch6_7_data[2] == "NTC温度异常"
            or ch6_7_data[2] == 4
            or ch6_7_data[2] == 5
            or ch6_7_data[2] == 6
            or ch6_7_data[2] == 7
            or ch6_7_data[2] == 8
            or ch6_7_data[2] == 9
        ):

            ch6_7_error_data = ch6_7_data[2]
            ch6_7_state_value["text"] = ch6_7_data[2]
            ch6_7_state_value["bg"] = "red"
            if ch6_7_signal == 1:
                ch6_7_log.append(
                    [
                        "Error-State:",
                        ch6_7_data[2],
                        ch6_7_data[3],
                        ch6_7_data[4],
                        ch6_7_data[5],
                        ch6_7_data[6],
                        ch6_7_data[7],
                    ]
                )

                errorendtime = datetime.datetime.now()
                ch6_7_log.append(
                    ["Error-End-Time", errorendtime.strftime("%Y-%m-%d %H:%M:%S")]
                )

                # stop_test("ch6_7")

        if (
            ch6_8_data[2] == "充电状态"
            or ch6_8_data[2] == "放电状态"
            or ch6_8_data[2] == "测试完成"
            or ch6_8_data[2] == "待机状态"
            or ch6_8_data[2] == "容量不足"
            or ch6_8_data[2] == 0
            or ch6_8_data[2] == 1
            or ch6_8_data[2] == 2
            or ch6_8_data[2] == 3
        ):
            if ch6_8_data[2] == "待机状态":
                ch6_8_state_value["text"] = ch6_8_data[2]
                ch6_8_state_value["bg"] = "#919191"

            if ch6_8_data[2] == "测试完成":
                ch6_8_state_value["text"] = ch6_8_data[2]
                ch6_8_state_value["bg"] = "#63D0A4"

            if ch6_8_data[2] == "放电状态" or ch6_8_data[2] == "充电状态":
                ch6_8_state_value["text"] = ch6_8_data[2]
                ch6_8_state_value["bg"] = "#48A9EB"

            if ch6_8_data[2] == "容量不足":
                ch6_8_state_value["text"] = ch6_8_data[2]
                ch6_8_state_value["bg"] = "#F031A4"

            if ch6_8_signal == 1:
                ch6_8_log.append(
                    [
                        "Now-State:",
                        ch6_8_data[2],
                        ch6_8_data[3],
                        ch6_8_data[4],
                        ch6_8_data[5],
                        ch6_8_data[6],
                        ch6_8_data[7],
                    ]
                )
                if ch6_8_data[5] > 50:
                    pass
                else:
                    if math.fabs(ch6_8_data[5] - ch6_8_data[6]) > 5:
                        ch6_8_signal_ntc = ch6_8_signal_ntc + 1
                        if ch6_8_signal_ntc > 11:
                            ch6_8_error_data = "NTC温度异常"
                        else:
                            pass
                    else:
                        ch6_8_signal_ntc = 0

                if ch6_8_data[2] == "测试完成":
                    if (
                        ch6_8_data[8] < ch6_8_battery_capacity
                        or ch6_8_data[9] < ch6_8_battery_capacity
                    ):
                        ch6_8_error_data = "容量不足"
                        ch6_8_log.append(["Test-State", ch6_8_error_data])

                        ch6_8_log.append(["Input-Electric-all:", ch6_8_data[9]])

                        ch6_8_log.append(["Output-Electric-all:", ch6_8_data[8]])

                        endtime = datetime.datetime.now()
                        ch6_8_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch6_8")
                    else:
                        ch6_8_error_data = ch6_8_data[2]

                        ch6_8_log.append(["Test-State", ch6_8_data[2]])

                        ch6_8_log.append(["Input-Electric-all:", ch6_8_data[9]])

                        ch6_8_log.append(["Output-Electric-all:", ch6_8_data[8]])

                        endtime = datetime.datetime.now()
                        ch6_8_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch6_8")

        if (
            ch6_8_data[2] == "过压报警"
            or ch6_8_data[2] == "低压报警"
            or ch6_8_data[2] == "过流报警"
            or ch6_8_data[2] == "过温报警"
            or ch6_8_data[2] == "电池脱落或被保护"
            or ch6_8_data[2] == "电池不充电报警"
            or ch6_8_data[2] == "通信异常"
            or ch6_8_data[2] == "NTC温度异常"
            or ch6_8_data[2] == 4
            or ch6_8_data[2] == 5
            or ch6_8_data[2] == 6
            or ch6_8_data[2] == 7
            or ch6_8_data[2] == 8
            or ch6_8_data[2] == 9
        ):

            ch6_8_error_data = ch6_8_data[2]
            ch6_8_state_value["text"] = ch6_8_data[2]
            ch6_8_state_value["bg"] = "red"
            if ch6_8_signal == 1:
                ch6_8_log.append(
                    [
                        "Error-State:",
                        ch6_8_data[2],
                        ch6_8_data[3],
                        ch6_8_data[4],
                        ch6_8_data[5],
                        ch6_8_data[6],
                        ch6_8_data[7],
                    ]
                )

                errorendtime = datetime.datetime.now()
                ch6_8_log.append(
                    ["Error-End-Time", errorendtime.strftime("%Y-%m-%d %H:%M:%S")]
                )

                # stop_test("ch6_8")

        if (
            ch7_1_data[2] == "充电状态"
            or ch7_1_data[2] == "放电状态"
            or ch7_1_data[2] == "测试完成"
            or ch7_1_data[2] == "待机状态"
            or ch7_1_data[2] == "容量不足"
            or ch7_1_data[2] == 0
            or ch7_1_data[2] == 1
            or ch7_1_data[2] == 2
            or ch7_1_data[2] == 3
        ):
            if ch7_1_data[2] == "待机状态":
                ch7_1_state_value["text"] = ch7_1_data[2]
                ch7_1_state_value["bg"] = "#919191"

            if ch7_1_data[2] == "测试完成":
                ch7_1_state_value["text"] = ch7_1_data[2]
                ch7_1_state_value["bg"] = "#63D0A4"

            if ch7_1_data[2] == "放电状态" or ch7_1_data[2] == "充电状态":
                ch7_1_state_value["text"] = ch7_1_data[2]
                ch7_1_state_value["bg"] = "#48A9EB"

            if ch7_1_data[2] == "容量不足":
                ch7_1_state_value["text"] = ch7_1_data[2]
                ch7_1_state_value["bg"] = "#F031A4"

            if ch7_1_signal == 1:
                ch7_1_log.append(
                    [
                        "Now-State:",
                        ch7_1_data[2],
                        ch7_1_data[3],
                        ch7_1_data[4],
                        ch7_1_data[5],
                        ch7_1_data[6],
                        ch7_1_data[7],
                    ]
                )
                if ch7_1_data[5] > 50:
                    pass
                else:
                    if math.fabs(ch7_1_data[5] - ch7_1_data[6]) > 5:
                        ch7_1_signal_ntc = ch7_1_signal_ntc + 1
                        if ch7_1_signal_ntc > 11:
                            ch7_1_error_data = "NTC温度异常"
                        else:
                            pass
                    else:
                        ch7_1_signal_ntc = 0

                if ch7_1_data[2] == "测试完成":
                    if (
                        ch7_1_data[8] < ch7_1_battery_capacity
                        or ch7_1_data[9] < ch7_1_battery_capacity
                    ):
                        ch7_1_error_data = "容量不足"
                        ch7_1_log.append(["Test-State", ch7_1_error_data])

                        ch7_1_log.append(["Input-Electric-all:", ch7_1_data[9]])

                        ch7_1_log.append(["Output-Electric-all:", ch7_1_data[8]])

                        endtime = datetime.datetime.now()
                        ch7_1_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch7_1")
                    else:
                        ch7_1_error_data = ch7_1_data[2]

                        ch7_1_log.append(["Test-State", ch7_1_data[2]])

                        ch7_1_log.append(["Input-Electric-all:", ch7_1_data[9]])

                        ch7_1_log.append(["Output-Electric-all:", ch7_1_data[8]])

                        endtime = datetime.datetime.now()
                        ch7_1_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch7_1")

        if (
            ch7_1_data[2] == "过压报警"
            or ch7_1_data[2] == "低压报警"
            or ch7_1_data[2] == "过流报警"
            or ch7_1_data[2] == "过温报警"
            or ch7_1_data[2] == "电池脱落或被保护"
            or ch7_1_data[2] == "电池不充电报警"
            or ch7_1_data[2] == "通信异常"
            or ch7_1_data[2] == "NTC温度异常"
            or ch7_1_data[2] == 4
            or ch7_1_data[2] == 5
            or ch7_1_data[2] == 6
            or ch7_1_data[2] == 7
            or ch7_1_data[2] == 8
            or ch7_1_data[2] == 9
        ):

            ch7_1_error_data = ch7_1_data[2]
            ch7_1_state_value["text"] = ch7_1_data[2]
            ch7_1_state_value["bg"] = "red"
            if ch7_1_signal == 1:
                ch7_1_log.append(
                    [
                        "Error-State:",
                        ch7_1_data[2],
                        ch7_1_data[3],
                        ch7_1_data[4],
                        ch7_1_data[5],
                        ch7_1_data[6],
                        ch7_1_data[7],
                    ]
                )

                errorendtime = datetime.datetime.now()
                ch7_1_log.append(
                    ["Error-End-Time", errorendtime.strftime("%Y-%m-%d %H:%M:%S")]
                )

                # stop_test("ch7_1")

        if (
            ch7_2_data[2] == "充电状态"
            or ch7_2_data[2] == "放电状态"
            or ch7_2_data[2] == "测试完成"
            or ch7_2_data[2] == "待机状态"
            or ch7_2_data[2] == "容量不足"
            or ch7_2_data[2] == 0
            or ch7_2_data[2] == 1
            or ch7_2_data[2] == 2
            or ch7_2_data[2] == 3
        ):
            if ch7_2_data[2] == "待机状态":
                ch7_2_state_value["text"] = ch7_2_data[2]
                ch7_2_state_value["bg"] = "#919191"

            if ch7_2_data[2] == "测试完成":
                ch7_2_state_value["text"] = ch7_2_data[2]
                ch7_2_state_value["bg"] = "#63D0A4"

            if ch7_2_data[2] == "放电状态" or ch7_2_data[2] == "充电状态":
                ch7_2_state_value["text"] = ch7_2_data[2]
                ch7_2_state_value["bg"] = "#48A9EB"

            if ch7_2_data[2] == "容量不足":
                ch7_2_state_value["text"] = ch7_2_data[2]
                ch7_2_state_value["bg"] = "#F031A4"

            if ch7_2_signal == 1:
                ch7_2_log.append(
                    [
                        "Now-State:",
                        ch7_2_data[2],
                        ch7_2_data[3],
                        ch7_2_data[4],
                        ch7_2_data[5],
                        ch7_2_data[6],
                        ch7_2_data[7],
                    ]
                )

                if ch7_2_data[5] > 50:
                    pass
                else:
                    if math.fabs(ch7_2_data[5] - ch7_2_data[6]) > 5:
                        ch7_2_signal_ntc = ch7_2_signal_ntc + 1
                        if ch7_2_signal_ntc > 11:
                            ch7_2_error_data = "NTC温度异常"
                        else:
                            pass
                    else:
                        ch7_2_signal_ntc = 0

                if ch7_2_data[2] == "测试完成":
                    if (
                        ch7_2_data[8] < ch7_2_battery_capacity
                        or ch7_2_data[9] < ch7_2_battery_capacity
                    ):
                        ch7_2_error_data = "容量不足"
                        ch7_2_log.append(["Test-State", ch7_2_error_data])

                        ch7_2_log.append(["Input-Electric-all:", ch7_2_data[9]])

                        ch7_2_log.append(["Output-Electric-all:", ch7_2_data[8]])

                        endtime = datetime.datetime.now()
                        ch7_2_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch7_2")
                    else:
                        ch7_2_error_data = ch7_2_data[2]

                        ch7_2_log.append(["Test-State", ch7_2_data[2]])

                        ch7_2_log.append(["Input-Electric-all:", ch7_2_data[9]])

                        ch7_2_log.append(["Output-Electric-all:", ch7_2_data[8]])

                        endtime = datetime.datetime.now()
                        ch7_2_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch7_2")

        if (
            ch7_2_data[2] == "过压报警"
            or ch7_2_data[2] == "低压报警"
            or ch7_2_data[2] == "过流报警"
            or ch7_2_data[2] == "过温报警"
            or ch7_2_data[2] == "电池脱落或被保护"
            or ch7_2_data[2] == "电池不充电报警"
            or ch7_2_data[2] == "通信异常"
            or ch7_2_data[2] == "NTC温度异常"
            or ch7_2_data[2] == 4
            or ch7_2_data[2] == 5
            or ch7_2_data[2] == 6
            or ch7_2_data[2] == 7
            or ch7_2_data[2] == 8
            or ch7_2_data[2] == 9
        ):

            ch7_2_error_data = ch7_2_data[2]
            ch7_2_state_value["text"] = ch7_2_data[2]
            ch7_2_state_value["bg"] = "red"
            if ch7_2_signal == 1:
                ch7_2_log.append(
                    [
                        "Error-State:",
                        ch7_2_data[2],
                        ch7_2_data[3],
                        ch7_2_data[4],
                        ch7_2_data[5],
                        ch7_2_data[6],
                        ch7_2_data[7],
                    ]
                )

                errorendtime = datetime.datetime.now()
                ch7_2_log.append(
                    ["Error-End-Time", errorendtime.strftime("%Y-%m-%d %H:%M:%S")]
                )

                # stop_test("ch7_2")

        if (
            ch7_3_data[2] == "充电状态"
            or ch7_3_data[2] == "放电状态"
            or ch7_3_data[2] == "测试完成"
            or ch7_3_data[2] == "待机状态"
            or ch7_3_data[2] == "容量不足"
            or ch7_3_data[2] == 0
            or ch7_3_data[2] == 1
            or ch7_3_data[2] == 2
            or ch7_3_data[2] == 3
        ):
            if ch7_3_data[2] == "待机状态":
                ch7_3_state_value["text"] = ch7_3_data[2]
                ch7_3_state_value["bg"] = "#919191"

            if ch7_3_data[2] == "测试完成":
                ch7_3_state_value["text"] = ch7_3_data[2]
                ch7_3_state_value["bg"] = "#63D0A4"

            if ch7_3_data[2] == "放电状态" or ch7_3_data[2] == "充电状态":
                ch7_3_state_value["text"] = ch7_3_data[2]
                ch7_3_state_value["bg"] = "#48A9EB"

            if ch7_3_data[2] == "容量不足":
                ch7_3_state_value["text"] = ch7_3_data[2]
                ch7_3_state_value["bg"] = "#F031A4"

            if ch7_3_signal == 1:
                ch7_3_log.append(
                    [
                        "Now-State:",
                        ch7_3_data[2],
                        ch7_3_data[3],
                        ch7_3_data[4],
                        ch7_3_data[5],
                        ch7_3_data[6],
                        ch7_3_data[7],
                    ]
                )
                if ch7_3_data[5] > 50:
                    pass
                else:
                    if math.fabs(ch7_3_data[5] - ch7_3_data[6]) > 5:
                        ch7_3_signal_ntc = ch7_3_signal_ntc + 1
                        if ch7_3_signal_ntc > 11:
                            ch7_3_error_data = "NTC温度异常"
                        else:
                            pass
                    else:
                        ch7_3_signal_ntc = 0

                if ch7_3_data[2] == "测试完成":
                    if (
                        ch7_3_data[8] < ch7_3_battery_capacity
                        or ch7_3_data[9] < ch7_3_battery_capacity
                    ):
                        ch7_3_error_data = "容量不足"
                        ch7_3_log.append(["Test-State", ch7_3_error_data])

                        ch7_3_log.append(["Input-Electric-all:", ch7_3_data[9]])

                        ch7_3_log.append(["Output-Electric-all:", ch7_3_data[8]])

                        endtime = datetime.datetime.now()
                        ch7_3_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch7_3")
                    else:
                        ch7_3_error_data = ch7_3_data[2]

                        ch7_3_log.append(["Test-State", ch7_3_data[2]])

                        ch7_3_log.append(["Input-Electric-all:", ch7_3_data[9]])

                        ch7_3_log.append(["Output-Electric-all:", ch7_3_data[8]])

                        endtime = datetime.datetime.now()
                        ch7_3_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch7_3")

        if (
            ch7_3_data[2] == "过压报警"
            or ch7_3_data[2] == "低压报警"
            or ch7_3_data[2] == "过流报警"
            or ch7_3_data[2] == "过温报警"
            or ch7_3_data[2] == "电池脱落或被保护"
            or ch7_3_data[2] == "电池不充电报警"
            or ch7_3_data[2] == "通信异常"
            or ch7_3_data[2] == "NTC温度异常"
            or ch7_3_data[2] == 4
            or ch7_3_data[2] == 5
            or ch7_3_data[2] == 6
            or ch7_3_data[2] == 7
            or ch7_3_data[2] == 8
            or ch7_3_data[2] == 9
        ):

            ch7_3_error_data = ch7_3_data[2]
            ch7_3_state_value["text"] = ch7_3_data[2]
            ch7_3_state_value["bg"] = "red"
            if ch7_3_signal == 1:
                ch7_3_log.append(
                    [
                        "Error-State:",
                        ch7_3_data[2],
                        ch7_3_data[3],
                        ch7_3_data[4],
                        ch7_3_data[5],
                        ch7_3_data[6],
                        ch7_3_data[7],
                    ]
                )

                errorendtime = datetime.datetime.now()
                ch7_3_log.append(
                    ["Error-End-Time", errorendtime.strftime("%Y-%m-%d %H:%M:%S")]
                )

                # stop_test("ch7_3")

        if (
            ch7_4_data[2] == "充电状态"
            or ch7_4_data[2] == "放电状态"
            or ch7_4_data[2] == "测试完成"
            or ch7_4_data[2] == "待机状态"
            or ch7_4_data[2] == "容量不足"
            or ch7_4_data[2] == 0
            or ch7_4_data[2] == 1
            or ch7_4_data[2] == 2
            or ch7_4_data[2] == 3
        ):
            if ch7_4_data[2] == "待机状态":
                ch7_4_state_value["text"] = ch7_4_data[2]
                ch7_4_state_value["bg"] = "#919191"

            if ch7_4_data[2] == "测试完成":
                ch7_4_state_value["text"] = ch7_4_data[2]
                ch7_4_state_value["bg"] = "#63D0A4"

            if ch7_4_data[2] == "放电状态" or ch7_4_data[2] == "充电状态":
                ch7_4_state_value["text"] = ch7_4_data[2]
                ch7_4_state_value["bg"] = "#48A9EB"

            if ch7_4_data[2] == "容量不足":
                ch7_4_state_value["text"] = ch7_4_data[2]
                ch7_4_state_value["bg"] = "#F031A4"

            if ch7_4_signal == 1:
                ch7_4_log.append(
                    [
                        "Now-State:",
                        ch7_4_data[2],
                        ch7_4_data[3],
                        ch7_4_data[4],
                        ch7_4_data[5],
                        ch7_4_data[6],
                        ch7_4_data[7],
                    ]
                )
                if ch7_4_data[5] > 50:
                    pass
                else:
                    if math.fabs(ch7_4_data[5] - ch7_4_data[6]) > 5:
                        ch7_4_signal_ntc = ch7_4_signal_ntc + 1
                        if ch7_4_signal_ntc > 11:
                            ch7_4_error_data = "NTC温度异常"
                        else:
                            pass
                    else:
                        ch7_4_signal_ntc = 0

                if ch7_4_data[2] == "测试完成":
                    if (
                        ch7_4_data[8] < ch7_4_battery_capacity
                        or ch7_4_data[9] < ch7_4_battery_capacity
                    ):
                        ch7_4_error_data = "容量不足"
                        ch7_4_log.append(["Test-State", ch7_4_error_data])

                        ch7_4_log.append(["Input-Electric-all:", ch7_4_data[9]])

                        ch7_4_log.append(["Output-Electric-all:", ch7_4_data[8]])

                        endtime = datetime.datetime.now()
                        ch7_4_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch7_4")
                    else:
                        ch7_4_error_data = ch7_4_data[2]

                        ch7_4_log.append(["Test-State", ch7_4_data[2]])

                        ch7_4_log.append(["Input-Electric-all:", ch7_4_data[9]])

                        ch7_4_log.append(["Output-Electric-all:", ch7_4_data[8]])

                        endtime = datetime.datetime.now()
                        ch7_4_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch7_4")

        if (
            ch7_4_data[2] == "过压报警"
            or ch7_4_data[2] == "低压报警"
            or ch7_4_data[2] == "过流报警"
            or ch7_4_data[2] == "过温报警"
            or ch7_4_data[2] == "电池脱落或被保护"
            or ch7_4_data[2] == "电池不充电报警"
            or ch7_4_data[2] == "通信异常"
            or ch7_4_data[2] == "NTC温度异常"
            or ch7_4_data[2] == 4
            or ch7_4_data[2] == 5
            or ch7_4_data[2] == 6
            or ch7_4_data[2] == 7
            or ch7_4_data[2] == 8
            or ch7_4_data[2] == 9
        ):

            ch7_4_error_data = ch7_4_data[2]
            ch7_4_state_value["text"] = ch7_4_data[2]
            ch7_4_state_value["bg"] = "red"
            if ch7_4_signal == 1:
                ch7_4_log.append(
                    [
                        "Error-State:",
                        ch7_4_data[2],
                        ch7_4_data[3],
                        ch7_4_data[4],
                        ch7_4_data[5],
                        ch7_4_data[6],
                        ch7_4_data[7],
                    ]
                )

                errorendtime = datetime.datetime.now()
                ch7_4_log.append(
                    ["Error-End-Time", errorendtime.strftime("%Y-%m-%d %H:%M:%S")]
                )

                # stop_test("ch7_4")

        if (
            ch7_5_data[2] == "充电状态"
            or ch7_5_data[2] == "放电状态"
            or ch7_5_data[2] == "测试完成"
            or ch7_5_data[2] == "待机状态"
            or ch7_5_data[2] == "容量不足"
            or ch7_5_data[2] == 0
            or ch7_5_data[2] == 1
            or ch7_5_data[2] == 2
            or ch7_5_data[2] == 3
        ):
            if ch7_5_data[2] == "待机状态":
                ch7_5_state_value["text"] = ch7_5_data[2]
                ch7_5_state_value["bg"] = "#919191"

            if ch7_5_data[2] == "测试完成":
                ch7_5_state_value["text"] = ch7_5_data[2]
                ch7_5_state_value["bg"] = "#63D0A4"

            if ch7_5_data[2] == "放电状态" or ch7_5_data[2] == "充电状态":
                ch7_5_state_value["text"] = ch7_5_data[2]
                ch7_5_state_value["bg"] = "#48A9EB"

            if ch7_5_data[2] == "容量不足":
                ch7_5_state_value["text"] = ch7_5_data[2]
                ch7_5_state_value["bg"] = "#F031A4"

            if ch7_5_signal == 1:
                ch7_5_log.append(
                    [
                        "Now-State:",
                        ch7_5_data[2],
                        ch7_5_data[3],
                        ch7_5_data[4],
                        ch7_5_data[5],
                        ch7_5_data[6],
                        ch7_5_data[7],
                    ]
                )
                if ch7_5_data[5] > 50:
                    pass
                else:
                    if math.fabs(ch7_5_data[5] - ch7_5_data[6]) > 5:
                        ch7_5_signal_ntc = ch7_5_signal_ntc + 1
                        if ch7_5_signal_ntc > 11:
                            ch7_5_error_data = "NTC温度异常"
                        else:
                            pass
                    else:
                        ch7_5_signal_ntc = 0

                if ch7_5_data[2] == "测试完成":
                    if (
                        ch7_5_data[8] < ch7_5_battery_capacity
                        or ch7_5_data[9] < ch7_5_battery_capacity
                    ):
                        ch7_5_error_data = "容量不足"
                        ch7_5_log.append(["Test-State", ch7_5_error_data])

                        ch7_5_log.append(["Input-Electric-all:", ch7_5_data[9]])

                        ch7_5_log.append(["Output-Electric-all:", ch7_5_data[8]])

                        endtime = datetime.datetime.now()
                        ch7_5_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch7_5")
                    else:
                        ch7_5_error_data = ch7_5_data[2]

                        ch7_5_log.append(["Test-State", ch7_5_data[2]])

                        ch7_5_log.append(["Input-Electric-all:", ch7_5_data[9]])

                        ch7_5_log.append(["Output-Electric-all:", ch7_5_data[8]])

                        endtime = datetime.datetime.now()
                        ch7_5_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch7_5")

        if (
            ch7_5_data[2] == "过压报警"
            or ch7_5_data[2] == "低压报警"
            or ch7_5_data[2] == "过流报警"
            or ch7_5_data[2] == "过温报警"
            or ch7_5_data[2] == "电池脱落或被保护"
            or ch7_5_data[2] == "电池不充电报警"
            or ch7_5_data[2] == "通信异常"
            or ch7_5_data[2] == "NTC温度异常"
            or ch7_5_data[2] == 4
            or ch7_5_data[2] == 5
            or ch7_5_data[2] == 6
            or ch7_5_data[2] == 7
            or ch7_5_data[2] == 8
            or ch7_5_data[2] == 9
        ):

            ch7_5_error_data = ch7_5_data[2]
            ch7_5_state_value["text"] = ch7_5_data[2]
            ch7_5_state_value["bg"] = "red"
            if ch7_5_signal == 1:
                ch7_5_log.append(
                    [
                        "Error-State:",
                        ch7_5_data[2],
                        ch7_5_data[3],
                        ch7_5_data[4],
                        ch7_5_data[5],
                        ch7_5_data[6],
                        ch7_5_data[7],
                    ]
                )

                errorendtime = datetime.datetime.now()
                ch7_5_log.append(
                    ["Error-End-Time", errorendtime.strftime("%Y-%m-%d %H:%M:%S")]
                )

                # stop_test("ch7_5")

        if (
            ch7_6_data[2] == "充电状态"
            or ch7_6_data[2] == "放电状态"
            or ch7_6_data[2] == "测试完成"
            or ch7_6_data[2] == "待机状态"
            or ch7_6_data[2] == "容量不足"
            or ch7_6_data[2] == 0
            or ch7_6_data[2] == 1
            or ch7_6_data[2] == 2
            or ch7_6_data[2] == 3
        ):
            if ch7_6_data[2] == "待机状态":
                ch7_6_state_value["text"] = ch7_6_data[2]
                ch7_6_state_value["bg"] = "#919191"

            if ch7_6_data[2] == "测试完成":
                ch7_6_state_value["text"] = ch7_6_data[2]
                ch7_6_state_value["bg"] = "#63D0A4"

            if ch7_6_data[2] == "放电状态" or ch7_6_data[2] == "充电状态":
                ch7_6_state_value["text"] = ch7_6_data[2]
                ch7_6_state_value["bg"] = "#48A9EB"

            if ch7_6_data[2] == "容量不足":
                ch7_6_state_value["text"] = ch7_6_data[2]
                ch7_6_state_value["bg"] = "#F031A4"

            if ch7_6_signal == 1:
                ch7_6_log.append(
                    [
                        "Now-State:",
                        ch7_6_data[2],
                        ch7_6_data[3],
                        ch7_6_data[4],
                        ch7_6_data[5],
                        ch7_6_data[6],
                        ch7_6_data[7],
                    ]
                )
                if ch7_6_data[5] > 50:
                    pass
                else:
                    if math.fabs(ch7_6_data[5] - ch7_6_data[6]) > 5:
                        ch7_6_signal_ntc = ch7_6_signal_ntc + 1
                        if ch7_6_signal_ntc > 11:
                            ch7_6_error_data = "NTC温度异常"
                        else:
                            pass
                    else:
                        ch7_6_signal_ntc = 0

                if ch7_6_data[2] == "测试完成":
                    if (
                        ch7_6_data[8] < ch7_6_battery_capacity
                        or ch7_6_data[9] < ch7_6_battery_capacity
                    ):
                        ch7_6_error_data = "容量不足"
                        ch7_6_log.append(["Test-State", ch7_6_error_data])

                        ch7_6_log.append(["Input-Electric-all:", ch7_6_data[9]])

                        ch7_6_log.append(["Output-Electric-all:", ch7_6_data[8]])

                        endtime = datetime.datetime.now()
                        ch7_6_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch7_6")
                    else:
                        ch7_6_error_data = ch7_6_data[2]

                        ch7_6_log.append(["Test-State", ch7_6_data[2]])

                        ch7_6_log.append(["Input-Electric-all:", ch7_6_data[9]])

                        ch7_6_log.append(["Output-Electric-all:", ch7_6_data[8]])

                        endtime = datetime.datetime.now()
                        ch7_6_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch7_6")

        if (
            ch7_6_data[2] == "过压报警"
            or ch7_6_data[2] == "低压报警"
            or ch7_6_data[2] == "过流报警"
            or ch7_6_data[2] == "过温报警"
            or ch7_6_data[2] == "电池脱落或被保护"
            or ch7_6_data[2] == "电池不充电报警"
            or ch7_6_data[2] == "通信异常"
            or ch7_6_data[2] == "NTC温度异常"
            or ch7_6_data[2] == 4
            or ch7_6_data[2] == 5
            or ch7_6_data[2] == 6
            or ch7_6_data[2] == 7
            or ch7_6_data[2] == 8
            or ch7_6_data[2] == 9
        ):

            ch7_6_error_data = ch7_6_data[2]
            ch7_6_state_value["text"] = ch7_6_data[2]
            ch7_6_state_value["bg"] = "red"
            if ch7_6_signal == 1:
                ch7_6_log.append(
                    [
                        "Error-State:",
                        ch7_6_data[2],
                        ch7_6_data[3],
                        ch7_6_data[4],
                        ch7_6_data[5],
                        ch7_6_data[6],
                        ch7_6_data[7],
                    ]
                )

                errorendtime = datetime.datetime.now()
                ch7_6_log.append(
                    ["Error-End-Time", errorendtime.strftime("%Y-%m-%d %H:%M:%S")]
                )

                # stop_test("ch7_6")

        if (
            ch7_7_data[2] == "充电状态"
            or ch7_7_data[2] == "放电状态"
            or ch7_7_data[2] == "测试完成"
            or ch7_7_data[2] == "待机状态"
            or ch7_7_data[2] == "容量不足"
            or ch7_7_data[2] == 0
            or ch7_7_data[2] == 1
            or ch7_7_data[2] == 2
            or ch7_7_data[2] == 3
        ):
            if ch7_7_data[2] == "待机状态":
                ch7_7_state_value["text"] = ch7_7_data[2]
                ch7_7_state_value["bg"] = "#919191"

            if ch7_7_data[2] == "测试完成":
                ch7_7_state_value["text"] = ch7_7_data[2]
                ch7_7_state_value["bg"] = "#63D0A4"

            if ch7_7_data[2] == "放电状态" or ch7_7_data[2] == "充电状态":
                ch7_7_state_value["text"] = ch7_7_data[2]
                ch7_7_state_value["bg"] = "#48A9EB"

            if ch7_7_data[2] == "容量不足":
                ch7_7_state_value["text"] = ch7_7_data[2]
                ch7_7_state_value["bg"] = "#F031A4"

            if ch7_7_signal == 1:
                ch7_7_log.append(
                    [
                        "Now-State:",
                        ch7_7_data[2],
                        ch7_7_data[3],
                        ch7_7_data[4],
                        ch7_7_data[5],
                        ch7_7_data[6],
                        ch7_7_data[7],
                    ]
                )
                if ch7_7_data[5] > 50:
                    pass
                else:
                    if math.fabs(ch7_7_data[5] - ch7_7_data[6]) > 5:
                        ch7_7_signal_ntc = ch7_7_signal_ntc + 1
                        if ch7_7_signal_ntc > 11:
                            ch7_7_error_data = "NTC温度异常"
                        else:
                            pass
                    else:
                        ch7_7_signal_ntc = 0

                if ch7_7_data[2] == "测试完成":
                    if (
                        ch7_7_data[8] < ch7_7_battery_capacity
                        or ch7_7_data[9] < ch7_7_battery_capacity
                    ):
                        ch7_7_error_data = "容量不足"
                        ch7_7_log.append(["Test-State", ch7_7_error_data])

                        ch7_7_log.append(["Input-Electric-all:", ch7_7_data[9]])

                        ch7_7_log.append(["Output-Electric-all:", ch7_7_data[8]])

                        endtime = datetime.datetime.now()
                        ch7_7_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch7_7")
                    else:
                        ch7_7_error_data = ch7_7_data[2]

                        ch7_7_log.append(["Test-State", ch7_7_data[2]])

                        ch7_7_log.append(["Input-Electric-all:", ch7_7_data[9]])

                        ch7_7_log.append(["Output-Electric-all:", ch7_7_data[8]])

                        endtime = datetime.datetime.now()
                        ch7_7_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch7_7")

        if (
            ch7_7_data[2] == "过压报警"
            or ch7_7_data[2] == "低压报警"
            or ch7_7_data[2] == "过流报警"
            or ch7_7_data[2] == "过温报警"
            or ch7_7_data[2] == "电池脱落或被保护"
            or ch7_7_data[2] == "电池不充电报警"
            or ch7_7_data[2] == "通信异常"
            or ch7_7_data[2] == "NTC温度异常"
            or ch7_7_data[2] == 4
            or ch7_7_data[2] == 5
            or ch7_7_data[2] == 6
            or ch7_7_data[2] == 7
            or ch7_7_data[2] == 8
            or ch7_7_data[2] == 9
        ):

            ch7_7_error_data = ch7_7_data[2]
            ch7_7_state_value["text"] = ch7_7_data[2]
            ch7_7_state_value["bg"] = "red"
            if ch7_7_signal == 1:
                ch7_7_log.append(
                    [
                        "Error-State:",
                        ch7_7_data[2],
                        ch7_7_data[3],
                        ch7_7_data[4],
                        ch7_7_data[5],
                        ch7_7_data[6],
                        ch7_7_data[7],
                    ]
                )

                errorendtime = datetime.datetime.now()
                ch7_7_log.append(
                    ["Error-End-Time", errorendtime.strftime("%Y-%m-%d %H:%M:%S")]
                )

                # stop_test("ch7_7")

        if (
            ch7_8_data[2] == "充电状态"
            or ch7_8_data[2] == "放电状态"
            or ch7_8_data[2] == "测试完成"
            or ch7_8_data[2] == "待机状态"
            or ch7_8_data[2] == "容量不足"
            or ch7_8_data[2] == 0
            or ch7_8_data[2] == 1
            or ch7_8_data[2] == 2
            or ch7_8_data[2] == 3
        ):
            if ch7_8_data[2] == "待机状态":
                ch7_8_state_value["text"] = ch7_8_data[2]
                ch7_8_state_value["bg"] = "#919191"

            if ch7_8_data[2] == "测试完成":
                ch7_8_state_value["text"] = ch7_8_data[2]
                ch7_8_state_value["bg"] = "#63D0A4"

            if ch7_8_data[2] == "放电状态" or ch7_8_data[2] == "充电状态":
                ch7_8_state_value["text"] = ch7_8_data[2]
                ch7_8_state_value["bg"] = "#48A9EB"

            if ch7_8_data[2] == "容量不足":
                ch7_8_state_value["text"] = ch7_8_data[2]
                ch7_8_state_value["bg"] = "#F031A4"

            if ch7_8_signal == 1:
                ch7_8_log.append(
                    [
                        "Now-State:",
                        ch7_8_data[2],
                        ch7_8_data[3],
                        ch7_8_data[4],
                        ch7_8_data[5],
                        ch7_8_data[6],
                        ch7_8_data[7],
                    ]
                )
                if ch7_8_data[5] > 50:
                    pass
                else:
                    if math.fabs(ch7_8_data[5] - ch7_8_data[6]) > 5:
                        ch7_8_signal_ntc = ch7_8_signal_ntc + 1
                        if ch7_8_signal_ntc > 11:
                            ch7_8_error_data = "NTC温度异常"
                        else:
                            pass
                    else:
                        ch7_8_signal_ntc = 0

                if ch7_8_data[2] == "测试完成":
                    if (
                        ch7_8_data[8] < ch7_8_battery_capacity
                        or ch7_8_data[9] < ch7_8_battery_capacity
                    ):
                        ch7_8_error_data = "容量不足"
                        ch7_8_log.append(["Test-State", ch7_8_error_data])

                        ch7_8_log.append(["Input-Electric-all:", ch7_8_data[9]])

                        ch7_8_log.append(["Output-Electric-all:", ch7_8_data[8]])

                        endtime = datetime.datetime.now()
                        ch7_8_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch7_8")
                    else:
                        ch7_8_error_data = ch7_8_data[2]

                        ch7_8_log.append(["Test-State", ch7_8_data[2]])

                        ch7_8_log.append(["Input-Electric-all:", ch7_8_data[9]])

                        ch7_8_log.append(["Output-Electric-all:", ch7_8_data[8]])

                        endtime = datetime.datetime.now()
                        ch7_8_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch7_8")

        if (
            ch7_8_data[2] == "过压报警"
            or ch7_8_data[2] == "低压报警"
            or ch7_8_data[2] == "过流报警"
            or ch7_8_data[2] == "过温报警"
            or ch7_8_data[2] == "电池脱落或被保护"
            or ch7_8_data[2] == "电池不充电报警"
            or ch7_8_data[2] == "通信异常"
            or ch7_8_data[2] == "NTC温度异常"
            or ch7_8_data[2] == 4
            or ch7_8_data[2] == 5
            or ch7_8_data[2] == 6
            or ch7_8_data[2] == 7
            or ch7_8_data[2] == 8
            or ch7_8_data[2] == 9
        ):

            ch7_8_error_data = ch7_8_data[2]
            ch7_8_state_value["text"] = ch7_8_data[2]
            ch7_8_state_value["bg"] = "red"
            if ch7_8_signal == 1:
                ch7_8_log.append(
                    [
                        "Error-State:",
                        ch7_8_data[2],
                        ch7_8_data[3],
                        ch7_8_data[4],
                        ch7_8_data[5],
                        ch7_8_data[6],
                        ch7_8_data[7],
                    ]
                )

                errorendtime = datetime.datetime.now()
                ch7_8_log.append(
                    ["Error-End-Time", errorendtime.strftime("%Y-%m-%d %H:%M:%S")]
                )

                # stop_test("ch7_8")

        if (
            ch8_1_data[2] == "充电状态"
            or ch8_1_data[2] == "放电状态"
            or ch8_1_data[2] == "测试完成"
            or ch8_1_data[2] == "待机状态"
            or ch8_1_data[2] == "容量不足"
            or ch8_1_data[2] == 0
            or ch8_1_data[2] == 1
            or ch8_1_data[2] == 2
            or ch8_1_data[2] == 3
        ):
            if ch8_1_data[2] == "待机状态":
                ch8_1_state_value["text"] = ch8_1_data[2]
                ch8_1_state_value["bg"] = "#919191"

            if ch8_1_data[2] == "测试完成":
                ch8_1_state_value["text"] = ch8_1_data[2]
                ch8_1_state_value["bg"] = "#63D0A4"

            if ch8_1_data[2] == "放电状态" or ch8_1_data[2] == "充电状态":
                ch8_1_state_value["text"] = ch8_1_data[2]
                ch8_1_state_value["bg"] = "#48A9EB"

            if ch8_1_data[2] == "容量不足":
                ch8_1_state_value["text"] = ch8_1_data[2]
                ch8_1_state_value["bg"] = "#F031A4"

            if ch8_1_signal == 1:
                ch8_1_log.append(
                    [
                        "Now-State:",
                        ch8_1_data[2],
                        ch8_1_data[3],
                        ch8_1_data[4],
                        ch8_1_data[5],
                        ch8_1_data[6],
                        ch8_1_data[7],
                    ]
                )
                if ch8_1_data[5] > 50:
                    pass
                else:
                    if math.fabs(ch8_1_data[5] - ch8_1_data[6]) > 5:
                        ch8_1_signal_ntc = ch8_1_signal_ntc + 1
                        if ch8_1_signal_ntc > 11:
                            ch8_1_error_data = "NTC温度异常"
                        else:
                            pass
                    else:
                        ch8_1_signal_ntc = 0

                if ch8_1_data[2] == "测试完成":
                    if (
                        ch8_1_data[8] < ch8_1_battery_capacity
                        or ch8_1_data[9] < ch8_1_battery_capacity
                    ):
                        ch8_1_error_data = "容量不足"
                        ch8_1_log.append(["Test-State", ch8_1_error_data])

                        ch8_1_log.append(["Input-Electric-all:", ch8_1_data[9]])

                        ch8_1_log.append(["Output-Electric-all:", ch8_1_data[8]])

                        endtime = datetime.datetime.now()
                        ch8_1_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch8_1")
                    else:
                        ch8_1_error_data = ch8_1_data[2]

                        ch8_1_log.append(["Test-State", ch8_1_data[2]])

                        ch8_1_log.append(["Input-Electric-all:", ch8_1_data[9]])

                        ch8_1_log.append(["Output-Electric-all:", ch8_1_data[8]])

                        endtime = datetime.datetime.now()
                        ch8_1_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch8_1")

        if (
            ch8_1_data[2] == "过压报警"
            or ch8_1_data[2] == "低压报警"
            or ch8_1_data[2] == "过流报警"
            or ch8_1_data[2] == "过温报警"
            or ch8_1_data[2] == "电池脱落或被保护"
            or ch8_1_data[2] == "电池不充电报警"
            or ch8_1_data[2] == "通信异常"
            or ch8_1_data[2] == "NTC温度异常"
            or ch8_1_data[2] == 4
            or ch8_1_data[2] == 5
            or ch8_1_data[2] == 6
            or ch8_1_data[2] == 7
            or ch8_1_data[2] == 8
            or ch8_1_data[2] == 9
        ):

            ch8_1_error_data = ch8_1_data[2]
            ch8_1_state_value["text"] = ch8_1_data[2]
            ch8_1_state_value["bg"] = "red"
            if ch8_1_signal == 1:
                ch8_1_log.append(
                    [
                        "Error-State:",
                        ch8_1_data[2],
                        ch8_1_data[3],
                        ch8_1_data[4],
                        ch8_1_data[5],
                        ch8_1_data[6],
                        ch8_1_data[7],
                    ]
                )

                errorendtime = datetime.datetime.now()
                ch8_1_log.append(
                    ["Error-End-Time", errorendtime.strftime("%Y-%m-%d %H:%M:%S")]
                )

                # stop_test("ch8_1")

        if (
            ch8_2_data[2] == "充电状态"
            or ch8_2_data[2] == "放电状态"
            or ch8_2_data[2] == "测试完成"
            or ch8_2_data[2] == "待机状态"
            or ch8_2_data[2] == "容量不足"
            or ch8_2_data[2] == 0
            or ch8_2_data[2] == 1
            or ch8_2_data[2] == 2
            or ch8_2_data[2] == 3
        ):
            if ch8_2_data[2] == "待机状态":
                ch8_2_state_value["text"] = ch8_2_data[2]
                ch8_2_state_value["bg"] = "#919191"

            if ch8_2_data[2] == "测试完成":
                ch8_2_state_value["text"] = ch8_2_data[2]
                ch8_2_state_value["bg"] = "#63D0A4"

            if ch8_2_data[2] == "放电状态" or ch8_2_data[2] == "充电状态":
                ch8_2_state_value["text"] = ch8_2_data[2]
                ch8_2_state_value["bg"] = "#48A9EB"

            if ch8_2_data[2] == "容量不足":
                ch8_2_state_value["text"] = ch8_2_data[2]
                ch8_2_state_value["bg"] = "#F031A4"

            if ch8_2_signal == 1:
                ch8_2_log.append(
                    [
                        "Now-State:",
                        ch8_2_data[2],
                        ch8_2_data[3],
                        ch8_2_data[4],
                        ch8_2_data[5],
                        ch8_2_data[6],
                        ch8_2_data[7],
                    ]
                )

                if ch8_2_data[5] > 50:
                    pass
                else:
                    if math.fabs(ch8_2_data[5] - ch8_2_data[6]) > 5:
                        ch8_2_signal_ntc = ch8_2_signal_ntc + 1
                        if ch8_2_signal_ntc > 11:
                            ch8_2_error_data = "NTC温度异常"
                        else:
                            pass
                    else:
                        ch8_2_signal_ntc = 0

                if ch8_2_data[2] == "测试完成":
                    if (
                        ch8_2_data[8] < ch8_2_battery_capacity
                        or ch8_2_data[9] < ch8_2_battery_capacity
                    ):
                        ch8_2_error_data = "容量不足"
                        ch8_2_log.append(["Test-State", ch8_2_error_data])

                        ch8_2_log.append(["Input-Electric-all:", ch8_2_data[9]])

                        ch8_2_log.append(["Output-Electric-all:", ch8_2_data[8]])

                        endtime = datetime.datetime.now()
                        ch8_2_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch8_2")
                    else:
                        ch8_2_error_data = ch8_2_data[2]

                        ch8_2_log.append(["Test-State", ch8_2_data[2]])

                        ch8_2_log.append(["Input-Electric-all:", ch8_2_data[9]])

                        ch8_2_log.append(["Output-Electric-all:", ch8_2_data[8]])

                        endtime = datetime.datetime.now()
                        ch8_2_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch8_2")

        if (
            ch8_2_data[2] == "过压报警"
            or ch8_2_data[2] == "低压报警"
            or ch8_2_data[2] == "过流报警"
            or ch8_2_data[2] == "过温报警"
            or ch8_2_data[2] == "电池脱落或被保护"
            or ch8_2_data[2] == "电池不充电报警"
            or ch8_2_data[2] == "通信异常"
            or ch8_2_data[2] == "NTC温度异常"
            or ch8_2_data[2] == 4
            or ch8_2_data[2] == 5
            or ch8_2_data[2] == 6
            or ch8_2_data[2] == 7
            or ch8_2_data[2] == 8
            or ch8_2_data[2] == 9
        ):

            ch8_2_error_data = ch8_2_data[2]
            ch8_2_state_value["text"] = ch8_2_data[2]
            ch8_2_state_value["bg"] = "red"
            if ch8_2_signal == 1:
                ch8_2_log.append(
                    [
                        "Error-State:",
                        ch8_2_data[2],
                        ch8_2_data[3],
                        ch8_2_data[4],
                        ch8_2_data[5],
                        ch8_2_data[6],
                        ch8_2_data[7],
                    ]
                )

                errorendtime = datetime.datetime.now()
                ch8_2_log.append(
                    ["Error-End-Time", errorendtime.strftime("%Y-%m-%d %H:%M:%S")]
                )

                # stop_test("ch8_2")

        if (
            ch8_3_data[2] == "充电状态"
            or ch8_3_data[2] == "放电状态"
            or ch8_3_data[2] == "测试完成"
            or ch8_3_data[2] == "待机状态"
            or ch8_3_data[2] == "容量不足"
            or ch8_3_data[2] == 0
            or ch8_3_data[2] == 1
            or ch8_3_data[2] == 2
            or ch8_3_data[2] == 3
        ):
            if ch8_3_data[2] == "待机状态":
                ch8_3_state_value["text"] = ch8_3_data[2]
                ch8_3_state_value["bg"] = "#919191"

            if ch8_3_data[2] == "测试完成":
                ch8_3_state_value["text"] = ch8_3_data[2]
                ch8_3_state_value["bg"] = "#63D0A4"

            if ch8_3_data[2] == "放电状态" or ch8_3_data[2] == "充电状态":
                ch8_3_state_value["text"] = ch8_3_data[2]
                ch8_3_state_value["bg"] = "#48A9EB"

            if ch8_3_data[2] == "容量不足":
                ch8_3_state_value["text"] = ch8_3_data[2]
                ch8_3_state_value["bg"] = "#F031A4"

            if ch8_3_signal == 1:
                ch8_3_log.append(
                    [
                        "Now-State:",
                        ch8_3_data[2],
                        ch8_3_data[3],
                        ch8_3_data[4],
                        ch8_3_data[5],
                        ch8_3_data[6],
                        ch8_3_data[7],
                    ]
                )
                if ch8_3_data[5] > 50:
                    pass
                else:
                    if math.fabs(ch8_3_data[5] - ch8_3_data[6]) > 5:
                        ch8_3_signal_ntc = ch8_3_signal_ntc + 1
                        if ch8_3_signal_ntc > 11:
                            ch8_3_error_data = "NTC温度异常"
                        else:
                            pass
                    else:
                        ch8_3_signal_ntc = 0

                if ch8_3_data[2] == "测试完成":
                    if (
                        ch8_3_data[8] < ch8_3_battery_capacity
                        or ch8_3_data[9] < ch8_3_battery_capacity
                    ):
                        ch8_3_error_data = "容量不足"
                        ch8_3_log.append(["Test-State", ch8_3_error_data])

                        ch8_3_log.append(["Input-Electric-all:", ch8_3_data[9]])

                        ch8_3_log.append(["Output-Electric-all:", ch8_3_data[8]])

                        endtime = datetime.datetime.now()
                        ch8_3_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch8_3")
                    else:
                        ch8_3_error_data = ch8_3_data[2]

                        ch8_3_log.append(["Test-State", ch8_3_data[2]])

                        ch8_3_log.append(["Input-Electric-all:", ch8_3_data[9]])

                        ch8_3_log.append(["Output-Electric-all:", ch8_3_data[8]])

                        endtime = datetime.datetime.now()
                        ch8_3_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch8_3")

        if (
            ch8_3_data[2] == "过压报警"
            or ch8_3_data[2] == "低压报警"
            or ch8_3_data[2] == "过流报警"
            or ch8_3_data[2] == "过温报警"
            or ch8_3_data[2] == "电池脱落或被保护"
            or ch8_3_data[2] == "电池不充电报警"
            or ch8_3_data[2] == "通信异常"
            or ch8_3_data[2] == "NTC温度异常"
            or ch8_3_data[2] == 4
            or ch8_3_data[2] == 5
            or ch8_3_data[2] == 6
            or ch8_3_data[2] == 7
            or ch8_3_data[2] == 8
            or ch8_3_data[2] == 9
        ):

            ch8_3_error_data = ch8_3_data[2]
            ch8_3_state_value["text"] = ch8_3_data[2]
            ch8_3_state_value["bg"] = "red"
            if ch8_3_signal == 1:
                ch8_3_log.append(
                    [
                        "Error-State:",
                        ch8_3_data[2],
                        ch8_3_data[3],
                        ch8_3_data[4],
                        ch8_3_data[5],
                        ch8_3_data[6],
                        ch8_3_data[7],
                    ]
                )

                errorendtime = datetime.datetime.now()
                ch8_3_log.append(
                    ["Error-End-Time", errorendtime.strftime("%Y-%m-%d %H:%M:%S")]
                )

                # stop_test("ch8_3")

        if (
            ch8_4_data[2] == "充电状态"
            or ch8_4_data[2] == "放电状态"
            or ch8_4_data[2] == "测试完成"
            or ch8_4_data[2] == "待机状态"
            or ch8_4_data[2] == "容量不足"
            or ch8_4_data[2] == 0
            or ch8_4_data[2] == 1
            or ch8_4_data[2] == 2
            or ch8_4_data[2] == 3
        ):
            if ch8_4_data[2] == "待机状态":
                ch8_4_state_value["text"] = ch8_4_data[2]
                ch8_4_state_value["bg"] = "#919191"

            if ch8_4_data[2] == "测试完成":
                ch8_4_state_value["text"] = ch8_4_data[2]
                ch8_4_state_value["bg"] = "#63D0A4"

            if ch8_4_data[2] == "放电状态" or ch8_4_data[2] == "充电状态":
                ch8_4_state_value["text"] = ch8_4_data[2]
                ch8_4_state_value["bg"] = "#48A9EB"

            if ch8_4_data[2] == "容量不足":
                ch8_4_state_value["text"] = ch8_4_data[2]
                ch8_4_state_value["bg"] = "#F031A4"

            if ch8_4_signal == 1:
                ch8_4_log.append(
                    [
                        "Now-State:",
                        ch8_4_data[2],
                        ch8_4_data[3],
                        ch8_4_data[4],
                        ch8_4_data[5],
                        ch8_4_data[6],
                        ch8_4_data[7],
                    ]
                )
                if ch8_4_data[5] > 50:
                    pass
                else:
                    if math.fabs(ch8_4_data[5] - ch8_4_data[6]) > 5:
                        ch8_4_signal_ntc = ch8_4_signal_ntc + 1
                        if ch8_4_signal_ntc > 11:
                            ch8_4_error_data = "NTC温度异常"
                        else:
                            pass
                    else:
                        ch8_4_signal_ntc = 0

                if ch8_4_data[2] == "测试完成":
                    if (
                        ch8_4_data[8] < ch8_4_battery_capacity
                        or ch8_4_data[9] < ch8_4_battery_capacity
                    ):
                        ch8_4_error_data = "容量不足"
                        ch8_4_log.append(["Test-State", ch8_4_error_data])

                        ch8_4_log.append(["Input-Electric-all:", ch8_4_data[9]])

                        ch8_4_log.append(["Output-Electric-all:", ch8_4_data[8]])

                        endtime = datetime.datetime.now()
                        ch8_4_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch8_4")
                    else:
                        ch8_4_error_data = ch8_4_data[2]

                        ch8_4_log.append(["Test-State", ch8_4_data[2]])

                        ch8_4_log.append(["Input-Electric-all:", ch8_4_data[9]])

                        ch8_4_log.append(["Output-Electric-all:", ch8_4_data[8]])

                        endtime = datetime.datetime.now()
                        ch8_4_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch8_4")

        if (
            ch8_4_data[2] == "过压报警"
            or ch8_4_data[2] == "低压报警"
            or ch8_4_data[2] == "过流报警"
            or ch8_4_data[2] == "过温报警"
            or ch8_4_data[2] == "电池脱落或被保护"
            or ch8_4_data[2] == "电池不充电报警"
            or ch8_4_data[2] == "通信异常"
            or ch8_4_data[2] == "NTC温度异常"
            or ch8_4_data[2] == 4
            or ch8_4_data[2] == 5
            or ch8_4_data[2] == 6
            or ch8_4_data[2] == 7
            or ch8_4_data[2] == 8
            or ch8_4_data[2] == 9
        ):

            ch8_4_error_data = ch8_4_data[2]
            ch8_4_state_value["text"] = ch8_4_data[2]
            ch8_4_state_value["bg"] = "red"
            if ch8_4_signal == 1:
                ch8_4_log.append(
                    [
                        "Error-State:",
                        ch8_4_data[2],
                        ch8_4_data[3],
                        ch8_4_data[4],
                        ch8_4_data[5],
                        ch8_4_data[6],
                        ch8_4_data[7],
                    ]
                )

                errorendtime = datetime.datetime.now()
                ch8_4_log.append(
                    ["Error-End-Time", errorendtime.strftime("%Y-%m-%d %H:%M:%S")]
                )

                # stop_test("ch8_4")

        if (
            ch8_5_data[2] == "充电状态"
            or ch8_5_data[2] == "放电状态"
            or ch8_5_data[2] == "测试完成"
            or ch8_5_data[2] == "待机状态"
            or ch8_5_data[2] == "容量不足"
            or ch8_5_data[2] == 0
            or ch8_5_data[2] == 1
            or ch8_5_data[2] == 2
            or ch8_5_data[2] == 3
        ):
            if ch8_5_data[2] == "待机状态":
                ch8_5_state_value["text"] = ch8_5_data[2]
                ch8_5_state_value["bg"] = "#919191"

            if ch8_5_data[2] == "测试完成":
                ch8_5_state_value["text"] = ch8_5_data[2]
                ch8_5_state_value["bg"] = "#63D0A4"

            if ch8_5_data[2] == "放电状态" or ch8_5_data[2] == "充电状态":
                ch8_5_state_value["text"] = ch8_5_data[2]
                ch8_5_state_value["bg"] = "#48A9EB"

            if ch8_5_data[2] == "容量不足":
                ch8_5_state_value["text"] = ch8_5_data[2]
                ch8_5_state_value["bg"] = "#F031A4"

            if ch8_5_signal == 1:
                ch8_5_log.append(
                    [
                        "Now-State:",
                        ch8_5_data[2],
                        ch8_5_data[3],
                        ch8_5_data[4],
                        ch8_5_data[5],
                        ch8_5_data[6],
                        ch8_5_data[7],
                    ]
                )
                if ch8_5_data[5] > 50:
                    pass
                else:
                    if math.fabs(ch8_5_data[5] - ch8_5_data[6]) > 5:
                        ch8_5_signal_ntc = ch8_5_signal_ntc + 1
                        if ch8_5_signal_ntc > 11:
                            ch8_5_error_data = "NTC温度异常"
                        else:
                            pass
                    else:
                        ch8_5_signal_ntc = 0

                if ch8_5_data[2] == "测试完成":
                    if (
                        ch8_5_data[8] < ch8_5_battery_capacity
                        or ch8_5_data[9] < ch8_5_battery_capacity
                    ):
                        ch8_5_error_data = "容量不足"
                        ch8_5_log.append(["Test-State", ch8_5_error_data])

                        ch8_5_log.append(["Input-Electric-all:", ch8_5_data[9]])

                        ch8_5_log.append(["Output-Electric-all:", ch8_5_data[8]])

                        endtime = datetime.datetime.now()
                        ch8_5_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch8_5")
                    else:
                        ch8_5_error_data = ch8_5_data[2]

                        ch8_5_log.append(["Test-State", ch8_5_data[2]])

                        ch8_5_log.append(["Input-Electric-all:", ch8_5_data[9]])

                        ch8_5_log.append(["Output-Electric-all:", ch8_5_data[8]])

                        endtime = datetime.datetime.now()
                        ch8_5_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch8_5")

        if (
            ch8_5_data[2] == "过压报警"
            or ch8_5_data[2] == "低压报警"
            or ch8_5_data[2] == "过流报警"
            or ch8_5_data[2] == "过温报警"
            or ch8_5_data[2] == "电池脱落或被保护"
            or ch8_5_data[2] == "电池不充电报警"
            or ch8_5_data[2] == "通信异常"
            or ch8_5_data[2] == "NTC温度异常"
            or ch8_5_data[2] == 4
            or ch8_5_data[2] == 5
            or ch8_5_data[2] == 6
            or ch8_5_data[2] == 7
            or ch8_5_data[2] == 8
            or ch8_5_data[2] == 9
        ):

            ch8_5_error_data = ch8_5_data[2]
            ch8_5_state_value["text"] = ch8_5_data[2]
            ch8_5_state_value["bg"] = "red"
            if ch8_5_signal == 1:
                ch8_5_log.append(
                    [
                        "Error-State:",
                        ch8_5_data[2],
                        ch8_5_data[3],
                        ch8_5_data[4],
                        ch8_5_data[5],
                        ch8_5_data[6],
                        ch8_5_data[7],
                    ]
                )

                errorendtime = datetime.datetime.now()
                ch8_5_log.append(
                    ["Error-End-Time", errorendtime.strftime("%Y-%m-%d %H:%M:%S")]
                )

                # stop_test("ch8_5")

        if (
            ch8_6_data[2] == "充电状态"
            or ch8_6_data[2] == "放电状态"
            or ch8_6_data[2] == "测试完成"
            or ch8_6_data[2] == "待机状态"
            or ch8_6_data[2] == "容量不足"
            or ch8_6_data[2] == 0
            or ch8_6_data[2] == 1
            or ch8_6_data[2] == 2
            or ch8_6_data[2] == 3
        ):
            if ch8_6_data[2] == "待机状态":
                ch8_6_state_value["text"] = ch8_6_data[2]
                ch8_6_state_value["bg"] = "#919191"

            if ch8_6_data[2] == "测试完成":
                ch8_6_state_value["text"] = ch8_6_data[2]
                ch8_6_state_value["bg"] = "#63D0A4"

            if ch8_6_data[2] == "放电状态" or ch8_6_data[2] == "充电状态":
                ch8_6_state_value["text"] = ch8_6_data[2]
                ch8_6_state_value["bg"] = "#48A9EB"

            if ch8_6_data[2] == "容量不足":
                ch8_6_state_value["text"] = ch8_6_data[2]
                ch8_6_state_value["bg"] = "#F031A4"

            if ch8_6_signal == 1:
                ch8_6_log.append(
                    [
                        "Now-State:",
                        ch8_6_data[2],
                        ch8_6_data[3],
                        ch8_6_data[4],
                        ch8_6_data[5],
                        ch8_6_data[6],
                        ch8_6_data[7],
                    ]
                )
                if ch8_6_data[5] > 50:
                    pass
                else:
                    if math.fabs(ch8_6_data[5] - ch8_6_data[6]) > 5:
                        ch8_6_signal_ntc = ch8_6_signal_ntc + 1
                        if ch8_6_signal_ntc > 11:
                            ch8_6_error_data = "NTC温度异常"
                        else:
                            pass
                    else:
                        ch8_6_signal_ntc = 0

                if ch8_6_data[2] == "测试完成":
                    if (
                        ch8_6_data[8] < ch8_6_battery_capacity
                        or ch8_6_data[9] < ch8_6_battery_capacity
                    ):
                        ch8_6_error_data = "容量不足"
                        ch8_6_log.append(["Test-State", ch8_6_error_data])

                        ch8_6_log.append(["Input-Electric-all:", ch8_6_data[9]])

                        ch8_6_log.append(["Output-Electric-all:", ch8_6_data[8]])

                        endtime = datetime.datetime.now()
                        ch8_6_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch8_6")
                    else:
                        ch8_6_error_data = ch8_6_data[2]

                        ch8_6_log.append(["Test-State", ch8_6_data[2]])

                        ch8_6_log.append(["Input-Electric-all:", ch8_6_data[9]])

                        ch8_6_log.append(["Output-Electric-all:", ch8_6_data[8]])

                        endtime = datetime.datetime.now()
                        ch8_6_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch8_6")

        if (
            ch8_6_data[2] == "过压报警"
            or ch8_6_data[2] == "低压报警"
            or ch8_6_data[2] == "过流报警"
            or ch8_6_data[2] == "过温报警"
            or ch8_6_data[2] == "电池脱落或被保护"
            or ch8_6_data[2] == "电池不充电报警"
            or ch8_6_data[2] == "通信异常"
            or ch8_6_data[2] == "NTC温度异常"
            or ch8_6_data[2] == 4
            or ch8_6_data[2] == 5
            or ch8_6_data[2] == 6
            or ch8_6_data[2] == 7
            or ch8_6_data[2] == 8
            or ch8_6_data[2] == 9
        ):

            ch8_6_error_data = ch8_6_data[2]
            ch8_6_state_value["text"] = ch8_6_data[2]
            ch8_6_state_value["bg"] = "red"
            if ch8_6_signal == 1:
                ch8_6_log.append(
                    [
                        "Error-State:",
                        ch8_6_data[2],
                        ch8_6_data[3],
                        ch8_6_data[4],
                        ch8_6_data[5],
                        ch8_6_data[6],
                        ch8_6_data[7],
                    ]
                )

                errorendtime = datetime.datetime.now()
                ch8_6_log.append(
                    ["Error-End-Time", errorendtime.strftime("%Y-%m-%d %H:%M:%S")]
                )

                # stop_test("ch8_6")

        if (
            ch8_7_data[2] == "充电状态"
            or ch8_7_data[2] == "放电状态"
            or ch8_7_data[2] == "测试完成"
            or ch8_7_data[2] == "待机状态"
            or ch8_7_data[2] == "容量不足"
            or ch8_7_data[2] == 0
            or ch8_7_data[2] == 1
            or ch8_7_data[2] == 2
            or ch8_7_data[2] == 3
        ):
            if ch8_7_data[2] == "待机状态":
                ch8_7_state_value["text"] = ch8_7_data[2]
                ch8_7_state_value["bg"] = "#919191"

            if ch8_7_data[2] == "测试完成":
                ch8_7_state_value["text"] = ch8_7_data[2]
                ch8_7_state_value["bg"] = "#63D0A4"

            if ch8_7_data[2] == "放电状态" or ch8_7_data[2] == "充电状态":
                ch8_7_state_value["text"] = ch8_7_data[2]
                ch8_7_state_value["bg"] = "#48A9EB"

            if ch8_7_data[2] == "容量不足":
                ch8_7_state_value["text"] = ch8_7_data[2]
                ch8_7_state_value["bg"] = "#F031A4"

            if ch8_7_signal == 1:
                ch8_7_log.append(
                    [
                        "Now-State:",
                        ch8_7_data[2],
                        ch8_7_data[3],
                        ch8_7_data[4],
                        ch8_7_data[5],
                        ch8_7_data[6],
                        ch8_7_data[7],
                    ]
                )
                if ch8_7_data[5] > 50:
                    pass
                else:
                    if math.fabs(ch8_7_data[5] - ch8_7_data[6]) > 5:
                        ch8_7_signal_ntc = ch8_7_signal_ntc + 1
                        if ch8_7_signal_ntc > 11:
                            ch8_7_error_data = "NTC温度异常"
                        else:
                            pass
                    else:
                        ch8_7_signal_ntc = 0

                if ch8_7_data[2] == "测试完成":
                    if (
                        ch8_7_data[8] < ch8_7_battery_capacity
                        or ch8_7_data[9] < ch8_7_battery_capacity
                    ):
                        ch8_7_error_data = "容量不足"
                        ch8_7_log.append(["Test-State", ch8_7_error_data])

                        ch8_7_log.append(["Input-Electric-all:", ch8_7_data[9]])

                        ch8_7_log.append(["Output-Electric-all:", ch8_7_data[8]])

                        endtime = datetime.datetime.now()
                        ch8_7_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch8_7")
                    else:
                        ch8_7_error_data = ch8_7_data[2]

                        ch8_7_log.append(["Test-State", ch8_7_data[2]])

                        ch8_7_log.append(["Input-Electric-all:", ch8_7_data[9]])

                        ch8_7_log.append(["Output-Electric-all:", ch8_7_data[8]])

                        endtime = datetime.datetime.now()
                        ch8_7_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch8_7")

        if (
            ch8_7_data[2] == "过压报警"
            or ch8_7_data[2] == "低压报警"
            or ch8_7_data[2] == "过流报警"
            or ch8_7_data[2] == "过温报警"
            or ch8_7_data[2] == "电池脱落或被保护"
            or ch8_7_data[2] == "电池不充电报警"
            or ch8_7_data[2] == "通信异常"
            or ch8_7_data[2] == "NTC温度异常"
            or ch8_7_data[2] == 4
            or ch8_7_data[2] == 5
            or ch8_7_data[2] == 6
            or ch8_7_data[2] == 7
            or ch8_7_data[2] == 8
            or ch8_7_data[2] == 9
        ):

            ch8_7_error_data = ch8_7_data[2]
            ch8_7_state_value["text"] = ch8_7_data[2]
            ch8_7_state_value["bg"] = "red"
            if ch8_7_signal == 1:
                ch8_7_log.append(
                    [
                        "Error-State:",
                        ch8_7_data[2],
                        ch8_7_data[3],
                        ch8_7_data[4],
                        ch8_7_data[5],
                        ch8_7_data[6],
                        ch8_7_data[7],
                    ]
                )

                errorendtime = datetime.datetime.now()
                ch8_7_log.append(
                    ["Error-End-Time", errorendtime.strftime("%Y-%m-%d %H:%M:%S")]
                )

                # stop_test("ch8_7")

        if (
            ch8_8_data[2] == "充电状态"
            or ch8_8_data[2] == "放电状态"
            or ch8_8_data[2] == "测试完成"
            or ch8_8_data[2] == "待机状态"
            or ch8_8_data[2] == "容量不足"
            or ch8_8_data[2] == 0
            or ch8_8_data[2] == 1
            or ch8_8_data[2] == 2
            or ch8_8_data[2] == 3
        ):
            if ch8_8_data[2] == "待机状态":
                ch8_8_state_value["text"] = ch8_8_data[2]
                ch8_8_state_value["bg"] = "#919191"

            if ch8_8_data[2] == "测试完成":
                ch8_8_state_value["text"] = ch8_8_data[2]
                ch8_8_state_value["bg"] = "#63D0A4"

            if ch8_8_data[2] == "放电状态" or ch8_8_data[2] == "充电状态":
                ch8_8_state_value["text"] = ch8_8_data[2]
                ch8_8_state_value["bg"] = "#48A9EB"

            if ch8_8_data[2] == "容量不足":
                ch8_8_state_value["text"] = ch8_8_data[2]
                ch8_8_state_value["bg"] = "#F031A4"

            if ch8_8_signal == 1:
                ch8_8_log.append(
                    [
                        "Now-State:",
                        ch8_8_data[2],
                        ch8_8_data[3],
                        ch8_8_data[4],
                        ch8_8_data[5],
                        ch8_8_data[6],
                        ch8_8_data[7],
                    ]
                )
                if ch8_8_data[5] > 50:
                    pass
                else:
                    if math.fabs(ch8_8_data[5] - ch8_8_data[6]) > 5:
                        ch8_8_signal_ntc = ch8_8_signal_ntc + 1
                        if ch8_8_signal_ntc > 11:
                            ch8_8_error_data = "NTC温度异常"
                        else:
                            pass
                    else:
                        ch8_8_signal_ntc = 0

                if ch8_8_data[2] == "测试完成":
                    if (
                        ch8_8_data[8] < ch8_8_battery_capacity
                        or ch8_8_data[9] < ch8_8_battery_capacity
                    ):
                        ch8_8_error_data = "容量不足"
                        ch8_8_log.append(["Test-State", ch8_8_error_data])

                        ch8_8_log.append(["Input-Electric-all:", ch8_8_data[9]])

                        ch8_8_log.append(["Output-Electric-all:", ch8_8_data[8]])

                        endtime = datetime.datetime.now()
                        ch8_8_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch8_8")
                    else:
                        ch8_8_error_data = ch8_8_data[2]

                        ch8_8_log.append(["Test-State", ch8_8_data[2]])

                        ch8_8_log.append(["Input-Electric-all:", ch8_8_data[9]])

                        ch8_8_log.append(["Output-Electric-all:", ch8_8_data[8]])

                        endtime = datetime.datetime.now()
                        ch8_8_log.append(
                            ["EndTime:", endtime.strftime("%Y-%m-%d %H:%M:%S")]
                        )

                        # stop_test("ch8_8")

        if (
            ch8_8_data[2] == "过压报警"
            or ch8_8_data[2] == "低压报警"
            or ch8_8_data[2] == "过流报警"
            or ch8_8_data[2] == "过温报警"
            or ch8_8_data[2] == "电池脱落或被保护"
            or ch8_8_data[2] == "电池不充电报警"
            or ch8_8_data[2] == "通信异常"
            or ch8_8_data[2] == "NTC温度异常"
            or ch8_8_data[2] == 4
            or ch8_8_data[2] == 5
            or ch8_8_data[2] == 6
            or ch8_8_data[2] == 7
            or ch8_8_data[2] == 8
            or ch8_8_data[2] == 9
        ):

            ch8_8_error_data = ch8_8_data[2]
            ch8_8_state_value["text"] = ch8_8_data[2]
            ch8_8_state_value["bg"] = "red"
            if ch8_8_signal == 1:
                ch8_8_log.append(
                    [
                        "Error-State:",
                        ch8_8_data[2],
                        ch8_8_data[3],
                        ch8_8_data[4],
                        ch8_8_data[5],
                        ch8_8_data[6],
                        ch8_8_data[7],
                    ]
                )

                errorendtime = datetime.datetime.now()
                ch8_8_log.append(
                    ["Error-End-Time", errorendtime.strftime("%Y-%m-%d %H:%M:%S")]
                )

                # stop_test("ch8_8")


def face_update():
    global num
    global face_name
    global ch_state_value_state
    global ch_current_value_state
    global ch_voltage_value_state
    global ch_state_value_state
    global ch_electric_value_state
    global ch_electric_all_value_state
    global ch_ntc_temperature_value_state
    global ch_sensor_temperature_value_state

    global ch1_1_e
    global ch1_2_e
    global ch1_3_e
    global ch1_4_e
    global ch1_5_e
    global ch1_6_e
    global ch1_7_e
    global ch1_8_e

    print("face_update")

    while True:
        if face_name == "ch1_1_data" and num == 0:
            global ch1_1_data

            while face_name == "ch1_1_data" and num == 0:
                time.sleep(1)
                if ch1_1_data[2] == "充电状态":
                    ch_state_value_state["text"] = ch1_1_data[2]
                    ch_voltage_value_state["text"] = ch1_1_data[3]
                    ch_current_value_state["text"] = ch1_1_data[4]
                    ch_ntc_temperature_value_state["text"] = ch1_1_data[5]
                    ch_sensor_temperature_value_state["text"] = ch1_1_data[6]
                    ch_electric_value_state["text"] = ch1_1_data[7]
                    # ch_electric_all_value_state["text"] = ch1_1_data[9]
                elif ch1_1_data[2] == "放电状态":
                    ch_state_value_state["text"] = ch1_1_data[2]
                    ch_voltage_value_state["text"] = ch1_1_data[3]
                    ch_current_value_state["text"] = ch1_1_data[4]
                    ch_ntc_temperature_value_state["text"] = ch1_1_data[5]
                    ch_sensor_temperature_value_state["text"] = ch1_1_data[6]
                    ch_electric_value_state["text"] = ch1_1_data[7]
                    # ch_electric_all_value_state["text"] = ch1_1_data[8]
                else:
                    ch_state_value_state["text"] = ch1_1_data[2]
                    ch_voltage_value_state["text"] = "error"
                    ch_current_value_state["text"] = "error"
                    ch_ntc_temperature_value_state["text"] = "error"
                    ch_sensor_temperature_value_state["text"] = "error"
                    ch_electric_value_state["text"] = "error"
                    # ch_electric_all_value_state["text"] = "error"

        elif face_name == "ch1_2_data" and num == 0:
            global ch1_2_data

            while face_name == "ch1_2_data" and num == 0:
                time.sleep(1)
                if ch1_2_data[2] == "充电状态":
                    ch_state_value_state["text"] = ch1_2_data[2]
                    ch_voltage_value_state["text"] = ch1_2_data[3]
                    ch_current_value_state["text"] = ch1_2_data[4]
                    ch_ntc_temperature_value_state["text"] = ch1_2_data[5]
                    ch_sensor_temperature_value_state["text"] = ch1_2_data[6]
                    ch_electric_value_state["text"] = ch1_2_data[7]
                    # ch_electric_all_value_state["text"] = ch1_2_data[9]
                elif ch1_2_data[2] == "放电状态":
                    ch_state_value_state["text"] = ch1_2_data[2]
                    ch_voltage_value_state["text"] = ch1_2_data[3]
                    ch_current_value_state["text"] = ch1_2_data[4]
                    ch_ntc_temperature_value_state["text"] = ch1_2_data[5]
                    ch_sensor_temperature_value_state["text"] = ch1_2_data[6]
                    ch_electric_value_state["text"] = ch1_2_data[7]
                    # ch_electric_all_value_state["text"] = ch1_2_data[8]
                else:
                    ch_state_value_state["text"] = ch1_2_data[2]
                    ch_voltage_value_state["text"] = "error"
                    ch_current_value_state["text"] = "error"
                    ch_ntc_temperature_value_state["text"] = "error"
                    ch_sensor_temperature_value_state["text"] = "error"
                    ch_electric_value_state["text"] = "error"
                    # ch_electric_all_value_state["text"] = "error"

        elif face_name == "ch1_3_data" and num == 0:
            global ch1_3_data

            while face_name == "ch1_3_data" and num == 0:
                time.sleep(1)
                if ch1_3_data[2] == "充电状态":
                    ch_state_value_state["text"] = ch1_3_data[2]
                    ch_voltage_value_state["text"] = ch1_3_data[3]
                    ch_current_value_state["text"] = ch1_3_data[4]
                    ch_ntc_temperature_value_state["text"] = ch1_3_data[5]
                    ch_sensor_temperature_value_state["text"] = ch1_3_data[6]
                    ch_electric_value_state["text"] = ch1_3_data[7]
                    # ch_electric_all_value_state["text"] = ch1_3_data[9]
                elif ch1_3_data[2] == "放电状态":
                    ch_state_value_state["text"] = ch1_3_data[2]
                    ch_voltage_value_state["text"] = ch1_3_data[3]
                    ch_current_value_state["text"] = ch1_3_data[4]
                    ch_ntc_temperature_value_state["text"] = ch1_3_data[5]
                    ch_sensor_temperature_value_state["text"] = ch1_3_data[6]
                    ch_electric_value_state["text"] = ch1_3_data[7]
                    # ch_electric_all_value_state["text"] = ch1_3_data[8]
                else:
                    ch_state_value_state["text"] = ch1_3_data[2]
                    ch_voltage_value_state["text"] = "error"
                    ch_current_value_state["text"] = "error"
                    ch_ntc_temperature_value_state["text"] = "error"
                    ch_sensor_temperature_value_state["text"] = "error"
                    ch_electric_value_state["text"] = "error"
                    # ch_electric_all_value_state["text"] = "error"

        elif face_name == "ch1_4_data" and num == 0:
            global ch1_4_data

            while face_name == "ch1_4_data" and num == 0:
                time.sleep(1)
                if ch1_4_data[2] == "充电状态":
                    ch_state_value_state["text"] = ch1_4_data[2]
                    ch_voltage_value_state["text"] = ch1_4_data[3]
                    ch_current_value_state["text"] = ch1_4_data[4]
                    ch_ntc_temperature_value_state["text"] = ch1_4_data[5]
                    ch_sensor_temperature_value_state["text"] = ch1_4_data[6]
                    ch_electric_value_state["text"] = ch1_4_data[7]
                    # ch_electric_all_value_state["text"] = ch1_4_data[9]
                elif ch1_4_data[2] == "放电状态":
                    ch_state_value_state["text"] = ch1_4_data[2]
                    ch_voltage_value_state["text"] = ch1_4_data[3]
                    ch_current_value_state["text"] = ch1_4_data[4]
                    ch_ntc_temperature_value_state["text"] = ch1_4_data[5]
                    ch_sensor_temperature_value_state["text"] = ch1_4_data[6]
                    ch_electric_value_state["text"] = ch1_4_data[7]
                    # ch_electric_all_value_state["text"] = ch1_4_data[8]
                else:
                    ch_state_value_state["text"] = ch1_4_data[2]
                    ch_voltage_value_state["text"] = "error"
                    ch_current_value_state["text"] = "error"
                    ch_ntc_temperature_value_state["text"] = "error"
                    ch_sensor_temperature_value_state["text"] = "error"
                    ch_electric_value_state["text"] = "error"
                    # ch_electric_all_value_state["text"] = "error"

        elif face_name == "ch1_5_data" and num == 0:
            global ch1_5_data

            while face_name == "ch1_5_data" and num == 0:
                time.sleep(1)
                if ch1_5_data[2] == "充电状态":
                    ch_state_value_state["text"] = ch1_5_data[2]
                    ch_voltage_value_state["text"] = ch1_5_data[3]
                    ch_current_value_state["text"] = ch1_5_data[4]
                    ch_ntc_temperature_value_state["text"] = ch1_5_data[5]
                    ch_sensor_temperature_value_state["text"] = ch1_5_data[6]
                    ch_electric_value_state["text"] = ch1_5_data[7]
                    # ch_electric_all_value_state["text"] = ch1_5_data[9]
                elif ch1_5_data[2] == "放电状态":
                    ch_state_value_state["text"] = ch1_5_data[2]
                    ch_voltage_value_state["text"] = ch1_5_data[3]
                    ch_current_value_state["text"] = ch1_5_data[4]
                    ch_ntc_temperature_value_state["text"] = ch1_5_data[5]
                    ch_sensor_temperature_value_state["text"] = ch1_5_data[6]
                    ch_electric_value_state["text"] = ch1_5_data[7]
                    # ch_electric_all_value_state["text"] = ch1_5_data[8]
                else:
                    ch_state_value_state["text"] = ch1_5_data[2]
                    ch_voltage_value_state["text"] = "error"
                    ch_current_value_state["text"] = "error"
                    ch_ntc_temperature_value_state["text"] = "error"
                    ch_sensor_temperature_value_state["text"] = "error"
                    ch_electric_value_state["text"] = "error"
                    # ch_electric_all_value_state["text"] = "error"

        elif face_name == "ch1_6_data" and num == 0:
            global ch1_6_data

            while face_name == "ch1_6_data" and num == 0:
                time.sleep(1)
                if ch1_6_data[2] == "充电状态":
                    ch_state_value_state["text"] = ch1_6_data[2]
                    ch_voltage_value_state["text"] = ch1_6_data[3]
                    ch_current_value_state["text"] = ch1_6_data[4]
                    ch_ntc_temperature_value_state["text"] = ch1_6_data[5]
                    ch_sensor_temperature_value_state["text"] = ch1_6_data[6]
                    ch_electric_value_state["text"] = ch1_6_data[7]
                    # ch_electric_all_value_state["text"] = ch1_6_data[9]
                elif ch1_6_data[2] == "放电状态":
                    ch_state_value_state["text"] = ch1_6_data[2]
                    ch_voltage_value_state["text"] = ch1_6_data[3]
                    ch_current_value_state["text"] = ch1_6_data[4]
                    ch_ntc_temperature_value_state["text"] = ch1_6_data[5]
                    ch_sensor_temperature_value_state["text"] = ch1_6_data[6]
                    ch_electric_value_state["text"] = ch1_6_data[7]
                    # ch_electric_all_value_state["text"] = ch1_6_data[8]
                else:
                    ch_state_value_state["text"] = ch1_6_data[2]
                    ch_voltage_value_state["text"] = "error"
                    ch_current_value_state["text"] = "error"
                    ch_ntc_temperature_value_state["text"] = "error"
                    ch_sensor_temperature_value_state["text"] = "error"
                    ch_electric_value_state["text"] = "error"
                    # ch_electric_all_value_state["text"] = "error"
        elif face_name == "ch1_7_data" and num == 0:
            global ch1_7_data

            while face_name == "ch1_7_data" and num == 0:
                time.sleep(1)
                if ch1_7_data[2] == "充电状态":
                    ch_state_value_state["text"] = ch1_7_data[2]
                    ch_voltage_value_state["text"] = ch1_7_data[3]
                    ch_current_value_state["text"] = ch1_7_data[4]
                    ch_ntc_temperature_value_state["text"] = ch1_7_data[5]
                    ch_sensor_temperature_value_state["text"] = ch1_7_data[6]
                    ch_electric_value_state["text"] = ch1_7_data[7]
                    # ch_electric_all_value_state["text"] = ch1_7_data[9]
                elif ch1_7_data[2] == "放电状态":
                    ch_state_value_state["text"] = ch1_7_data[2]
                    ch_voltage_value_state["text"] = ch1_7_data[3]
                    ch_current_value_state["text"] = ch1_7_data[4]
                    ch_ntc_temperature_value_state["text"] = ch1_7_data[5]
                    ch_sensor_temperature_value_state["text"] = ch1_7_data[6]
                    ch_electric_value_state["text"] = ch1_7_data[7]
                    # ch_electric_all_value_state["text"] = ch1_7_data[8]
                else:
                    ch_state_value_state["text"] = ch1_7_data[2]
                    ch_voltage_value_state["text"] = "error"
                    ch_current_value_state["text"] = "error"
                    ch_ntc_temperature_value_state["text"] = "error"
                    ch_sensor_temperature_value_state["text"] = "error"
                    ch_electric_value_state["text"] = "error"
                    # ch_electric_all_value_state["text"] = "error"

        elif face_name == "ch1_8_data" and num == 0:
            global ch1_8_data

            while face_name == "ch1_8_data" and num == 0:
                time.sleep(1)
                if ch1_8_data[2] == "充电状态":
                    ch_state_value_state["text"] = ch1_8_data[2]
                    ch_voltage_value_state["text"] = ch1_8_data[3]
                    ch_current_value_state["text"] = ch1_8_data[4]
                    ch_ntc_temperature_value_state["text"] = ch1_8_data[5]
                    ch_sensor_temperature_value_state["text"] = ch1_8_data[6]
                    ch_electric_value_state["text"] = ch1_8_data[7]
                    # ch_electric_all_value_state["text"] = ch1_8_data[9]
                elif ch1_8_data[2] == "放电状态":
                    ch_state_value_state["text"] = ch1_8_data[2]
                    ch_voltage_value_state["text"] = ch1_8_data[3]
                    ch_current_value_state["text"] = ch1_8_data[4]
                    ch_ntc_temperature_value_state["text"] = ch1_8_data[5]
                    ch_sensor_temperature_value_state["text"] = ch1_8_data[6]
                    ch_electric_value_state["text"] = ch1_8_data[7]
                    # ch_electric_all_value_state["text"] = ch1_8_data[8]
                else:
                    ch_state_value_state["text"] = ch1_8_data[2]
                    ch_voltage_value_state["text"] = "error"
                    ch_current_value_state["text"] = "error"
                    ch_ntc_temperature_value_state["text"] = "error"
                    ch_sensor_temperature_value_state["text"] = "error"
                    ch_electric_value_state["text"] = "error"
                    # ch_electric_all_value_state["text"] = "error"
        if face_name == "ch2_1_data" and num == 0:
            global ch2_1_data

            while face_name == "ch2_1_data" and num == 0:
                time.sleep(1)
                if ch2_1_data[2] == "充电状态":
                    ch_state_value_state["text"] = ch2_1_data[2]
                    ch_voltage_value_state["text"] = ch2_1_data[3]
                    ch_current_value_state["text"] = ch2_1_data[4]
                    ch_ntc_temperature_value_state["text"] = ch2_1_data[5]
                    ch_sensor_temperature_value_state["text"] = ch2_1_data[6]
                    ch_electric_value_state["text"] = ch2_1_data[7]
                    # ch_electric_all_value_state["text"] = ch2_1_data[9]
                elif ch2_1_data[2] == "放电状态":
                    ch_state_value_state["text"] = ch2_1_data[2]
                    ch_voltage_value_state["text"] = ch2_1_data[3]
                    ch_current_value_state["text"] = ch2_1_data[4]
                    ch_ntc_temperature_value_state["text"] = ch2_1_data[5]
                    ch_sensor_temperature_value_state["text"] = ch2_1_data[6]
                    ch_electric_value_state["text"] = ch2_1_data[7]
                    # ch_electric_all_value_state["text"] = ch2_1_data[8]
                else:
                    ch_state_value_state["text"] = ch2_1_data[2]
                    ch_voltage_value_state["text"] = "error"
                    ch_current_value_state["text"] = "error"
                    ch_ntc_temperature_value_state["text"] = "error"
                    ch_sensor_temperature_value_state["text"] = "error"
                    ch_electric_value_state["text"] = "error"
                    # ch_electric_all_value_state["text"] = "error"
        elif face_name == "ch2_2_data" and num == 0:
            global ch2_2_data

            while face_name == "ch2_2_data" and num == 0:
                time.sleep(1)
                if ch2_2_data[2] == "充电状态":
                    ch_state_value_state["text"] = ch2_2_data[2]
                    ch_voltage_value_state["text"] = ch2_2_data[3]
                    ch_current_value_state["text"] = ch2_2_data[4]
                    ch_ntc_temperature_value_state["text"] = ch2_2_data[5]
                    ch_sensor_temperature_value_state["text"] = ch2_2_data[6]
                    ch_electric_value_state["text"] = ch2_2_data[7]
                    # ch_electric_all_value_state["text"] = ch2_2_data[9]
                elif ch2_2_data[2] == "放电状态":
                    ch_state_value_state["text"] = ch2_2_data[2]
                    ch_voltage_value_state["text"] = ch2_2_data[3]
                    ch_current_value_state["text"] = ch2_2_data[4]
                    ch_ntc_temperature_value_state["text"] = ch2_2_data[5]
                    ch_sensor_temperature_value_state["text"] = ch2_2_data[6]
                    ch_electric_value_state["text"] = ch2_2_data[7]
                    # ch_electric_all_value_state["text"] = ch2_2_data[8]
                else:
                    ch_state_value_state["text"] = ch2_2_data[2]
                    ch_voltage_value_state["text"] = "error"
                    ch_current_value_state["text"] = "error"
                    ch_ntc_temperature_value_state["text"] = "error"
                    ch_sensor_temperature_value_state["text"] = "error"
                    ch_electric_value_state["text"] = "error"
                    # ch_electric_all_value_state["text"] = "error"
        elif face_name == "ch2_3_data" and num == 0:
            global ch2_3_data

            while face_name == "ch2_3_data" and num == 0:
                time.sleep(1)
                if ch2_3_data[2] == "充电状态":
                    ch_state_value_state["text"] = ch2_3_data[2]
                    ch_voltage_value_state["text"] = ch2_3_data[3]
                    ch_current_value_state["text"] = ch2_3_data[4]
                    ch_ntc_temperature_value_state["text"] = ch2_3_data[5]
                    ch_sensor_temperature_value_state["text"] = ch2_3_data[6]
                    ch_electric_value_state["text"] = ch2_3_data[7]
                    # ch_electric_all_value_state["text"] = ch2_3_data[9]
                elif ch2_3_data[2] == "放电状态":
                    ch_state_value_state["text"] = ch2_3_data[2]
                    ch_voltage_value_state["text"] = ch2_3_data[3]
                    ch_current_value_state["text"] = ch2_3_data[4]
                    ch_ntc_temperature_value_state["text"] = ch2_3_data[5]
                    ch_sensor_temperature_value_state["text"] = ch2_3_data[6]
                    ch_electric_value_state["text"] = ch2_3_data[7]
                    # ch_electric_all_value_state["text"] = ch2_3_data[8]
                else:
                    ch_state_value_state["text"] = ch2_3_data[2]
                    ch_voltage_value_state["text"] = "error"
                    ch_current_value_state["text"] = "error"
                    ch_ntc_temperature_value_state["text"] = "error"
                    ch_sensor_temperature_value_state["text"] = "error"
                    ch_electric_value_state["text"] = "error"
                    # ch_electric_all_value_state["text"] = "error"
        elif face_name == "ch2_4_data" and num == 0:
            global ch2_4_data

            while face_name == "ch2_4_data" and num == 0:
                time.sleep(1)
                if ch2_4_data[2] == "充电状态":
                    ch_state_value_state["text"] = ch2_4_data[2]
                    ch_voltage_value_state["text"] = ch2_4_data[3]
                    ch_current_value_state["text"] = ch2_4_data[4]
                    ch_ntc_temperature_value_state["text"] = ch2_4_data[5]
                    ch_sensor_temperature_value_state["text"] = ch2_4_data[6]
                    ch_electric_value_state["text"] = ch2_4_data[7]
                    # ch_electric_all_value_state["text"] = ch2_4_data[9]
                elif ch2_4_data[2] == "放电状态":
                    ch_state_value_state["text"] = ch2_4_data[2]
                    ch_voltage_value_state["text"] = ch2_4_data[3]
                    ch_current_value_state["text"] = ch2_4_data[4]
                    ch_ntc_temperature_value_state["text"] = ch2_4_data[5]
                    ch_sensor_temperature_value_state["text"] = ch2_4_data[6]
                    ch_electric_value_state["text"] = ch2_4_data[7]
                    # ch_electric_all_value_state["text"] = ch2_4_data[8]
                else:
                    ch_state_value_state["text"] = ch2_4_data[2]
                    ch_voltage_value_state["text"] = "error"
                    ch_current_value_state["text"] = "error"
                    ch_ntc_temperature_value_state["text"] = "error"
                    ch_sensor_temperature_value_state["text"] = "error"
                    ch_electric_value_state["text"] = "error"
                    # ch_electric_all_value_state["text"] = "error"
        elif face_name == "ch2_5_data" and num == 0:
            global ch2_5_data

            while face_name == "ch2_5_data" and num == 0:
                time.sleep(1)
                if ch2_5_data[2] == "充电状态":
                    ch_state_value_state["text"] = ch2_5_data[2]
                    ch_voltage_value_state["text"] = ch2_5_data[3]
                    ch_current_value_state["text"] = ch2_5_data[4]
                    ch_ntc_temperature_value_state["text"] = ch2_5_data[5]
                    ch_sensor_temperature_value_state["text"] = ch2_5_data[6]
                    ch_electric_value_state["text"] = ch2_5_data[7]
                    # ch_electric_all_value_state["text"] = ch2_5_data[9]
                elif ch2_5_data[2] == "放电状态":
                    ch_state_value_state["text"] = ch2_5_data[2]
                    ch_voltage_value_state["text"] = ch2_5_data[3]
                    ch_current_value_state["text"] = ch2_5_data[4]
                    ch_ntc_temperature_value_state["text"] = ch2_5_data[5]
                    ch_sensor_temperature_value_state["text"] = ch2_5_data[6]
                    ch_electric_value_state["text"] = ch2_5_data[7]
                    # ch_electric_all_value_state["text"] = ch2_5_data[8]
                else:
                    ch_state_value_state["text"] = ch2_5_data[2]
                    ch_voltage_value_state["text"] = "error"
                    ch_current_value_state["text"] = "error"
                    ch_ntc_temperature_value_state["text"] = "error"
                    ch_sensor_temperature_value_state["text"] = "error"
                    ch_electric_value_state["text"] = "error"
                    # ch_electric_all_value_state["text"] = "error"
        elif face_name == "ch2_6_data" and num == 0:
            global ch2_6_data

            while face_name == "ch2_6_data" and num == 0:
                time.sleep(1)
                if ch2_6_data[2] == "充电状态":
                    ch_state_value_state["text"] = ch2_6_data[2]
                    ch_voltage_value_state["text"] = ch2_6_data[3]
                    ch_current_value_state["text"] = ch2_6_data[4]
                    ch_ntc_temperature_value_state["text"] = ch2_6_data[5]
                    ch_sensor_temperature_value_state["text"] = ch2_6_data[6]
                    ch_electric_value_state["text"] = ch2_6_data[7]
                    # ch_electric_all_value_state["text"] = ch2_6_data[9]
                elif ch2_6_data[2] == "放电状态":
                    ch_state_value_state["text"] = ch2_6_data[2]
                    ch_voltage_value_state["text"] = ch2_6_data[3]
                    ch_current_value_state["text"] = ch2_6_data[4]
                    ch_ntc_temperature_value_state["text"] = ch2_6_data[5]
                    ch_sensor_temperature_value_state["text"] = ch2_6_data[6]
                    ch_electric_value_state["text"] = ch2_6_data[7]
                    # ch_electric_all_value_state["text"] = ch2_6_data[8]
                else:
                    ch_state_value_state["text"] = ch2_6_data[2]
                    ch_voltage_value_state["text"] = "error"
                    ch_current_value_state["text"] = "error"
                    ch_ntc_temperature_value_state["text"] = "error"
                    ch_sensor_temperature_value_state["text"] = "error"
                    ch_electric_value_state["text"] = "error"
                    # ch_electric_all_value_state["text"] = "error"
        elif face_name == "ch2_7_data" and num == 0:
            global ch2_7_data

            while face_name == "ch2_7_data" and num == 0:
                time.sleep(1)
                if ch2_7_data[2] == "充电状态":
                    ch_state_value_state["text"] = ch2_7_data[2]
                    ch_voltage_value_state["text"] = ch2_7_data[3]
                    ch_current_value_state["text"] = ch2_7_data[4]
                    ch_ntc_temperature_value_state["text"] = ch2_7_data[5]
                    ch_sensor_temperature_value_state["text"] = ch2_7_data[6]
                    ch_electric_value_state["text"] = ch2_7_data[7]
                    # ch_electric_all_value_state["text"] = ch2_7_data[9]
                elif ch2_7_data[2] == "放电状态":
                    ch_state_value_state["text"] = ch2_7_data[2]
                    ch_voltage_value_state["text"] = ch2_7_data[3]
                    ch_current_value_state["text"] = ch2_7_data[4]
                    ch_ntc_temperature_value_state["text"] = ch2_7_data[5]
                    ch_sensor_temperature_value_state["text"] = ch2_7_data[6]
                    ch_electric_value_state["text"] = ch2_7_data[7]
                    # ch_electric_all_value_state["text"] = ch2_7_data[8]
                else:
                    ch_state_value_state["text"] = ch2_7_data[2]
                    ch_voltage_value_state["text"] = "error"
                    ch_current_value_state["text"] = "error"
                    ch_ntc_temperature_value_state["text"] = "error"
                    ch_sensor_temperature_value_state["text"] = "error"
                    ch_electric_value_state["text"] = "error"
                    # ch_electric_all_value_state["text"] = "error"
        elif face_name == "ch2_8_data" and num == 0:
            global ch2_8_data

            while face_name == "ch2_8_data" and num == 0:
                time.sleep(1)
                if ch2_8_data[2] == "充电状态":
                    ch_state_value_state["text"] = ch2_8_data[2]
                    ch_voltage_value_state["text"] = ch2_8_data[3]
                    ch_current_value_state["text"] = ch2_8_data[4]
                    ch_ntc_temperature_value_state["text"] = ch2_8_data[5]
                    ch_sensor_temperature_value_state["text"] = ch2_8_data[6]
                    ch_electric_value_state["text"] = ch2_8_data[7]
                    # ch_electric_all_value_state["text"] = ch2_8_data[9]
                elif ch2_8_data[2] == "放电状态":
                    ch_state_value_state["text"] = ch2_8_data[2]
                    ch_voltage_value_state["text"] = ch2_8_data[3]
                    ch_current_value_state["text"] = ch2_8_data[4]
                    ch_ntc_temperature_value_state["text"] = ch2_8_data[5]
                    ch_sensor_temperature_value_state["text"] = ch2_8_data[6]
                    ch_electric_value_state["text"] = ch2_8_data[7]
                    # ch_electric_all_value_state["text"] = ch2_8_data[8]
                else:
                    ch_state_value_state["text"] = ch2_8_data[2]
                    ch_voltage_value_state["text"] = "error"
                    ch_current_value_state["text"] = "error"
                    ch_ntc_temperature_value_state["text"] = "error"
                    ch_sensor_temperature_value_state["text"] = "error"
                    ch_electric_value_state["text"] = "error"
                    # ch_electric_all_value_state["text"] = "error"
        if face_name == "ch3_1_data" and num == 0:
            global ch3_1_data

            while face_name == "ch3_1_data" and num == 0:
                time.sleep(1)
                if ch3_1_data[2] == "充电状态":
                    ch_state_value_state["text"] = ch3_1_data[2]
                    ch_voltage_value_state["text"] = ch3_1_data[3]
                    ch_current_value_state["text"] = ch3_1_data[4]
                    ch_ntc_temperature_value_state["text"] = ch3_1_data[5]
                    ch_sensor_temperature_value_state["text"] = ch3_1_data[6]
                    ch_electric_value_state["text"] = ch3_1_data[7]
                    # ch_electric_all_value_state["text"] = ch3_1_data[9]
                elif ch3_1_data[2] == "放电状态":
                    ch_state_value_state["text"] = ch3_1_data[2]
                    ch_voltage_value_state["text"] = ch3_1_data[3]
                    ch_current_value_state["text"] = ch3_1_data[4]
                    ch_ntc_temperature_value_state["text"] = ch3_1_data[5]
                    ch_sensor_temperature_value_state["text"] = ch3_1_data[6]
                    ch_electric_value_state["text"] = ch3_1_data[7]
                    # ch_electric_all_value_state["text"] = ch3_1_data[8]
                else:
                    ch_state_value_state["text"] = ch3_1_data[2]
                    ch_voltage_value_state["text"] = "error"
                    ch_current_value_state["text"] = "error"
                    ch_ntc_temperature_value_state["text"] = "error"
                    ch_sensor_temperature_value_state["text"] = "error"
                    ch_electric_value_state["text"] = "error"
                    # ch_electric_all_value_state["text"] = "error"
        elif face_name == "ch3_2_data" and num == 0:
            global ch3_2_data

            while face_name == "ch3_2_data" and num == 0:
                time.sleep(1)
                if ch3_2_data[2] == "充电状态":
                    ch_state_value_state["text"] = ch3_2_data[2]
                    ch_voltage_value_state["text"] = ch3_2_data[3]
                    ch_current_value_state["text"] = ch3_2_data[4]
                    ch_ntc_temperature_value_state["text"] = ch3_2_data[5]
                    ch_sensor_temperature_value_state["text"] = ch3_2_data[6]
                    ch_electric_value_state["text"] = ch3_2_data[7]
                    # ch_electric_all_value_state["text"] = ch3_2_data[9]
                elif ch3_2_data[2] == "放电状态":
                    ch_state_value_state["text"] = ch3_2_data[2]
                    ch_voltage_value_state["text"] = ch3_2_data[3]
                    ch_current_value_state["text"] = ch3_2_data[4]
                    ch_ntc_temperature_value_state["text"] = ch3_2_data[5]
                    ch_sensor_temperature_value_state["text"] = ch3_2_data[6]
                    ch_electric_value_state["text"] = ch3_2_data[7]
                    # ch_electric_all_value_state["text"] = ch3_2_data[8]
                else:
                    ch_state_value_state["text"] = ch3_2_data[2]
                    ch_voltage_value_state["text"] = "error"
                    ch_current_value_state["text"] = "error"
                    ch_ntc_temperature_value_state["text"] = "error"
                    ch_sensor_temperature_value_state["text"] = "error"
                    ch_electric_value_state["text"] = "error"
                    # ch_electric_all_value_state["text"] = "error"
        elif face_name == "ch3_3_data" and num == 0:
            global ch3_3_data

            while face_name == "ch3_3_data" and num == 0:
                time.sleep(1)
                if ch3_3_data[2] == "充电状态":
                    ch_state_value_state["text"] = ch3_3_data[2]
                    ch_voltage_value_state["text"] = ch3_3_data[3]
                    ch_current_value_state["text"] = ch3_3_data[4]
                    ch_ntc_temperature_value_state["text"] = ch3_3_data[5]
                    ch_sensor_temperature_value_state["text"] = ch3_3_data[6]
                    ch_electric_value_state["text"] = ch3_3_data[7]
                    # ch_electric_all_value_state["text"] = ch3_3_data[9]
                elif ch3_3_data[2] == "放电状态":
                    ch_state_value_state["text"] = ch3_3_data[2]
                    ch_voltage_value_state["text"] = ch3_3_data[3]
                    ch_current_value_state["text"] = ch3_3_data[4]
                    ch_ntc_temperature_value_state["text"] = ch3_3_data[5]
                    ch_sensor_temperature_value_state["text"] = ch3_3_data[6]
                    ch_electric_value_state["text"] = ch3_3_data[7]
                    # ch_electric_all_value_state["text"] = ch3_3_data[8]
                else:
                    ch_state_value_state["text"] = ch3_3_data[2]
                    ch_voltage_value_state["text"] = "error"
                    ch_current_value_state["text"] = "error"
                    ch_ntc_temperature_value_state["text"] = "error"
                    ch_sensor_temperature_value_state["text"] = "error"
                    ch_electric_value_state["text"] = "error"
                    # ch_electric_all_value_state["text"] = "error"
        elif face_name == "ch3_4_data" and num == 0:
            global ch3_4_data

            while face_name == "ch3_4_data" and num == 0:
                time.sleep(1)
                if ch3_4_data[2] == "充电状态":
                    ch_state_value_state["text"] = ch3_4_data[2]
                    ch_voltage_value_state["text"] = ch3_4_data[3]
                    ch_current_value_state["text"] = ch3_4_data[4]
                    ch_ntc_temperature_value_state["text"] = ch3_4_data[5]
                    ch_sensor_temperature_value_state["text"] = ch3_4_data[6]
                    ch_electric_value_state["text"] = ch3_4_data[7]
                    # ch_electric_all_value_state["text"] = ch3_4_data[9]
                elif ch3_4_data[2] == "放电状态":
                    ch_state_value_state["text"] = ch3_4_data[2]
                    ch_voltage_value_state["text"] = ch3_4_data[3]
                    ch_current_value_state["text"] = ch3_4_data[4]
                    ch_ntc_temperature_value_state["text"] = ch3_4_data[5]
                    ch_sensor_temperature_value_state["text"] = ch3_4_data[6]
                    ch_electric_value_state["text"] = ch3_4_data[7]
                    # ch_electric_all_value_state["text"] = ch3_4_data[8]
                else:
                    ch_state_value_state["text"] = ch3_4_data[2]
                    ch_voltage_value_state["text"] = "error"
                    ch_current_value_state["text"] = "error"
                    ch_ntc_temperature_value_state["text"] = "error"
                    ch_sensor_temperature_value_state["text"] = "error"
                    ch_electric_value_state["text"] = "error"
                    # ch_electric_all_value_state["text"] = "error"
        elif face_name == "ch3_5_data" and num == 0:
            global ch3_5_data

            while face_name == "ch3_5_data" and num == 0:
                time.sleep(1)
                if ch3_5_data[2] == "充电状态":
                    ch_state_value_state["text"] = ch3_5_data[2]
                    ch_voltage_value_state["text"] = ch3_5_data[3]
                    ch_current_value_state["text"] = ch3_5_data[4]
                    ch_ntc_temperature_value_state["text"] = ch3_5_data[5]
                    ch_sensor_temperature_value_state["text"] = ch3_5_data[6]
                    ch_electric_value_state["text"] = ch3_5_data[7]
                    # ch_electric_all_value_state["text"] = ch3_5_data[9]
                elif ch3_5_data[2] == "放电状态":
                    ch_state_value_state["text"] = ch3_5_data[2]
                    ch_voltage_value_state["text"] = ch3_5_data[3]
                    ch_current_value_state["text"] = ch3_5_data[4]
                    ch_ntc_temperature_value_state["text"] = ch3_5_data[5]
                    ch_sensor_temperature_value_state["text"] = ch3_5_data[6]
                    ch_electric_value_state["text"] = ch3_5_data[7]
                    # ch_electric_all_value_state["text"] = ch3_5_data[8]
                else:
                    ch_state_value_state["text"] = ch3_5_data[2]
                    ch_voltage_value_state["text"] = "error"
                    ch_current_value_state["text"] = "error"
                    ch_ntc_temperature_value_state["text"] = "error"
                    ch_sensor_temperature_value_state["text"] = "error"
                    ch_electric_value_state["text"] = "error"
                    # ch_electric_all_value_state["text"] = "error"
        elif face_name == "ch3_6_data" and num == 0:
            global ch3_6_data

            while face_name == "ch3_6_data" and num == 0:
                time.sleep(1)
                if ch3_6_data[2] == "充电状态":
                    ch_state_value_state["text"] = ch3_6_data[2]
                    ch_voltage_value_state["text"] = ch3_6_data[3]
                    ch_current_value_state["text"] = ch3_6_data[4]
                    ch_ntc_temperature_value_state["text"] = ch3_6_data[5]
                    ch_sensor_temperature_value_state["text"] = ch3_6_data[6]
                    ch_electric_value_state["text"] = ch3_6_data[7]
                    # ch_electric_all_value_state["text"] = ch3_6_data[9]
                elif ch3_6_data[2] == "放电状态":
                    ch_state_value_state["text"] = ch3_6_data[2]
                    ch_voltage_value_state["text"] = ch3_6_data[3]
                    ch_current_value_state["text"] = ch3_6_data[4]
                    ch_ntc_temperature_value_state["text"] = ch3_6_data[5]
                    ch_sensor_temperature_value_state["text"] = ch3_6_data[6]
                    ch_electric_value_state["text"] = ch3_6_data[7]
                    # ch_electric_all_value_state["text"] = ch3_6_data[8]
                else:
                    ch_state_value_state["text"] = ch3_6_data[2]
                    ch_voltage_value_state["text"] = "error"
                    ch_current_value_state["text"] = "error"
                    ch_ntc_temperature_value_state["text"] = "error"
                    ch_sensor_temperature_value_state["text"] = "error"
                    ch_electric_value_state["text"] = "error"
                    # ch_electric_all_value_state["text"] = "error"
        elif face_name == "ch3_7_data" and num == 0:
            global ch3_7_data

            while face_name == "ch3_7_data" and num == 0:
                time.sleep(1)
                if ch3_7_data[2] == "充电状态":
                    ch_state_value_state["text"] = ch3_7_data[2]
                    ch_voltage_value_state["text"] = ch3_7_data[3]
                    ch_current_value_state["text"] = ch3_7_data[4]
                    ch_ntc_temperature_value_state["text"] = ch3_7_data[5]
                    ch_sensor_temperature_value_state["text"] = ch3_7_data[6]
                    ch_electric_value_state["text"] = ch3_7_data[7]
                    # ch_electric_all_value_state["text"] = ch3_7_data[9]
                elif ch3_7_data[2] == "放电状态":
                    ch_state_value_state["text"] = ch3_7_data[2]
                    ch_voltage_value_state["text"] = ch3_7_data[3]
                    ch_current_value_state["text"] = ch3_7_data[4]
                    ch_ntc_temperature_value_state["text"] = ch3_7_data[5]
                    ch_sensor_temperature_value_state["text"] = ch3_7_data[6]
                    ch_electric_value_state["text"] = ch3_7_data[7]
                    # ch_electric_all_value_state["text"] = ch3_7_data[8]
                else:
                    ch_state_value_state["text"] = ch3_7_data[2]
                    ch_voltage_value_state["text"] = "error"
                    ch_current_value_state["text"] = "error"
                    ch_ntc_temperature_value_state["text"] = "error"
                    ch_sensor_temperature_value_state["text"] = "error"
                    ch_electric_value_state["text"] = "error"
                    # ch_electric_all_value_state["text"] = "error"
        elif face_name == "ch3_8_data" and num == 0:
            global ch3_8_data

            while face_name == "ch3_8_data" and num == 0:
                time.sleep(1)
                if ch3_8_data[2] == "充电状态":
                    ch_state_value_state["text"] = ch3_8_data[2]
                    ch_voltage_value_state["text"] = ch3_8_data[3]
                    ch_current_value_state["text"] = ch3_8_data[4]
                    ch_ntc_temperature_value_state["text"] = ch3_8_data[5]
                    ch_sensor_temperature_value_state["text"] = ch3_8_data[6]
                    ch_electric_value_state["text"] = ch3_8_data[7]
                    # ch_electric_all_value_state["text"] = ch3_8_data[9]
                elif ch3_8_data[2] == "放电状态":
                    ch_state_value_state["text"] = ch3_8_data[2]
                    ch_voltage_value_state["text"] = ch3_8_data[3]
                    ch_current_value_state["text"] = ch3_8_data[4]
                    ch_ntc_temperature_value_state["text"] = ch3_8_data[5]
                    ch_sensor_temperature_value_state["text"] = ch3_8_data[6]
                    ch_electric_value_state["text"] = ch3_8_data[7]
                    # ch_electric_all_value_state["text"] = ch3_8_data[8]
                else:
                    ch_state_value_state["text"] = ch3_8_data[2]
                    ch_voltage_value_state["text"] = "error"
                    ch_current_value_state["text"] = "error"
                    ch_ntc_temperature_value_state["text"] = "error"
                    ch_sensor_temperature_value_state["text"] = "error"
                    ch_electric_value_state["text"] = "error"
                    # ch_electric_all_value_state["text"] = "error"
        if face_name == "ch4_1_data" and num == 0:
            global ch4_1_data

            while face_name == "ch4_1_data" and num == 0:
                time.sleep(1)
                if ch4_1_data[2] == "充电状态":
                    ch_state_value_state["text"] = ch4_1_data[2]
                    ch_voltage_value_state["text"] = ch4_1_data[3]
                    ch_current_value_state["text"] = ch4_1_data[4]
                    ch_ntc_temperature_value_state["text"] = ch4_1_data[5]
                    ch_sensor_temperature_value_state["text"] = ch4_1_data[6]
                    ch_electric_value_state["text"] = ch4_1_data[7]
                    # ch_electric_all_value_state["text"] = ch4_1_data[9]
                elif ch4_1_data[2] == "放电状态":
                    ch_state_value_state["text"] = ch4_1_data[2]
                    ch_voltage_value_state["text"] = ch4_1_data[3]
                    ch_current_value_state["text"] = ch4_1_data[4]
                    ch_ntc_temperature_value_state["text"] = ch4_1_data[5]
                    ch_sensor_temperature_value_state["text"] = ch4_1_data[6]
                    ch_electric_value_state["text"] = ch4_1_data[7]
                    # ch_electric_all_value_state["text"] = ch4_1_data[8]
                else:
                    ch_state_value_state["text"] = ch4_1_data[2]
                    ch_voltage_value_state["text"] = "error"
                    ch_current_value_state["text"] = "error"
                    ch_ntc_temperature_value_state["text"] = "error"
                    ch_sensor_temperature_value_state["text"] = "error"
                    ch_electric_value_state["text"] = "error"
                    # ch_electric_all_value_state["text"] = "error"
        elif face_name == "ch4_2_data" and num == 0:
            global ch4_2_data

            while face_name == "ch4_2_data" and num == 0:
                time.sleep(1)
                if ch4_2_data[2] == "充电状态":
                    ch_state_value_state["text"] = ch4_2_data[2]
                    ch_voltage_value_state["text"] = ch4_2_data[3]
                    ch_current_value_state["text"] = ch4_2_data[4]
                    ch_ntc_temperature_value_state["text"] = ch4_2_data[5]
                    ch_sensor_temperature_value_state["text"] = ch4_2_data[6]
                    ch_electric_value_state["text"] = ch4_2_data[7]
                    # ch_electric_all_value_state["text"] = ch4_2_data[9]
                elif ch4_2_data[2] == "放电状态":
                    ch_state_value_state["text"] = ch4_2_data[2]
                    ch_voltage_value_state["text"] = ch4_2_data[3]
                    ch_current_value_state["text"] = ch4_2_data[4]
                    ch_ntc_temperature_value_state["text"] = ch4_2_data[5]
                    ch_sensor_temperature_value_state["text"] = ch4_2_data[6]
                    ch_electric_value_state["text"] = ch4_2_data[7]
                    # ch_electric_all_value_state["text"] = ch4_2_data[8]
                else:
                    ch_state_value_state["text"] = ch4_2_data[2]
                    ch_voltage_value_state["text"] = "error"
                    ch_current_value_state["text"] = "error"
                    ch_ntc_temperature_value_state["text"] = "error"
                    ch_sensor_temperature_value_state["text"] = "error"
                    ch_electric_value_state["text"] = "error"
                    # ch_electric_all_value_state["text"] = "error"
        elif face_name == "ch4_3_data" and num == 0:
            global ch4_3_data

            while face_name == "ch4_3_data" and num == 0:
                time.sleep(1)
                if ch4_3_data[2] == "充电状态":
                    ch_state_value_state["text"] = ch4_3_data[2]
                    ch_voltage_value_state["text"] = ch4_3_data[3]
                    ch_current_value_state["text"] = ch4_3_data[4]
                    ch_ntc_temperature_value_state["text"] = ch4_3_data[5]
                    ch_sensor_temperature_value_state["text"] = ch4_3_data[6]
                    ch_electric_value_state["text"] = ch4_3_data[7]
                    # ch_electric_all_value_state["text"] = ch4_3_data[9]
                elif ch4_3_data[2] == "放电状态":
                    ch_state_value_state["text"] = ch4_3_data[2]
                    ch_voltage_value_state["text"] = ch4_3_data[3]
                    ch_current_value_state["text"] = ch4_3_data[4]
                    ch_ntc_temperature_value_state["text"] = ch4_3_data[5]
                    ch_sensor_temperature_value_state["text"] = ch4_3_data[6]
                    ch_electric_value_state["text"] = ch4_3_data[7]
                    # ch_electric_all_value_state["text"] = ch4_3_data[8]
                else:
                    ch_state_value_state["text"] = ch4_3_data[2]
                    ch_voltage_value_state["text"] = "error"
                    ch_current_value_state["text"] = "error"
                    ch_ntc_temperature_value_state["text"] = "error"
                    ch_sensor_temperature_value_state["text"] = "error"
                    ch_electric_value_state["text"] = "error"
                    # ch_electric_all_value_state["text"] = "error"
        elif face_name == "ch4_4_data" and num == 0:
            global ch4_4_data

            while face_name == "ch4_4_data" and num == 0:
                time.sleep(1)
                if ch4_4_data[2] == "充电状态":
                    ch_state_value_state["text"] = ch4_4_data[2]
                    ch_voltage_value_state["text"] = ch4_4_data[3]
                    ch_current_value_state["text"] = ch4_4_data[4]
                    ch_ntc_temperature_value_state["text"] = ch4_4_data[5]
                    ch_sensor_temperature_value_state["text"] = ch4_4_data[6]
                    ch_electric_value_state["text"] = ch4_4_data[7]
                    # ch_electric_all_value_state["text"] = ch4_4_data[9]
                elif ch4_4_data[2] == "放电状态":
                    ch_state_value_state["text"] = ch4_4_data[2]
                    ch_voltage_value_state["text"] = ch4_4_data[3]
                    ch_current_value_state["text"] = ch4_4_data[4]
                    ch_ntc_temperature_value_state["text"] = ch4_4_data[5]
                    ch_sensor_temperature_value_state["text"] = ch4_4_data[6]
                    ch_electric_value_state["text"] = ch4_4_data[7]
                    # ch_electric_all_value_state["text"] = ch4_4_data[8]
                else:
                    ch_state_value_state["text"] = ch4_4_data[2]
                    ch_voltage_value_state["text"] = "error"
                    ch_current_value_state["text"] = "error"
                    ch_ntc_temperature_value_state["text"] = "error"
                    ch_sensor_temperature_value_state["text"] = "error"
                    ch_electric_value_state["text"] = "error"
                    # ch_electric_all_value_state["text"] = "error"
        elif face_name == "ch4_5_data" and num == 0:
            global ch4_5_data

            while face_name == "ch4_5_data" and num == 0:
                time.sleep(1)
                if ch4_5_data[2] == "充电状态":
                    ch_state_value_state["text"] = ch4_5_data[2]
                    ch_voltage_value_state["text"] = ch4_5_data[3]
                    ch_current_value_state["text"] = ch4_5_data[4]
                    ch_ntc_temperature_value_state["text"] = ch4_5_data[5]
                    ch_sensor_temperature_value_state["text"] = ch4_5_data[6]
                    ch_electric_value_state["text"] = ch4_5_data[7]
                    # ch_electric_all_value_state["text"] = ch4_5_data[9]
                elif ch4_5_data[2] == "放电状态":
                    ch_state_value_state["text"] = ch4_5_data[2]
                    ch_voltage_value_state["text"] = ch4_5_data[3]
                    ch_current_value_state["text"] = ch4_5_data[4]
                    ch_ntc_temperature_value_state["text"] = ch4_5_data[5]
                    ch_sensor_temperature_value_state["text"] = ch4_5_data[6]
                    ch_electric_value_state["text"] = ch4_5_data[7]
                    # ch_electric_all_value_state["text"] = ch4_5_data[8]
                else:
                    ch_state_value_state["text"] = ch4_5_data[2]
                    ch_voltage_value_state["text"] = "error"
                    ch_current_value_state["text"] = "error"
                    ch_ntc_temperature_value_state["text"] = "error"
                    ch_sensor_temperature_value_state["text"] = "error"
                    ch_electric_value_state["text"] = "error"
                    # ch_electric_all_value_state["text"] = "error"
        elif face_name == "ch4_6_data" and num == 0:
            global ch4_6_data

            while face_name == "ch4_6_data" and num == 0:
                time.sleep(1)
                if ch4_6_data[2] == "充电状态":
                    ch_state_value_state["text"] = ch4_6_data[2]
                    ch_voltage_value_state["text"] = ch4_6_data[3]
                    ch_current_value_state["text"] = ch4_6_data[4]
                    ch_ntc_temperature_value_state["text"] = ch4_6_data[5]
                    ch_sensor_temperature_value_state["text"] = ch4_6_data[6]
                    ch_electric_value_state["text"] = ch4_6_data[7]
                    # ch_electric_all_value_state["text"] = ch4_6_data[9]
                elif ch4_6_data[2] == "放电状态":
                    ch_state_value_state["text"] = ch4_6_data[2]
                    ch_voltage_value_state["text"] = ch4_6_data[3]
                    ch_current_value_state["text"] = ch4_6_data[4]
                    ch_ntc_temperature_value_state["text"] = ch4_6_data[5]
                    ch_sensor_temperature_value_state["text"] = ch4_6_data[6]
                    ch_electric_value_state["text"] = ch4_6_data[7]
                    # ch_electric_all_value_state["text"] = ch4_6_data[8]
                else:
                    ch_state_value_state["text"] = ch4_6_data[2]
                    ch_voltage_value_state["text"] = "error"
                    ch_current_value_state["text"] = "error"
                    ch_ntc_temperature_value_state["text"] = "error"
                    ch_sensor_temperature_value_state["text"] = "error"
                    ch_electric_value_state["text"] = "error"
                    # ch_electric_all_value_state["text"] = "error"
        elif face_name == "ch4_7_data" and num == 0:
            global ch4_7_data

            while face_name == "ch4_7_data" and num == 0:
                time.sleep(1)
                if ch4_7_data[2] == "充电状态":
                    ch_state_value_state["text"] = ch4_7_data[2]
                    ch_voltage_value_state["text"] = ch4_7_data[3]
                    ch_current_value_state["text"] = ch4_7_data[4]
                    ch_ntc_temperature_value_state["text"] = ch4_7_data[5]
                    ch_sensor_temperature_value_state["text"] = ch4_7_data[6]
                    ch_electric_value_state["text"] = ch4_7_data[7]
                    # ch_electric_all_value_state["text"] = ch4_7_data[9]
                elif ch4_7_data[2] == "放电状态":
                    ch_state_value_state["text"] = ch4_7_data[2]
                    ch_voltage_value_state["text"] = ch4_7_data[3]
                    ch_current_value_state["text"] = ch4_7_data[4]
                    ch_ntc_temperature_value_state["text"] = ch4_7_data[5]
                    ch_sensor_temperature_value_state["text"] = ch4_7_data[6]
                    ch_electric_value_state["text"] = ch4_7_data[7]
                    # ch_electric_all_value_state["text"] = ch4_7_data[8]
                else:
                    ch_state_value_state["text"] = ch4_7_data[2]
                    ch_voltage_value_state["text"] = "error"
                    ch_current_value_state["text"] = "error"
                    ch_ntc_temperature_value_state["text"] = "error"
                    ch_sensor_temperature_value_state["text"] = "error"
                    ch_electric_value_state["text"] = "error"
                    # ch_electric_all_value_state["text"] = "error"
        elif face_name == "ch4_8_data" and num == 0:
            global ch4_8_data

            while face_name == "ch4_8_data" and num == 0:
                time.sleep(1)
                if ch4_8_data[2] == "充电状态":
                    ch_state_value_state["text"] = ch4_8_data[2]
                    ch_voltage_value_state["text"] = ch4_8_data[3]
                    ch_current_value_state["text"] = ch4_8_data[4]
                    ch_ntc_temperature_value_state["text"] = ch4_8_data[5]
                    ch_sensor_temperature_value_state["text"] = ch4_8_data[6]
                    ch_electric_value_state["text"] = ch4_8_data[7]
                    # ch_electric_all_value_state["text"] = ch4_8_data[9]
                elif ch4_8_data[2] == "放电状态":
                    ch_state_value_state["text"] = ch4_8_data[2]
                    ch_voltage_value_state["text"] = ch4_8_data[3]
                    ch_current_value_state["text"] = ch4_8_data[4]
                    ch_ntc_temperature_value_state["text"] = ch4_8_data[5]
                    ch_sensor_temperature_value_state["text"] = ch4_8_data[6]
                    ch_electric_value_state["text"] = ch4_8_data[7]
                    # ch_electric_all_value_state["text"] = ch4_8_data[8]
                else:
                    ch_state_value_state["text"] = ch4_8_data[2]
                    ch_voltage_value_state["text"] = "error"
                    ch_current_value_state["text"] = "error"
                    ch_ntc_temperature_value_state["text"] = "error"
                    ch_sensor_temperature_value_state["text"] = "error"
                    ch_electric_value_state["text"] = "error"
                    # ch_electric_all_value_state["text"] = "error"
        if face_name == "ch5_1_data" and num == 0:
            global ch5_1_data

            while face_name == "ch5_1_data" and num == 0:
                time.sleep(1)
                if ch5_1_data[2] == "充电状态":
                    ch_state_value_state["text"] = ch5_1_data[2]
                    ch_voltage_value_state["text"] = ch5_1_data[3]
                    ch_current_value_state["text"] = ch5_1_data[4]
                    ch_ntc_temperature_value_state["text"] = ch5_1_data[5]
                    ch_sensor_temperature_value_state["text"] = ch5_1_data[6]
                    ch_electric_value_state["text"] = ch5_1_data[7]
                    # ch_electric_all_value_state["text"] = ch5_1_data[9]
                elif ch5_1_data[2] == "放电状态":
                    ch_state_value_state["text"] = ch5_1_data[2]
                    ch_voltage_value_state["text"] = ch5_1_data[3]
                    ch_current_value_state["text"] = ch5_1_data[4]
                    ch_ntc_temperature_value_state["text"] = ch5_1_data[5]
                    ch_sensor_temperature_value_state["text"] = ch5_1_data[6]
                    ch_electric_value_state["text"] = ch5_1_data[7]
                    # ch_electric_all_value_state["text"] = ch5_1_data[8]
                else:
                    ch_state_value_state["text"] = ch5_1_data[2]
                    ch_voltage_value_state["text"] = "error"
                    ch_current_value_state["text"] = "error"
                    ch_ntc_temperature_value_state["text"] = "error"
                    ch_sensor_temperature_value_state["text"] = "error"
                    ch_electric_value_state["text"] = "error"
                    # ch_electric_all_value_state["text"] = "error"
        elif face_name == "ch5_2_data" and num == 0:
            global ch5_2_data

            while face_name == "ch5_2_data" and num == 0:
                time.sleep(1)
                if ch5_2_data[2] == "充电状态":
                    ch_state_value_state["text"] = ch5_2_data[2]
                    ch_voltage_value_state["text"] = ch5_2_data[3]
                    ch_current_value_state["text"] = ch5_2_data[4]
                    ch_ntc_temperature_value_state["text"] = ch5_2_data[5]
                    ch_sensor_temperature_value_state["text"] = ch5_2_data[6]
                    ch_electric_value_state["text"] = ch5_2_data[7]
                    # ch_electric_all_value_state["text"] = ch5_2_data[9]
                elif ch5_2_data[2] == "放电状态":
                    ch_state_value_state["text"] = ch5_2_data[2]
                    ch_voltage_value_state["text"] = ch5_2_data[3]
                    ch_current_value_state["text"] = ch5_2_data[4]
                    ch_ntc_temperature_value_state["text"] = ch5_2_data[5]
                    ch_sensor_temperature_value_state["text"] = ch5_2_data[6]
                    ch_electric_value_state["text"] = ch5_2_data[7]
                    # ch_electric_all_value_state["text"] = ch5_2_data[8]
                else:
                    ch_state_value_state["text"] = ch5_2_data[2]
                    ch_voltage_value_state["text"] = "error"
                    ch_current_value_state["text"] = "error"
                    ch_ntc_temperature_value_state["text"] = "error"
                    ch_sensor_temperature_value_state["text"] = "error"
                    ch_electric_value_state["text"] = "error"
                    # ch_electric_all_value_state["text"] = "error"
        elif face_name == "ch5_3_data" and num == 0:
            global ch5_3_data

            while face_name == "ch5_3_data" and num == 0:
                time.sleep(1)
                if ch5_3_data[2] == "充电状态":
                    ch_state_value_state["text"] = ch5_3_data[2]
                    ch_voltage_value_state["text"] = ch5_3_data[3]
                    ch_current_value_state["text"] = ch5_3_data[4]
                    ch_ntc_temperature_value_state["text"] = ch5_3_data[5]
                    ch_sensor_temperature_value_state["text"] = ch5_3_data[6]
                    ch_electric_value_state["text"] = ch5_3_data[7]
                    # ch_electric_all_value_state["text"] = ch5_3_data[9]
                elif ch5_3_data[2] == "放电状态":
                    ch_state_value_state["text"] = ch5_3_data[2]
                    ch_voltage_value_state["text"] = ch5_3_data[3]
                    ch_current_value_state["text"] = ch5_3_data[4]
                    ch_ntc_temperature_value_state["text"] = ch5_3_data[5]
                    ch_sensor_temperature_value_state["text"] = ch5_3_data[6]
                    ch_electric_value_state["text"] = ch5_3_data[7]
                    # ch_electric_all_value_state["text"] = ch5_3_data[8]
                else:
                    ch_state_value_state["text"] = ch5_3_data[2]
                    ch_voltage_value_state["text"] = "error"
                    ch_current_value_state["text"] = "error"
                    ch_ntc_temperature_value_state["text"] = "error"
                    ch_sensor_temperature_value_state["text"] = "error"
                    ch_electric_value_state["text"] = "error"
                    # ch_electric_all_value_state["text"] = "error"
        elif face_name == "ch5_4_data" and num == 0:
            global ch5_4_data

            while face_name == "ch5_4_data" and num == 0:
                time.sleep(1)
                if ch5_4_data[2] == "充电状态":
                    ch_state_value_state["text"] = ch5_4_data[2]
                    ch_voltage_value_state["text"] = ch5_4_data[3]
                    ch_current_value_state["text"] = ch5_4_data[4]
                    ch_ntc_temperature_value_state["text"] = ch5_4_data[5]
                    ch_sensor_temperature_value_state["text"] = ch5_4_data[6]
                    ch_electric_value_state["text"] = ch5_4_data[7]
                    # ch_electric_all_value_state["text"] = ch5_4_data[9]
                elif ch5_4_data[2] == "放电状态":
                    ch_state_value_state["text"] = ch5_4_data[2]
                    ch_voltage_value_state["text"] = ch5_4_data[3]
                    ch_current_value_state["text"] = ch5_4_data[4]
                    ch_ntc_temperature_value_state["text"] = ch5_4_data[5]
                    ch_sensor_temperature_value_state["text"] = ch5_4_data[6]
                    ch_electric_value_state["text"] = ch5_4_data[7]
                    # ch_electric_all_value_state["text"] = ch5_4_data[8]
                else:
                    ch_state_value_state["text"] = ch5_4_data[2]
                    ch_voltage_value_state["text"] = "error"
                    ch_current_value_state["text"] = "error"
                    ch_ntc_temperature_value_state["text"] = "error"
                    ch_sensor_temperature_value_state["text"] = "error"
                    ch_electric_value_state["text"] = "error"
                    # ch_electric_all_value_state["text"] = "error"
        elif face_name == "ch5_5_data" and num == 0:
            global ch5_5_data

            while face_name == "ch5_5_data" and num == 0:
                time.sleep(1)
                if ch5_5_data[2] == "充电状态":
                    ch_state_value_state["text"] = ch5_5_data[2]
                    ch_voltage_value_state["text"] = ch5_5_data[3]
                    ch_current_value_state["text"] = ch5_5_data[4]
                    ch_ntc_temperature_value_state["text"] = ch5_5_data[5]
                    ch_sensor_temperature_value_state["text"] = ch5_5_data[6]
                    ch_electric_value_state["text"] = ch5_5_data[7]
                    # ch_electric_all_value_state["text"] = ch5_5_data[9]
                elif ch5_5_data[2] == "放电状态":
                    ch_state_value_state["text"] = ch5_5_data[2]
                    ch_voltage_value_state["text"] = ch5_5_data[3]
                    ch_current_value_state["text"] = ch5_5_data[4]
                    ch_ntc_temperature_value_state["text"] = ch5_5_data[5]
                    ch_sensor_temperature_value_state["text"] = ch5_5_data[6]
                    ch_electric_value_state["text"] = ch5_5_data[7]
                    # ch_electric_all_value_state["text"] = ch5_5_data[8]
                else:
                    ch_state_value_state["text"] = ch5_5_data[2]
                    ch_voltage_value_state["text"] = "error"
                    ch_current_value_state["text"] = "error"
                    ch_ntc_temperature_value_state["text"] = "error"
                    ch_sensor_temperature_value_state["text"] = "error"
                    ch_electric_value_state["text"] = "error"
                    # ch_electric_all_value_state["text"] = "error"
        elif face_name == "ch5_6_data" and num == 0:
            global ch5_6_data

            while face_name == "ch5_6_data" and num == 0:
                time.sleep(1)
                if ch5_6_data[2] == "充电状态":
                    ch_state_value_state["text"] = ch5_6_data[2]
                    ch_voltage_value_state["text"] = ch5_6_data[3]
                    ch_current_value_state["text"] = ch5_6_data[4]
                    ch_ntc_temperature_value_state["text"] = ch5_6_data[5]
                    ch_sensor_temperature_value_state["text"] = ch5_6_data[6]
                    ch_electric_value_state["text"] = ch5_6_data[7]
                    # ch_electric_all_value_state["text"] = ch5_6_data[9]
                elif ch5_6_data[2] == "放电状态":
                    ch_state_value_state["text"] = ch5_6_data[2]
                    ch_voltage_value_state["text"] = ch5_6_data[3]
                    ch_current_value_state["text"] = ch5_6_data[4]
                    ch_ntc_temperature_value_state["text"] = ch5_6_data[5]
                    ch_sensor_temperature_value_state["text"] = ch5_6_data[6]
                    ch_electric_value_state["text"] = ch5_6_data[7]
                    # ch_electric_all_value_state["text"] = ch5_6_data[8]
                else:
                    ch_state_value_state["text"] = ch5_6_data[2]
                    ch_voltage_value_state["text"] = "error"
                    ch_current_value_state["text"] = "error"
                    ch_ntc_temperature_value_state["text"] = "error"
                    ch_sensor_temperature_value_state["text"] = "error"
                    ch_electric_value_state["text"] = "error"
                    # ch_electric_all_value_state["text"] = "error"
        elif face_name == "ch5_7_data" and num == 0:
            global ch5_7_data

            while face_name == "ch5_7_data" and num == 0:
                time.sleep(1)
                if ch5_7_data[2] == "充电状态":
                    ch_state_value_state["text"] = ch5_7_data[2]
                    ch_voltage_value_state["text"] = ch5_7_data[3]
                    ch_current_value_state["text"] = ch5_7_data[4]
                    ch_ntc_temperature_value_state["text"] = ch5_7_data[5]
                    ch_sensor_temperature_value_state["text"] = ch5_7_data[6]
                    ch_electric_value_state["text"] = ch5_7_data[7]
                    # ch_electric_all_value_state["text"] = ch5_7_data[9]
                elif ch5_7_data[2] == "放电状态":
                    ch_state_value_state["text"] = ch5_7_data[2]
                    ch_voltage_value_state["text"] = ch5_7_data[3]
                    ch_current_value_state["text"] = ch5_7_data[4]
                    ch_ntc_temperature_value_state["text"] = ch5_7_data[5]
                    ch_sensor_temperature_value_state["text"] = ch5_7_data[6]
                    ch_electric_value_state["text"] = ch5_7_data[7]
                    # ch_electric_all_value_state["text"] = ch5_7_data[8]
                else:
                    ch_state_value_state["text"] = ch5_7_data[2]
                    ch_voltage_value_state["text"] = "error"
                    ch_current_value_state["text"] = "error"
                    ch_ntc_temperature_value_state["text"] = "error"
                    ch_sensor_temperature_value_state["text"] = "error"
                    ch_electric_value_state["text"] = "error"
                    # ch_electric_all_value_state["text"] = "error"
        elif face_name == "ch5_8_data" and num == 0:
            global ch5_8_data

            while face_name == "ch5_8_data" and num == 0:
                time.sleep(1)
                if ch5_8_data[2] == "充电状态":
                    ch_state_value_state["text"] = ch5_8_data[2]
                    ch_voltage_value_state["text"] = ch5_8_data[3]
                    ch_current_value_state["text"] = ch5_8_data[4]
                    ch_ntc_temperature_value_state["text"] = ch5_8_data[5]
                    ch_sensor_temperature_value_state["text"] = ch5_8_data[6]
                    ch_electric_value_state["text"] = ch5_8_data[7]
                    # ch_electric_all_value_state["text"] = ch5_8_data[9]
                elif ch5_8_data[2] == "放电状态":
                    ch_state_value_state["text"] = ch5_8_data[2]
                    ch_voltage_value_state["text"] = ch5_8_data[3]
                    ch_current_value_state["text"] = ch5_8_data[4]
                    ch_ntc_temperature_value_state["text"] = ch5_8_data[5]
                    ch_sensor_temperature_value_state["text"] = ch5_8_data[6]
                    ch_electric_value_state["text"] = ch5_8_data[7]
                    # ch_electric_all_value_state["text"] = ch5_8_data[8]
                else:
                    ch_state_value_state["text"] = ch5_8_data[2]
                    ch_voltage_value_state["text"] = "error"
                    ch_current_value_state["text"] = "error"
                    ch_ntc_temperature_value_state["text"] = "error"
                    ch_sensor_temperature_value_state["text"] = "error"
                    ch_electric_value_state["text"] = "error"
                    # ch_electric_all_value_state["text"] = "error"
        if face_name == "ch6_1_data" and num == 0:
            global ch6_1_data

            while face_name == "ch6_1_data" and num == 0:
                time.sleep(1)
                if ch6_1_data[2] == "充电状态":
                    ch_state_value_state["text"] = ch6_1_data[2]
                    ch_voltage_value_state["text"] = ch6_1_data[3]
                    ch_current_value_state["text"] = ch6_1_data[4]
                    ch_ntc_temperature_value_state["text"] = ch6_1_data[5]
                    ch_sensor_temperature_value_state["text"] = ch6_1_data[6]
                    ch_electric_value_state["text"] = ch6_1_data[7]
                    # ch_electric_all_value_state["text"] = ch6_1_data[9]
                elif ch6_1_data[2] == "放电状态":
                    ch_state_value_state["text"] = ch6_1_data[2]
                    ch_voltage_value_state["text"] = ch6_1_data[3]
                    ch_current_value_state["text"] = ch6_1_data[4]
                    ch_ntc_temperature_value_state["text"] = ch6_1_data[5]
                    ch_sensor_temperature_value_state["text"] = ch6_1_data[6]
                    ch_electric_value_state["text"] = ch6_1_data[7]
                    # ch_electric_all_value_state["text"] = ch6_1_data[8]
                else:
                    ch_state_value_state["text"] = ch6_1_data[2]
                    ch_voltage_value_state["text"] = "error"
                    ch_current_value_state["text"] = "error"
                    ch_ntc_temperature_value_state["text"] = "error"
                    ch_sensor_temperature_value_state["text"] = "error"
                    ch_electric_value_state["text"] = "error"
                    # ch_electric_all_value_state["text"] = "error"
        elif face_name == "ch6_2_data" and num == 0:
            global ch6_2_data

            while face_name == "ch6_2_data" and num == 0:
                time.sleep(1)
                if ch6_2_data[2] == "充电状态":
                    ch_state_value_state["text"] = ch6_2_data[2]
                    ch_voltage_value_state["text"] = ch6_2_data[3]
                    ch_current_value_state["text"] = ch6_2_data[4]
                    ch_ntc_temperature_value_state["text"] = ch6_2_data[5]
                    ch_sensor_temperature_value_state["text"] = ch6_2_data[6]
                    ch_electric_value_state["text"] = ch6_2_data[7]
                    # ch_electric_all_value_state["text"] = ch6_2_data[9]
                elif ch6_2_data[2] == "放电状态":
                    ch_state_value_state["text"] = ch6_2_data[2]
                    ch_voltage_value_state["text"] = ch6_2_data[3]
                    ch_current_value_state["text"] = ch6_2_data[4]
                    ch_ntc_temperature_value_state["text"] = ch6_2_data[5]
                    ch_sensor_temperature_value_state["text"] = ch6_2_data[6]
                    ch_electric_value_state["text"] = ch6_2_data[7]
                    # ch_electric_all_value_state["text"] = ch6_2_data[8]
                else:
                    ch_state_value_state["text"] = ch6_2_data[2]
                    ch_voltage_value_state["text"] = "error"
                    ch_current_value_state["text"] = "error"
                    ch_ntc_temperature_value_state["text"] = "error"
                    ch_sensor_temperature_value_state["text"] = "error"
                    ch_electric_value_state["text"] = "error"
                    # ch_electric_all_value_state["text"] = "error"
        elif face_name == "ch6_3_data" and num == 0:
            global ch6_3_data

            while face_name == "ch6_3_data" and num == 0:
                time.sleep(1)
                if ch6_3_data[2] == "充电状态":
                    ch_state_value_state["text"] = ch6_3_data[2]
                    ch_voltage_value_state["text"] = ch6_3_data[3]
                    ch_current_value_state["text"] = ch6_3_data[4]
                    ch_ntc_temperature_value_state["text"] = ch6_3_data[5]
                    ch_sensor_temperature_value_state["text"] = ch6_3_data[6]
                    ch_electric_value_state["text"] = ch6_3_data[7]
                    # ch_electric_all_value_state["text"] = ch6_3_data[9]
                elif ch6_3_data[2] == "放电状态":
                    ch_state_value_state["text"] = ch6_3_data[2]
                    ch_voltage_value_state["text"] = ch6_3_data[3]
                    ch_current_value_state["text"] = ch6_3_data[4]
                    ch_ntc_temperature_value_state["text"] = ch6_3_data[5]
                    ch_sensor_temperature_value_state["text"] = ch6_3_data[6]
                    ch_electric_value_state["text"] = ch6_3_data[7]
                    # ch_electric_all_value_state["text"] = ch6_3_data[8]
                else:
                    ch_state_value_state["text"] = ch6_3_data[2]
                    ch_voltage_value_state["text"] = "error"
                    ch_current_value_state["text"] = "error"
                    ch_ntc_temperature_value_state["text"] = "error"
                    ch_sensor_temperature_value_state["text"] = "error"
                    ch_electric_value_state["text"] = "error"
                    # ch_electric_all_value_state["text"] = "error"
        elif face_name == "ch6_4_data" and num == 0:
            global ch6_4_data

            while face_name == "ch6_4_data" and num == 0:
                time.sleep(1)
                if ch6_4_data[2] == "充电状态":
                    ch_state_value_state["text"] = ch6_4_data[2]
                    ch_voltage_value_state["text"] = ch6_4_data[3]
                    ch_current_value_state["text"] = ch6_4_data[4]
                    ch_ntc_temperature_value_state["text"] = ch6_4_data[5]
                    ch_sensor_temperature_value_state["text"] = ch6_4_data[6]
                    ch_electric_value_state["text"] = ch6_4_data[7]
                    # ch_electric_all_value_state["text"] = ch6_4_data[9]
                elif ch6_4_data[2] == "放电状态":
                    ch_state_value_state["text"] = ch6_4_data[2]
                    ch_voltage_value_state["text"] = ch6_4_data[3]
                    ch_current_value_state["text"] = ch6_4_data[4]
                    ch_ntc_temperature_value_state["text"] = ch6_4_data[5]
                    ch_sensor_temperature_value_state["text"] = ch6_4_data[6]
                    ch_electric_value_state["text"] = ch6_4_data[7]
                    # ch_electric_all_value_state["text"] = ch6_4_data[8]
                else:
                    ch_state_value_state["text"] = ch6_4_data[2]
                    ch_voltage_value_state["text"] = "error"
                    ch_current_value_state["text"] = "error"
                    ch_ntc_temperature_value_state["text"] = "error"
                    ch_sensor_temperature_value_state["text"] = "error"
                    ch_electric_value_state["text"] = "error"
                    # ch_electric_all_value_state["text"] = "error"
        elif face_name == "ch6_5_data" and num == 0:
            global ch6_5_data

            while face_name == "ch6_5_data" and num == 0:
                time.sleep(1)
                if ch6_5_data[2] == "充电状态":
                    ch_state_value_state["text"] = ch6_5_data[2]
                    ch_voltage_value_state["text"] = ch6_5_data[3]
                    ch_current_value_state["text"] = ch6_5_data[4]
                    ch_ntc_temperature_value_state["text"] = ch6_5_data[5]
                    ch_sensor_temperature_value_state["text"] = ch6_5_data[6]
                    ch_electric_value_state["text"] = ch6_5_data[7]
                    # ch_electric_all_value_state["text"] = ch6_5_data[9]
                elif ch6_5_data[2] == "放电状态":
                    ch_state_value_state["text"] = ch6_5_data[2]
                    ch_voltage_value_state["text"] = ch6_5_data[3]
                    ch_current_value_state["text"] = ch6_5_data[4]
                    ch_ntc_temperature_value_state["text"] = ch6_5_data[5]
                    ch_sensor_temperature_value_state["text"] = ch6_5_data[6]
                    ch_electric_value_state["text"] = ch6_5_data[7]
                    # ch_electric_all_value_state["text"] = ch6_5_data[8]
                else:
                    ch_state_value_state["text"] = ch6_5_data[2]
                    ch_voltage_value_state["text"] = "error"
                    ch_current_value_state["text"] = "error"
                    ch_ntc_temperature_value_state["text"] = "error"
                    ch_sensor_temperature_value_state["text"] = "error"
                    ch_electric_value_state["text"] = "error"
                    # ch_electric_all_value_state["text"] = "error"
        elif face_name == "ch6_6_data" and num == 0:
            global ch6_6_data

            while face_name == "ch6_6_data" and num == 0:
                time.sleep(1)
                if ch6_6_data[2] == "充电状态":
                    ch_state_value_state["text"] = ch6_6_data[2]
                    ch_voltage_value_state["text"] = ch6_6_data[3]
                    ch_current_value_state["text"] = ch6_6_data[4]
                    ch_ntc_temperature_value_state["text"] = ch6_6_data[5]
                    ch_sensor_temperature_value_state["text"] = ch6_6_data[6]
                    ch_electric_value_state["text"] = ch6_6_data[7]
                    # ch_electric_all_value_state["text"] = ch6_6_data[9]
                elif ch6_6_data[2] == "放电状态":
                    ch_state_value_state["text"] = ch6_6_data[2]
                    ch_voltage_value_state["text"] = ch6_6_data[3]
                    ch_current_value_state["text"] = ch6_6_data[4]
                    ch_ntc_temperature_value_state["text"] = ch6_6_data[5]
                    ch_sensor_temperature_value_state["text"] = ch6_6_data[6]
                    ch_electric_value_state["text"] = ch6_6_data[7]
                    # ch_electric_all_value_state["text"] = ch6_6_data[8]
                else:
                    ch_state_value_state["text"] = ch6_6_data[2]
                    ch_voltage_value_state["text"] = "error"
                    ch_current_value_state["text"] = "error"
                    ch_ntc_temperature_value_state["text"] = "error"
                    ch_sensor_temperature_value_state["text"] = "error"
                    ch_electric_value_state["text"] = "error"
                    # ch_electric_all_value_state["text"] = "error"
        elif face_name == "ch6_7_data" and num == 0:
            global ch6_7_data

            while face_name == "ch6_7_data" and num == 0:
                time.sleep(1)
                if ch6_7_data[2] == "充电状态":
                    ch_state_value_state["text"] = ch6_7_data[2]
                    ch_voltage_value_state["text"] = ch6_7_data[3]
                    ch_current_value_state["text"] = ch6_7_data[4]
                    ch_ntc_temperature_value_state["text"] = ch6_7_data[5]
                    ch_sensor_temperature_value_state["text"] = ch6_7_data[6]
                    ch_electric_value_state["text"] = ch6_7_data[7]
                    # ch_electric_all_value_state["text"] = ch6_7_data[9]
                elif ch6_7_data[2] == "放电状态":
                    ch_state_value_state["text"] = ch6_7_data[2]
                    ch_voltage_value_state["text"] = ch6_7_data[3]
                    ch_current_value_state["text"] = ch6_7_data[4]
                    ch_ntc_temperature_value_state["text"] = ch6_7_data[5]
                    ch_sensor_temperature_value_state["text"] = ch6_7_data[6]
                    ch_electric_value_state["text"] = ch6_7_data[7]
                    # ch_electric_all_value_state["text"] = ch6_7_data[8]
                else:
                    ch_state_value_state["text"] = ch6_7_data[2]
                    ch_voltage_value_state["text"] = "error"
                    ch_current_value_state["text"] = "error"
                    ch_ntc_temperature_value_state["text"] = "error"
                    ch_sensor_temperature_value_state["text"] = "error"
                    ch_electric_value_state["text"] = "error"
                    # ch_electric_all_value_state["text"] = "error"
        elif face_name == "ch6_8_data" and num == 0:
            global ch6_8_data

            while face_name == "ch6_8_data" and num == 0:
                time.sleep(1)
                if ch6_8_data[2] == "充电状态":
                    ch_state_value_state["text"] = ch6_8_data[2]
                    ch_voltage_value_state["text"] = ch6_8_data[3]
                    ch_current_value_state["text"] = ch6_8_data[4]
                    ch_ntc_temperature_value_state["text"] = ch6_8_data[5]
                    ch_sensor_temperature_value_state["text"] = ch6_8_data[6]
                    ch_electric_value_state["text"] = ch6_8_data[7]
                    # ch_electric_all_value_state["text"] = ch6_8_data[9]
                elif ch6_8_data[2] == "放电状态":
                    ch_state_value_state["text"] = ch6_8_data[2]
                    ch_voltage_value_state["text"] = ch6_8_data[3]
                    ch_current_value_state["text"] = ch6_8_data[4]
                    ch_ntc_temperature_value_state["text"] = ch6_8_data[5]
                    ch_sensor_temperature_value_state["text"] = ch6_8_data[6]
                    ch_electric_value_state["text"] = ch6_8_data[7]
                    # ch_electric_all_value_state["text"] = ch6_8_data[8]
                else:
                    ch_state_value_state["text"] = ch6_8_data[2]
                    ch_voltage_value_state["text"] = "error"
                    ch_current_value_state["text"] = "error"
                    ch_ntc_temperature_value_state["text"] = "error"
                    ch_sensor_temperature_value_state["text"] = "error"
                    ch_electric_value_state["text"] = "error"
                    # ch_electric_all_value_state["text"] = "error"
        if face_name == "ch7_1_data" and num == 0:
            global ch7_1_data

            while face_name == "ch7_1_data" and num == 0:
                time.sleep(1)
                if ch7_1_data[2] == "充电状态":
                    ch_state_value_state["text"] = ch7_1_data[2]
                    ch_voltage_value_state["text"] = ch7_1_data[3]
                    ch_current_value_state["text"] = ch7_1_data[4]
                    ch_ntc_temperature_value_state["text"] = ch7_1_data[5]
                    ch_sensor_temperature_value_state["text"] = ch7_1_data[6]
                    ch_electric_value_state["text"] = ch7_1_data[7]
                    # ch_electric_all_value_state["text"] = ch7_1_data[9]
                elif ch7_1_data[2] == "放电状态":
                    ch_state_value_state["text"] = ch7_1_data[2]
                    ch_voltage_value_state["text"] = ch7_1_data[3]
                    ch_current_value_state["text"] = ch7_1_data[4]
                    ch_ntc_temperature_value_state["text"] = ch7_1_data[5]
                    ch_sensor_temperature_value_state["text"] = ch7_1_data[6]
                    ch_electric_value_state["text"] = ch7_1_data[7]
                    # ch_electric_all_value_state["text"] = ch7_1_data[8]
                else:
                    ch_state_value_state["text"] = ch7_1_data[2]
                    ch_voltage_value_state["text"] = "error"
                    ch_current_value_state["text"] = "error"
                    ch_ntc_temperature_value_state["text"] = "error"
                    ch_sensor_temperature_value_state["text"] = "error"
                    ch_electric_value_state["text"] = "error"
                    # ch_electric_all_value_state["text"] = "error"
        elif face_name == "ch7_2_data" and num == 0:
            global ch7_2_data

            while face_name == "ch7_2_data" and num == 0:
                time.sleep(1)
                if ch7_2_data[2] == "充电状态":
                    ch_state_value_state["text"] = ch7_2_data[2]
                    ch_voltage_value_state["text"] = ch7_2_data[3]
                    ch_current_value_state["text"] = ch7_2_data[4]
                    ch_ntc_temperature_value_state["text"] = ch7_2_data[5]
                    ch_sensor_temperature_value_state["text"] = ch7_2_data[6]
                    ch_electric_value_state["text"] = ch7_2_data[7]
                    # ch_electric_all_value_state["text"] = ch7_2_data[9]
                elif ch7_2_data[2] == "放电状态":
                    ch_state_value_state["text"] = ch7_2_data[2]
                    ch_voltage_value_state["text"] = ch7_2_data[3]
                    ch_current_value_state["text"] = ch7_2_data[4]
                    ch_ntc_temperature_value_state["text"] = ch7_2_data[5]
                    ch_sensor_temperature_value_state["text"] = ch7_2_data[6]
                    ch_electric_value_state["text"] = ch7_2_data[7]
                    # ch_electric_all_value_state["text"] = ch7_2_data[8]
                else:
                    ch_state_value_state["text"] = ch7_2_data[2]
                    ch_voltage_value_state["text"] = "error"
                    ch_current_value_state["text"] = "error"
                    ch_ntc_temperature_value_state["text"] = "error"
                    ch_sensor_temperature_value_state["text"] = "error"
                    ch_electric_value_state["text"] = "error"
                    # ch_electric_all_value_state["text"] = "error"
        elif face_name == "ch7_3_data" and num == 0:
            global ch7_3_data

            while face_name == "ch7_3_data" and num == 0:
                time.sleep(1)
                if ch7_3_data[2] == "充电状态":
                    ch_state_value_state["text"] = ch7_3_data[2]
                    ch_voltage_value_state["text"] = ch7_3_data[3]
                    ch_current_value_state["text"] = ch7_3_data[4]
                    ch_ntc_temperature_value_state["text"] = ch7_3_data[5]
                    ch_sensor_temperature_value_state["text"] = ch7_3_data[6]
                    ch_electric_value_state["text"] = ch7_3_data[7]
                    # ch_electric_all_value_state["text"] = ch7_3_data[9]
                elif ch7_3_data[2] == "放电状态":
                    ch_state_value_state["text"] = ch7_3_data[2]
                    ch_voltage_value_state["text"] = ch7_3_data[3]
                    ch_current_value_state["text"] = ch7_3_data[4]
                    ch_ntc_temperature_value_state["text"] = ch7_3_data[5]
                    ch_sensor_temperature_value_state["text"] = ch7_3_data[6]
                    ch_electric_value_state["text"] = ch7_3_data[7]
                    # ch_electric_all_value_state["text"] = ch7_3_data[8]
                else:
                    ch_state_value_state["text"] = ch7_3_data[2]
                    ch_voltage_value_state["text"] = "error"
                    ch_current_value_state["text"] = "error"
                    ch_ntc_temperature_value_state["text"] = "error"
                    ch_sensor_temperature_value_state["text"] = "error"
                    ch_electric_value_state["text"] = "error"
                    # ch_electric_all_value_state["text"] = "error"
        elif face_name == "ch7_4_data" and num == 0:
            global ch7_4_data

            while face_name == "ch7_4_data" and num == 0:
                time.sleep(1)
                if ch7_4_data[2] == "充电状态":
                    ch_state_value_state["text"] = ch7_4_data[2]
                    ch_voltage_value_state["text"] = ch7_4_data[3]
                    ch_current_value_state["text"] = ch7_4_data[4]
                    ch_ntc_temperature_value_state["text"] = ch7_4_data[5]
                    ch_sensor_temperature_value_state["text"] = ch7_4_data[6]
                    ch_electric_value_state["text"] = ch7_4_data[7]
                    # ch_electric_all_value_state["text"] = ch7_4_data[9]
                elif ch7_4_data[2] == "放电状态":
                    ch_state_value_state["text"] = ch7_4_data[2]
                    ch_voltage_value_state["text"] = ch7_4_data[3]
                    ch_current_value_state["text"] = ch7_4_data[4]
                    ch_ntc_temperature_value_state["text"] = ch7_4_data[5]
                    ch_sensor_temperature_value_state["text"] = ch7_4_data[6]
                    ch_electric_value_state["text"] = ch7_4_data[7]
                    # ch_electric_all_value_state["text"] = ch7_4_data[8]
                else:
                    ch_state_value_state["text"] = ch7_4_data[2]
                    ch_voltage_value_state["text"] = "error"
                    ch_current_value_state["text"] = "error"
                    ch_ntc_temperature_value_state["text"] = "error"
                    ch_sensor_temperature_value_state["text"] = "error"
                    ch_electric_value_state["text"] = "error"
                    # ch_electric_all_value_state["text"] = "error"
        elif face_name == "ch7_5_data" and num == 0:
            global ch7_5_data

            while face_name == "ch7_5_data" and num == 0:
                time.sleep(1)
                if ch7_5_data[2] == "充电状态":
                    ch_state_value_state["text"] = ch7_5_data[2]
                    ch_voltage_value_state["text"] = ch7_5_data[3]
                    ch_current_value_state["text"] = ch7_5_data[4]
                    ch_ntc_temperature_value_state["text"] = ch7_5_data[5]
                    ch_sensor_temperature_value_state["text"] = ch7_5_data[6]
                    ch_electric_value_state["text"] = ch7_5_data[7]
                    # ch_electric_all_value_state["text"] = ch7_5_data[9]
                elif ch7_5_data[2] == "放电状态":
                    ch_state_value_state["text"] = ch7_5_data[2]
                    ch_voltage_value_state["text"] = ch7_5_data[3]
                    ch_current_value_state["text"] = ch7_5_data[4]
                    ch_ntc_temperature_value_state["text"] = ch7_5_data[5]
                    ch_sensor_temperature_value_state["text"] = ch7_5_data[6]
                    ch_electric_value_state["text"] = ch7_5_data[7]
                    # ch_electric_all_value_state["text"] = ch7_5_data[8]
                else:
                    ch_state_value_state["text"] = ch7_5_data[2]
                    ch_voltage_value_state["text"] = "error"
                    ch_current_value_state["text"] = "error"
                    ch_ntc_temperature_value_state["text"] = "error"
                    ch_sensor_temperature_value_state["text"] = "error"
                    ch_electric_value_state["text"] = "error"
                    # ch_electric_all_value_state["text"] = "error"
        elif face_name == "ch7_6_data" and num == 0:
            global ch7_6_data

            while face_name == "ch7_6_data" and num == 0:
                time.sleep(1)
                if ch7_6_data[2] == "充电状态":
                    ch_state_value_state["text"] = ch7_6_data[2]
                    ch_voltage_value_state["text"] = ch7_6_data[3]
                    ch_current_value_state["text"] = ch7_6_data[4]
                    ch_ntc_temperature_value_state["text"] = ch7_6_data[5]
                    ch_sensor_temperature_value_state["text"] = ch7_6_data[6]
                    ch_electric_value_state["text"] = ch7_6_data[7]
                    # ch_electric_all_value_state["text"] = ch7_6_data[9]
                elif ch7_6_data[2] == "放电状态":
                    ch_state_value_state["text"] = ch7_6_data[2]
                    ch_voltage_value_state["text"] = ch7_6_data[3]
                    ch_current_value_state["text"] = ch7_6_data[4]
                    ch_ntc_temperature_value_state["text"] = ch7_6_data[5]
                    ch_sensor_temperature_value_state["text"] = ch7_6_data[6]
                    ch_electric_value_state["text"] = ch7_6_data[7]
                    # ch_electric_all_value_state["text"] = ch7_6_data[8]
                else:
                    ch_state_value_state["text"] = ch7_6_data[2]
                    ch_voltage_value_state["text"] = "error"
                    ch_current_value_state["text"] = "error"
                    ch_ntc_temperature_value_state["text"] = "error"
                    ch_sensor_temperature_value_state["text"] = "error"
                    ch_electric_value_state["text"] = "error"
                    # ch_electric_all_value_state["text"] = "error"
        elif face_name == "ch7_7_data" and num == 0:
            global ch7_7_data

            while face_name == "ch7_7_data" and num == 0:
                time.sleep(1)
                if ch7_7_data[2] == "充电状态":
                    ch_state_value_state["text"] = ch7_7_data[2]
                    ch_voltage_value_state["text"] = ch7_7_data[3]
                    ch_current_value_state["text"] = ch7_7_data[4]
                    ch_ntc_temperature_value_state["text"] = ch7_7_data[5]
                    ch_sensor_temperature_value_state["text"] = ch7_7_data[6]
                    ch_electric_value_state["text"] = ch7_7_data[7]
                    # ch_electric_all_value_state["text"] = ch7_7_data[9]
                elif ch7_7_data[2] == "放电状态":
                    ch_state_value_state["text"] = ch7_7_data[2]
                    ch_voltage_value_state["text"] = ch7_7_data[3]
                    ch_current_value_state["text"] = ch7_7_data[4]
                    ch_ntc_temperature_value_state["text"] = ch7_7_data[5]
                    ch_sensor_temperature_value_state["text"] = ch7_7_data[6]
                    ch_electric_value_state["text"] = ch7_7_data[7]
                    # ch_electric_all_value_state["text"] = ch7_7_data[8]
                else:
                    ch_state_value_state["text"] = ch7_7_data[2]
                    ch_voltage_value_state["text"] = "error"
                    ch_current_value_state["text"] = "error"
                    ch_ntc_temperature_value_state["text"] = "error"
                    ch_sensor_temperature_value_state["text"] = "error"
                    ch_electric_value_state["text"] = "error"
                    # ch_electric_all_value_state["text"] = "error"
        elif face_name == "ch7_8_data" and num == 0:
            global ch7_8_data

            while face_name == "ch7_8_data" and num == 0:
                time.sleep(1)
                if ch7_8_data[2] == "充电状态":
                    ch_state_value_state["text"] = ch7_8_data[2]
                    ch_voltage_value_state["text"] = ch7_8_data[3]
                    ch_current_value_state["text"] = ch7_8_data[4]
                    ch_ntc_temperature_value_state["text"] = ch7_8_data[5]
                    ch_sensor_temperature_value_state["text"] = ch7_8_data[6]
                    ch_electric_value_state["text"] = ch7_8_data[7]
                    # ch_electric_all_value_state["text"] = ch7_8_data[9]
                elif ch7_8_data[2] == "放电状态":
                    ch_state_value_state["text"] = ch7_8_data[2]
                    ch_voltage_value_state["text"] = ch7_8_data[3]
                    ch_current_value_state["text"] = ch7_8_data[4]
                    ch_ntc_temperature_value_state["text"] = ch7_8_data[5]
                    ch_sensor_temperature_value_state["text"] = ch7_8_data[6]
                    ch_electric_value_state["text"] = ch7_8_data[7]
                    # ch_electric_all_value_state["text"] = ch7_8_data[8]
                else:
                    ch_state_value_state["text"] = ch7_8_data[2]
                    ch_voltage_value_state["text"] = "error"
                    ch_current_value_state["text"] = "error"
                    ch_ntc_temperature_value_state["text"] = "error"
                    ch_sensor_temperature_value_state["text"] = "error"
                    ch_electric_value_state["text"] = "error"
                    # ch_electric_all_value_state["text"] = "error"
        if face_name == "ch8_1_data" and num == 0:
            global ch8_1_data

            while face_name == "ch8_1_data" and num == 0:
                time.sleep(1)
                if ch8_1_data[2] == "充电状态":
                    ch_state_value_state["text"] = ch8_1_data[2]
                    ch_voltage_value_state["text"] = ch8_1_data[3]
                    ch_current_value_state["text"] = ch8_1_data[4]
                    ch_ntc_temperature_value_state["text"] = ch8_1_data[5]
                    ch_sensor_temperature_value_state["text"] = ch8_1_data[6]
                    ch_electric_value_state["text"] = ch8_1_data[7]
                    # ch_electric_all_value_state["text"] = ch8_1_data[9]
                elif ch8_1_data[2] == "放电状态":
                    ch_state_value_state["text"] = ch8_1_data[2]
                    ch_voltage_value_state["text"] = ch8_1_data[3]
                    ch_current_value_state["text"] = ch8_1_data[4]
                    ch_ntc_temperature_value_state["text"] = ch8_1_data[5]
                    ch_sensor_temperature_value_state["text"] = ch8_1_data[6]
                    ch_electric_value_state["text"] = ch8_1_data[7]
                    # ch_electric_all_value_state["text"] = ch8_1_data[8]
                else:
                    ch_state_value_state["text"] = ch8_1_data[2]
                    ch_voltage_value_state["text"] = "error"
                    ch_current_value_state["text"] = "error"
                    ch_ntc_temperature_value_state["text"] = "error"
                    ch_sensor_temperature_value_state["text"] = "error"
                    ch_electric_value_state["text"] = "error"
                    # ch_electric_all_value_state["text"] = "error"
        elif face_name == "ch8_2_data" and num == 0:
            global ch8_2_data

            while face_name == "ch8_2_data" and num == 0:
                time.sleep(1)
                if ch8_2_data[2] == "充电状态":
                    ch_state_value_state["text"] = ch8_2_data[2]
                    ch_voltage_value_state["text"] = ch8_2_data[3]
                    ch_current_value_state["text"] = ch8_2_data[4]
                    ch_ntc_temperature_value_state["text"] = ch8_2_data[5]
                    ch_sensor_temperature_value_state["text"] = ch8_2_data[6]
                    ch_electric_value_state["text"] = ch8_2_data[7]
                    # ch_electric_all_value_state["text"] = ch8_2_data[9]
                elif ch8_2_data[2] == "放电状态":
                    ch_state_value_state["text"] = ch8_2_data[2]
                    ch_voltage_value_state["text"] = ch8_2_data[3]
                    ch_current_value_state["text"] = ch8_2_data[4]
                    ch_ntc_temperature_value_state["text"] = ch8_2_data[5]
                    ch_sensor_temperature_value_state["text"] = ch8_2_data[6]
                    ch_electric_value_state["text"] = ch8_2_data[7]
                    # ch_electric_all_value_state["text"] = ch8_2_data[8]
                else:
                    ch_state_value_state["text"] = ch8_2_data[2]
                    ch_voltage_value_state["text"] = "error"
                    ch_current_value_state["text"] = "error"
                    ch_ntc_temperature_value_state["text"] = "error"
                    ch_sensor_temperature_value_state["text"] = "error"
                    ch_electric_value_state["text"] = "error"
                    # ch_electric_all_value_state["text"] = "error"
        elif face_name == "ch8_3_data" and num == 0:
            global ch8_3_data

            while face_name == "ch8_3_data" and num == 0:
                time.sleep(1)
                if ch8_3_data[2] == "充电状态":
                    ch_state_value_state["text"] = ch8_3_data[2]
                    ch_voltage_value_state["text"] = ch8_3_data[3]
                    ch_current_value_state["text"] = ch8_3_data[4]
                    ch_ntc_temperature_value_state["text"] = ch8_3_data[5]
                    ch_sensor_temperature_value_state["text"] = ch8_3_data[6]
                    ch_electric_value_state["text"] = ch8_3_data[7]
                    # ch_electric_all_value_state["text"] = ch8_3_data[9]
                elif ch8_3_data[2] == "放电状态":
                    ch_state_value_state["text"] = ch8_3_data[2]
                    ch_voltage_value_state["text"] = ch8_3_data[3]
                    ch_current_value_state["text"] = ch8_3_data[4]
                    ch_ntc_temperature_value_state["text"] = ch8_3_data[5]
                    ch_sensor_temperature_value_state["text"] = ch8_3_data[6]
                    ch_electric_value_state["text"] = ch8_3_data[7]
                    # ch_electric_all_value_state["text"] = ch8_3_data[8]
                else:
                    ch_state_value_state["text"] = ch8_3_data[2]
                    ch_voltage_value_state["text"] = "error"
                    ch_current_value_state["text"] = "error"
                    ch_ntc_temperature_value_state["text"] = "error"
                    ch_sensor_temperature_value_state["text"] = "error"
                    ch_electric_value_state["text"] = "error"
                    # ch_electric_all_value_state["text"] = "error"
        elif face_name == "ch8_4_data" and num == 0:
            global ch8_4_data

            while face_name == "ch8_4_data" and num == 0:
                time.sleep(1)
                if ch8_4_data[2] == "充电状态":
                    ch_state_value_state["text"] = ch8_4_data[2]
                    ch_voltage_value_state["text"] = ch8_4_data[3]
                    ch_current_value_state["text"] = ch8_4_data[4]
                    ch_ntc_temperature_value_state["text"] = ch8_4_data[5]
                    ch_sensor_temperature_value_state["text"] = ch8_4_data[6]
                    ch_electric_value_state["text"] = ch8_4_data[7]
                    # ch_electric_all_value_state["text"] = ch8_4_data[9]
                elif ch8_4_data[2] == "放电状态":
                    ch_state_value_state["text"] = ch8_4_data[2]
                    ch_voltage_value_state["text"] = ch8_4_data[3]
                    ch_current_value_state["text"] = ch8_4_data[4]
                    ch_ntc_temperature_value_state["text"] = ch8_4_data[5]
                    ch_sensor_temperature_value_state["text"] = ch8_4_data[6]
                    ch_electric_value_state["text"] = ch8_4_data[7]
                    # ch_electric_all_value_state["text"] = ch8_4_data[8]
                else:
                    ch_state_value_state["text"] = ch8_4_data[2]
                    ch_voltage_value_state["text"] = "error"
                    ch_current_value_state["text"] = "error"
                    ch_ntc_temperature_value_state["text"] = "error"
                    ch_sensor_temperature_value_state["text"] = "error"
                    ch_electric_value_state["text"] = "error"
                    # ch_electric_all_value_state["text"] = "error"
        elif face_name == "ch8_5_data" and num == 0:
            global ch8_5_data

            while face_name == "ch8_5_data" and num == 0:
                time.sleep(1)
                if ch8_5_data[2] == "充电状态":
                    ch_state_value_state["text"] = ch8_5_data[2]
                    ch_voltage_value_state["text"] = ch8_5_data[3]
                    ch_current_value_state["text"] = ch8_5_data[4]
                    ch_ntc_temperature_value_state["text"] = ch8_5_data[5]
                    ch_sensor_temperature_value_state["text"] = ch8_5_data[6]
                    ch_electric_value_state["text"] = ch8_5_data[7]
                    # ch_electric_all_value_state["text"] = ch8_5_data[9]
                elif ch8_5_data[2] == "放电状态":
                    ch_state_value_state["text"] = ch8_5_data[2]
                    ch_voltage_value_state["text"] = ch8_5_data[3]
                    ch_current_value_state["text"] = ch8_5_data[4]
                    ch_ntc_temperature_value_state["text"] = ch8_5_data[5]
                    ch_sensor_temperature_value_state["text"] = ch8_5_data[6]
                    ch_electric_value_state["text"] = ch8_5_data[7]
                    # ch_electric_all_value_state["text"] = ch8_5_data[8]
                else:
                    ch_state_value_state["text"] = ch8_5_data[2]
                    ch_voltage_value_state["text"] = "error"
                    ch_current_value_state["text"] = "error"
                    ch_ntc_temperature_value_state["text"] = "error"
                    ch_sensor_temperature_value_state["text"] = "error"
                    ch_electric_value_state["text"] = "error"
                    # ch_electric_all_value_state["text"] = "error"
        elif face_name == "ch8_6_data" and num == 0:
            global ch8_6_data

            while face_name == "ch8_6_data" and num == 0:
                time.sleep(1)
                if ch8_6_data[2] == "充电状态":
                    ch_state_value_state["text"] = ch8_6_data[2]
                    ch_voltage_value_state["text"] = ch8_6_data[3]
                    ch_current_value_state["text"] = ch8_6_data[4]
                    ch_ntc_temperature_value_state["text"] = ch8_6_data[5]
                    ch_sensor_temperature_value_state["text"] = ch8_6_data[6]
                    ch_electric_value_state["text"] = ch8_6_data[7]
                    # ch_electric_all_value_state["text"] = ch8_6_data[9]
                elif ch8_6_data[2] == "放电状态":
                    ch_state_value_state["text"] = ch8_6_data[2]
                    ch_voltage_value_state["text"] = ch8_6_data[3]
                    ch_current_value_state["text"] = ch8_6_data[4]
                    ch_ntc_temperature_value_state["text"] = ch8_6_data[5]
                    ch_sensor_temperature_value_state["text"] = ch8_6_data[6]
                    ch_electric_value_state["text"] = ch8_6_data[7]
                    # ch_electric_all_value_state["text"] = ch8_6_data[8]
                else:
                    ch_state_value_state["text"] = ch8_6_data[2]
                    ch_voltage_value_state["text"] = "error"
                    ch_current_value_state["text"] = "error"
                    ch_ntc_temperature_value_state["text"] = "error"
                    ch_sensor_temperature_value_state["text"] = "error"
                    ch_electric_value_state["text"] = "error"
                    # ch_electric_all_value_state["text"] = "error"
        elif face_name == "ch8_7_data" and num == 0:
            global ch8_7_data

            while face_name == "ch8_7_data" and num == 0:
                time.sleep(1)
                if ch8_7_data[2] == "充电状态":
                    ch_state_value_state["text"] = ch8_7_data[2]
                    ch_voltage_value_state["text"] = ch8_7_data[3]
                    ch_current_value_state["text"] = ch8_7_data[4]
                    ch_ntc_temperature_value_state["text"] = ch8_7_data[5]
                    ch_sensor_temperature_value_state["text"] = ch8_7_data[6]
                    ch_electric_value_state["text"] = ch8_7_data[7]
                    # ch_electric_all_value_state["text"] = ch8_7_data[9]
                elif ch8_7_data[2] == "放电状态":
                    ch_state_value_state["text"] = ch8_7_data[2]
                    ch_voltage_value_state["text"] = ch8_7_data[3]
                    ch_current_value_state["text"] = ch8_7_data[4]
                    ch_ntc_temperature_value_state["text"] = ch8_7_data[5]
                    ch_sensor_temperature_value_state["text"] = ch8_7_data[6]
                    ch_electric_value_state["text"] = ch8_7_data[7]
                    # ch_electric_all_value_state["text"] = ch8_7_data[8]
                else:
                    ch_state_value_state["text"] = ch8_7_data[2]
                    ch_voltage_value_state["text"] = "error"
                    ch_current_value_state["text"] = "error"
                    ch_ntc_temperature_value_state["text"] = "error"
                    ch_sensor_temperature_value_state["text"] = "error"
                    ch_electric_value_state["text"] = "error"
                    # ch_electric_all_value_state["text"] = "error"
        elif face_name == "ch8_8_data" and num == 0:
            global ch8_8_data

            while face_name == "ch8_8_data" and num == 0:
                time.sleep(1)
                if ch8_8_data[2] == "充电状态":
                    ch_state_value_state["text"] = ch8_8_data[2]
                    ch_voltage_value_state["text"] = ch8_8_data[3]
                    ch_current_value_state["text"] = ch8_8_data[4]
                    ch_ntc_temperature_value_state["text"] = ch8_8_data[5]
                    ch_sensor_temperature_value_state["text"] = ch8_8_data[6]
                    ch_electric_value_state["text"] = ch8_8_data[7]
                    # ch_electric_all_value_state["text"] = ch8_8_data[9]
                elif ch8_8_data[2] == "放电状态":
                    ch_state_value_state["text"] = ch8_8_data[2]
                    ch_voltage_value_state["text"] = ch8_8_data[3]
                    ch_current_value_state["text"] = ch8_8_data[4]
                    ch_ntc_temperature_value_state["text"] = ch8_8_data[5]
                    ch_sensor_temperature_value_state["text"] = ch8_8_data[6]
                    ch_electric_value_state["text"] = ch8_8_data[7]
                    # ch_electric_all_value_state["text"] = ch8_8_data[8]
                else:
                    ch_state_value_state["text"] = ch8_8_data[2]
                    ch_voltage_value_state["text"] = "error"
                    ch_current_value_state["text"] = "error"
                    ch_ntc_temperature_value_state["text"] = "error"
                    ch_sensor_temperature_value_state["text"] = "error"
                    ch_electric_value_state["text"] = "error"
                    # ch_electric_all_value_state["text"] = "error"

        else:
            continue


def ch1_1_start_test():
    ch1_1_start_value = threading.Thread(target=ch1_1_confirm, args=("ch1_1",))
    try:
        ch1_1_start_value.start()
    except Exception:
        print("Error Start threading")


def ch1_2_start_test():
    ch1_2_start_value = threading.Thread(target=ch1_2_confirm, args=("ch1_2",))
    try:
        ch1_2_start_value.start()
    except Exception:
        print("Error Start threading")


def ch1_3_start_test():
    ch1_3_start_value = threading.Thread(target=ch1_3_confirm, args=("ch1_3",))
    try:
        ch1_3_start_value.start()
    except Exception:
        print("Error Start threading")


def ch1_4_start_test():
    ch1_4_start_value = threading.Thread(target=ch1_4_confirm, args=("ch1_4",))
    try:
        ch1_4_start_value.start()
    except Exception:
        print("Error Start threading")


def ch1_5_start_test():
    ch1_5_start_value = threading.Thread(target=ch1_5_confirm, args=("ch1_5",))
    try:
        ch1_5_start_value.start()
    except Exception:
        print("Error Start threading")


def ch1_6_start_test():
    ch1_6_start_value = threading.Thread(target=ch1_6_confirm, args=("ch1_6",))
    try:
        ch1_6_start_value.start()
    except Exception:
        print("Error Start threading")


def ch1_7_start_test():
    ch1_7_start_value = threading.Thread(target=ch1_7_confirm, args=("ch1_7",))
    try:
        ch1_7_start_value.start()
    except Exception:
        print("Error Start threading")


def ch1_8_start_test():
    ch1_8_start_value = threading.Thread(target=ch1_8_confirm, args=("ch1_8",))
    try:
        ch1_8_start_value.start()
    except Exception:
        print("Error Start threading")


def ch2_1_start_test():
    ch2_1_start_value = threading.Thread(target=ch2_1_confirm, args=("ch2_1",))
    try:
        ch2_1_start_value.start()
    except Exception:
        print("Error Start threading")


def ch2_2_start_test():
    ch2_2_start_value = threading.Thread(target=ch2_2_confirm, args=("ch2_2",))
    try:
        ch2_2_start_value.start()
    except Exception:
        print("Error Start threading")


def ch2_3_start_test():
    ch2_3_start_value = threading.Thread(target=ch2_3_confirm, args=("ch2_3",))
    try:
        ch2_3_start_value.start()
    except Exception:
        print("Error Start threading")


def ch2_4_start_test():
    ch2_4_start_value = threading.Thread(target=ch2_4_confirm, args=("ch2_4",))
    try:
        ch2_4_start_value.start()
    except Exception:
        print("Error Start threading")


def ch2_5_start_test():
    ch2_5_start_value = threading.Thread(target=ch2_5_confirm, args=("ch2_5",))
    try:
        ch2_5_start_value.start()
    except Exception:
        print("Error Start threading")


def ch2_6_start_test():
    ch2_6_start_value = threading.Thread(target=ch2_6_confirm, args=("ch2_6",))
    try:
        ch2_6_start_value.start()
    except Exception:
        print("Error Start threading")


def ch2_7_start_test():
    ch2_7_start_value = threading.Thread(target=ch2_7_confirm, args=("ch2_7",))
    try:
        ch2_7_start_value.start()
    except Exception:
        print("Error Start threading")


def ch2_8_start_test():
    ch2_8_start_value = threading.Thread(target=ch2_8_confirm, args=("ch2_8",))
    try:
        ch2_8_start_value.start()
    except Exception:
        print("Error Start threading")


def ch3_1_start_test():
    ch3_1_start_value = threading.Thread(target=ch3_1_confirm, args=("ch3_1",))
    try:
        ch3_1_start_value.start()
    except Exception:
        print("Error Start threading")


def ch3_2_start_test():
    ch3_2_start_value = threading.Thread(target=ch3_2_confirm, args=("ch3_2",))
    try:
        ch3_2_start_value.start()
    except Exception:
        print("Error Start threading")


def ch3_3_start_test():
    ch3_3_start_value = threading.Thread(target=ch3_3_confirm, args=("ch3_3",))
    try:
        ch3_3_start_value.start()
    except Exception:
        print("Error Start threading")


def ch3_4_start_test():
    ch3_4_start_value = threading.Thread(target=ch3_4_confirm, args=("ch3_4",))
    try:
        ch3_4_start_value.start()
    except Exception:
        print("Error Start threading")


def ch3_5_start_test():
    ch3_5_start_value = threading.Thread(target=ch3_5_confirm, args=("ch3_5",))
    try:
        ch3_5_start_value.start()
    except Exception:
        print("Error Start threading")


def ch3_6_start_test():
    ch3_6_start_value = threading.Thread(target=ch3_6_confirm, args=("ch3_6",))
    try:
        ch3_6_start_value.start()
    except Exception:
        print("Error Start threading")


def ch3_7_start_test():
    ch3_7_start_value = threading.Thread(target=ch3_7_confirm, args=("ch3_7",))
    try:
        ch3_7_start_value.start()
    except Exception:
        print("Error Start threading")


def ch3_8_start_test():
    ch3_8_start_value = threading.Thread(target=ch3_8_confirm, args=("ch3_8",))
    try:
        ch3_8_start_value.start()
    except Exception:
        print("Error Start threading")


def ch4_1_start_test():
    ch4_1_start_value = threading.Thread(target=ch4_1_confirm, args=("ch4_1",))
    try:
        ch4_1_start_value.start()
    except Exception:
        print("Error Start threading")


def ch4_2_start_test():
    ch4_2_start_value = threading.Thread(target=ch4_2_confirm, args=("ch4_2",))
    try:
        ch4_2_start_value.start()
    except Exception:
        print("Error Start threading")


def ch4_3_start_test():
    ch4_3_start_value = threading.Thread(target=ch4_3_confirm, args=("ch4_3",))
    try:
        ch4_3_start_value.start()
    except Exception:
        print("Error Start threading")


def ch4_4_start_test():
    ch4_4_start_value = threading.Thread(target=ch4_4_confirm, args=("ch4_4",))
    try:
        ch4_4_start_value.start()
    except Exception:
        print("Error Start threading")


def ch4_5_start_test():
    ch4_5_start_value = threading.Thread(target=ch4_5_confirm, args=("ch4_5",))
    try:
        ch4_5_start_value.start()
    except Exception:
        print("Error Start threading")


def ch4_6_start_test():
    ch4_6_start_value = threading.Thread(target=ch4_6_confirm, args=("ch4_6",))
    try:
        ch4_6_start_value.start()
    except Exception:
        print("Error Start threading")


def ch4_7_start_test():
    ch4_7_start_value = threading.Thread(target=ch4_7_confirm, args=("ch4_7",))
    try:
        ch4_7_start_value.start()
    except Exception:
        print("Error Start threading")


def ch4_8_start_test():
    ch4_8_start_value = threading.Thread(target=ch4_8_confirm, args=("ch4_8",))
    try:
        ch4_8_start_value.start()
    except Exception:
        print("Error Start threading")


def ch5_1_start_test():
    ch5_1_start_value = threading.Thread(target=ch5_1_confirm, args=("ch5_1",))
    try:
        ch5_1_start_value.start()
    except Exception:
        print("Error Start threading")


def ch5_2_start_test():
    ch5_2_start_value = threading.Thread(target=ch5_2_confirm, args=("ch5_2",))
    try:
        ch5_2_start_value.start()
    except Exception:
        print("Error Start threading")


def ch5_3_start_test():
    ch5_3_start_value = threading.Thread(target=ch5_3_confirm, args=("ch5_3",))
    try:
        ch5_3_start_value.start()
    except Exception:
        print("Error Start threading")


def ch5_4_start_test():
    ch5_4_start_value = threading.Thread(target=ch5_4_confirm, args=("ch5_4",))
    try:
        ch5_4_start_value.start()
    except Exception:
        print("Error Start threading")


def ch5_5_start_test():
    ch5_5_start_value = threading.Thread(target=ch5_5_confirm, args=("ch5_5",))
    try:
        ch5_5_start_value.start()
    except Exception:
        print("Error Start threading")


def ch5_6_start_test():
    ch5_6_start_value = threading.Thread(target=ch5_6_confirm, args=("ch5_6",))
    try:
        ch5_6_start_value.start()
    except Exception:
        print("Error Start threading")


def ch5_7_start_test():
    ch5_7_start_value = threading.Thread(target=ch5_7_confirm, args=("ch5_7",))
    try:
        ch5_7_start_value.start()
    except Exception:
        print("Error Start threading")


def ch5_8_start_test():
    ch5_8_start_value = threading.Thread(target=ch5_8_confirm, args=("ch5_8",))
    try:
        ch5_8_start_value.start()
    except Exception:
        print("Error Start threading")


def ch6_1_start_test():
    ch6_1_start_value = threading.Thread(target=ch6_1_confirm, args=("ch6_1",))
    try:
        ch6_1_start_value.start()
    except Exception:
        print("Error Start threading")


def ch6_2_start_test():
    ch6_2_start_value = threading.Thread(target=ch6_2_confirm, args=("ch6_2",))
    try:
        ch6_2_start_value.start()
    except Exception:
        print("Error Start threading")


def ch6_3_start_test():
    ch6_3_start_value = threading.Thread(target=ch6_3_confirm, args=("ch6_3",))
    try:
        ch6_3_start_value.start()
    except Exception:
        print("Error Start threading")


def ch6_4_start_test():
    ch6_4_start_value = threading.Thread(target=ch6_4_confirm, args=("ch6_4",))
    try:
        ch6_4_start_value.start()
    except Exception:
        print("Error Start threading")


def ch6_5_start_test():
    ch6_5_start_value = threading.Thread(target=ch6_5_confirm, args=("ch6_5",))
    try:
        ch6_5_start_value.start()
    except Exception:
        print("Error Start threading")


def ch6_6_start_test():
    ch6_6_start_value = threading.Thread(target=ch6_6_confirm, args=("ch6_6",))
    try:
        ch6_6_start_value.start()
    except Exception:
        print("Error Start threading")


def ch6_7_start_test():
    ch6_7_start_value = threading.Thread(target=ch6_7_confirm, args=("ch6_7",))
    try:
        ch6_7_start_value.start()
    except Exception:
        print("Error Start threading")


def ch6_8_start_test():
    ch6_8_start_value = threading.Thread(target=ch6_8_confirm, args=("ch6_8",))
    try:
        ch6_8_start_value.start()
    except Exception:
        print("Error Start threading")


def ch7_1_start_test():
    ch7_1_start_value = threading.Thread(target=ch7_1_confirm, args=("ch7_1",))
    try:
        ch7_1_start_value.start()
    except Exception:
        print("Error Start threading")


def ch7_2_start_test():
    ch7_2_start_value = threading.Thread(target=ch7_2_confirm, args=("ch7_2",))
    try:
        ch7_2_start_value.start()
    except Exception:
        print("Error Start threading")


def ch7_3_start_test():
    ch7_3_start_value = threading.Thread(target=ch7_3_confirm, args=("ch7_3",))
    try:
        ch7_3_start_value.start()
    except Exception:
        print("Error Start threading")


def ch7_4_start_test():
    ch7_4_start_value = threading.Thread(target=ch7_4_confirm, args=("ch7_4",))
    try:
        ch7_4_start_value.start()
    except Exception:
        print("Error Start threading")


def ch7_5_start_test():
    ch7_5_start_value = threading.Thread(target=ch7_5_confirm, args=("ch7_5",))
    try:
        ch7_5_start_value.start()
    except Exception:
        print("Error Start threading")


def ch7_6_start_test():
    ch7_6_start_value = threading.Thread(target=ch7_6_confirm, args=("ch7_6",))
    try:
        ch7_6_start_value.start()
    except Exception:
        print("Error Start threading")


def ch7_7_start_test():
    ch7_7_start_value = threading.Thread(target=ch7_7_confirm, args=("ch7_7",))
    try:
        ch7_7_start_value.start()
    except Exception:
        print("Error Start threading")


def ch7_8_start_test():
    ch7_8_start_value = threading.Thread(target=ch7_8_confirm, args=("ch7_8",))
    try:
        ch7_8_start_value.start()
    except Exception:
        print("Error Start threading")


def ch8_1_start_test():
    ch8_1_start_value = threading.Thread(target=ch8_1_confirm, args=("ch8_1",))
    try:
        ch8_1_start_value.start()
    except Exception:
        print("Error Start threading")


def ch8_2_start_test():
    ch8_2_start_value = threading.Thread(target=ch8_2_confirm, args=("ch8_2",))
    try:
        ch8_2_start_value.start()
    except Exception:
        print("Error Start threading")


def ch8_3_start_test():
    ch8_3_start_value = threading.Thread(target=ch8_3_confirm, args=("ch8_3",))
    try:
        ch8_3_start_value.start()
    except Exception:
        print("Error Start threading")


def ch8_4_start_test():
    ch8_4_start_value = threading.Thread(target=ch8_4_confirm, args=("ch8_4",))
    try:
        ch8_4_start_value.start()
    except Exception:
        print("Error Start threading")


def ch8_5_start_test():
    ch8_5_start_value = threading.Thread(target=ch8_5_confirm, args=("ch8_5",))
    try:
        ch8_5_start_value.start()
    except Exception:
        print("Error Start threading")


def ch8_6_start_test():
    ch8_6_start_value = threading.Thread(target=ch8_6_confirm, args=("ch8_6",))
    try:
        ch8_6_start_value.start()
    except Exception:
        print("Error Start threading")


def ch8_7_start_test():
    ch8_7_start_value = threading.Thread(target=ch8_7_confirm, args=("ch8_7",))
    try:
        ch8_7_start_value.start()
    except Exception:
        print("Error Start threading")


def ch8_8_start_test():
    ch8_8_start_value = threading.Thread(target=ch8_8_confirm, args=("ch8_8",))
    try:
        ch8_8_start_value.start()
    except Exception:
        print("Error Start threading")


def ch1_1_confirm(ch1_1_name_confirm):
    global ch1_1_start_signal
    global ch1_1_signal
    global ch1_1_setvoltage_signal
    global ch1_1_sn_signal
    global ch1_1_set_voltage_command

    global ch1_1_log

    global ch1_1_e

    global ch1_1_error_data

    global entry_ch1_1
    global entry_ch1_1_set_voltage_value

    global ch1_1_data

    if ch1_1_name_confirm == "ch1_1":
        if ch1_1_start_signal:
            ch1_1_setvoltage()
            if ch1_1_sn_signal == 1:
                if ch1_1_setvoltage_signal == 1:
                    ch1_1_start_signal = False
                    ch1_1_signal = 1
                    ### 加锁 设置电压并启动 ###
                    entry_ch1_1["state"] = "disabled"
                    entry_ch1_1_set_voltage_value["state"] = "disabled"
                    ch1_1_error_data = ""
                    mutex.acquire()
                    ser.start(com, ch1_1_set_voltage_command)
                    ch1_readcommend_en = "010300000000A5"
                    ch1_read_data_en = ser.readdata(com, ch1_readcommend_en)
                    mutex.release()

                    ch1_1_log.append(["BatterNumber:", ch1_1_data[1]])

                    starttime = datetime.datetime.now()
                    ch1_1_log.append(
                        ["StartTime:", starttime.strftime("%Y-%m-%d %H:%M:%S")]
                    )

                    ch1_1_start_time = int(round(time.time() * 1000))
                    ch1_1_e[4] = ch1_1_start_time

                    ch1_1_log.append(["Cut-off voltage(V):", ch1_1_data[10]])

                    ###读环境温度
                    mutex_readenvironmenttemperature.acquire()
                    ch1_1_environment_temperature = ser.readenvironmenttemperature(com1)
                    mutex_readenvironmenttemperature.release()
                    ch1_1_log.append(
                        [
                            "Start-Environment-Temperature(℃):",
                            ch1_1_environment_temperature,
                        ]
                    )

                    ch1_1_data_ntc = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data_en[42])[2:]
                                + ("0x%02x" % ch1_read_data_en[43])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch1_1_data_sensor = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data_en[58])[2:]
                                + ("0x%02x" % ch1_read_data_en[59])[2:],
                                16,
                            )
                        )
                        / 100
                    )

                    ch1_1_log.append(["Start-NTC-Temperature(℃):", ch1_1_data_ntc])

                    ch1_1_log.append(
                        ["Start-Sensor-Temperature(℃):", ch1_1_data_sensor]
                    )

                    if math.fabs(ch1_1_data_ntc - ch1_1_data_sensor) > 5:
                        ch1_1_error_data = "NTC温度异常"
                else:
                    messagebox.showinfo("错误", "请设置通道1-1合法电池截止电压")
            else:
                messagebox.showinfo("错误", "请在通道1-1输入合法的电池条码")
        else:
            messagebox.showinfo("错误", "通道1-1正在测试")


def ch1_2_confirm(ch1_2_name_confirm):
    global ch1_2_start_signal
    global ch1_2_signal
    global ch1_2_setvoltage_signal
    global ch1_2_sn_signal
    global ch1_2_set_voltage_command

    global ch1_2_log

    global ch1_2_e

    global ch1_2_error_data

    global entry_ch1_2
    global entry_ch1_2_set_voltage_value

    global ch1_2_data

    if ch1_2_name_confirm == "ch1_2":
        if ch1_2_start_signal:
            ch1_2_setvoltage()
            if ch1_2_sn_signal == 1:
                if ch1_2_setvoltage_signal == 1:
                    ch1_2_start_signal = False
                    ch1_2_signal = 1
                    ### 加锁 设置电压并启动 ###
                    entry_ch1_2["state"] = "disabled"
                    entry_ch1_2_set_voltage_value["state"] = "disabled"
                    ch1_2_error_data = ""
                    mutex.acquire()
                    ser.start(com, ch1_2_set_voltage_command)
                    ch1_readcommend_en = "010300000000A5"
                    ch1_read_data_en = ser.readdata(com, ch1_readcommend_en)
                    mutex.release()

                    ch1_2_log.append(["BatterNumber:", ch1_2_data[1]])

                    starttime = datetime.datetime.now()
                    ch1_2_log.append(
                        ["StartTime:", starttime.strftime("%Y-%m-%d %H:%M:%S")]
                    )

                    ch1_2_start_time = int(round(time.time() * 1000))
                    ch1_2_e[4] = ch1_2_start_time

                    ch1_2_log.append(["Cut-off voltage(V):", ch1_2_data[10]])

                    ###读环境温度
                    mutex_readenvironmenttemperature.acquire()
                    ch1_2_environment_temperature = ser.readenvironmenttemperature(com1)
                    mutex_readenvironmenttemperature.release()
                    ch1_2_log.append(
                        [
                            "Start-Environment-Temperature(℃):",
                            ch1_2_environment_temperature,
                        ]
                    )

                    ch1_2_data_ntc = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data_en[42])[2:]
                                + ("0x%02x" % ch1_read_data_en[43])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch1_2_data_sensor = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data_en[58])[2:]
                                + ("0x%02x" % ch1_read_data_en[59])[2:],
                                16,
                            )
                        )
                        / 100
                    )

                    ch1_2_log.append(["Start-NTC-Temperature(℃):", ch1_2_data_ntc])

                    ch1_2_log.append(
                        ["Start-Sensor-Temperature(℃):", ch1_2_data_sensor]
                    )

                    if math.fabs(ch1_2_data_ntc - ch1_2_data_sensor) > 5:
                        ch1_2_error_data = "NTC温度异常"
                else:
                    messagebox.showinfo("错误", "请设置通道1-2合法电池截止电压")
            else:
                messagebox.showinfo("错误", "请在通道1-2输入合法的电池条码")
        else:
            messagebox.showinfo("错误", "通道1-2正在测试")


def ch1_3_confirm(ch1_3_name_confirm):
    global ch1_3_start_signal
    global ch1_3_signal
    global ch1_3_setvoltage_signal
    global ch1_3_sn_signal
    global ch1_3_set_voltage_command

    global ch1_3_log

    global ch1_3_e

    global ch1_3_error_data

    global entry_ch1_3
    global entry_ch1_3_set_voltage_value

    global ch1_3_data

    if ch1_3_name_confirm == "ch1_3":
        if ch1_3_start_signal:
            ch1_3_setvoltage()
            if ch1_3_sn_signal == 1:
                if ch1_3_setvoltage_signal == 1:
                    ch1_3_start_signal = False
                    ch1_3_signal = 1
                    ### 加锁 设置电压并启动 ###
                    entry_ch1_3["state"] = "disabled"
                    entry_ch1_3_set_voltage_value["state"] = "disabled"
                    ch1_3_error_data = ""
                    mutex.acquire()
                    ser.start(com, ch1_3_set_voltage_command)
                    ch1_readcommend_en = "010300000000A5"
                    ch1_read_data_en = ser.readdata(com, ch1_readcommend_en)
                    mutex.release()

                    ch1_3_log.append(["BatterNumber:", ch1_3_data[1]])

                    starttime = datetime.datetime.now()
                    ch1_3_log.append(
                        ["StartTime:", starttime.strftime("%Y-%m-%d %H:%M:%S")]
                    )

                    ch1_3_start_time = int(round(time.time() * 1000))
                    ch1_3_e[4] = ch1_3_start_time

                    ch1_3_log.append(["Cut-off voltage(V):", ch1_3_data[10]])

                    ###读环境温度
                    mutex_readenvironmenttemperature.acquire()
                    ch1_3_environment_temperature = ser.readenvironmenttemperature(com1)
                    mutex_readenvironmenttemperature.release()
                    ch1_3_log.append(
                        [
                            "Start-Environment-Temperature(℃):",
                            ch1_3_environment_temperature,
                        ]
                    )

                    ch1_3_data_ntc = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data_en[42])[2:]
                                + ("0x%02x" % ch1_read_data_en[43])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch1_3_data_sensor = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data_en[58])[2:]
                                + ("0x%02x" % ch1_read_data_en[59])[2:],
                                16,
                            )
                        )
                        / 100
                    )

                    ch1_3_log.append(["Start-NTC-Temperature(℃):", ch1_3_data_ntc])

                    ch1_3_log.append(
                        ["Start-Sensor-Temperature(℃):", ch1_3_data_sensor]
                    )

                    if math.fabs(ch1_3_data_ntc - ch1_3_data_sensor) > 5:
                        ch1_3_error_data = "NTC温度异常"
                else:
                    messagebox.showinfo("错误", "请设置通道1-3合法电池截止电压")
            else:
                messagebox.showinfo("错误", "请在通道1-3输入合法的电池条码")
        else:
            messagebox.showinfo("错误", "通道1-3正在测试")


def ch1_4_confirm(ch1_4_name_confirm):
    global ch1_4_start_signal
    global ch1_4_signal
    global ch1_4_setvoltage_signal
    global ch1_4_sn_signal
    global ch1_4_set_voltage_command

    global ch1_4_log

    global ch1_4_e

    global ch1_4_error_data

    global entry_ch1_4
    global entry_ch1_4_set_voltage_value

    global ch1_4_data

    if ch1_4_name_confirm == "ch1_4":
        if ch1_4_start_signal:
            ch1_4_setvoltage()
            if ch1_4_sn_signal == 1:
                if ch1_4_setvoltage_signal == 1:
                    ch1_4_start_signal = False
                    ch1_4_signal = 1
                    ### 加锁 设置电压并启动 ###
                    entry_ch1_4["state"] = "disabled"
                    entry_ch1_4_set_voltage_value["state"] = "disabled"
                    ch1_4_error_data = ""
                    mutex.acquire()
                    ser.start(com, ch1_4_set_voltage_command)
                    ch1_readcommend_en = "010300000000A5"
                    ch1_read_data_en = ser.readdata(com, ch1_readcommend_en)
                    mutex.release()

                    ch1_4_log.append(["BatterNumber:", ch1_4_data[1]])

                    starttime = datetime.datetime.now()
                    ch1_4_log.append(
                        ["StartTime:", starttime.strftime("%Y-%m-%d %H:%M:%S")]
                    )

                    ch1_4_start_time = int(round(time.time() * 1000))
                    ch1_4_e[4] = ch1_4_start_time

                    ch1_4_log.append(["Cut-off voltage(V):", ch1_4_data[10]])

                    ###读环境温度
                    mutex_readenvironmenttemperature.acquire()
                    ch1_4_environment_temperature = ser.readenvironmenttemperature(com1)
                    mutex_readenvironmenttemperature.release()
                    ch1_4_log.append(
                        [
                            "Start-Environment-Temperature(℃):",
                            ch1_4_environment_temperature,
                        ]
                    )

                    ch1_4_data_ntc = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data_en[42])[2:]
                                + ("0x%02x" % ch1_read_data_en[43])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch1_4_data_sensor = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data_en[58])[2:]
                                + ("0x%02x" % ch1_read_data_en[59])[2:],
                                16,
                            )
                        )
                        / 100
                    )

                    ch1_4_log.append(["Start-NTC-Temperature(℃):", ch1_4_data_ntc])

                    ch1_4_log.append(
                        ["Start-Sensor-Temperature(℃):", ch1_4_data_sensor]
                    )

                    if math.fabs(ch1_4_data_ntc - ch1_4_data_sensor) > 5:
                        ch1_4_error_data = "NTC温度异常"
                else:
                    messagebox.showinfo("错误", "请设置通道1-4合法电池截止电压")
            else:
                messagebox.showinfo("错误", "请在通道1-4输入合法的电池条码")
        else:
            messagebox.showinfo("错误", "通道1-4正在测试")


def ch1_5_confirm(ch1_5_name_confirm):
    global ch1_5_start_signal
    global ch1_5_signal
    global ch1_5_setvoltage_signal
    global ch1_5_sn_signal
    global ch1_5_set_voltage_command

    global ch1_5_log

    global ch1_5_e

    global ch1_5_error_data

    global entry_ch1_5
    global entry_ch1_5_set_voltage_value

    global ch1_5_data

    if ch1_5_name_confirm == "ch1_5":
        if ch1_5_start_signal:
            ch1_5_setvoltage()
            if ch1_5_sn_signal == 1:
                if ch1_5_setvoltage_signal == 1:
                    ch1_5_start_signal = False
                    ch1_5_signal = 1
                    ### 加锁 设置电压并启动 ###
                    entry_ch1_5["state"] = "disabled"
                    entry_ch1_5_set_voltage_value["state"] = "disabled"
                    ch1_5_error_data = ""
                    mutex.acquire()
                    ser.start(com, ch1_5_set_voltage_command)
                    ch1_readcommend_en = "010300000000A5"
                    ch1_read_data_en = ser.readdata(com, ch1_readcommend_en)
                    mutex.release()

                    ch1_5_log.append(["BatterNumber:", ch1_5_data[1]])

                    starttime = datetime.datetime.now()
                    ch1_5_log.append(
                        ["StartTime:", starttime.strftime("%Y-%m-%d %H:%M:%S")]
                    )

                    ch1_5_start_time = int(round(time.time() * 1000))
                    ch1_5_e[4] = ch1_5_start_time

                    ch1_5_log.append(["Cut-off voltage(V):", ch1_5_data[10]])

                    ###读环境温度
                    mutex_readenvironmenttemperature.acquire()
                    ch1_5_environment_temperature = ser.readenvironmenttemperature(com1)
                    mutex_readenvironmenttemperature.release()
                    ch1_5_log.append(
                        [
                            "Start-Environment-Temperature(℃):",
                            ch1_5_environment_temperature,
                        ]
                    )

                    ch1_5_data_ntc = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data_en[42])[2:]
                                + ("0x%02x" % ch1_read_data_en[43])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch1_5_data_sensor = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data_en[58])[2:]
                                + ("0x%02x" % ch1_read_data_en[59])[2:],
                                16,
                            )
                        )
                        / 100
                    )

                    ch1_5_log.append(["Start-NTC-Temperature(℃):", ch1_5_data_ntc])

                    ch1_5_log.append(
                        ["Start-Sensor-Temperature(℃):", ch1_5_data_sensor]
                    )

                    if math.fabs(ch1_5_data_ntc - ch1_5_data_sensor) > 5:
                        ch1_5_error_data = "NTC温度异常"
                else:
                    messagebox.showinfo("错误", "请设置通道1-5合法电池截止电压")
            else:
                messagebox.showinfo("错误", "请在通道1-5输入合法的电池条码")
        else:
            messagebox.showinfo("错误", "通道1-5正在测试")


def ch1_6_confirm(ch1_6_name_confirm):
    global ch1_6_start_signal
    global ch1_6_signal
    global ch1_6_setvoltage_signal
    global ch1_6_sn_signal
    global ch1_6_set_voltage_command

    global ch1_6_log

    global ch1_6_e

    global ch1_6_error_data

    global entry_ch1_6
    global entry_ch1_6_set_voltage_value

    global ch1_6_data

    if ch1_6_name_confirm == "ch1_6":
        if ch1_6_start_signal:
            ch1_6_setvoltage()
            if ch1_6_sn_signal == 1:
                if ch1_6_setvoltage_signal == 1:
                    ch1_6_start_signal = False
                    ch1_6_signal = 1
                    ### 加锁 设置电压并启动 ###
                    entry_ch1_6["state"] = "disabled"
                    entry_ch1_6_set_voltage_value["state"] = "disabled"
                    ch1_6_error_data = ""
                    mutex.acquire()
                    ser.start(com, ch1_6_set_voltage_command)
                    ch1_readcommend_en = "010300000000A5"
                    ch1_read_data_en = ser.readdata(com, ch1_readcommend_en)
                    mutex.release()

                    ch1_6_log.append(["BatterNumber:", ch1_6_data[1]])

                    starttime = datetime.datetime.now()
                    ch1_6_log.append(
                        ["StartTime:", starttime.strftime("%Y-%m-%d %H:%M:%S")]
                    )

                    ch1_6_start_time = int(round(time.time() * 1000))
                    ch1_6_e[4] = ch1_6_start_time

                    ch1_6_log.append(["Cut-off voltage(V):", ch1_6_data[10]])

                    ###读环境温度
                    mutex_readenvironmenttemperature.acquire()
                    ch1_6_environment_temperature = ser.readenvironmenttemperature(com1)
                    mutex_readenvironmenttemperature.release()
                    ch1_6_log.append(
                        [
                            "Start-Environment-Temperature(℃):",
                            ch1_6_environment_temperature,
                        ]
                    )

                    ch1_6_data_ntc = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data_en[42])[2:]
                                + ("0x%02x" % ch1_read_data_en[43])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch1_6_data_sensor = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data_en[58])[2:]
                                + ("0x%02x" % ch1_read_data_en[59])[2:],
                                16,
                            )
                        )
                        / 100
                    )

                    ch1_6_log.append(["Start-NTC-Temperature(℃):", ch1_6_data_ntc])

                    ch1_6_log.append(
                        ["Start-Sensor-Temperature(℃):", ch1_6_data_sensor]
                    )

                    if math.fabs(ch1_6_data_ntc - ch1_6_data_sensor) > 5:
                        ch1_6_error_data = "NTC温度异常"
                else:
                    messagebox.showinfo("错误", "请设置通道1-6合法电池截止电压")
            else:
                messagebox.showinfo("错误", "请在通道1-6输入合法的电池条码")
        else:
            messagebox.showinfo("错误", "通道1-6正在测试")


def ch1_7_confirm(ch1_7_name_confirm):
    global ch1_7_start_signal
    global ch1_7_signal
    global ch1_7_setvoltage_signal
    global ch1_7_sn_signal
    global ch1_7_set_voltage_command

    global ch1_7_log

    global ch1_7_e

    global ch1_7_error_data

    global entry_ch1_7
    global entry_ch1_7_set_voltage_value

    global ch1_7_data

    if ch1_7_name_confirm == "ch1_7":
        if ch1_7_start_signal:
            ch1_7_setvoltage()
            if ch1_7_sn_signal == 1:
                if ch1_7_setvoltage_signal == 1:
                    ch1_7_start_signal = False
                    ch1_7_signal = 1
                    ### 加锁 设置电压并启动 ###
                    entry_ch1_7["state"] = "disabled"
                    entry_ch1_7_set_voltage_value["state"] = "disabled"
                    ch1_7_error_data = ""
                    mutex.acquire()
                    ser.start(com, ch1_7_set_voltage_command)
                    ch1_readcommend_en = "010300000000A5"
                    ch1_read_data_en = ser.readdata(com, ch1_readcommend_en)
                    mutex.release()

                    ch1_7_log.append(["BatterNumber:", ch1_7_data[1]])

                    starttime = datetime.datetime.now()
                    ch1_7_log.append(
                        ["StartTime:", starttime.strftime("%Y-%m-%d %H:%M:%S")]
                    )

                    ch1_7_start_time = int(round(time.time() * 1000))
                    ch1_7_e[4] = ch1_7_start_time

                    ch1_7_log.append(["Cut-off voltage(V):", ch1_7_data[10]])

                    ###读环境温度
                    mutex_readenvironmenttemperature.acquire()
                    ch1_7_environment_temperature = ser.readenvironmenttemperature(com1)
                    mutex_readenvironmenttemperature.release()
                    ch1_7_log.append(
                        [
                            "Start-Environment-Temperature(℃):",
                            ch1_7_environment_temperature,
                        ]
                    )

                    ch1_7_data_ntc = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data_en[42])[2:]
                                + ("0x%02x" % ch1_read_data_en[43])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch1_7_data_sensor = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data_en[58])[2:]
                                + ("0x%02x" % ch1_read_data_en[59])[2:],
                                16,
                            )
                        )
                        / 100
                    )

                    ch1_7_log.append(["Start-NTC-Temperature(℃):", ch1_7_data_ntc])

                    ch1_7_log.append(
                        ["Start-Sensor-Temperature(℃):", ch1_7_data_sensor]
                    )

                    if math.fabs(ch1_7_data_ntc - ch1_7_data_sensor) > 5:
                        ch1_7_error_data = "NTC温度异常"
                else:
                    messagebox.showinfo("错误", "请设置通道1-7合法电池截止电压")
            else:
                messagebox.showinfo("错误", "请在通道1-7输入合法的电池条码")
        else:
            messagebox.showinfo("错误", "通道1-7正在测试")


def ch1_8_confirm(ch1_8_name_confirm):
    global ch1_8_start_signal
    global ch1_8_signal
    global ch1_8_setvoltage_signal
    global ch1_8_sn_signal
    global ch1_8_set_voltage_command

    global ch1_8_log

    global ch1_8_e

    global ch1_8_error_data

    global entry_ch1_8
    global entry_ch1_8_set_voltage_value

    global ch1_8_data

    if ch1_8_name_confirm == "ch1_8":
        if ch1_8_start_signal:
            ch1_8_setvoltage()
            if ch1_8_sn_signal == 1:
                if ch1_8_setvoltage_signal == 1:
                    ch1_8_start_signal = False
                    ch1_8_signal = 1
                    ### 加锁 设置电压并启动 ###
                    entry_ch1_8["state"] = "disabled"
                    entry_ch1_8_set_voltage_value["state"] = "disabled"
                    ch1_8_error_data = ""
                    mutex.acquire()
                    ser.start(com, ch1_8_set_voltage_command)
                    ch1_readcommend_en = "010300000000A5"
                    ch1_read_data_en = ser.readdata(com, ch1_readcommend_en)
                    mutex.release()

                    ch1_8_log.append(["BatterNumber:", ch1_8_data[1]])

                    starttime = datetime.datetime.now()
                    ch1_8_log.append(
                        ["StartTime:", starttime.strftime("%Y-%m-%d %H:%M:%S")]
                    )

                    ch1_8_start_time = int(round(time.time() * 1000))
                    ch1_8_e[4] = ch1_8_start_time

                    ch1_8_log.append(["Cut-off voltage(V):", ch1_8_data[10]])

                    ###读环境温度
                    mutex_readenvironmenttemperature.acquire()
                    ch1_8_environment_temperature = ser.readenvironmenttemperature(com1)
                    mutex_readenvironmenttemperature.release()
                    ch1_8_log.append(
                        [
                            "Start-Environment-Temperature(℃):",
                            ch1_8_environment_temperature,
                        ]
                    )

                    ch1_8_data_ntc = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data_en[42])[2:]
                                + ("0x%02x" % ch1_read_data_en[43])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch1_8_data_sensor = (
                        float(
                            int(
                                ("0x%02x" % ch1_read_data_en[58])[2:]
                                + ("0x%02x" % ch1_read_data_en[59])[2:],
                                16,
                            )
                        )
                        / 100
                    )

                    ch1_8_log.append(["Start-NTC-Temperature(℃):", ch1_8_data_ntc])

                    ch1_8_log.append(
                        ["Start-Sensor-Temperature(℃):", ch1_8_data_sensor]
                    )

                    if math.fabs(ch1_8_data_ntc - ch1_8_data_sensor) > 5:
                        ch1_8_error_data = "NTC温度异常"
                else:
                    messagebox.showinfo("错误", "请设置通道1-8合法电池截止电压")
            else:
                messagebox.showinfo("错误", "请在通道1-8输入合法的电池条码")
        else:
            messagebox.showinfo("错误", "通道1-8正在测试")


def ch2_1_confirm(ch2_1_name_confirm):
    global ch2_1_start_signal
    global ch2_1_signal
    global ch2_1_setvoltage_signal
    global ch2_1_sn_signal
    global ch2_1_set_voltage_command

    global ch2_1_log

    global ch2_1_e

    global ch2_1_error_data

    global entry_ch2_1
    global entry_ch2_1_set_voltage_value

    global ch2_1_data

    if ch2_1_name_confirm == "ch2_1":
        if ch2_1_start_signal:
            ch2_1_setvoltage()
            if ch2_1_sn_signal == 1:
                if ch2_1_setvoltage_signal == 1:
                    ch2_1_start_signal = False
                    ch2_1_signal = 1
                    ### 加锁 设置电压并启动 ###
                    entry_ch2_1["state"] = "disabled"
                    entry_ch2_1_set_voltage_value["state"] = "disabled"
                    ch2_1_error_data = ""
                    mutex.acquire()
                    ser.start(com, ch2_1_set_voltage_command)
                    ch2_readcommend_en = "020300000000A5"
                    ch2_read_data_en = ser.readdata(com, ch2_readcommend_en)
                    mutex.release()

                    ch2_1_log.append(["BatterNumber:", ch2_1_data[1]])

                    starttime = datetime.datetime.now()
                    ch2_1_log.append(
                        ["StartTime:", starttime.strftime("%Y-%m-%d %H:%M:%S")]
                    )

                    ch2_1_start_time = int(round(time.time() * 1000))
                    ch2_1_e[4] = ch2_1_start_time

                    ch2_1_log.append(["Cut-off voltage(V):", ch2_1_data[10]])

                    ###读环境温度
                    mutex_readenvironmenttemperature.acquire()
                    ch2_1_environment_temperature = ser.readenvironmenttemperature(com1)
                    mutex_readenvironmenttemperature.release()
                    ch2_1_log.append(
                        [
                            "Start-Environment-Temperature(℃):",
                            ch2_1_environment_temperature,
                        ]
                    )

                    ch2_1_data_ntc = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data_en[42])[2:]
                                + ("0x%02x" % ch2_read_data_en[43])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch2_1_data_sensor = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data_en[58])[2:]
                                + ("0x%02x" % ch2_read_data_en[59])[2:],
                                16,
                            )
                        )
                        / 100
                    )

                    ch2_1_log.append(["Start-NTC-Temperature(℃):", ch2_1_data_ntc])

                    ch2_1_log.append(
                        ["Start-Sensor-Temperature(℃):", ch2_1_data_sensor]
                    )

                    if math.fabs(ch2_1_data_ntc - ch2_1_data_sensor) > 5:
                        ch2_1_error_data = "NTC温度异常"
                else:
                    messagebox.showinfo("错误", "请设置通道2-1合法电池截止电压")
            else:
                messagebox.showinfo("错误", "请在通道2-1输入合法的电池条码")
        else:
            messagebox.showinfo("错误", "通道2-1正在测试")


def ch2_2_confirm(ch2_2_name_confirm):
    global ch2_2_start_signal
    global ch2_2_signal
    global ch2_2_setvoltage_signal
    global ch2_2_sn_signal
    global ch2_2_set_voltage_command

    global ch2_2_log

    global ch2_2_e

    global ch2_2_error_data

    global entry_ch2_2
    global entry_ch2_2_set_voltage_value

    global ch2_2_data

    if ch2_2_name_confirm == "ch2_2":
        if ch2_2_start_signal:
            ch2_2_setvoltage()
            if ch2_2_sn_signal == 1:
                if ch2_2_setvoltage_signal == 1:
                    ch2_2_start_signal = False
                    ch2_2_signal = 1
                    ### 加锁 设置电压并启动 ###
                    entry_ch2_2["state"] = "disabled"
                    entry_ch2_2_set_voltage_value["state"] = "disabled"
                    ch2_2_error_data = ""
                    mutex.acquire()
                    ser.start(com, ch2_2_set_voltage_command)
                    ch2_readcommend_en = "020300000000A5"
                    ch2_read_data_en = ser.readdata(com, ch2_readcommend_en)
                    mutex.release()

                    ch2_2_log.append(["BatterNumber:", ch2_2_data[1]])

                    starttime = datetime.datetime.now()
                    ch2_2_log.append(
                        ["StartTime:", starttime.strftime("%Y-%m-%d %H:%M:%S")]
                    )

                    ch2_2_start_time = int(round(time.time() * 1000))
                    ch2_2_e[4] = ch2_2_start_time

                    ch2_2_log.append(["Cut-off voltage(V):", ch2_2_data[10]])

                    ###读环境温度
                    mutex_readenvironmenttemperature.acquire()
                    ch2_2_environment_temperature = ser.readenvironmenttemperature(com1)
                    mutex_readenvironmenttemperature.release()
                    ch2_2_log.append(
                        [
                            "Start-Environment-Temperature(℃):",
                            ch2_2_environment_temperature,
                        ]
                    )

                    ch2_2_data_ntc = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data_en[42])[2:]
                                + ("0x%02x" % ch2_read_data_en[43])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch2_2_data_sensor = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data_en[58])[2:]
                                + ("0x%02x" % ch2_read_data_en[59])[2:],
                                16,
                            )
                        )
                        / 100
                    )

                    ch2_2_log.append(["Start-NTC-Temperature(℃):", ch2_2_data_ntc])

                    ch2_2_log.append(
                        ["Start-Sensor-Temperature(℃):", ch2_2_data_sensor]
                    )

                    if math.fabs(ch2_2_data_ntc - ch2_2_data_sensor) > 5:
                        ch2_2_error_data = "NTC温度异常"
                else:
                    messagebox.showinfo("错误", "请设置通道2-2合法电池截止电压")
            else:
                messagebox.showinfo("错误", "请在通道2-2输入合法的电池条码")
        else:
            messagebox.showinfo("错误", "通道2-2正在测试")


def ch2_3_confirm(ch2_3_name_confirm):
    global ch2_3_start_signal
    global ch2_3_signal
    global ch2_3_setvoltage_signal
    global ch2_3_sn_signal
    global ch2_3_set_voltage_command

    global ch2_3_log

    global ch2_3_e

    global ch2_3_error_data

    global entry_ch2_3
    global entry_ch2_3_set_voltage_value

    global ch2_3_data

    if ch2_3_name_confirm == "ch2_3":
        if ch2_3_start_signal:
            ch2_3_setvoltage()
            if ch2_3_sn_signal == 1:
                if ch2_3_setvoltage_signal == 1:
                    ch2_3_start_signal = False
                    ch2_3_signal = 1
                    ### 加锁 设置电压并启动 ###
                    entry_ch2_3["state"] = "disabled"
                    entry_ch2_3_set_voltage_value["state"] = "disabled"
                    ch2_3_error_data = ""
                    mutex.acquire()
                    ser.start(com, ch2_3_set_voltage_command)
                    ch2_readcommend_en = "020300000000A5"
                    ch2_read_data_en = ser.readdata(com, ch2_readcommend_en)
                    mutex.release()

                    ch2_3_log.append(["BatterNumber:", ch2_3_data[1]])

                    starttime = datetime.datetime.now()
                    ch2_3_log.append(
                        ["StartTime:", starttime.strftime("%Y-%m-%d %H:%M:%S")]
                    )

                    ch2_3_start_time = int(round(time.time() * 1000))
                    ch2_3_e[4] = ch2_3_start_time

                    ch2_3_log.append(["Cut-off voltage(V):", ch2_3_data[10]])

                    ###读环境温度
                    mutex_readenvironmenttemperature.acquire()
                    ch2_3_environment_temperature = ser.readenvironmenttemperature(com1)
                    mutex_readenvironmenttemperature.release()
                    ch2_3_log.append(
                        [
                            "Start-Environment-Temperature(℃):",
                            ch2_3_environment_temperature,
                        ]
                    )

                    ch2_3_data_ntc = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data_en[42])[2:]
                                + ("0x%02x" % ch2_read_data_en[43])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch2_3_data_sensor = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data_en[58])[2:]
                                + ("0x%02x" % ch2_read_data_en[59])[2:],
                                16,
                            )
                        )
                        / 100
                    )

                    ch2_3_log.append(["Start-NTC-Temperature(℃):", ch2_3_data_ntc])

                    ch2_3_log.append(
                        ["Start-Sensor-Temperature(℃):", ch2_3_data_sensor]
                    )

                    if math.fabs(ch2_3_data_ntc - ch2_3_data_sensor) > 5:
                        ch2_3_error_data = "NTC温度异常"
                else:
                    messagebox.showinfo("错误", "请设置通道2-3合法电池截止电压")
            else:
                messagebox.showinfo("错误", "请在通道2-3输入合法的电池条码")
        else:
            messagebox.showinfo("错误", "通道2-3正在测试")


def ch2_4_confirm(ch2_4_name_confirm):
    global ch2_4_start_signal
    global ch2_4_signal
    global ch2_4_setvoltage_signal
    global ch2_4_sn_signal
    global ch2_4_set_voltage_command

    global ch2_4_log

    global ch2_4_e

    global ch2_4_error_data

    global entry_ch2_4
    global entry_ch2_4_set_voltage_value

    global ch2_4_data

    if ch2_4_name_confirm == "ch2_4":
        if ch2_4_start_signal:
            ch2_4_setvoltage()
            if ch2_4_sn_signal == 1:
                if ch2_4_setvoltage_signal == 1:
                    ch2_4_start_signal = False
                    ch2_4_signal = 1
                    ### 加锁 设置电压并启动 ###
                    entry_ch2_4["state"] = "disabled"
                    entry_ch2_4_set_voltage_value["state"] = "disabled"
                    ch2_4_error_data = ""
                    mutex.acquire()
                    ser.start(com, ch2_4_set_voltage_command)
                    ch2_readcommend_en = "020300000000A5"
                    ch2_read_data_en = ser.readdata(com, ch2_readcommend_en)
                    mutex.release()

                    ch2_4_log.append(["BatterNumber:", ch2_4_data[1]])

                    starttime = datetime.datetime.now()
                    ch2_4_log.append(
                        ["StartTime:", starttime.strftime("%Y-%m-%d %H:%M:%S")]
                    )

                    ch2_4_start_time = int(round(time.time() * 1000))
                    ch2_4_e[4] = ch2_4_start_time

                    ch2_4_log.append(["Cut-off voltage(V):", ch2_4_data[10]])

                    ###读环境温度
                    mutex_readenvironmenttemperature.acquire()
                    ch2_4_environment_temperature = ser.readenvironmenttemperature(com1)
                    mutex_readenvironmenttemperature.release()
                    ch2_4_log.append(
                        [
                            "Start-Environment-Temperature(℃):",
                            ch2_4_environment_temperature,
                        ]
                    )

                    ch2_4_data_ntc = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data_en[42])[2:]
                                + ("0x%02x" % ch2_read_data_en[43])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch2_4_data_sensor = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data_en[58])[2:]
                                + ("0x%02x" % ch2_read_data_en[59])[2:],
                                16,
                            )
                        )
                        / 100
                    )

                    ch2_4_log.append(["Start-NTC-Temperature(℃):", ch2_4_data_ntc])

                    ch2_4_log.append(
                        ["Start-Sensor-Temperature(℃):", ch2_4_data_sensor]
                    )

                    if math.fabs(ch2_4_data_ntc - ch2_4_data_sensor) > 5:
                        ch2_4_error_data = "NTC温度异常"
                else:
                    messagebox.showinfo("错误", "请设置通道2-4合法电池截止电压")
            else:
                messagebox.showinfo("错误", "请在通道2-4输入合法的电池条码")
        else:
            messagebox.showinfo("错误", "通道2-4正在测试")


def ch2_5_confirm(ch2_5_name_confirm):
    global ch2_5_start_signal
    global ch2_5_signal
    global ch2_5_setvoltage_signal
    global ch2_5_sn_signal
    global ch2_5_set_voltage_command

    global ch2_5_log

    global ch2_5_e

    global ch2_5_error_data

    global entry_ch2_5
    global entry_ch2_5_set_voltage_value

    global ch2_5_data

    if ch2_5_name_confirm == "ch2_5":
        if ch2_5_start_signal:
            ch2_5_setvoltage()
            if ch2_5_sn_signal == 1:
                if ch2_5_setvoltage_signal == 1:
                    ch2_5_start_signal = False
                    ch2_5_signal = 1
                    ### 加锁 设置电压并启动 ###
                    entry_ch2_5["state"] = "disabled"
                    entry_ch2_5_set_voltage_value["state"] = "disabled"
                    ch2_5_error_data = ""
                    mutex.acquire()
                    ser.start(com, ch2_5_set_voltage_command)
                    ch2_readcommend_en = "020300000000A5"
                    ch2_read_data_en = ser.readdata(com, ch2_readcommend_en)
                    mutex.release()

                    ch2_5_log.append(["BatterNumber:", ch2_5_data[1]])

                    starttime = datetime.datetime.now()
                    ch2_5_log.append(
                        ["StartTime:", starttime.strftime("%Y-%m-%d %H:%M:%S")]
                    )

                    ch2_5_start_time = int(round(time.time() * 1000))
                    ch2_5_e[4] = ch2_5_start_time

                    ch2_5_log.append(["Cut-off voltage(V):", ch2_5_data[10]])

                    ###读环境温度
                    mutex_readenvironmenttemperature.acquire()
                    ch2_5_environment_temperature = ser.readenvironmenttemperature(com1)
                    mutex_readenvironmenttemperature.release()
                    ch2_5_log.append(
                        [
                            "Start-Environment-Temperature(℃):",
                            ch2_5_environment_temperature,
                        ]
                    )

                    ch2_5_data_ntc = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data_en[42])[2:]
                                + ("0x%02x" % ch2_read_data_en[43])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch2_5_data_sensor = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data_en[58])[2:]
                                + ("0x%02x" % ch2_read_data_en[59])[2:],
                                16,
                            )
                        )
                        / 100
                    )

                    ch2_5_log.append(["Start-NTC-Temperature(℃):", ch2_5_data_ntc])

                    ch2_5_log.append(
                        ["Start-Sensor-Temperature(℃):", ch2_5_data_sensor]
                    )

                    if math.fabs(ch2_5_data_ntc - ch2_5_data_sensor) > 5:
                        ch2_5_error_data = "NTC温度异常"
                else:
                    messagebox.showinfo("错误", "请设置通道2-5合法电池截止电压")
            else:
                messagebox.showinfo("错误", "请在通道2-5输入合法的电池条码")
        else:
            messagebox.showinfo("错误", "通道2-5正在测试")


def ch2_6_confirm(ch2_6_name_confirm):
    global ch2_6_start_signal
    global ch2_6_signal
    global ch2_6_setvoltage_signal
    global ch2_6_sn_signal
    global ch2_6_set_voltage_command

    global ch2_6_log

    global ch2_6_e

    global ch2_6_error_data

    global entry_ch2_6
    global entry_ch2_6_set_voltage_value

    global ch2_6_data

    if ch2_6_name_confirm == "ch2_6":
        if ch2_6_start_signal:
            ch2_6_setvoltage()
            if ch2_6_sn_signal == 1:
                if ch2_6_setvoltage_signal == 1:
                    ch2_6_start_signal = False
                    ch2_6_signal = 1
                    ### 加锁 设置电压并启动 ###
                    entry_ch2_6["state"] = "disabled"
                    entry_ch2_6_set_voltage_value["state"] = "disabled"
                    ch2_6_error_data = ""
                    mutex.acquire()
                    ser.start(com, ch2_6_set_voltage_command)
                    ch2_readcommend_en = "020300000000A5"
                    ch2_read_data_en = ser.readdata(com, ch2_readcommend_en)
                    mutex.release()

                    ch2_6_log.append(["BatterNumber:", ch2_6_data[1]])

                    starttime = datetime.datetime.now()
                    ch2_6_log.append(
                        ["StartTime:", starttime.strftime("%Y-%m-%d %H:%M:%S")]
                    )

                    ch2_6_start_time = int(round(time.time() * 1000))
                    ch2_6_e[4] = ch2_6_start_time

                    ch2_6_log.append(["Cut-off voltage(V):", ch2_6_data[10]])

                    ###读环境温度
                    mutex_readenvironmenttemperature.acquire()
                    ch2_6_environment_temperature = ser.readenvironmenttemperature(com1)
                    mutex_readenvironmenttemperature.release()
                    ch2_6_log.append(
                        [
                            "Start-Environment-Temperature(℃):",
                            ch2_6_environment_temperature,
                        ]
                    )

                    ch2_6_data_ntc = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data_en[42])[2:]
                                + ("0x%02x" % ch2_read_data_en[43])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch2_6_data_sensor = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data_en[58])[2:]
                                + ("0x%02x" % ch2_read_data_en[59])[2:],
                                16,
                            )
                        )
                        / 100
                    )

                    ch2_6_log.append(["Start-NTC-Temperature(℃):", ch2_6_data_ntc])

                    ch2_6_log.append(
                        ["Start-Sensor-Temperature(℃):", ch2_6_data_sensor]
                    )

                    if math.fabs(ch2_6_data_ntc - ch2_6_data_sensor) > 5:
                        ch2_6_error_data = "NTC温度异常"
                else:
                    messagebox.showinfo("错误", "请设置通道2-6合法电池截止电压")
            else:
                messagebox.showinfo("错误", "请在通道2-6输入合法的电池条码")
        else:
            messagebox.showinfo("错误", "通道2-6正在测试")


def ch2_7_confirm(ch2_7_name_confirm):
    global ch2_7_start_signal
    global ch2_7_signal
    global ch2_7_setvoltage_signal
    global ch2_7_sn_signal
    global ch2_7_set_voltage_command

    global ch2_7_log

    global ch2_7_e

    global ch2_7_error_data

    global entry_ch2_7
    global entry_ch2_7_set_voltage_value

    global ch2_7_data

    if ch2_7_name_confirm == "ch2_7":
        if ch2_7_start_signal:
            ch2_7_setvoltage()
            if ch2_7_sn_signal == 1:
                if ch2_7_setvoltage_signal == 1:
                    ch2_7_start_signal = False
                    ch2_7_signal = 1
                    ### 加锁 设置电压并启动 ###
                    entry_ch2_7["state"] = "disabled"
                    entry_ch2_7_set_voltage_value["state"] = "disabled"
                    ch2_7_error_data = ""
                    mutex.acquire()
                    ser.start(com, ch2_7_set_voltage_command)
                    ch2_readcommend_en = "020300000000A5"
                    ch2_read_data_en = ser.readdata(com, ch2_readcommend_en)
                    mutex.release()

                    ch2_7_log.append(["BatterNumber:", ch2_7_data[1]])

                    starttime = datetime.datetime.now()
                    ch2_7_log.append(
                        ["StartTime:", starttime.strftime("%Y-%m-%d %H:%M:%S")]
                    )

                    ch2_7_start_time = int(round(time.time() * 1000))
                    ch2_7_e[4] = ch2_7_start_time

                    ch2_7_log.append(["Cut-off voltage(V):", ch2_7_data[10]])

                    ###读环境温度
                    mutex_readenvironmenttemperature.acquire()
                    ch2_7_environment_temperature = ser.readenvironmenttemperature(com1)
                    mutex_readenvironmenttemperature.release()
                    ch2_7_log.append(
                        [
                            "Start-Environment-Temperature(℃):",
                            ch2_7_environment_temperature,
                        ]
                    )

                    ch2_7_data_ntc = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data_en[42])[2:]
                                + ("0x%02x" % ch2_read_data_en[43])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch2_7_data_sensor = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data_en[58])[2:]
                                + ("0x%02x" % ch2_read_data_en[59])[2:],
                                16,
                            )
                        )
                        / 100
                    )

                    ch2_7_log.append(["Start-NTC-Temperature(℃):", ch2_7_data_ntc])

                    ch2_7_log.append(
                        ["Start-Sensor-Temperature(℃):", ch2_7_data_sensor]
                    )

                    if math.fabs(ch2_7_data_ntc - ch2_7_data_sensor) > 5:
                        ch2_7_error_data = "NTC温度异常"
                else:
                    messagebox.showinfo("错误", "请设置通道2-7合法电池截止电压")
            else:
                messagebox.showinfo("错误", "请在通道2-7输入合法的电池条码")
        else:
            messagebox.showinfo("错误", "通道2-7正在测试")


def ch2_8_confirm(ch2_8_name_confirm):
    global ch2_8_start_signal
    global ch2_8_signal
    global ch2_8_setvoltage_signal
    global ch2_8_sn_signal
    global ch2_8_set_voltage_command

    global ch2_8_log

    global ch2_8_e

    global ch2_8_error_data

    global entry_ch2_8
    global entry_ch2_8_set_voltage_value

    global ch2_8_data

    if ch2_8_name_confirm == "ch2_8":
        if ch2_8_start_signal:
            ch2_8_setvoltage()
            if ch2_8_sn_signal == 1:
                if ch2_8_setvoltage_signal == 1:
                    ch2_8_start_signal = False
                    ch2_8_signal = 1
                    ### 加锁 设置电压并启动 ###
                    entry_ch2_8["state"] = "disabled"
                    entry_ch2_8_set_voltage_value["state"] = "disabled"
                    ch2_8_error_data = ""
                    mutex.acquire()
                    ser.start(com, ch2_8_set_voltage_command)
                    ch2_readcommend_en = "020300000000A5"
                    ch2_read_data_en = ser.readdata(com, ch2_readcommend_en)
                    mutex.release()

                    ch2_8_log.append(["BatterNumber:", ch2_8_data[1]])

                    starttime = datetime.datetime.now()
                    ch2_8_log.append(
                        ["StartTime:", starttime.strftime("%Y-%m-%d %H:%M:%S")]
                    )

                    ch2_8_start_time = int(round(time.time() * 1000))
                    ch2_8_e[4] = ch2_8_start_time

                    ch2_8_log.append(["Cut-off voltage(V):", ch2_8_data[10]])

                    ###读环境温度
                    mutex_readenvironmenttemperature.acquire()
                    ch2_8_environment_temperature = ser.readenvironmenttemperature(com1)
                    mutex_readenvironmenttemperature.release()
                    ch2_8_log.append(
                        [
                            "Start-Environment-Temperature(℃):",
                            ch2_8_environment_temperature,
                        ]
                    )

                    ch2_8_data_ntc = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data_en[42])[2:]
                                + ("0x%02x" % ch2_read_data_en[43])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch2_8_data_sensor = (
                        float(
                            int(
                                ("0x%02x" % ch2_read_data_en[58])[2:]
                                + ("0x%02x" % ch2_read_data_en[59])[2:],
                                16,
                            )
                        )
                        / 100
                    )

                    ch2_8_log.append(["Start-NTC-Temperature(℃):", ch2_8_data_ntc])

                    ch2_8_log.append(
                        ["Start-Sensor-Temperature(℃):", ch2_8_data_sensor]
                    )

                    if math.fabs(ch2_8_data_ntc - ch2_8_data_sensor) > 5:
                        ch2_8_error_data = "NTC温度异常"
                else:
                    messagebox.showinfo("错误", "请设置通道2-8合法电池截止电压")
            else:
                messagebox.showinfo("错误", "请在通道2-8输入合法的电池条码")
        else:
            messagebox.showinfo("错误", "通道2-8正在测试")


def ch3_1_confirm(ch3_1_name_confirm):
    global ch3_1_start_signal
    global ch3_1_signal
    global ch3_1_setvoltage_signal
    global ch3_1_sn_signal
    global ch3_1_set_voltage_command

    global ch3_1_log

    global ch3_1_e

    global ch3_1_error_data

    global entry_ch3_1
    global entry_ch3_1_set_voltage_value

    global ch3_1_data

    if ch3_1_name_confirm == "ch3_1":
        if ch3_1_start_signal:
            ch3_1_setvoltage()
            if ch3_1_sn_signal == 1:
                if ch3_1_setvoltage_signal == 1:
                    ch3_1_start_signal = False
                    ch3_1_signal = 1
                    ### 加锁 设置电压并启动 ###
                    entry_ch3_1["state"] = "disabled"
                    entry_ch3_1_set_voltage_value["state"] = "disabled"
                    ch3_1_error_data = ""
                    mutex.acquire()
                    ser.start(com, ch3_1_set_voltage_command)
                    ch3_readcommend_en = "030300000000A5"
                    ch3_read_data_en = ser.readdata(com, ch3_readcommend_en)
                    mutex.release()

                    ch3_1_log.append(["BatterNumber:", ch3_1_data[1]])

                    starttime = datetime.datetime.now()
                    ch3_1_log.append(
                        ["StartTime:", starttime.strftime("%Y-%m-%d %H:%M:%S")]
                    )

                    ch3_1_start_time = int(round(time.time() * 1000))
                    ch3_1_e[4] = ch3_1_start_time

                    ch3_1_log.append(["Cut-off voltage(V):", ch3_1_data[10]])

                    ###读环境温度
                    mutex_readenvironmenttemperature.acquire()
                    ch3_1_environment_temperature = ser.readenvironmenttemperature(com1)
                    mutex_readenvironmenttemperature.release()
                    ch3_1_log.append(
                        [
                            "Start-Environment-Temperature(℃):",
                            ch3_1_environment_temperature,
                        ]
                    )

                    ch3_1_data_ntc = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data_en[42])[2:]
                                + ("0x%02x" % ch3_read_data_en[43])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch3_1_data_sensor = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data_en[58])[2:]
                                + ("0x%02x" % ch3_read_data_en[59])[2:],
                                16,
                            )
                        )
                        / 100
                    )

                    ch3_1_log.append(["Start-NTC-Temperature(℃):", ch3_1_data_ntc])

                    ch3_1_log.append(
                        ["Start-Sensor-Temperature(℃):", ch3_1_data_sensor]
                    )

                    if math.fabs(ch3_1_data_ntc - ch3_1_data_sensor) > 5:
                        ch3_1_error_data = "NTC温度异常"
                else:
                    messagebox.showinfo("错误", "请设置通道3-1合法电池截止电压")
            else:
                messagebox.showinfo("错误", "请在通道3-1输入合法的电池条码")
        else:
            messagebox.showinfo("错误", "通道3-1正在测试")


def ch3_2_confirm(ch3_2_name_confirm):
    global ch3_2_start_signal
    global ch3_2_signal
    global ch3_2_setvoltage_signal
    global ch3_2_sn_signal
    global ch3_2_set_voltage_command

    global ch3_2_log

    global ch3_2_e

    global ch3_2_error_data

    global entry_ch3_2
    global entry_ch3_2_set_voltage_value

    global ch3_2_data

    if ch3_2_name_confirm == "ch3_2":
        if ch3_2_start_signal:
            ch3_2_setvoltage()
            if ch3_2_sn_signal == 1:
                if ch3_2_setvoltage_signal == 1:
                    ch3_2_start_signal = False
                    ch3_2_signal = 1
                    ### 加锁 设置电压并启动 ###
                    entry_ch3_2["state"] = "disabled"
                    entry_ch3_2_set_voltage_value["state"] = "disabled"
                    ch3_2_error_data = ""
                    mutex.acquire()
                    ser.start(com, ch3_2_set_voltage_command)
                    ch3_readcommend_en = "030300000000A5"
                    ch3_read_data_en = ser.readdata(com, ch3_readcommend_en)
                    mutex.release()

                    ch3_2_log.append(["BatterNumber:", ch3_2_data[1]])

                    starttime = datetime.datetime.now()
                    ch3_2_log.append(
                        ["StartTime:", starttime.strftime("%Y-%m-%d %H:%M:%S")]
                    )

                    ch3_2_start_time = int(round(time.time() * 1000))
                    ch3_2_e[4] = ch3_2_start_time

                    ch3_2_log.append(["Cut-off voltage(V):", ch3_2_data[10]])

                    ###读环境温度
                    mutex_readenvironmenttemperature.acquire()
                    ch3_2_environment_temperature = ser.readenvironmenttemperature(com1)
                    mutex_readenvironmenttemperature.release()
                    ch3_2_log.append(
                        [
                            "Start-Environment-Temperature(℃):",
                            ch3_2_environment_temperature,
                        ]
                    )

                    ch3_2_data_ntc = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data_en[42])[2:]
                                + ("0x%02x" % ch3_read_data_en[43])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch3_2_data_sensor = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data_en[58])[2:]
                                + ("0x%02x" % ch3_read_data_en[59])[2:],
                                16,
                            )
                        )
                        / 100
                    )

                    ch3_2_log.append(["Start-NTC-Temperature(℃):", ch3_2_data_ntc])

                    ch3_2_log.append(
                        ["Start-Sensor-Temperature(℃):", ch3_2_data_sensor]
                    )

                    if math.fabs(ch3_2_data_ntc - ch3_2_data_sensor) > 5:
                        ch3_2_error_data = "NTC温度异常"
                else:
                    messagebox.showinfo("错误", "请设置通道3-2合法电池截止电压")
            else:
                messagebox.showinfo("错误", "请在通道3-2输入合法的电池条码")
        else:
            messagebox.showinfo("错误", "通道3-2正在测试")


def ch3_3_confirm(ch3_3_name_confirm):
    global ch3_3_start_signal
    global ch3_3_signal
    global ch3_3_setvoltage_signal
    global ch3_3_sn_signal
    global ch3_3_set_voltage_command

    global ch3_3_log

    global ch3_3_e

    global ch3_3_error_data

    global entry_ch3_3
    global entry_ch3_3_set_voltage_value

    global ch3_3_data

    if ch3_3_name_confirm == "ch3_3":
        if ch3_3_start_signal:
            ch3_3_setvoltage()
            if ch3_3_sn_signal == 1:
                if ch3_3_setvoltage_signal == 1:
                    ch3_3_start_signal = False
                    ch3_3_signal = 1
                    ### 加锁 设置电压并启动 ###
                    entry_ch3_3["state"] = "disabled"
                    entry_ch3_3_set_voltage_value["state"] = "disabled"
                    ch3_3_error_data = ""
                    mutex.acquire()
                    ser.start(com, ch3_3_set_voltage_command)
                    ch3_readcommend_en = "030300000000A5"
                    ch3_read_data_en = ser.readdata(com, ch3_readcommend_en)
                    mutex.release()

                    ch3_3_log.append(["BatterNumber:", ch3_3_data[1]])

                    starttime = datetime.datetime.now()
                    ch3_3_log.append(
                        ["StartTime:", starttime.strftime("%Y-%m-%d %H:%M:%S")]
                    )

                    ch3_3_start_time = int(round(time.time() * 1000))
                    ch3_3_e[4] = ch3_3_start_time

                    ch3_3_log.append(["Cut-off voltage(V):", ch3_3_data[10]])

                    ###读环境温度
                    mutex_readenvironmenttemperature.acquire()
                    ch3_3_environment_temperature = ser.readenvironmenttemperature(com1)
                    mutex_readenvironmenttemperature.release()
                    ch3_3_log.append(
                        [
                            "Start-Environment-Temperature(℃):",
                            ch3_3_environment_temperature,
                        ]
                    )

                    ch3_3_data_ntc = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data_en[42])[2:]
                                + ("0x%02x" % ch3_read_data_en[43])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch3_3_data_sensor = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data_en[58])[2:]
                                + ("0x%02x" % ch3_read_data_en[59])[2:],
                                16,
                            )
                        )
                        / 100
                    )

                    ch3_3_log.append(["Start-NTC-Temperature(℃):", ch3_3_data_ntc])

                    ch3_3_log.append(
                        ["Start-Sensor-Temperature(℃):", ch3_3_data_sensor]
                    )

                    if math.fabs(ch3_3_data_ntc - ch3_3_data_sensor) > 5:
                        ch3_3_error_data = "NTC温度异常"
                else:
                    messagebox.showinfo("错误", "请设置通道3-3合法电池截止电压")
            else:
                messagebox.showinfo("错误", "请在通道3-3输入合法的电池条码")
        else:
            messagebox.showinfo("错误", "通道3-3正在测试")


def ch3_4_confirm(ch3_4_name_confirm):
    global ch3_4_start_signal
    global ch3_4_signal
    global ch3_4_setvoltage_signal
    global ch3_4_sn_signal
    global ch3_4_set_voltage_command

    global ch3_4_log

    global ch3_4_e

    global ch3_4_error_data

    global entry_ch3_4
    global entry_ch3_4_set_voltage_value

    global ch3_4_data

    if ch3_4_name_confirm == "ch3_4":
        if ch3_4_start_signal:
            ch3_4_setvoltage()
            if ch3_4_sn_signal == 1:
                if ch3_4_setvoltage_signal == 1:
                    ch3_4_start_signal = False
                    ch3_4_signal = 1
                    ### 加锁 设置电压并启动 ###
                    entry_ch3_4["state"] = "disabled"
                    entry_ch3_4_set_voltage_value["state"] = "disabled"
                    ch3_4_error_data = ""
                    mutex.acquire()
                    ser.start(com, ch3_4_set_voltage_command)
                    ch3_readcommend_en = "030300000000A5"
                    ch3_read_data_en = ser.readdata(com, ch3_readcommend_en)
                    mutex.release()

                    ch3_4_log.append(["BatterNumber:", ch3_4_data[1]])

                    starttime = datetime.datetime.now()
                    ch3_4_log.append(
                        ["StartTime:", starttime.strftime("%Y-%m-%d %H:%M:%S")]
                    )

                    ch3_4_start_time = int(round(time.time() * 1000))
                    ch3_4_e[4] = ch3_4_start_time

                    ch3_4_log.append(["Cut-off voltage(V):", ch3_4_data[10]])

                    ###读环境温度
                    mutex_readenvironmenttemperature.acquire()
                    ch3_4_environment_temperature = ser.readenvironmenttemperature(com1)
                    mutex_readenvironmenttemperature.release()
                    ch3_4_log.append(
                        [
                            "Start-Environment-Temperature(℃):",
                            ch3_4_environment_temperature,
                        ]
                    )

                    ch3_4_data_ntc = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data_en[42])[2:]
                                + ("0x%02x" % ch3_read_data_en[43])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch3_4_data_sensor = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data_en[58])[2:]
                                + ("0x%02x" % ch3_read_data_en[59])[2:],
                                16,
                            )
                        )
                        / 100
                    )

                    ch3_4_log.append(["Start-NTC-Temperature(℃):", ch3_4_data_ntc])

                    ch3_4_log.append(
                        ["Start-Sensor-Temperature(℃):", ch3_4_data_sensor]
                    )

                    if math.fabs(ch3_4_data_ntc - ch3_4_data_sensor) > 5:
                        ch3_4_error_data = "NTC温度异常"
                else:
                    messagebox.showinfo("错误", "请设置通道3-4合法电池截止电压")
            else:
                messagebox.showinfo("错误", "请在通道3-4输入合法的电池条码")
        else:
            messagebox.showinfo("错误", "通道3-4正在测试")


def ch3_5_confirm(ch3_5_name_confirm):
    global ch3_5_start_signal
    global ch3_5_signal
    global ch3_5_setvoltage_signal
    global ch3_5_sn_signal
    global ch3_5_set_voltage_command

    global ch3_5_log

    global ch3_5_e

    global ch3_5_error_data

    global entry_ch3_5
    global entry_ch3_5_set_voltage_value

    global ch3_5_data

    if ch3_5_name_confirm == "ch3_5":
        if ch3_5_start_signal:
            ch3_5_setvoltage()
            if ch3_5_sn_signal == 1:
                if ch3_5_setvoltage_signal == 1:
                    ch3_5_start_signal = False
                    ch3_5_signal = 1
                    ### 加锁 设置电压并启动 ###
                    entry_ch3_5["state"] = "disabled"
                    entry_ch3_5_set_voltage_value["state"] = "disabled"
                    ch3_5_error_data = ""
                    mutex.acquire()
                    ser.start(com, ch3_5_set_voltage_command)
                    ch3_readcommend_en = "030300000000A5"
                    ch3_read_data_en = ser.readdata(com, ch3_readcommend_en)
                    mutex.release()

                    ch3_5_log.append(["BatterNumber:", ch3_5_data[1]])

                    starttime = datetime.datetime.now()
                    ch3_5_log.append(
                        ["StartTime:", starttime.strftime("%Y-%m-%d %H:%M:%S")]
                    )

                    ch3_5_start_time = int(round(time.time() * 1000))
                    ch3_5_e[4] = ch3_5_start_time

                    ch3_5_log.append(["Cut-off voltage(V):", ch3_5_data[10]])

                    ###读环境温度
                    mutex_readenvironmenttemperature.acquire()
                    ch3_5_environment_temperature = ser.readenvironmenttemperature(com1)
                    mutex_readenvironmenttemperature.release()
                    ch3_5_log.append(
                        [
                            "Start-Environment-Temperature(℃):",
                            ch3_5_environment_temperature,
                        ]
                    )

                    ch3_5_data_ntc = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data_en[42])[2:]
                                + ("0x%02x" % ch3_read_data_en[43])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch3_5_data_sensor = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data_en[58])[2:]
                                + ("0x%02x" % ch3_read_data_en[59])[2:],
                                16,
                            )
                        )
                        / 100
                    )

                    ch3_5_log.append(["Start-NTC-Temperature(℃):", ch3_5_data_ntc])

                    ch3_5_log.append(
                        ["Start-Sensor-Temperature(℃):", ch3_5_data_sensor]
                    )

                    if math.fabs(ch3_5_data_ntc - ch3_5_data_sensor) > 5:
                        ch3_5_error_data = "NTC温度异常"
                else:
                    messagebox.showinfo("错误", "请设置通道3-5合法电池截止电压")
            else:
                messagebox.showinfo("错误", "请在通道3-5输入合法的电池条码")
        else:
            messagebox.showinfo("错误", "通道3-5正在测试")


def ch3_6_confirm(ch3_6_name_confirm):
    global ch3_6_start_signal
    global ch3_6_signal
    global ch3_6_setvoltage_signal
    global ch3_6_sn_signal
    global ch3_6_set_voltage_command

    global ch3_6_log

    global ch3_6_e

    global ch3_6_error_data

    global entry_ch3_6
    global entry_ch3_6_set_voltage_value

    global ch3_6_data

    if ch3_6_name_confirm == "ch3_6":
        if ch3_6_start_signal:
            ch3_6_setvoltage()
            if ch3_6_sn_signal == 1:
                if ch3_6_setvoltage_signal == 1:
                    ch3_6_start_signal = False
                    ch3_6_signal = 1
                    ### 加锁 设置电压并启动 ###
                    entry_ch3_6["state"] = "disabled"
                    entry_ch3_6_set_voltage_value["state"] = "disabled"
                    ch3_6_error_data = ""
                    mutex.acquire()
                    ser.start(com, ch3_6_set_voltage_command)
                    ch3_readcommend_en = "030300000000A5"
                    ch3_read_data_en = ser.readdata(com, ch3_readcommend_en)
                    mutex.release()

                    ch3_6_log.append(["BatterNumber:", ch3_6_data[1]])

                    starttime = datetime.datetime.now()
                    ch3_6_log.append(
                        ["StartTime:", starttime.strftime("%Y-%m-%d %H:%M:%S")]
                    )

                    ch3_6_start_time = int(round(time.time() * 1000))
                    ch3_6_e[4] = ch3_6_start_time

                    ch3_6_log.append(["Cut-off voltage(V):", ch3_6_data[10]])

                    ###读环境温度
                    mutex_readenvironmenttemperature.acquire()
                    ch3_6_environment_temperature = ser.readenvironmenttemperature(com1)
                    mutex_readenvironmenttemperature.release()
                    ch3_6_log.append(
                        [
                            "Start-Environment-Temperature(℃):",
                            ch3_6_environment_temperature,
                        ]
                    )

                    ch3_6_data_ntc = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data_en[42])[2:]
                                + ("0x%02x" % ch3_read_data_en[43])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch3_6_data_sensor = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data_en[58])[2:]
                                + ("0x%02x" % ch3_read_data_en[59])[2:],
                                16,
                            )
                        )
                        / 100
                    )

                    ch3_6_log.append(["Start-NTC-Temperature(℃):", ch3_6_data_ntc])

                    ch3_6_log.append(
                        ["Start-Sensor-Temperature(℃):", ch3_6_data_sensor]
                    )

                    if math.fabs(ch3_6_data_ntc - ch3_6_data_sensor) > 5:
                        ch3_6_error_data = "NTC温度异常"
                else:
                    messagebox.showinfo("错误", "请设置通道3-6合法电池截止电压")
            else:
                messagebox.showinfo("错误", "请在通道3-6输入合法的电池条码")
        else:
            messagebox.showinfo("错误", "通道3-6正在测试")


def ch3_7_confirm(ch3_7_name_confirm):
    global ch3_7_start_signal
    global ch3_7_signal
    global ch3_7_setvoltage_signal
    global ch3_7_sn_signal
    global ch3_7_set_voltage_command

    global ch3_7_log

    global ch3_7_e

    global ch3_7_error_data

    global entry_ch3_7
    global entry_ch3_7_set_voltage_value

    global ch3_7_data

    if ch3_7_name_confirm == "ch3_7":
        if ch3_7_start_signal:
            ch3_7_setvoltage()
            if ch3_7_sn_signal == 1:
                if ch3_7_setvoltage_signal == 1:
                    ch3_7_start_signal = False
                    ch3_7_signal = 1
                    ### 加锁 设置电压并启动 ###
                    entry_ch3_7["state"] = "disabled"
                    entry_ch3_7_set_voltage_value["state"] = "disabled"
                    ch3_7_error_data = ""
                    mutex.acquire()
                    ser.start(com, ch3_7_set_voltage_command)
                    ch3_readcommend_en = "030300000000A5"
                    ch3_read_data_en = ser.readdata(com, ch3_readcommend_en)
                    mutex.release()

                    ch3_7_log.append(["BatterNumber:", ch3_7_data[1]])

                    starttime = datetime.datetime.now()
                    ch3_7_log.append(
                        ["StartTime:", starttime.strftime("%Y-%m-%d %H:%M:%S")]
                    )

                    ch3_7_start_time = int(round(time.time() * 1000))
                    ch3_7_e[4] = ch3_7_start_time

                    ch3_7_log.append(["Cut-off voltage(V):", ch3_7_data[10]])

                    ###读环境温度
                    mutex_readenvironmenttemperature.acquire()
                    ch3_7_environment_temperature = ser.readenvironmenttemperature(com1)
                    mutex_readenvironmenttemperature.release()
                    ch3_7_log.append(
                        [
                            "Start-Environment-Temperature(℃):",
                            ch3_7_environment_temperature,
                        ]
                    )

                    ch3_7_data_ntc = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data_en[42])[2:]
                                + ("0x%02x" % ch3_read_data_en[43])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch3_7_data_sensor = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data_en[58])[2:]
                                + ("0x%02x" % ch3_read_data_en[59])[2:],
                                16,
                            )
                        )
                        / 100
                    )

                    ch3_7_log.append(["Start-NTC-Temperature(℃):", ch3_7_data_ntc])

                    ch3_7_log.append(
                        ["Start-Sensor-Temperature(℃):", ch3_7_data_sensor]
                    )

                    if math.fabs(ch3_7_data_ntc - ch3_7_data_sensor) > 5:
                        ch3_7_error_data = "NTC温度异常"
                else:
                    messagebox.showinfo("错误", "请设置通道3-7合法电池截止电压")
            else:
                messagebox.showinfo("错误", "请在通道3-7输入合法的电池条码")
        else:
            messagebox.showinfo("错误", "通道3-7正在测试")


def ch3_8_confirm(ch3_8_name_confirm):
    global ch3_8_start_signal
    global ch3_8_signal
    global ch3_8_setvoltage_signal
    global ch3_8_sn_signal
    global ch3_8_set_voltage_command

    global ch3_8_log

    global ch3_8_e

    global ch3_8_error_data

    global entry_ch3_8
    global entry_ch3_8_set_voltage_value

    global ch3_8_data

    if ch3_8_name_confirm == "ch3_8":
        if ch3_8_start_signal:
            ch3_8_setvoltage()
            if ch3_8_sn_signal == 1:
                if ch3_8_setvoltage_signal == 1:
                    ch3_8_start_signal = False
                    ch3_8_signal = 1
                    ### 加锁 设置电压并启动 ###
                    entry_ch3_8["state"] = "disabled"
                    entry_ch3_8_set_voltage_value["state"] = "disabled"
                    ch3_8_error_data = ""
                    mutex.acquire()
                    ser.start(com, ch3_8_set_voltage_command)
                    ch3_readcommend_en = "030300000000A5"
                    ch3_read_data_en = ser.readdata(com, ch3_readcommend_en)
                    mutex.release()

                    ch3_8_log.append(["BatterNumber:", ch3_8_data[1]])

                    starttime = datetime.datetime.now()
                    ch3_8_log.append(
                        ["StartTime:", starttime.strftime("%Y-%m-%d %H:%M:%S")]
                    )

                    ch3_8_start_time = int(round(time.time() * 1000))
                    ch3_8_e[4] = ch3_8_start_time

                    ch3_8_log.append(["Cut-off voltage(V):", ch3_8_data[10]])

                    ###读环境温度
                    mutex_readenvironmenttemperature.acquire()
                    ch3_8_environment_temperature = ser.readenvironmenttemperature(com1)
                    mutex_readenvironmenttemperature.release()
                    ch3_8_log.append(
                        [
                            "Start-Environment-Temperature(℃):",
                            ch3_8_environment_temperature,
                        ]
                    )

                    ch3_8_data_ntc = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data_en[42])[2:]
                                + ("0x%02x" % ch3_read_data_en[43])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch3_8_data_sensor = (
                        float(
                            int(
                                ("0x%02x" % ch3_read_data_en[58])[2:]
                                + ("0x%02x" % ch3_read_data_en[59])[2:],
                                16,
                            )
                        )
                        / 100
                    )

                    ch3_8_log.append(["Start-NTC-Temperature(℃):", ch3_8_data_ntc])

                    ch3_8_log.append(
                        ["Start-Sensor-Temperature(℃):", ch3_8_data_sensor]
                    )

                    if math.fabs(ch3_8_data_ntc - ch3_8_data_sensor) > 5:
                        ch3_8_error_data = "NTC温度异常"
                else:
                    messagebox.showinfo("错误", "请设置通道3-8合法电池截止电压")
            else:
                messagebox.showinfo("错误", "请在通道3-8输入合法的电池条码")
        else:
            messagebox.showinfo("错误", "通道3-8正在测试")


def ch4_1_confirm(ch4_1_name_confirm):
    global ch4_1_start_signal
    global ch4_1_signal
    global ch4_1_setvoltage_signal
    global ch4_1_sn_signal
    global ch4_1_set_voltage_command

    global ch4_1_log

    global ch4_1_e

    global ch4_1_error_data

    global entry_ch4_1
    global entry_ch4_1_set_voltage_value

    global ch4_1_data

    if ch4_1_name_confirm == "ch4_1":
        if ch4_1_start_signal:
            ch4_1_setvoltage()
            if ch4_1_sn_signal == 1:
                if ch4_1_setvoltage_signal == 1:
                    ch4_1_start_signal = False
                    ch4_1_signal = 1
                    ### 加锁 设置电压并启动 ###
                    entry_ch4_1["state"] = "disabled"
                    entry_ch4_1_set_voltage_value["state"] = "disabled"
                    ch4_1_error_data = ""
                    mutex.acquire()
                    ser.start(com, ch4_1_set_voltage_command)
                    ch4_readcommend_en = "040300000000A5"
                    ch4_read_data_en = ser.readdata(com, ch4_readcommend_en)
                    mutex.release()

                    ch4_1_log.append(["BatterNumber:", ch4_1_data[1]])

                    starttime = datetime.datetime.now()
                    ch4_1_log.append(
                        ["StartTime:", starttime.strftime("%Y-%m-%d %H:%M:%S")]
                    )

                    ch4_1_start_time = int(round(time.time() * 1000))
                    ch4_1_e[4] = ch4_1_start_time

                    ch4_1_log.append(["Cut-off voltage(V):", ch4_1_data[10]])

                    ###读环境温度
                    mutex_readenvironmenttemperature.acquire()
                    ch4_1_environment_temperature = ser.readenvironmenttemperature(com1)
                    mutex_readenvironmenttemperature.release()
                    ch4_1_log.append(
                        [
                            "Start-Environment-Temperature(℃):",
                            ch4_1_environment_temperature,
                        ]
                    )

                    ch4_1_data_ntc = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data_en[42])[2:]
                                + ("0x%02x" % ch4_read_data_en[43])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch4_1_data_sensor = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data_en[58])[2:]
                                + ("0x%02x" % ch4_read_data_en[59])[2:],
                                16,
                            )
                        )
                        / 100
                    )

                    ch4_1_log.append(["Start-NTC-Temperature(℃):", ch4_1_data_ntc])

                    ch4_1_log.append(
                        ["Start-Sensor-Temperature(℃):", ch4_1_data_sensor]
                    )

                    if math.fabs(ch4_1_data_ntc - ch4_1_data_sensor) > 5:
                        ch4_1_error_data = "NTC温度异常"
                else:
                    messagebox.showinfo("错误", "请设置通道4-1合法电池截止电压")
            else:
                messagebox.showinfo("错误", "请在通道4-1输入合法的电池条码")
        else:
            messagebox.showinfo("错误", "通道4-1正在测试")


def ch4_2_confirm(ch4_2_name_confirm):
    global ch4_2_start_signal
    global ch4_2_signal
    global ch4_2_setvoltage_signal
    global ch4_2_sn_signal
    global ch4_2_set_voltage_command

    global ch4_2_log

    global ch4_2_e

    global ch4_2_error_data

    global entry_ch4_2
    global entry_ch4_2_set_voltage_value

    global ch4_2_data

    if ch4_2_name_confirm == "ch4_2":
        if ch4_2_start_signal:
            ch4_2_setvoltage()
            if ch4_2_sn_signal == 1:
                if ch4_2_setvoltage_signal == 1:
                    ch4_2_start_signal = False
                    ch4_2_signal = 1
                    ### 加锁 设置电压并启动 ###
                    entry_ch4_2["state"] = "disabled"
                    entry_ch4_2_set_voltage_value["state"] = "disabled"
                    ch4_2_error_data = ""
                    mutex.acquire()
                    ser.start(com, ch4_2_set_voltage_command)
                    ch4_readcommend_en = "040300000000A5"
                    ch4_read_data_en = ser.readdata(com, ch4_readcommend_en)
                    mutex.release()

                    ch4_2_log.append(["BatterNumber:", ch4_2_data[1]])

                    starttime = datetime.datetime.now()
                    ch4_2_log.append(
                        ["StartTime:", starttime.strftime("%Y-%m-%d %H:%M:%S")]
                    )

                    ch4_2_start_time = int(round(time.time() * 1000))
                    ch4_2_e[4] = ch4_2_start_time

                    ch4_2_log.append(["Cut-off voltage(V):", ch4_2_data[10]])

                    ###读环境温度
                    mutex_readenvironmenttemperature.acquire()
                    ch4_2_environment_temperature = ser.readenvironmenttemperature(com1)
                    mutex_readenvironmenttemperature.release()
                    ch4_2_log.append(
                        [
                            "Start-Environment-Temperature(℃):",
                            ch4_2_environment_temperature,
                        ]
                    )

                    ch4_2_data_ntc = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data_en[42])[2:]
                                + ("0x%02x" % ch4_read_data_en[43])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch4_2_data_sensor = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data_en[58])[2:]
                                + ("0x%02x" % ch4_read_data_en[59])[2:],
                                16,
                            )
                        )
                        / 100
                    )

                    ch4_2_log.append(["Start-NTC-Temperature(℃):", ch4_2_data_ntc])

                    ch4_2_log.append(
                        ["Start-Sensor-Temperature(℃):", ch4_2_data_sensor]
                    )

                    if math.fabs(ch4_2_data_ntc - ch4_2_data_sensor) > 5:
                        ch4_2_error_data = "NTC温度异常"
                else:
                    messagebox.showinfo("错误", "请设置通道4-2合法电池截止电压")
            else:
                messagebox.showinfo("错误", "请在通道4-2输入合法的电池条码")
        else:
            messagebox.showinfo("错误", "通道4-2正在测试")


def ch4_3_confirm(ch4_3_name_confirm):
    global ch4_3_start_signal
    global ch4_3_signal
    global ch4_3_setvoltage_signal
    global ch4_3_sn_signal
    global ch4_3_set_voltage_command

    global ch4_3_log

    global ch4_3_e

    global ch4_3_error_data

    global entry_ch4_3
    global entry_ch4_3_set_voltage_value

    global ch4_3_data

    if ch4_3_name_confirm == "ch4_3":
        if ch4_3_start_signal:
            ch4_3_setvoltage()
            if ch4_3_sn_signal == 1:
                if ch4_3_setvoltage_signal == 1:
                    ch4_3_start_signal = False
                    ch4_3_signal = 1
                    ### 加锁 设置电压并启动 ###
                    entry_ch4_3["state"] = "disabled"
                    entry_ch4_3_set_voltage_value["state"] = "disabled"
                    ch4_3_error_data = ""
                    mutex.acquire()
                    ser.start(com, ch4_3_set_voltage_command)
                    ch4_readcommend_en = "040300000000A5"
                    ch4_read_data_en = ser.readdata(com, ch4_readcommend_en)
                    mutex.release()

                    ch4_3_log.append(["BatterNumber:", ch4_3_data[1]])

                    starttime = datetime.datetime.now()
                    ch4_3_log.append(
                        ["StartTime:", starttime.strftime("%Y-%m-%d %H:%M:%S")]
                    )

                    ch4_3_start_time = int(round(time.time() * 1000))
                    ch4_3_e[4] = ch4_3_start_time

                    ch4_3_log.append(["Cut-off voltage(V):", ch4_3_data[10]])

                    ###读环境温度
                    mutex_readenvironmenttemperature.acquire()
                    ch4_3_environment_temperature = ser.readenvironmenttemperature(com1)
                    mutex_readenvironmenttemperature.release()
                    ch4_3_log.append(
                        [
                            "Start-Environment-Temperature(℃):",
                            ch4_3_environment_temperature,
                        ]
                    )

                    ch4_3_data_ntc = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data_en[42])[2:]
                                + ("0x%02x" % ch4_read_data_en[43])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch4_3_data_sensor = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data_en[58])[2:]
                                + ("0x%02x" % ch4_read_data_en[59])[2:],
                                16,
                            )
                        )
                        / 100
                    )

                    ch4_3_log.append(["Start-NTC-Temperature(℃):", ch4_3_data_ntc])

                    ch4_3_log.append(
                        ["Start-Sensor-Temperature(℃):", ch4_3_data_sensor]
                    )

                    if math.fabs(ch4_3_data_ntc - ch4_3_data_sensor) > 5:
                        ch4_3_error_data = "NTC温度异常"
                else:
                    messagebox.showinfo("错误", "请设置通道4-3合法电池截止电压")
            else:
                messagebox.showinfo("错误", "请在通道4-3输入合法的电池条码")
        else:
            messagebox.showinfo("错误", "通道4-3正在测试")


def ch4_4_confirm(ch4_4_name_confirm):
    global ch4_4_start_signal
    global ch4_4_signal
    global ch4_4_setvoltage_signal
    global ch4_4_sn_signal
    global ch4_4_set_voltage_command

    global ch4_4_log

    global ch4_4_e

    global ch4_4_error_data

    global entry_ch4_4
    global entry_ch4_4_set_voltage_value

    global ch4_4_data

    if ch4_4_name_confirm == "ch4_4":
        if ch4_4_start_signal:
            ch4_4_setvoltage()
            if ch4_4_sn_signal == 1:
                if ch4_4_setvoltage_signal == 1:
                    ch4_4_start_signal = False
                    ch4_4_signal = 1
                    ### 加锁 设置电压并启动 ###
                    entry_ch4_4["state"] = "disabled"
                    entry_ch4_4_set_voltage_value["state"] = "disabled"
                    ch4_4_error_data = ""
                    mutex.acquire()
                    ser.start(com, ch4_4_set_voltage_command)
                    ch4_readcommend_en = "040300000000A5"
                    ch4_read_data_en = ser.readdata(com, ch4_readcommend_en)
                    mutex.release()

                    ch4_4_log.append(["BatterNumber:", ch4_4_data[1]])

                    starttime = datetime.datetime.now()
                    ch4_4_log.append(
                        ["StartTime:", starttime.strftime("%Y-%m-%d %H:%M:%S")]
                    )

                    ch4_4_start_time = int(round(time.time() * 1000))
                    ch4_4_e[4] = ch4_4_start_time

                    ch4_4_log.append(["Cut-off voltage(V):", ch4_4_data[10]])

                    ###读环境温度
                    mutex_readenvironmenttemperature.acquire()
                    ch4_4_environment_temperature = ser.readenvironmenttemperature(com1)
                    mutex_readenvironmenttemperature.release()
                    ch4_4_log.append(
                        [
                            "Start-Environment-Temperature(℃):",
                            ch4_4_environment_temperature,
                        ]
                    )

                    ch4_4_data_ntc = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data_en[42])[2:]
                                + ("0x%02x" % ch4_read_data_en[43])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch4_4_data_sensor = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data_en[58])[2:]
                                + ("0x%02x" % ch4_read_data_en[59])[2:],
                                16,
                            )
                        )
                        / 100
                    )

                    ch4_4_log.append(["Start-NTC-Temperature(℃):", ch4_4_data_ntc])

                    ch4_4_log.append(
                        ["Start-Sensor-Temperature(℃):", ch4_4_data_sensor]
                    )

                    if math.fabs(ch4_4_data_ntc - ch4_4_data_sensor) > 5:
                        ch4_4_error_data = "NTC温度异常"
                else:
                    messagebox.showinfo("错误", "请设置通道4-4合法电池截止电压")
            else:
                messagebox.showinfo("错误", "请在通道4-4输入合法的电池条码")
        else:
            messagebox.showinfo("错误", "通道4-4正在测试")


def ch4_5_confirm(ch4_5_name_confirm):
    global ch4_5_start_signal
    global ch4_5_signal
    global ch4_5_setvoltage_signal
    global ch4_5_sn_signal
    global ch4_5_set_voltage_command

    global ch4_5_log

    global ch4_5_e

    global ch4_5_error_data

    global entry_ch4_5
    global entry_ch4_5_set_voltage_value

    global ch4_5_data

    if ch4_5_name_confirm == "ch4_5":
        if ch4_5_start_signal:
            ch4_5_setvoltage()
            if ch4_5_sn_signal == 1:
                if ch4_5_setvoltage_signal == 1:
                    ch4_5_start_signal = False
                    ch4_5_signal = 1
                    ### 加锁 设置电压并启动 ###
                    entry_ch4_5["state"] = "disabled"
                    entry_ch4_5_set_voltage_value["state"] = "disabled"
                    ch4_5_error_data = ""
                    mutex.acquire()
                    ser.start(com, ch4_5_set_voltage_command)
                    ch4_readcommend_en = "040300000000A5"
                    ch4_read_data_en = ser.readdata(com, ch4_readcommend_en)
                    mutex.release()

                    ch4_5_log.append(["BatterNumber:", ch4_5_data[1]])

                    starttime = datetime.datetime.now()
                    ch4_5_log.append(
                        ["StartTime:", starttime.strftime("%Y-%m-%d %H:%M:%S")]
                    )

                    ch4_5_start_time = int(round(time.time() * 1000))
                    ch4_5_e[4] = ch4_5_start_time

                    ch4_5_log.append(["Cut-off voltage(V):", ch4_5_data[10]])

                    ###读环境温度
                    mutex_readenvironmenttemperature.acquire()
                    ch4_5_environment_temperature = ser.readenvironmenttemperature(com1)
                    mutex_readenvironmenttemperature.release()
                    ch4_5_log.append(
                        [
                            "Start-Environment-Temperature(℃):",
                            ch4_5_environment_temperature,
                        ]
                    )

                    ch4_5_data_ntc = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data_en[42])[2:]
                                + ("0x%02x" % ch4_read_data_en[43])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch4_5_data_sensor = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data_en[58])[2:]
                                + ("0x%02x" % ch4_read_data_en[59])[2:],
                                16,
                            )
                        )
                        / 100
                    )

                    ch4_5_log.append(["Start-NTC-Temperature(℃):", ch4_5_data_ntc])

                    ch4_5_log.append(
                        ["Start-Sensor-Temperature(℃):", ch4_5_data_sensor]
                    )

                    if math.fabs(ch4_5_data_ntc - ch4_5_data_sensor) > 5:
                        ch4_5_error_data = "NTC温度异常"
                else:
                    messagebox.showinfo("错误", "请设置通道4-5合法电池截止电压")
            else:
                messagebox.showinfo("错误", "请在通道4-5输入合法的电池条码")
        else:
            messagebox.showinfo("错误", "通道4-5正在测试")


def ch4_6_confirm(ch4_6_name_confirm):
    global ch4_6_start_signal
    global ch4_6_signal
    global ch4_6_setvoltage_signal
    global ch4_6_sn_signal
    global ch4_6_set_voltage_command

    global ch4_6_log

    global ch4_6_e

    global ch4_6_error_data

    global entry_ch4_6
    global entry_ch4_6_set_voltage_value

    global ch4_6_data

    if ch4_6_name_confirm == "ch4_6":
        if ch4_6_start_signal:
            ch4_6_setvoltage()
            if ch4_6_sn_signal == 1:
                if ch4_6_setvoltage_signal == 1:
                    ch4_6_start_signal = False
                    ch4_6_signal = 1
                    ### 加锁 设置电压并启动 ###
                    entry_ch4_6["state"] = "disabled"
                    entry_ch4_6_set_voltage_value["state"] = "disabled"
                    ch4_6_error_data = ""
                    mutex.acquire()
                    ser.start(com, ch4_6_set_voltage_command)
                    ch4_readcommend_en = "040300000000A5"
                    ch4_read_data_en = ser.readdata(com, ch4_readcommend_en)
                    mutex.release()

                    ch4_6_log.append(["BatterNumber:", ch4_6_data[1]])

                    starttime = datetime.datetime.now()
                    ch4_6_log.append(
                        ["StartTime:", starttime.strftime("%Y-%m-%d %H:%M:%S")]
                    )

                    ch4_6_start_time = int(round(time.time() * 1000))
                    ch4_6_e[4] = ch4_6_start_time

                    ch4_6_log.append(["Cut-off voltage(V):", ch4_6_data[10]])

                    ###读环境温度
                    mutex_readenvironmenttemperature.acquire()
                    ch4_6_environment_temperature = ser.readenvironmenttemperature(com1)
                    mutex_readenvironmenttemperature.release()
                    ch4_6_log.append(
                        [
                            "Start-Environment-Temperature(℃):",
                            ch4_6_environment_temperature,
                        ]
                    )

                    ch4_6_data_ntc = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data_en[42])[2:]
                                + ("0x%02x" % ch4_read_data_en[43])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch4_6_data_sensor = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data_en[58])[2:]
                                + ("0x%02x" % ch4_read_data_en[59])[2:],
                                16,
                            )
                        )
                        / 100
                    )

                    ch4_6_log.append(["Start-NTC-Temperature(℃):", ch4_6_data_ntc])

                    ch4_6_log.append(
                        ["Start-Sensor-Temperature(℃):", ch4_6_data_sensor]
                    )

                    if math.fabs(ch4_6_data_ntc - ch4_6_data_sensor) > 5:
                        ch4_6_error_data = "NTC温度异常"
                else:
                    messagebox.showinfo("错误", "请设置通道4-6合法电池截止电压")
            else:
                messagebox.showinfo("错误", "请在通道4-6输入合法的电池条码")
        else:
            messagebox.showinfo("错误", "通道4-6正在测试")


def ch4_7_confirm(ch4_7_name_confirm):
    global ch4_7_start_signal
    global ch4_7_signal
    global ch4_7_setvoltage_signal
    global ch4_7_sn_signal
    global ch4_7_set_voltage_command

    global ch4_7_log

    global ch4_7_e

    global ch4_7_error_data

    global entry_ch4_7
    global entry_ch4_7_set_voltage_value

    global ch4_7_data

    if ch4_7_name_confirm == "ch4_7":
        if ch4_7_start_signal:
            ch4_7_setvoltage()
            if ch4_7_sn_signal == 1:
                if ch4_7_setvoltage_signal == 1:
                    ch4_7_start_signal = False
                    ch4_7_signal = 1
                    ### 加锁 设置电压并启动 ###
                    entry_ch4_7["state"] = "disabled"
                    entry_ch4_7_set_voltage_value["state"] = "disabled"
                    ch4_7_error_data = ""
                    mutex.acquire()
                    ser.start(com, ch4_7_set_voltage_command)
                    ch4_readcommend_en = "040300000000A5"
                    ch4_read_data_en = ser.readdata(com, ch4_readcommend_en)
                    mutex.release()

                    ch4_7_log.append(["BatterNumber:", ch4_7_data[1]])

                    starttime = datetime.datetime.now()
                    ch4_7_log.append(
                        ["StartTime:", starttime.strftime("%Y-%m-%d %H:%M:%S")]
                    )

                    ch4_7_start_time = int(round(time.time() * 1000))
                    ch4_7_e[4] = ch4_7_start_time

                    ch4_7_log.append(["Cut-off voltage(V):", ch4_7_data[10]])

                    ###读环境温度
                    mutex_readenvironmenttemperature.acquire()
                    ch4_7_environment_temperature = ser.readenvironmenttemperature(com1)
                    mutex_readenvironmenttemperature.release()
                    ch4_7_log.append(
                        [
                            "Start-Environment-Temperature(℃):",
                            ch4_7_environment_temperature,
                        ]
                    )

                    ch4_7_data_ntc = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data_en[42])[2:]
                                + ("0x%02x" % ch4_read_data_en[43])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch4_7_data_sensor = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data_en[58])[2:]
                                + ("0x%02x" % ch4_read_data_en[59])[2:],
                                16,
                            )
                        )
                        / 100
                    )

                    ch4_7_log.append(["Start-NTC-Temperature(℃):", ch4_7_data_ntc])

                    ch4_7_log.append(
                        ["Start-Sensor-Temperature(℃):", ch4_7_data_sensor]
                    )

                    if math.fabs(ch4_7_data_ntc - ch4_7_data_sensor) > 5:
                        ch4_7_error_data = "NTC温度异常"
                else:
                    messagebox.showinfo("错误", "请设置通道4-7合法电池截止电压")
            else:
                messagebox.showinfo("错误", "请在通道4-7输入合法的电池条码")
        else:
            messagebox.showinfo("错误", "通道4-7正在测试")


def ch4_8_confirm(ch4_8_name_confirm):
    global ch4_8_start_signal
    global ch4_8_signal
    global ch4_8_setvoltage_signal
    global ch4_8_sn_signal
    global ch4_8_set_voltage_command

    global ch4_8_log

    global ch4_8_e

    global ch4_8_error_data

    global entry_ch4_8
    global entry_ch4_8_set_voltage_value

    global ch4_8_data

    if ch4_8_name_confirm == "ch4_8":
        if ch4_8_start_signal:
            ch4_8_setvoltage()
            if ch4_8_sn_signal == 1:
                if ch4_8_setvoltage_signal == 1:
                    ch4_8_start_signal = False
                    ch4_8_signal = 1
                    ### 加锁 设置电压并启动 ###
                    entry_ch4_8["state"] = "disabled"
                    entry_ch4_8_set_voltage_value["state"] = "disabled"
                    ch4_8_error_data = ""
                    mutex.acquire()
                    ser.start(com, ch4_8_set_voltage_command)
                    ch4_readcommend_en = "040300000000A5"
                    ch4_read_data_en = ser.readdata(com, ch4_readcommend_en)
                    mutex.release()

                    ch4_8_log.append(["BatterNumber:", ch4_8_data[1]])

                    starttime = datetime.datetime.now()
                    ch4_8_log.append(
                        ["StartTime:", starttime.strftime("%Y-%m-%d %H:%M:%S")]
                    )

                    ch4_8_start_time = int(round(time.time() * 1000))
                    ch4_8_e[4] = ch4_8_start_time

                    ch4_8_log.append(["Cut-off voltage(V):", ch4_8_data[10]])

                    ###读环境温度
                    mutex_readenvironmenttemperature.acquire()
                    ch4_8_environment_temperature = ser.readenvironmenttemperature(com1)
                    mutex_readenvironmenttemperature.release()
                    ch4_8_log.append(
                        [
                            "Start-Environment-Temperature(℃):",
                            ch4_8_environment_temperature,
                        ]
                    )

                    ch4_8_data_ntc = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data_en[42])[2:]
                                + ("0x%02x" % ch4_read_data_en[43])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch4_8_data_sensor = (
                        float(
                            int(
                                ("0x%02x" % ch4_read_data_en[58])[2:]
                                + ("0x%02x" % ch4_read_data_en[59])[2:],
                                16,
                            )
                        )
                        / 100
                    )

                    ch4_8_log.append(["Start-NTC-Temperature(℃):", ch4_8_data_ntc])

                    ch4_8_log.append(
                        ["Start-Sensor-Temperature(℃):", ch4_8_data_sensor]
                    )

                    if math.fabs(ch4_8_data_ntc - ch4_8_data_sensor) > 5:
                        ch4_8_error_data = "NTC温度异常"
                else:
                    messagebox.showinfo("错误", "请设置通道4-8合法电池截止电压")
            else:
                messagebox.showinfo("错误", "请在通道4-8输入合法的电池条码")
        else:
            messagebox.showinfo("错误", "通道4-8正在测试")


def ch5_1_confirm(ch5_1_name_confirm):
    global ch5_1_start_signal
    global ch5_1_signal
    global ch5_1_setvoltage_signal
    global ch5_1_sn_signal
    global ch5_1_set_voltage_command

    global ch5_1_log

    global ch5_1_e

    global ch5_1_error_data

    global entry_ch5_1
    global entry_ch5_1_set_voltage_value

    global ch5_1_data

    if ch5_1_name_confirm == "ch5_1":
        if ch5_1_start_signal:
            ch5_1_setvoltage()
            if ch5_1_sn_signal == 1:
                if ch5_1_setvoltage_signal == 1:
                    ch5_1_start_signal = False
                    ch5_1_signal = 1
                    ### 加锁 设置电压并启动 ###
                    entry_ch5_1["state"] = "disabled"
                    entry_ch5_1_set_voltage_value["state"] = "disabled"
                    ch5_1_error_data = ""
                    mutex.acquire()
                    ser.start(com, ch5_1_set_voltage_command)
                    ch5_readcommend_en = "050300000000A5"
                    ch5_read_data_en = ser.readdata(com, ch5_readcommend_en)
                    mutex.release()

                    ch5_1_log.append(["BatterNumber:", ch5_1_data[1]])

                    starttime = datetime.datetime.now()
                    ch5_1_log.append(
                        ["StartTime:", starttime.strftime("%Y-%m-%d %H:%M:%S")]
                    )

                    ch5_1_start_time = int(round(time.time() * 1000))
                    ch5_1_e[4] = ch5_1_start_time

                    ch5_1_log.append(["Cut-off voltage(V):", ch5_1_data[10]])

                    ###读环境温度
                    mutex_readenvironmenttemperature.acquire()
                    ch5_1_environment_temperature = ser.readenvironmenttemperature(com1)
                    mutex_readenvironmenttemperature.release()
                    ch5_1_log.append(
                        [
                            "Start-Environment-Temperature(℃):",
                            ch5_1_environment_temperature,
                        ]
                    )

                    ch5_1_data_ntc = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data_en[42])[2:]
                                + ("0x%02x" % ch5_read_data_en[43])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch5_1_data_sensor = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data_en[58])[2:]
                                + ("0x%02x" % ch5_read_data_en[59])[2:],
                                16,
                            )
                        )
                        / 100
                    )

                    ch5_1_log.append(["Start-NTC-Temperature(℃):", ch5_1_data_ntc])

                    ch5_1_log.append(
                        ["Start-Sensor-Temperature(℃):", ch5_1_data_sensor]
                    )

                    if math.fabs(ch5_1_data_ntc - ch5_1_data_sensor) > 5:
                        ch5_1_error_data = "NTC温度异常"
                else:
                    messagebox.showinfo("错误", "请设置通道5-1合法电池截止电压")
            else:
                messagebox.showinfo("错误", "请在通道5-1输入合法的电池条码")
        else:
            messagebox.showinfo("错误", "通道5-1正在测试")


def ch5_2_confirm(ch5_2_name_confirm):
    global ch5_2_start_signal
    global ch5_2_signal
    global ch5_2_setvoltage_signal
    global ch5_2_sn_signal
    global ch5_2_set_voltage_command

    global ch5_2_log

    global ch5_2_e

    global ch5_2_error_data

    global entry_ch5_2
    global entry_ch5_2_set_voltage_value

    global ch5_2_data

    if ch5_2_name_confirm == "ch5_2":
        if ch5_2_start_signal:
            ch5_2_setvoltage()
            if ch5_2_sn_signal == 1:
                if ch5_2_setvoltage_signal == 1:
                    ch5_2_start_signal = False
                    ch5_2_signal = 1
                    ### 加锁 设置电压并启动 ###
                    entry_ch5_2["state"] = "disabled"
                    entry_ch5_2_set_voltage_value["state"] = "disabled"
                    ch5_2_error_data = ""
                    mutex.acquire()
                    ser.start(com, ch5_2_set_voltage_command)
                    ch5_readcommend_en = "050300000000A5"
                    ch5_read_data_en = ser.readdata(com, ch5_readcommend_en)
                    mutex.release()

                    ch5_2_log.append(["BatterNumber:", ch5_2_data[1]])

                    starttime = datetime.datetime.now()
                    ch5_2_log.append(
                        ["StartTime:", starttime.strftime("%Y-%m-%d %H:%M:%S")]
                    )

                    ch5_2_start_time = int(round(time.time() * 1000))
                    ch5_2_e[4] = ch5_2_start_time

                    ch5_2_log.append(["Cut-off voltage(V):", ch5_2_data[10]])

                    ###读环境温度
                    mutex_readenvironmenttemperature.acquire()
                    ch5_2_environment_temperature = ser.readenvironmenttemperature(com1)
                    mutex_readenvironmenttemperature.release()
                    ch5_2_log.append(
                        [
                            "Start-Environment-Temperature(℃):",
                            ch5_2_environment_temperature,
                        ]
                    )

                    ch5_2_data_ntc = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data_en[42])[2:]
                                + ("0x%02x" % ch5_read_data_en[43])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch5_2_data_sensor = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data_en[58])[2:]
                                + ("0x%02x" % ch5_read_data_en[59])[2:],
                                16,
                            )
                        )
                        / 100
                    )

                    ch5_2_log.append(["Start-NTC-Temperature(℃):", ch5_2_data_ntc])

                    ch5_2_log.append(
                        ["Start-Sensor-Temperature(℃):", ch5_2_data_sensor]
                    )

                    if math.fabs(ch5_2_data_ntc - ch5_2_data_sensor) > 5:
                        ch5_2_error_data = "NTC温度异常"
                else:
                    messagebox.showinfo("错误", "请设置通道5-2合法电池截止电压")
            else:
                messagebox.showinfo("错误", "请在通道5-2输入合法的电池条码")
        else:
            messagebox.showinfo("错误", "通道5-2正在测试")


def ch5_3_confirm(ch5_3_name_confirm):
    global ch5_3_start_signal
    global ch5_3_signal
    global ch5_3_setvoltage_signal
    global ch5_3_sn_signal
    global ch5_3_set_voltage_command

    global ch5_3_log

    global ch5_3_e

    global ch5_3_error_data

    global entry_ch5_3
    global entry_ch5_3_set_voltage_value

    global ch5_3_data

    if ch5_3_name_confirm == "ch5_3":
        if ch5_3_start_signal:
            ch5_3_setvoltage()
            if ch5_3_sn_signal == 1:
                if ch5_3_setvoltage_signal == 1:
                    ch5_3_start_signal = False
                    ch5_3_signal = 1
                    ### 加锁 设置电压并启动 ###
                    entry_ch5_3["state"] = "disabled"
                    entry_ch5_3_set_voltage_value["state"] = "disabled"
                    ch5_3_error_data = ""
                    mutex.acquire()
                    ser.start(com, ch5_3_set_voltage_command)
                    ch5_readcommend_en = "050300000000A5"
                    ch5_read_data_en = ser.readdata(com, ch5_readcommend_en)
                    mutex.release()

                    ch5_3_log.append(["BatterNumber:", ch5_3_data[1]])

                    starttime = datetime.datetime.now()
                    ch5_3_log.append(
                        ["StartTime:", starttime.strftime("%Y-%m-%d %H:%M:%S")]
                    )

                    ch5_3_start_time = int(round(time.time() * 1000))
                    ch5_3_e[4] = ch5_3_start_time

                    ch5_3_log.append(["Cut-off voltage(V):", ch5_3_data[10]])

                    ###读环境温度
                    mutex_readenvironmenttemperature.acquire()
                    ch5_3_environment_temperature = ser.readenvironmenttemperature(com1)
                    mutex_readenvironmenttemperature.release()
                    ch5_3_log.append(
                        [
                            "Start-Environment-Temperature(℃):",
                            ch5_3_environment_temperature,
                        ]
                    )

                    ch5_3_data_ntc = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data_en[42])[2:]
                                + ("0x%02x" % ch5_read_data_en[43])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch5_3_data_sensor = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data_en[58])[2:]
                                + ("0x%02x" % ch5_read_data_en[59])[2:],
                                16,
                            )
                        )
                        / 100
                    )

                    ch5_3_log.append(["Start-NTC-Temperature(℃):", ch5_3_data_ntc])

                    ch5_3_log.append(
                        ["Start-Sensor-Temperature(℃):", ch5_3_data_sensor]
                    )

                    if math.fabs(ch5_3_data_ntc - ch5_3_data_sensor) > 5:
                        ch5_3_error_data = "NTC温度异常"
                else:
                    messagebox.showinfo("错误", "请设置通道5-3合法电池截止电压")
            else:
                messagebox.showinfo("错误", "请在通道5-3输入合法的电池条码")
        else:
            messagebox.showinfo("错误", "通道5-3正在测试")


def ch5_4_confirm(ch5_4_name_confirm):
    global ch5_4_start_signal
    global ch5_4_signal
    global ch5_4_setvoltage_signal
    global ch5_4_sn_signal
    global ch5_4_set_voltage_command

    global ch5_4_log

    global ch5_4_e

    global ch5_4_error_data

    global entry_ch5_4
    global entry_ch5_4_set_voltage_value

    global ch5_4_data

    if ch5_4_name_confirm == "ch5_4":
        if ch5_4_start_signal:
            ch5_4_setvoltage()
            if ch5_4_sn_signal == 1:
                if ch5_4_setvoltage_signal == 1:
                    ch5_4_start_signal = False
                    ch5_4_signal = 1
                    ### 加锁 设置电压并启动 ###
                    entry_ch5_4["state"] = "disabled"
                    entry_ch5_4_set_voltage_value["state"] = "disabled"
                    ch5_4_error_data = ""
                    mutex.acquire()
                    ser.start(com, ch5_4_set_voltage_command)
                    ch5_readcommend_en = "050300000000A5"
                    ch5_read_data_en = ser.readdata(com, ch5_readcommend_en)
                    mutex.release()

                    ch5_4_log.append(["BatterNumber:", ch5_4_data[1]])

                    starttime = datetime.datetime.now()
                    ch5_4_log.append(
                        ["StartTime:", starttime.strftime("%Y-%m-%d %H:%M:%S")]
                    )

                    ch5_4_start_time = int(round(time.time() * 1000))
                    ch5_4_e[4] = ch5_4_start_time

                    ch5_4_log.append(["Cut-off voltage(V):", ch5_4_data[10]])

                    ###读环境温度
                    mutex_readenvironmenttemperature.acquire()
                    ch5_4_environment_temperature = ser.readenvironmenttemperature(com1)
                    mutex_readenvironmenttemperature.release()
                    ch5_4_log.append(
                        [
                            "Start-Environment-Temperature(℃):",
                            ch5_4_environment_temperature,
                        ]
                    )

                    ch5_4_data_ntc = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data_en[42])[2:]
                                + ("0x%02x" % ch5_read_data_en[43])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch5_4_data_sensor = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data_en[58])[2:]
                                + ("0x%02x" % ch5_read_data_en[59])[2:],
                                16,
                            )
                        )
                        / 100
                    )

                    ch5_4_log.append(["Start-NTC-Temperature(℃):", ch5_4_data_ntc])

                    ch5_4_log.append(
                        ["Start-Sensor-Temperature(℃):", ch5_4_data_sensor]
                    )

                    if math.fabs(ch5_4_data_ntc - ch5_4_data_sensor) > 5:
                        ch5_4_error_data = "NTC温度异常"
                else:
                    messagebox.showinfo("错误", "请设置通道5-4合法电池截止电压")
            else:
                messagebox.showinfo("错误", "请在通道5-4输入合法的电池条码")
        else:
            messagebox.showinfo("错误", "通道5-4正在测试")


def ch5_5_confirm(ch5_5_name_confirm):
    global ch5_5_start_signal
    global ch5_5_signal
    global ch5_5_setvoltage_signal
    global ch5_5_sn_signal
    global ch5_5_set_voltage_command

    global ch5_5_log

    global ch5_5_e

    global ch5_5_error_data

    global entry_ch5_5
    global entry_ch5_5_set_voltage_value

    global ch5_5_data

    if ch5_5_name_confirm == "ch5_5":
        if ch5_5_start_signal:
            ch5_5_setvoltage()
            if ch5_5_sn_signal == 1:
                if ch5_5_setvoltage_signal == 1:
                    ch5_5_start_signal = False
                    ch5_5_signal = 1
                    ### 加锁 设置电压并启动 ###
                    entry_ch5_5["state"] = "disabled"
                    entry_ch5_5_set_voltage_value["state"] = "disabled"
                    ch5_5_error_data = ""
                    mutex.acquire()
                    ser.start(com, ch5_5_set_voltage_command)
                    ch5_readcommend_en = "050300000000A5"
                    ch5_read_data_en = ser.readdata(com, ch5_readcommend_en)
                    mutex.release()

                    ch5_5_log.append(["BatterNumber:", ch5_5_data[1]])

                    starttime = datetime.datetime.now()
                    ch5_5_log.append(
                        ["StartTime:", starttime.strftime("%Y-%m-%d %H:%M:%S")]
                    )

                    ch5_5_start_time = int(round(time.time() * 1000))
                    ch5_5_e[4] = ch5_5_start_time

                    ch5_5_log.append(["Cut-off voltage(V):", ch5_5_data[10]])

                    ###读环境温度
                    mutex_readenvironmenttemperature.acquire()
                    ch5_5_environment_temperature = ser.readenvironmenttemperature(com1)
                    mutex_readenvironmenttemperature.release()
                    ch5_5_log.append(
                        [
                            "Start-Environment-Temperature(℃):",
                            ch5_5_environment_temperature,
                        ]
                    )

                    ch5_5_data_ntc = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data_en[42])[2:]
                                + ("0x%02x" % ch5_read_data_en[43])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch5_5_data_sensor = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data_en[58])[2:]
                                + ("0x%02x" % ch5_read_data_en[59])[2:],
                                16,
                            )
                        )
                        / 100
                    )

                    ch5_5_log.append(["Start-NTC-Temperature(℃):", ch5_5_data_ntc])

                    ch5_5_log.append(
                        ["Start-Sensor-Temperature(℃):", ch5_5_data_sensor]
                    )

                    if math.fabs(ch5_5_data_ntc - ch5_5_data_sensor) > 5:
                        ch5_5_error_data = "NTC温度异常"
                else:
                    messagebox.showinfo("错误", "请设置通道5-5合法电池截止电压")
            else:
                messagebox.showinfo("错误", "请在通道5-5输入合法的电池条码")
        else:
            messagebox.showinfo("错误", "通道5-5正在测试")


def ch5_6_confirm(ch5_6_name_confirm):
    global ch5_6_start_signal
    global ch5_6_signal
    global ch5_6_setvoltage_signal
    global ch5_6_sn_signal
    global ch5_6_set_voltage_command

    global ch5_6_log

    global ch5_6_e

    global ch5_6_error_data

    global entry_ch5_6
    global entry_ch5_6_set_voltage_value

    global ch5_6_data

    if ch5_6_name_confirm == "ch5_6":
        if ch5_6_start_signal:
            ch5_6_setvoltage()
            if ch5_6_sn_signal == 1:
                if ch5_6_setvoltage_signal == 1:
                    ch5_6_start_signal = False
                    ch5_6_signal = 1
                    ### 加锁 设置电压并启动 ###
                    entry_ch5_6["state"] = "disabled"
                    entry_ch5_6_set_voltage_value["state"] = "disabled"
                    ch5_6_error_data = ""
                    mutex.acquire()
                    ser.start(com, ch5_6_set_voltage_command)
                    ch5_readcommend_en = "050300000000A5"
                    ch5_read_data_en = ser.readdata(com, ch5_readcommend_en)
                    mutex.release()

                    ch5_6_log.append(["BatterNumber:", ch5_6_data[1]])

                    starttime = datetime.datetime.now()
                    ch5_6_log.append(
                        ["StartTime:", starttime.strftime("%Y-%m-%d %H:%M:%S")]
                    )

                    ch5_6_start_time = int(round(time.time() * 1000))
                    ch5_6_e[4] = ch5_6_start_time

                    ch5_6_log.append(["Cut-off voltage(V):", ch5_6_data[10]])

                    ###读环境温度
                    mutex_readenvironmenttemperature.acquire()
                    ch5_6_environment_temperature = ser.readenvironmenttemperature(com1)
                    mutex_readenvironmenttemperature.release()
                    ch5_6_log.append(
                        [
                            "Start-Environment-Temperature(℃):",
                            ch5_6_environment_temperature,
                        ]
                    )

                    ch5_6_data_ntc = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data_en[42])[2:]
                                + ("0x%02x" % ch5_read_data_en[43])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch5_6_data_sensor = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data_en[58])[2:]
                                + ("0x%02x" % ch5_read_data_en[59])[2:],
                                16,
                            )
                        )
                        / 100
                    )

                    ch5_6_log.append(["Start-NTC-Temperature(℃):", ch5_6_data_ntc])

                    ch5_6_log.append(
                        ["Start-Sensor-Temperature(℃):", ch5_6_data_sensor]
                    )

                    if math.fabs(ch5_6_data_ntc - ch5_6_data_sensor) > 5:
                        ch5_6_error_data = "NTC温度异常"
                else:
                    messagebox.showinfo("错误", "请设置通道5-6合法电池截止电压")
            else:
                messagebox.showinfo("错误", "请在通道5-6输入合法的电池条码")
        else:
            messagebox.showinfo("错误", "通道5-6正在测试")


def ch5_7_confirm(ch5_7_name_confirm):
    global ch5_7_start_signal
    global ch5_7_signal
    global ch5_7_setvoltage_signal
    global ch5_7_sn_signal
    global ch5_7_set_voltage_command

    global ch5_7_log

    global ch5_7_e

    global ch5_7_error_data

    global entry_ch5_7
    global entry_ch5_7_set_voltage_value

    global ch5_7_data

    if ch5_7_name_confirm == "ch5_7":
        if ch5_7_start_signal:
            ch5_7_setvoltage()
            if ch5_7_sn_signal == 1:
                if ch5_7_setvoltage_signal == 1:
                    ch5_7_start_signal = False
                    ch5_7_signal = 1
                    ### 加锁 设置电压并启动 ###
                    entry_ch5_7["state"] = "disabled"
                    entry_ch5_7_set_voltage_value["state"] = "disabled"
                    ch5_7_error_data = ""
                    mutex.acquire()
                    ser.start(com, ch5_7_set_voltage_command)
                    ch5_readcommend_en = "050300000000A5"
                    ch5_read_data_en = ser.readdata(com, ch5_readcommend_en)
                    mutex.release()

                    ch5_7_log.append(["BatterNumber:", ch5_7_data[1]])

                    starttime = datetime.datetime.now()
                    ch5_7_log.append(
                        ["StartTime:", starttime.strftime("%Y-%m-%d %H:%M:%S")]
                    )

                    ch5_7_start_time = int(round(time.time() * 1000))
                    ch5_7_e[4] = ch5_7_start_time

                    ch5_7_log.append(["Cut-off voltage(V):", ch5_7_data[10]])

                    ###读环境温度
                    mutex_readenvironmenttemperature.acquire()
                    ch5_7_environment_temperature = ser.readenvironmenttemperature(com1)
                    mutex_readenvironmenttemperature.release()
                    ch5_7_log.append(
                        [
                            "Start-Environment-Temperature(℃):",
                            ch5_7_environment_temperature,
                        ]
                    )

                    ch5_7_data_ntc = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data_en[42])[2:]
                                + ("0x%02x" % ch5_read_data_en[43])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch5_7_data_sensor = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data_en[58])[2:]
                                + ("0x%02x" % ch5_read_data_en[59])[2:],
                                16,
                            )
                        )
                        / 100
                    )

                    ch5_7_log.append(["Start-NTC-Temperature(℃):", ch5_7_data_ntc])

                    ch5_7_log.append(
                        ["Start-Sensor-Temperature(℃):", ch5_7_data_sensor]
                    )

                    if math.fabs(ch5_7_data_ntc - ch5_7_data_sensor) > 5:
                        ch5_7_error_data = "NTC温度异常"
                else:
                    messagebox.showinfo("错误", "请设置通道5-7合法电池截止电压")
            else:
                messagebox.showinfo("错误", "请在通道5-7输入合法的电池条码")
        else:
            messagebox.showinfo("错误", "通道5-7正在测试")


def ch5_8_confirm(ch5_8_name_confirm):
    global ch5_8_start_signal
    global ch5_8_signal
    global ch5_8_setvoltage_signal
    global ch5_8_sn_signal
    global ch5_8_set_voltage_command

    global ch5_8_log

    global ch5_8_e

    global ch5_8_error_data

    global entry_ch5_8
    global entry_ch5_8_set_voltage_value

    global ch5_8_data

    if ch5_8_name_confirm == "ch5_8":
        if ch5_8_start_signal:
            ch5_8_setvoltage()
            if ch5_8_sn_signal == 1:
                if ch5_8_setvoltage_signal == 1:
                    ch5_8_start_signal = False
                    ch5_8_signal = 1
                    ### 加锁 设置电压并启动 ###
                    entry_ch5_8["state"] = "disabled"
                    entry_ch5_8_set_voltage_value["state"] = "disabled"
                    ch5_8_error_data = ""
                    mutex.acquire()
                    ser.start(com, ch5_8_set_voltage_command)
                    ch5_readcommend_en = "050300000000A5"
                    ch5_read_data_en = ser.readdata(com, ch5_readcommend_en)
                    mutex.release()

                    ch5_8_log.append(["BatterNumber:", ch5_8_data[1]])

                    starttime = datetime.datetime.now()
                    ch5_8_log.append(
                        ["StartTime:", starttime.strftime("%Y-%m-%d %H:%M:%S")]
                    )

                    ch5_8_start_time = int(round(time.time() * 1000))
                    ch5_8_e[4] = ch5_8_start_time

                    ch5_8_log.append(["Cut-off voltage(V):", ch5_8_data[10]])

                    ###读环境温度
                    mutex_readenvironmenttemperature.acquire()
                    ch5_8_environment_temperature = ser.readenvironmenttemperature(com1)
                    mutex_readenvironmenttemperature.release()
                    ch5_8_log.append(
                        [
                            "Start-Environment-Temperature(℃):",
                            ch5_8_environment_temperature,
                        ]
                    )

                    ch5_8_data_ntc = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data_en[42])[2:]
                                + ("0x%02x" % ch5_read_data_en[43])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch5_8_data_sensor = (
                        float(
                            int(
                                ("0x%02x" % ch5_read_data_en[58])[2:]
                                + ("0x%02x" % ch5_read_data_en[59])[2:],
                                16,
                            )
                        )
                        / 100
                    )

                    ch5_8_log.append(["Start-NTC-Temperature(℃):", ch5_8_data_ntc])

                    ch5_8_log.append(
                        ["Start-Sensor-Temperature(℃):", ch5_8_data_sensor]
                    )

                    if math.fabs(ch5_8_data_ntc - ch5_8_data_sensor) > 5:
                        ch5_8_error_data = "NTC温度异常"
                else:
                    messagebox.showinfo("错误", "请设置通道5-8合法电池截止电压")
            else:
                messagebox.showinfo("错误", "请在通道5-8输入合法的电池条码")
        else:
            messagebox.showinfo("错误", "通道5-8正在测试")


def ch6_1_confirm(ch6_1_name_confirm):
    global ch6_1_start_signal
    global ch6_1_signal
    global ch6_1_setvoltage_signal
    global ch6_1_sn_signal
    global ch6_1_set_voltage_command

    global ch6_1_log

    global ch6_1_e

    global ch6_1_error_data

    global entry_ch6_1
    global entry_ch6_1_set_voltage_value

    global ch6_1_data

    if ch6_1_name_confirm == "ch6_1":
        if ch6_1_start_signal:
            ch6_1_setvoltage()
            if ch6_1_sn_signal == 1:
                if ch6_1_setvoltage_signal == 1:
                    ch6_1_start_signal = False
                    ch6_1_signal = 1
                    ### 加锁 设置电压并启动 ###
                    entry_ch6_1["state"] = "disabled"
                    entry_ch6_1_set_voltage_value["state"] = "disabled"
                    ch6_1_error_data = ""
                    mutex.acquire()
                    ser.start(com, ch6_1_set_voltage_command)
                    ch6_readcommend_en = "060300000000A5"
                    ch6_read_data_en = ser.readdata(com, ch6_readcommend_en)
                    mutex.release()

                    ch6_1_log.append(["BatterNumber:", ch6_1_data[1]])

                    starttime = datetime.datetime.now()
                    ch6_1_log.append(
                        ["StartTime:", starttime.strftime("%Y-%m-%d %H:%M:%S")]
                    )

                    ch6_1_start_time = int(round(time.time() * 1000))
                    ch6_1_e[4] = ch6_1_start_time

                    ch6_1_log.append(["Cut-off voltage(V):", ch6_1_data[10]])

                    ###读环境温度
                    mutex_readenvironmenttemperature.acquire()
                    ch6_1_environment_temperature = ser.readenvironmenttemperature(com1)
                    mutex_readenvironmenttemperature.release()
                    ch6_1_log.append(
                        [
                            "Start-Environment-Temperature(℃):",
                            ch6_1_environment_temperature,
                        ]
                    )

                    ch6_1_data_ntc = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data_en[42])[2:]
                                + ("0x%02x" % ch6_read_data_en[43])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch6_1_data_sensor = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data_en[58])[2:]
                                + ("0x%02x" % ch6_read_data_en[59])[2:],
                                16,
                            )
                        )
                        / 100
                    )

                    ch6_1_log.append(["Start-NTC-Temperature(℃):", ch6_1_data_ntc])

                    ch6_1_log.append(
                        ["Start-Sensor-Temperature(℃):", ch6_1_data_sensor]
                    )

                    if math.fabs(ch6_1_data_ntc - ch6_1_data_sensor) > 5:
                        ch6_1_error_data = "NTC温度异常"
                else:
                    messagebox.showinfo("错误", "请设置通道6-1合法电池截止电压")
            else:
                messagebox.showinfo("错误", "请在通道6-1输入合法的电池条码")
        else:
            messagebox.showinfo("错误", "通道6-1正在测试")


def ch6_2_confirm(ch6_2_name_confirm):
    global ch6_2_start_signal
    global ch6_2_signal
    global ch6_2_setvoltage_signal
    global ch6_2_sn_signal
    global ch6_2_set_voltage_command

    global ch6_2_log

    global ch6_2_e

    global ch6_2_error_data

    global entry_ch6_2
    global entry_ch6_2_set_voltage_value

    global ch6_2_data

    if ch6_2_name_confirm == "ch6_2":
        if ch6_2_start_signal:
            ch6_2_setvoltage()
            if ch6_2_sn_signal == 1:
                if ch6_2_setvoltage_signal == 1:
                    ch6_2_start_signal = False
                    ch6_2_signal = 1
                    ### 加锁 设置电压并启动 ###
                    entry_ch6_2["state"] = "disabled"
                    entry_ch6_2_set_voltage_value["state"] = "disabled"
                    ch6_2_error_data = ""
                    mutex.acquire()
                    ser.start(com, ch6_2_set_voltage_command)
                    ch6_readcommend_en = "060300000000A5"
                    ch6_read_data_en = ser.readdata(com, ch6_readcommend_en)
                    mutex.release()

                    ch6_2_log.append(["BatterNumber:", ch6_2_data[1]])

                    starttime = datetime.datetime.now()
                    ch6_2_log.append(
                        ["StartTime:", starttime.strftime("%Y-%m-%d %H:%M:%S")]
                    )

                    ch6_2_start_time = int(round(time.time() * 1000))
                    ch6_2_e[4] = ch6_2_start_time

                    ch6_2_log.append(["Cut-off voltage(V):", ch6_2_data[10]])

                    ###读环境温度
                    mutex_readenvironmenttemperature.acquire()
                    ch6_2_environment_temperature = ser.readenvironmenttemperature(com1)
                    mutex_readenvironmenttemperature.release()
                    ch6_2_log.append(
                        [
                            "Start-Environment-Temperature(℃):",
                            ch6_2_environment_temperature,
                        ]
                    )

                    ch6_2_data_ntc = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data_en[42])[2:]
                                + ("0x%02x" % ch6_read_data_en[43])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch6_2_data_sensor = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data_en[58])[2:]
                                + ("0x%02x" % ch6_read_data_en[59])[2:],
                                16,
                            )
                        )
                        / 100
                    )

                    ch6_2_log.append(["Start-NTC-Temperature(℃):", ch6_2_data_ntc])

                    ch6_2_log.append(
                        ["Start-Sensor-Temperature(℃):", ch6_2_data_sensor]
                    )

                    if math.fabs(ch6_2_data_ntc - ch6_2_data_sensor) > 5:
                        ch6_2_error_data = "NTC温度异常"
                else:
                    messagebox.showinfo("错误", "请设置通道6-2合法电池截止电压")
            else:
                messagebox.showinfo("错误", "请在通道6-2输入合法的电池条码")
        else:
            messagebox.showinfo("错误", "通道6-2正在测试")


def ch6_3_confirm(ch6_3_name_confirm):
    global ch6_3_start_signal
    global ch6_3_signal
    global ch6_3_setvoltage_signal
    global ch6_3_sn_signal
    global ch6_3_set_voltage_command

    global ch6_3_log

    global ch6_3_e

    global ch6_3_error_data

    global entry_ch6_3
    global entry_ch6_3_set_voltage_value

    global ch6_3_data

    if ch6_3_name_confirm == "ch6_3":
        if ch6_3_start_signal:
            ch6_3_setvoltage()
            if ch6_3_sn_signal == 1:
                if ch6_3_setvoltage_signal == 1:
                    ch6_3_start_signal = False
                    ch6_3_signal = 1
                    ### 加锁 设置电压并启动 ###
                    entry_ch6_3["state"] = "disabled"
                    entry_ch6_3_set_voltage_value["state"] = "disabled"
                    ch6_3_error_data = ""
                    mutex.acquire()
                    ser.start(com, ch6_3_set_voltage_command)
                    ch6_readcommend_en = "060300000000A5"
                    ch6_read_data_en = ser.readdata(com, ch6_readcommend_en)
                    mutex.release()

                    ch6_3_log.append(["BatterNumber:", ch6_3_data[1]])

                    starttime = datetime.datetime.now()
                    ch6_3_log.append(
                        ["StartTime:", starttime.strftime("%Y-%m-%d %H:%M:%S")]
                    )

                    ch6_3_start_time = int(round(time.time() * 1000))
                    ch6_3_e[4] = ch6_3_start_time

                    ch6_3_log.append(["Cut-off voltage(V):", ch6_3_data[10]])

                    ###读环境温度
                    mutex_readenvironmenttemperature.acquire()
                    ch6_3_environment_temperature = ser.readenvironmenttemperature(com1)
                    mutex_readenvironmenttemperature.release()
                    ch6_3_log.append(
                        [
                            "Start-Environment-Temperature(℃):",
                            ch6_3_environment_temperature,
                        ]
                    )

                    ch6_3_data_ntc = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data_en[42])[2:]
                                + ("0x%02x" % ch6_read_data_en[43])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch6_3_data_sensor = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data_en[58])[2:]
                                + ("0x%02x" % ch6_read_data_en[59])[2:],
                                16,
                            )
                        )
                        / 100
                    )

                    ch6_3_log.append(["Start-NTC-Temperature(℃):", ch6_3_data_ntc])

                    ch6_3_log.append(
                        ["Start-Sensor-Temperature(℃):", ch6_3_data_sensor]
                    )

                    if math.fabs(ch6_3_data_ntc - ch6_3_data_sensor) > 5:
                        ch6_3_error_data = "NTC温度异常"
                else:
                    messagebox.showinfo("错误", "请设置通道6-3合法电池截止电压")
            else:
                messagebox.showinfo("错误", "请在通道6-3输入合法的电池条码")
        else:
            messagebox.showinfo("错误", "通道6-3正在测试")


def ch6_4_confirm(ch6_4_name_confirm):
    global ch6_4_start_signal
    global ch6_4_signal
    global ch6_4_setvoltage_signal
    global ch6_4_sn_signal
    global ch6_4_set_voltage_command

    global ch6_4_log

    global ch6_4_e

    global ch6_4_error_data

    global entry_ch6_4
    global entry_ch6_4_set_voltage_value

    global ch6_4_data

    if ch6_4_name_confirm == "ch6_4":
        if ch6_4_start_signal:
            ch6_4_setvoltage()
            if ch6_4_sn_signal == 1:
                if ch6_4_setvoltage_signal == 1:
                    ch6_4_start_signal = False
                    ch6_4_signal = 1
                    ### 加锁 设置电压并启动 ###
                    entry_ch6_4["state"] = "disabled"
                    entry_ch6_4_set_voltage_value["state"] = "disabled"
                    ch6_4_error_data = ""
                    mutex.acquire()
                    ser.start(com, ch6_4_set_voltage_command)
                    ch6_readcommend_en = "060300000000A5"
                    ch6_read_data_en = ser.readdata(com, ch6_readcommend_en)
                    mutex.release()

                    ch6_4_log.append(["BatterNumber:", ch6_4_data[1]])

                    starttime = datetime.datetime.now()
                    ch6_4_log.append(
                        ["StartTime:", starttime.strftime("%Y-%m-%d %H:%M:%S")]
                    )

                    ch6_4_start_time = int(round(time.time() * 1000))
                    ch6_4_e[4] = ch6_4_start_time

                    ch6_4_log.append(["Cut-off voltage(V):", ch6_4_data[10]])

                    ###读环境温度
                    mutex_readenvironmenttemperature.acquire()
                    ch6_4_environment_temperature = ser.readenvironmenttemperature(com1)
                    mutex_readenvironmenttemperature.release()
                    ch6_4_log.append(
                        [
                            "Start-Environment-Temperature(℃):",
                            ch6_4_environment_temperature,
                        ]
                    )

                    ch6_4_data_ntc = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data_en[42])[2:]
                                + ("0x%02x" % ch6_read_data_en[43])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch6_4_data_sensor = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data_en[58])[2:]
                                + ("0x%02x" % ch6_read_data_en[59])[2:],
                                16,
                            )
                        )
                        / 100
                    )

                    ch6_4_log.append(["Start-NTC-Temperature(℃):", ch6_4_data_ntc])

                    ch6_4_log.append(
                        ["Start-Sensor-Temperature(℃):", ch6_4_data_sensor]
                    )

                    if math.fabs(ch6_4_data_ntc - ch6_4_data_sensor) > 5:
                        ch6_4_error_data = "NTC温度异常"
                else:
                    messagebox.showinfo("错误", "请设置通道6-4合法电池截止电压")
            else:
                messagebox.showinfo("错误", "请在通道6-4输入合法的电池条码")
        else:
            messagebox.showinfo("错误", "通道6-4正在测试")


def ch6_5_confirm(ch6_5_name_confirm):
    global ch6_5_start_signal
    global ch6_5_signal
    global ch6_5_setvoltage_signal
    global ch6_5_sn_signal
    global ch6_5_set_voltage_command

    global ch6_5_log

    global ch6_5_e

    global ch6_5_error_data

    global entry_ch6_5
    global entry_ch6_5_set_voltage_value

    global ch6_5_data

    if ch6_5_name_confirm == "ch6_5":
        if ch6_5_start_signal:
            ch6_5_setvoltage()
            if ch6_5_sn_signal == 1:
                if ch6_5_setvoltage_signal == 1:
                    ch6_5_start_signal = False
                    ch6_5_signal = 1
                    ### 加锁 设置电压并启动 ###
                    entry_ch6_5["state"] = "disabled"
                    entry_ch6_5_set_voltage_value["state"] = "disabled"
                    ch6_5_error_data = ""
                    mutex.acquire()
                    ser.start(com, ch6_5_set_voltage_command)
                    ch6_readcommend_en = "060300000000A5"
                    ch6_read_data_en = ser.readdata(com, ch6_readcommend_en)
                    mutex.release()

                    ch6_5_log.append(["BatterNumber:", ch6_5_data[1]])

                    starttime = datetime.datetime.now()
                    ch6_5_log.append(
                        ["StartTime:", starttime.strftime("%Y-%m-%d %H:%M:%S")]
                    )

                    ch6_5_start_time = int(round(time.time() * 1000))
                    ch6_5_e[4] = ch6_5_start_time

                    ch6_5_log.append(["Cut-off voltage(V):", ch6_5_data[10]])

                    ###读环境温度
                    mutex_readenvironmenttemperature.acquire()
                    ch6_5_environment_temperature = ser.readenvironmenttemperature(com1)
                    mutex_readenvironmenttemperature.release()
                    ch6_5_log.append(
                        [
                            "Start-Environment-Temperature(℃):",
                            ch6_5_environment_temperature,
                        ]
                    )

                    ch6_5_data_ntc = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data_en[42])[2:]
                                + ("0x%02x" % ch6_read_data_en[43])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch6_5_data_sensor = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data_en[58])[2:]
                                + ("0x%02x" % ch6_read_data_en[59])[2:],
                                16,
                            )
                        )
                        / 100
                    )

                    ch6_5_log.append(["Start-NTC-Temperature(℃):", ch6_5_data_ntc])

                    ch6_5_log.append(
                        ["Start-Sensor-Temperature(℃):", ch6_5_data_sensor]
                    )

                    if math.fabs(ch6_5_data_ntc - ch6_5_data_sensor) > 5:
                        ch6_5_error_data = "NTC温度异常"
                else:
                    messagebox.showinfo("错误", "请设置通道6-5合法电池截止电压")
            else:
                messagebox.showinfo("错误", "请在通道6-5输入合法的电池条码")
        else:
            messagebox.showinfo("错误", "通道6-5正在测试")


def ch6_6_confirm(ch6_6_name_confirm):
    global ch6_6_start_signal
    global ch6_6_signal
    global ch6_6_setvoltage_signal
    global ch6_6_sn_signal
    global ch6_6_set_voltage_command

    global ch6_6_log

    global ch6_6_e

    global ch6_6_error_data

    global entry_ch6_6
    global entry_ch6_6_set_voltage_value

    global ch6_6_data

    if ch6_6_name_confirm == "ch6_6":
        if ch6_6_start_signal:
            ch6_6_setvoltage()
            if ch6_6_sn_signal == 1:
                if ch6_6_setvoltage_signal == 1:
                    ch6_6_start_signal = False
                    ch6_6_signal = 1
                    ### 加锁 设置电压并启动 ###
                    entry_ch6_6["state"] = "disabled"
                    entry_ch6_6_set_voltage_value["state"] = "disabled"
                    ch6_6_error_data = ""
                    mutex.acquire()
                    ser.start(com, ch6_6_set_voltage_command)
                    ch6_readcommend_en = "060300000000A5"
                    ch6_read_data_en = ser.readdata(com, ch6_readcommend_en)
                    mutex.release()

                    ch6_6_log.append(["BatterNumber:", ch6_6_data[1]])

                    starttime = datetime.datetime.now()
                    ch6_6_log.append(
                        ["StartTime:", starttime.strftime("%Y-%m-%d %H:%M:%S")]
                    )

                    ch6_6_start_time = int(round(time.time() * 1000))
                    ch6_6_e[4] = ch6_6_start_time

                    ch6_6_log.append(["Cut-off voltage(V):", ch6_6_data[10]])

                    ###读环境温度
                    mutex_readenvironmenttemperature.acquire()
                    ch6_6_environment_temperature = ser.readenvironmenttemperature(com1)
                    mutex_readenvironmenttemperature.release()
                    ch6_6_log.append(
                        [
                            "Start-Environment-Temperature(℃):",
                            ch6_6_environment_temperature,
                        ]
                    )

                    ch6_6_data_ntc = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data_en[42])[2:]
                                + ("0x%02x" % ch6_read_data_en[43])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch6_6_data_sensor = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data_en[58])[2:]
                                + ("0x%02x" % ch6_read_data_en[59])[2:],
                                16,
                            )
                        )
                        / 100
                    )

                    ch6_6_log.append(["Start-NTC-Temperature(℃):", ch6_6_data_ntc])

                    ch6_6_log.append(
                        ["Start-Sensor-Temperature(℃):", ch6_6_data_sensor]
                    )

                    if math.fabs(ch6_6_data_ntc - ch6_6_data_sensor) > 5:
                        ch6_6_error_data = "NTC温度异常"
                else:
                    messagebox.showinfo("错误", "请设置通道6-6合法电池截止电压")
            else:
                messagebox.showinfo("错误", "请在通道6-6输入合法的电池条码")
        else:
            messagebox.showinfo("错误", "通道6-6正在测试")


def ch6_7_confirm(ch6_7_name_confirm):
    global ch6_7_start_signal
    global ch6_7_signal
    global ch6_7_setvoltage_signal
    global ch6_7_sn_signal
    global ch6_7_set_voltage_command

    global ch6_7_log

    global ch6_7_e

    global ch6_7_error_data

    global entry_ch6_7
    global entry_ch6_7_set_voltage_value

    global ch6_7_data

    if ch6_7_name_confirm == "ch6_7":
        if ch6_7_start_signal:
            ch6_7_setvoltage()
            if ch6_7_sn_signal == 1:
                if ch6_7_setvoltage_signal == 1:
                    ch6_7_start_signal = False
                    ch6_7_signal = 1
                    ### 加锁 设置电压并启动 ###
                    entry_ch6_7["state"] = "disabled"
                    entry_ch6_7_set_voltage_value["state"] = "disabled"
                    ch6_7_error_data = ""
                    mutex.acquire()
                    ser.start(com, ch6_7_set_voltage_command)
                    ch6_readcommend_en = "060300000000A5"
                    ch6_read_data_en = ser.readdata(com, ch6_readcommend_en)
                    mutex.release()

                    ch6_7_log.append(["BatterNumber:", ch6_7_data[1]])

                    starttime = datetime.datetime.now()
                    ch6_7_log.append(
                        ["StartTime:", starttime.strftime("%Y-%m-%d %H:%M:%S")]
                    )

                    ch6_7_start_time = int(round(time.time() * 1000))
                    ch6_7_e[4] = ch6_7_start_time

                    ch6_7_log.append(["Cut-off voltage(V):", ch6_7_data[10]])

                    ###读环境温度
                    mutex_readenvironmenttemperature.acquire()
                    ch6_7_environment_temperature = ser.readenvironmenttemperature(com1)
                    mutex_readenvironmenttemperature.release()
                    ch6_7_log.append(
                        [
                            "Start-Environment-Temperature(℃):",
                            ch6_7_environment_temperature,
                        ]
                    )

                    ch6_7_data_ntc = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data_en[42])[2:]
                                + ("0x%02x" % ch6_read_data_en[43])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch6_7_data_sensor = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data_en[58])[2:]
                                + ("0x%02x" % ch6_read_data_en[59])[2:],
                                16,
                            )
                        )
                        / 100
                    )

                    ch6_7_log.append(["Start-NTC-Temperature(℃):", ch6_7_data_ntc])

                    ch6_7_log.append(
                        ["Start-Sensor-Temperature(℃):", ch6_7_data_sensor]
                    )

                    if math.fabs(ch6_7_data_ntc - ch6_7_data_sensor) > 5:
                        ch6_7_error_data = "NTC温度异常"
                else:
                    messagebox.showinfo("错误", "请设置通道6-7合法电池截止电压")
            else:
                messagebox.showinfo("错误", "请在通道6-7输入合法的电池条码")
        else:
            messagebox.showinfo("错误", "通道6-7正在测试")


def ch6_8_confirm(ch6_8_name_confirm):
    global ch6_8_start_signal
    global ch6_8_signal
    global ch6_8_setvoltage_signal
    global ch6_8_sn_signal
    global ch6_8_set_voltage_command

    global ch6_8_log

    global ch6_8_e

    global ch6_8_error_data

    global entry_ch6_8
    global entry_ch6_8_set_voltage_value

    global ch6_8_data

    if ch6_8_name_confirm == "ch6_8":
        if ch6_8_start_signal:
            ch6_8_setvoltage()
            if ch6_8_sn_signal == 1:
                if ch6_8_setvoltage_signal == 1:
                    ch6_8_start_signal = False
                    ch6_8_signal = 1
                    ### 加锁 设置电压并启动 ###
                    entry_ch6_8["state"] = "disabled"
                    entry_ch6_8_set_voltage_value["state"] = "disabled"
                    ch6_8_error_data = ""
                    mutex.acquire()
                    ser.start(com, ch6_8_set_voltage_command)
                    ch6_readcommend_en = "060300000000A5"
                    ch6_read_data_en = ser.readdata(com, ch6_readcommend_en)
                    mutex.release()

                    ch6_8_log.append(["BatterNumber:", ch6_8_data[1]])

                    starttime = datetime.datetime.now()
                    ch6_8_log.append(
                        ["StartTime:", starttime.strftime("%Y-%m-%d %H:%M:%S")]
                    )

                    ch6_8_start_time = int(round(time.time() * 1000))
                    ch6_8_e[4] = ch6_8_start_time

                    ch6_8_log.append(["Cut-off voltage(V):", ch6_8_data[10]])

                    ###读环境温度
                    mutex_readenvironmenttemperature.acquire()
                    ch6_8_environment_temperature = ser.readenvironmenttemperature(com1)
                    mutex_readenvironmenttemperature.release()
                    ch6_8_log.append(
                        [
                            "Start-Environment-Temperature(℃):",
                            ch6_8_environment_temperature,
                        ]
                    )

                    ch6_8_data_ntc = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data_en[42])[2:]
                                + ("0x%02x" % ch6_read_data_en[43])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch6_8_data_sensor = (
                        float(
                            int(
                                ("0x%02x" % ch6_read_data_en[58])[2:]
                                + ("0x%02x" % ch6_read_data_en[59])[2:],
                                16,
                            )
                        )
                        / 100
                    )

                    ch6_8_log.append(["Start-NTC-Temperature(℃):", ch6_8_data_ntc])

                    ch6_8_log.append(
                        ["Start-Sensor-Temperature(℃):", ch6_8_data_sensor]
                    )

                    if math.fabs(ch6_8_data_ntc - ch6_8_data_sensor) > 5:
                        ch6_8_error_data = "NTC温度异常"
                else:
                    messagebox.showinfo("错误", "请设置通道6-8合法电池截止电压")
            else:
                messagebox.showinfo("错误", "请在通道6-8输入合法的电池条码")
        else:
            messagebox.showinfo("错误", "通道6-8正在测试")


def ch7_1_confirm(ch7_1_name_confirm):
    global ch7_1_start_signal
    global ch7_1_signal
    global ch7_1_setvoltage_signal
    global ch7_1_sn_signal
    global ch7_1_set_voltage_command

    global ch7_1_log

    global ch7_1_e

    global ch7_1_error_data

    global entry_ch7_1
    global entry_ch7_1_set_voltage_value

    global ch7_1_data

    if ch7_1_name_confirm == "ch7_1":
        if ch7_1_start_signal:
            ch7_1_setvoltage()
            if ch7_1_sn_signal == 1:
                if ch7_1_setvoltage_signal == 1:
                    ch7_1_start_signal = False
                    ch7_1_signal = 1
                    ### 加锁 设置电压并启动 ###
                    entry_ch7_1["state"] = "disabled"
                    entry_ch7_1_set_voltage_value["state"] = "disabled"
                    ch7_1_error_data = ""
                    mutex.acquire()
                    ser.start(com, ch7_1_set_voltage_command)
                    ch7_readcommend_en = "070300000000A5"
                    ch7_read_data_en = ser.readdata(com, ch7_readcommend_en)
                    mutex.release()

                    ch7_1_log.append(["BatterNumber:", ch7_1_data[1]])

                    starttime = datetime.datetime.now()
                    ch7_1_log.append(
                        ["StartTime:", starttime.strftime("%Y-%m-%d %H:%M:%S")]
                    )

                    ch7_1_start_time = int(round(time.time() * 1000))
                    ch7_1_e[4] = ch7_1_start_time

                    ch7_1_log.append(["Cut-off voltage(V):", ch7_1_data[10]])

                    ###读环境温度
                    mutex_readenvironmenttemperature.acquire()
                    ch7_1_environment_temperature = ser.readenvironmenttemperature(com1)
                    mutex_readenvironmenttemperature.release()
                    ch7_1_log.append(
                        [
                            "Start-Environment-Temperature(℃):",
                            ch7_1_environment_temperature,
                        ]
                    )

                    ch7_1_data_ntc = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data_en[42])[2:]
                                + ("0x%02x" % ch7_read_data_en[43])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch7_1_data_sensor = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data_en[58])[2:]
                                + ("0x%02x" % ch7_read_data_en[59])[2:],
                                16,
                            )
                        )
                        / 100
                    )

                    ch7_1_log.append(["Start-NTC-Temperature(℃):", ch7_1_data_ntc])

                    ch7_1_log.append(
                        ["Start-Sensor-Temperature(℃):", ch7_1_data_sensor]
                    )

                    if math.fabs(ch7_1_data_ntc - ch7_1_data_sensor) > 5:
                        ch7_1_error_data = "NTC温度异常"
                else:
                    messagebox.showinfo("错误", "请设置通道7-1合法电池截止电压")
            else:
                messagebox.showinfo("错误", "请在通道7-1输入合法的电池条码")
        else:
            messagebox.showinfo("错误", "通道7-1正在测试")


def ch7_2_confirm(ch7_2_name_confirm):
    global ch7_2_start_signal
    global ch7_2_signal
    global ch7_2_setvoltage_signal
    global ch7_2_sn_signal
    global ch7_2_set_voltage_command

    global ch7_2_log

    global ch7_2_e

    global ch7_2_error_data

    global entry_ch7_2
    global entry_ch7_2_set_voltage_value

    global ch7_2_data

    if ch7_2_name_confirm == "ch7_2":
        if ch7_2_start_signal:
            ch7_2_setvoltage()
            if ch7_2_sn_signal == 1:
                if ch7_2_setvoltage_signal == 1:
                    ch7_2_start_signal = False
                    ch7_2_signal = 1
                    ### 加锁 设置电压并启动 ###
                    entry_ch7_2["state"] = "disabled"
                    entry_ch7_2_set_voltage_value["state"] = "disabled"
                    ch7_2_error_data = ""
                    mutex.acquire()
                    ser.start(com, ch7_2_set_voltage_command)
                    ch7_readcommend_en = "070300000000A5"
                    ch7_read_data_en = ser.readdata(com, ch7_readcommend_en)
                    mutex.release()

                    ch7_2_log.append(["BatterNumber:", ch7_2_data[1]])

                    starttime = datetime.datetime.now()
                    ch7_2_log.append(
                        ["StartTime:", starttime.strftime("%Y-%m-%d %H:%M:%S")]
                    )

                    ch7_2_start_time = int(round(time.time() * 1000))
                    ch7_2_e[4] = ch7_2_start_time

                    ch7_2_log.append(["Cut-off voltage(V):", ch7_2_data[10]])

                    ###读环境温度
                    mutex_readenvironmenttemperature.acquire()
                    ch7_2_environment_temperature = ser.readenvironmenttemperature(com1)
                    mutex_readenvironmenttemperature.release()
                    ch7_2_log.append(
                        [
                            "Start-Environment-Temperature(℃):",
                            ch7_2_environment_temperature,
                        ]
                    )

                    ch7_2_data_ntc = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data_en[42])[2:]
                                + ("0x%02x" % ch7_read_data_en[43])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch7_2_data_sensor = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data_en[58])[2:]
                                + ("0x%02x" % ch7_read_data_en[59])[2:],
                                16,
                            )
                        )
                        / 100
                    )

                    ch7_2_log.append(["Start-NTC-Temperature(℃):", ch7_2_data_ntc])

                    ch7_2_log.append(
                        ["Start-Sensor-Temperature(℃):", ch7_2_data_sensor]
                    )

                    if math.fabs(ch7_2_data_ntc - ch7_2_data_sensor) > 5:
                        ch7_2_error_data = "NTC温度异常"
                else:
                    messagebox.showinfo("错误", "请设置通道7-2合法电池截止电压")
            else:
                messagebox.showinfo("错误", "请在通道7-2输入合法的电池条码")
        else:
            messagebox.showinfo("错误", "通道7-2正在测试")


def ch7_3_confirm(ch7_3_name_confirm):
    global ch7_3_start_signal
    global ch7_3_signal
    global ch7_3_setvoltage_signal
    global ch7_3_sn_signal
    global ch7_3_set_voltage_command

    global ch7_3_log

    global ch7_3_e

    global ch7_3_error_data

    global entry_ch7_3
    global entry_ch7_3_set_voltage_value

    global ch7_3_data

    if ch7_3_name_confirm == "ch7_3":
        if ch7_3_start_signal:
            ch7_3_setvoltage()
            if ch7_3_sn_signal == 1:
                if ch7_3_setvoltage_signal == 1:
                    ch7_3_start_signal = False
                    ch7_3_signal = 1
                    ### 加锁 设置电压并启动 ###
                    entry_ch7_3["state"] = "disabled"
                    entry_ch7_3_set_voltage_value["state"] = "disabled"
                    ch7_3_error_data = ""
                    mutex.acquire()
                    ser.start(com, ch7_3_set_voltage_command)
                    ch7_readcommend_en = "070300000000A5"
                    ch7_read_data_en = ser.readdata(com, ch7_readcommend_en)
                    mutex.release()

                    ch7_3_log.append(["BatterNumber:", ch7_3_data[1]])

                    starttime = datetime.datetime.now()
                    ch7_3_log.append(
                        ["StartTime:", starttime.strftime("%Y-%m-%d %H:%M:%S")]
                    )

                    ch7_3_start_time = int(round(time.time() * 1000))
                    ch7_3_e[4] = ch7_3_start_time

                    ch7_3_log.append(["Cut-off voltage(V):", ch7_3_data[10]])

                    ###读环境温度
                    mutex_readenvironmenttemperature.acquire()
                    ch7_3_environment_temperature = ser.readenvironmenttemperature(com1)
                    mutex_readenvironmenttemperature.release()
                    ch7_3_log.append(
                        [
                            "Start-Environment-Temperature(℃):",
                            ch7_3_environment_temperature,
                        ]
                    )

                    ch7_3_data_ntc = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data_en[42])[2:]
                                + ("0x%02x" % ch7_read_data_en[43])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch7_3_data_sensor = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data_en[58])[2:]
                                + ("0x%02x" % ch7_read_data_en[59])[2:],
                                16,
                            )
                        )
                        / 100
                    )

                    ch7_3_log.append(["Start-NTC-Temperature(℃):", ch7_3_data_ntc])

                    ch7_3_log.append(
                        ["Start-Sensor-Temperature(℃):", ch7_3_data_sensor]
                    )

                    if math.fabs(ch7_3_data_ntc - ch7_3_data_sensor) > 5:
                        ch7_3_error_data = "NTC温度异常"
                else:
                    messagebox.showinfo("错误", "请设置通道7-3合法电池截止电压")
            else:
                messagebox.showinfo("错误", "请在通道7-3输入合法的电池条码")
        else:
            messagebox.showinfo("错误", "通道7-3正在测试")


def ch7_4_confirm(ch7_4_name_confirm):
    global ch7_4_start_signal
    global ch7_4_signal
    global ch7_4_setvoltage_signal
    global ch7_4_sn_signal
    global ch7_4_set_voltage_command

    global ch7_4_log

    global ch7_4_e

    global ch7_4_error_data

    global entry_ch7_4
    global entry_ch7_4_set_voltage_value

    global ch7_4_data

    if ch7_4_name_confirm == "ch7_4":
        if ch7_4_start_signal:
            ch7_4_setvoltage()
            if ch7_4_sn_signal == 1:
                if ch7_4_setvoltage_signal == 1:
                    ch7_4_start_signal = False
                    ch7_4_signal = 1
                    ### 加锁 设置电压并启动 ###
                    entry_ch7_4["state"] = "disabled"
                    entry_ch7_4_set_voltage_value["state"] = "disabled"
                    ch7_4_error_data = ""
                    mutex.acquire()
                    ser.start(com, ch7_4_set_voltage_command)
                    ch7_readcommend_en = "070300000000A5"
                    ch7_read_data_en = ser.readdata(com, ch7_readcommend_en)
                    mutex.release()

                    ch7_4_log.append(["BatterNumber:", ch7_4_data[1]])

                    starttime = datetime.datetime.now()
                    ch7_4_log.append(
                        ["StartTime:", starttime.strftime("%Y-%m-%d %H:%M:%S")]
                    )

                    ch7_4_start_time = int(round(time.time() * 1000))
                    ch7_4_e[4] = ch7_4_start_time

                    ch7_4_log.append(["Cut-off voltage(V):", ch7_4_data[10]])

                    ###读环境温度
                    mutex_readenvironmenttemperature.acquire()
                    ch7_4_environment_temperature = ser.readenvironmenttemperature(com1)
                    mutex_readenvironmenttemperature.release()
                    ch7_4_log.append(
                        [
                            "Start-Environment-Temperature(℃):",
                            ch7_4_environment_temperature,
                        ]
                    )

                    ch7_4_data_ntc = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data_en[42])[2:]
                                + ("0x%02x" % ch7_read_data_en[43])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch7_4_data_sensor = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data_en[58])[2:]
                                + ("0x%02x" % ch7_read_data_en[59])[2:],
                                16,
                            )
                        )
                        / 100
                    )

                    ch7_4_log.append(["Start-NTC-Temperature(℃):", ch7_4_data_ntc])

                    ch7_4_log.append(
                        ["Start-Sensor-Temperature(℃):", ch7_4_data_sensor]
                    )

                    if math.fabs(ch7_4_data_ntc - ch7_4_data_sensor) > 5:
                        ch7_4_error_data = "NTC温度异常"
                else:
                    messagebox.showinfo("错误", "请设置通道7-4合法电池截止电压")
            else:
                messagebox.showinfo("错误", "请在通道7-4输入合法的电池条码")
        else:
            messagebox.showinfo("错误", "通道7-4正在测试")


def ch7_5_confirm(ch7_5_name_confirm):
    global ch7_5_start_signal
    global ch7_5_signal
    global ch7_5_setvoltage_signal
    global ch7_5_sn_signal
    global ch7_5_set_voltage_command

    global ch7_5_log

    global ch7_5_e

    global ch7_5_error_data

    global entry_ch7_5
    global entry_ch7_5_set_voltage_value

    global ch7_5_data

    if ch7_5_name_confirm == "ch7_5":
        if ch7_5_start_signal:
            ch7_5_setvoltage()
            if ch7_5_sn_signal == 1:
                if ch7_5_setvoltage_signal == 1:
                    ch7_5_start_signal = False
                    ch7_5_signal = 1
                    ### 加锁 设置电压并启动 ###
                    entry_ch7_5["state"] = "disabled"
                    entry_ch7_5_set_voltage_value["state"] = "disabled"
                    ch7_5_error_data = ""
                    mutex.acquire()
                    ser.start(com, ch7_5_set_voltage_command)
                    ch7_readcommend_en = "070300000000A5"
                    ch7_read_data_en = ser.readdata(com, ch7_readcommend_en)
                    mutex.release()

                    ch7_5_log.append(["BatterNumber:", ch7_5_data[1]])

                    starttime = datetime.datetime.now()
                    ch7_5_log.append(
                        ["StartTime:", starttime.strftime("%Y-%m-%d %H:%M:%S")]
                    )

                    ch7_5_start_time = int(round(time.time() * 1000))
                    ch7_5_e[4] = ch7_5_start_time

                    ch7_5_log.append(["Cut-off voltage(V):", ch7_5_data[10]])

                    ###读环境温度
                    mutex_readenvironmenttemperature.acquire()
                    ch7_5_environment_temperature = ser.readenvironmenttemperature(com1)
                    mutex_readenvironmenttemperature.release()
                    ch7_5_log.append(
                        [
                            "Start-Environment-Temperature(℃):",
                            ch7_5_environment_temperature,
                        ]
                    )

                    ch7_5_data_ntc = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data_en[42])[2:]
                                + ("0x%02x" % ch7_read_data_en[43])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch7_5_data_sensor = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data_en[58])[2:]
                                + ("0x%02x" % ch7_read_data_en[59])[2:],
                                16,
                            )
                        )
                        / 100
                    )

                    ch7_5_log.append(["Start-NTC-Temperature(℃):", ch7_5_data_ntc])

                    ch7_5_log.append(
                        ["Start-Sensor-Temperature(℃):", ch7_5_data_sensor]
                    )

                    if math.fabs(ch7_5_data_ntc - ch7_5_data_sensor) > 5:
                        ch7_5_error_data = "NTC温度异常"
                else:
                    messagebox.showinfo("错误", "请设置通道7-5合法电池截止电压")
            else:
                messagebox.showinfo("错误", "请在通道7-5输入合法的电池条码")
        else:
            messagebox.showinfo("错误", "通道7-5正在测试")


def ch7_6_confirm(ch7_6_name_confirm):
    global ch7_6_start_signal
    global ch7_6_signal
    global ch7_6_setvoltage_signal
    global ch7_6_sn_signal
    global ch7_6_set_voltage_command

    global ch7_6_log

    global ch7_6_e

    global ch7_6_error_data

    global entry_ch7_6
    global entry_ch7_6_set_voltage_value

    global ch7_6_data

    if ch7_6_name_confirm == "ch7_6":
        if ch7_6_start_signal:
            ch7_6_setvoltage()
            if ch7_6_sn_signal == 1:
                if ch7_6_setvoltage_signal == 1:
                    ch7_6_start_signal = False
                    ch7_6_signal = 1
                    ### 加锁 设置电压并启动 ###
                    entry_ch7_6["state"] = "disabled"
                    entry_ch7_6_set_voltage_value["state"] = "disabled"
                    ch7_6_error_data = ""
                    mutex.acquire()
                    ser.start(com, ch7_6_set_voltage_command)
                    ch7_readcommend_en = "070300000000A5"
                    ch7_read_data_en = ser.readdata(com, ch7_readcommend_en)
                    mutex.release()

                    ch7_6_log.append(["BatterNumber:", ch7_6_data[1]])

                    starttime = datetime.datetime.now()
                    ch7_6_log.append(
                        ["StartTime:", starttime.strftime("%Y-%m-%d %H:%M:%S")]
                    )

                    ch7_6_start_time = int(round(time.time() * 1000))
                    ch7_6_e[4] = ch7_6_start_time

                    ch7_6_log.append(["Cut-off voltage(V):", ch7_6_data[10]])

                    ###读环境温度
                    mutex_readenvironmenttemperature.acquire()
                    ch7_6_environment_temperature = ser.readenvironmenttemperature(com1)
                    mutex_readenvironmenttemperature.release()
                    ch7_6_log.append(
                        [
                            "Start-Environment-Temperature(℃):",
                            ch7_6_environment_temperature,
                        ]
                    )

                    ch7_6_data_ntc = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data_en[42])[2:]
                                + ("0x%02x" % ch7_read_data_en[43])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch7_6_data_sensor = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data_en[58])[2:]
                                + ("0x%02x" % ch7_read_data_en[59])[2:],
                                16,
                            )
                        )
                        / 100
                    )

                    ch7_6_log.append(["Start-NTC-Temperature(℃):", ch7_6_data_ntc])

                    ch7_6_log.append(
                        ["Start-Sensor-Temperature(℃):", ch7_6_data_sensor]
                    )

                    if math.fabs(ch7_6_data_ntc - ch7_6_data_sensor) > 5:
                        ch7_6_error_data = "NTC温度异常"
                else:
                    messagebox.showinfo("错误", "请设置通道7-6合法电池截止电压")
            else:
                messagebox.showinfo("错误", "请在通道7-6输入合法的电池条码")
        else:
            messagebox.showinfo("错误", "通道7-6正在测试")


def ch7_7_confirm(ch7_7_name_confirm):
    global ch7_7_start_signal
    global ch7_7_signal
    global ch7_7_setvoltage_signal
    global ch7_7_sn_signal
    global ch7_7_set_voltage_command

    global ch7_7_log

    global ch7_7_e

    global ch7_7_error_data

    global entry_ch7_7
    global entry_ch7_7_set_voltage_value

    global ch7_7_data

    if ch7_7_name_confirm == "ch7_7":
        if ch7_7_start_signal:
            ch7_7_setvoltage()
            if ch7_7_sn_signal == 1:
                if ch7_7_setvoltage_signal == 1:
                    ch7_7_start_signal = False
                    ch7_7_signal = 1
                    ### 加锁 设置电压并启动 ###
                    entry_ch7_7["state"] = "disabled"
                    entry_ch7_7_set_voltage_value["state"] = "disabled"
                    ch7_7_error_data = ""
                    mutex.acquire()
                    ser.start(com, ch7_7_set_voltage_command)
                    ch7_readcommend_en = "070300000000A5"
                    ch7_read_data_en = ser.readdata(com, ch7_readcommend_en)
                    mutex.release()

                    ch7_7_log.append(["BatterNumber:", ch7_7_data[1]])

                    starttime = datetime.datetime.now()
                    ch7_7_log.append(
                        ["StartTime:", starttime.strftime("%Y-%m-%d %H:%M:%S")]
                    )

                    ch7_7_start_time = int(round(time.time() * 1000))
                    ch7_7_e[4] = ch7_7_start_time

                    ch7_7_log.append(["Cut-off voltage(V):", ch7_7_data[10]])

                    ###读环境温度
                    mutex_readenvironmenttemperature.acquire()
                    ch7_7_environment_temperature = ser.readenvironmenttemperature(com1)
                    mutex_readenvironmenttemperature.release()
                    ch7_7_log.append(
                        [
                            "Start-Environment-Temperature(℃):",
                            ch7_7_environment_temperature,
                        ]
                    )

                    ch7_7_data_ntc = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data_en[42])[2:]
                                + ("0x%02x" % ch7_read_data_en[43])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch7_7_data_sensor = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data_en[58])[2:]
                                + ("0x%02x" % ch7_read_data_en[59])[2:],
                                16,
                            )
                        )
                        / 100
                    )

                    ch7_7_log.append(["Start-NTC-Temperature(℃):", ch7_7_data_ntc])

                    ch7_7_log.append(
                        ["Start-Sensor-Temperature(℃):", ch7_7_data_sensor]
                    )

                    if math.fabs(ch7_7_data_ntc - ch7_7_data_sensor) > 5:
                        ch7_7_error_data = "NTC温度异常"
                else:
                    messagebox.showinfo("错误", "请设置通道7-7合法电池截止电压")
            else:
                messagebox.showinfo("错误", "请在通道7-7输入合法的电池条码")
        else:
            messagebox.showinfo("错误", "通道7-7正在测试")


def ch7_8_confirm(ch7_8_name_confirm):
    global ch7_8_start_signal
    global ch7_8_signal
    global ch7_8_setvoltage_signal
    global ch7_8_sn_signal
    global ch7_8_set_voltage_command

    global ch7_8_log

    global ch7_8_e

    global ch7_8_error_data

    global entry_ch7_8
    global entry_ch7_8_set_voltage_value

    global ch7_8_data

    if ch7_8_name_confirm == "ch7_8":
        if ch7_8_start_signal:
            ch7_8_setvoltage()
            if ch7_8_sn_signal == 1:
                if ch7_8_setvoltage_signal == 1:
                    ch7_8_start_signal = False
                    ch7_8_signal = 1
                    ### 加锁 设置电压并启动 ###
                    entry_ch7_8["state"] = "disabled"
                    entry_ch7_8_set_voltage_value["state"] = "disabled"
                    ch7_8_error_data = ""
                    mutex.acquire()
                    ser.start(com, ch7_8_set_voltage_command)
                    ch7_readcommend_en = "070300000000A5"
                    ch7_read_data_en = ser.readdata(com, ch7_readcommend_en)
                    mutex.release()

                    ch7_8_log.append(["BatterNumber:", ch7_8_data[1]])

                    starttime = datetime.datetime.now()
                    ch7_8_log.append(
                        ["StartTime:", starttime.strftime("%Y-%m-%d %H:%M:%S")]
                    )

                    ch7_8_start_time = int(round(time.time() * 1000))
                    ch7_8_e[4] = ch7_8_start_time

                    ch7_8_log.append(["Cut-off voltage(V):", ch7_8_data[10]])

                    ###读环境温度
                    mutex_readenvironmenttemperature.acquire()
                    ch7_8_environment_temperature = ser.readenvironmenttemperature(com1)
                    mutex_readenvironmenttemperature.release()
                    ch7_8_log.append(
                        [
                            "Start-Environment-Temperature(℃):",
                            ch7_8_environment_temperature,
                        ]
                    )

                    ch7_8_data_ntc = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data_en[42])[2:]
                                + ("0x%02x" % ch7_read_data_en[43])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch7_8_data_sensor = (
                        float(
                            int(
                                ("0x%02x" % ch7_read_data_en[58])[2:]
                                + ("0x%02x" % ch7_read_data_en[59])[2:],
                                16,
                            )
                        )
                        / 100
                    )

                    ch7_8_log.append(["Start-NTC-Temperature(℃):", ch7_8_data_ntc])

                    ch7_8_log.append(
                        ["Start-Sensor-Temperature(℃):", ch7_8_data_sensor]
                    )

                    if math.fabs(ch7_8_data_ntc - ch7_8_data_sensor) > 5:
                        ch7_8_error_data = "NTC温度异常"
                else:
                    messagebox.showinfo("错误", "请设置通道7-8合法电池截止电压")
            else:
                messagebox.showinfo("错误", "请在通道7-8输入合法的电池条码")
        else:
            messagebox.showinfo("错误", "通道7-8正在测试")


def ch8_1_confirm(ch8_1_name_confirm):
    global ch8_1_start_signal
    global ch8_1_signal
    global ch8_1_setvoltage_signal
    global ch8_1_sn_signal
    global ch8_1_set_voltage_command

    global ch8_1_log

    global ch8_1_e

    global ch8_1_error_data

    global entry_ch8_1
    global entry_ch8_1_set_voltage_value

    global ch8_1_data

    if ch8_1_name_confirm == "ch8_1":
        if ch8_1_start_signal:
            ch8_1_setvoltage()
            if ch8_1_sn_signal == 1:
                if ch8_1_setvoltage_signal == 1:
                    ch8_1_start_signal = False
                    ch8_1_signal = 1
                    ### 加锁 设置电压并启动 ###
                    entry_ch8_1["state"] = "disabled"
                    entry_ch8_1_set_voltage_value["state"] = "disabled"
                    ch8_1_error_data = ""
                    mutex.acquire()
                    ser.start(com, ch8_1_set_voltage_command)
                    ch8_readcommend_en = "080300000000A5"
                    ch8_read_data_en = ser.readdata(com, ch8_readcommend_en)
                    mutex.release()

                    ch8_1_log.append(["BatterNumber:", ch8_1_data[1]])

                    starttime = datetime.datetime.now()
                    ch8_1_log.append(
                        ["StartTime:", starttime.strftime("%Y-%m-%d %H:%M:%S")]
                    )

                    ch8_1_start_time = int(round(time.time() * 1000))
                    ch8_1_e[4] = ch8_1_start_time

                    ch8_1_log.append(["Cut-off voltage(V):", ch8_1_data[10]])

                    ###读环境温度
                    mutex_readenvironmenttemperature.acquire()
                    ch8_1_environment_temperature = ser.readenvironmenttemperature(com1)
                    mutex_readenvironmenttemperature.release()
                    ch8_1_log.append(
                        [
                            "Start-Environment-Temperature(℃):",
                            ch8_1_environment_temperature,
                        ]
                    )

                    ch8_1_data_ntc = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data_en[42])[2:]
                                + ("0x%02x" % ch8_read_data_en[43])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch8_1_data_sensor = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data_en[58])[2:]
                                + ("0x%02x" % ch8_read_data_en[59])[2:],
                                16,
                            )
                        )
                        / 100
                    )

                    ch8_1_log.append(["Start-NTC-Temperature(℃):", ch8_1_data_ntc])

                    ch8_1_log.append(
                        ["Start-Sensor-Temperature(℃):", ch8_1_data_sensor]
                    )

                    if math.fabs(ch8_1_data_ntc - ch8_1_data_sensor) > 5:
                        ch8_1_error_data = "NTC温度异常"
                else:
                    messagebox.showinfo("错误", "请设置通道8-1合法电池截止电压")
            else:
                messagebox.showinfo("错误", "请在通道8-1输入合法的电池条码")
        else:
            messagebox.showinfo("错误", "通道8-1正在测试")


def ch8_2_confirm(ch8_2_name_confirm):
    global ch8_2_start_signal
    global ch8_2_signal
    global ch8_2_setvoltage_signal
    global ch8_2_sn_signal
    global ch8_2_set_voltage_command

    global ch8_2_log

    global ch8_2_e

    global ch8_2_error_data

    global entry_ch8_2
    global entry_ch8_2_set_voltage_value

    global ch8_2_data

    if ch8_2_name_confirm == "ch8_2":
        if ch8_2_start_signal:
            ch8_2_setvoltage()
            if ch8_2_sn_signal == 1:
                if ch8_2_setvoltage_signal == 1:
                    ch8_2_start_signal = False
                    ch8_2_signal = 1
                    ### 加锁 设置电压并启动 ###
                    entry_ch8_2["state"] = "disabled"
                    entry_ch8_2_set_voltage_value["state"] = "disabled"
                    ch8_2_error_data = ""
                    mutex.acquire()
                    ser.start(com, ch8_2_set_voltage_command)
                    ch8_readcommend_en = "080300000000A5"
                    ch8_read_data_en = ser.readdata(com, ch8_readcommend_en)
                    mutex.release()

                    ch8_2_log.append(["BatterNumber:", ch8_2_data[1]])

                    starttime = datetime.datetime.now()
                    ch8_2_log.append(
                        ["StartTime:", starttime.strftime("%Y-%m-%d %H:%M:%S")]
                    )

                    ch8_2_start_time = int(round(time.time() * 1000))
                    ch8_2_e[4] = ch8_2_start_time

                    ch8_2_log.append(["Cut-off voltage(V):", ch8_2_data[10]])

                    ###读环境温度
                    mutex_readenvironmenttemperature.acquire()
                    ch8_2_environment_temperature = ser.readenvironmenttemperature(com1)
                    mutex_readenvironmenttemperature.release()
                    ch8_2_log.append(
                        [
                            "Start-Environment-Temperature(℃):",
                            ch8_2_environment_temperature,
                        ]
                    )

                    ch8_2_data_ntc = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data_en[42])[2:]
                                + ("0x%02x" % ch8_read_data_en[43])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch8_2_data_sensor = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data_en[58])[2:]
                                + ("0x%02x" % ch8_read_data_en[59])[2:],
                                16,
                            )
                        )
                        / 100
                    )

                    ch8_2_log.append(["Start-NTC-Temperature(℃):", ch8_2_data_ntc])

                    ch8_2_log.append(
                        ["Start-Sensor-Temperature(℃):", ch8_2_data_sensor]
                    )

                    if math.fabs(ch8_2_data_ntc - ch8_2_data_sensor) > 5:
                        ch8_2_error_data = "NTC温度异常"
                else:
                    messagebox.showinfo("错误", "请设置通道8-2合法电池截止电压")
            else:
                messagebox.showinfo("错误", "请在通道8-2输入合法的电池条码")
        else:
            messagebox.showinfo("错误", "通道8-2正在测试")


def ch8_3_confirm(ch8_3_name_confirm):
    global ch8_3_start_signal
    global ch8_3_signal
    global ch8_3_setvoltage_signal
    global ch8_3_sn_signal
    global ch8_3_set_voltage_command

    global ch8_3_log

    global ch8_3_e

    global ch8_3_error_data

    global entry_ch8_3
    global entry_ch8_3_set_voltage_value

    global ch8_3_data

    if ch8_3_name_confirm == "ch8_3":
        if ch8_3_start_signal:
            ch8_3_setvoltage()
            if ch8_3_sn_signal == 1:
                if ch8_3_setvoltage_signal == 1:
                    ch8_3_start_signal = False
                    ch8_3_signal = 1
                    ### 加锁 设置电压并启动 ###
                    entry_ch8_3["state"] = "disabled"
                    entry_ch8_3_set_voltage_value["state"] = "disabled"
                    ch8_3_error_data = ""
                    mutex.acquire()
                    ser.start(com, ch8_3_set_voltage_command)
                    ch8_readcommend_en = "080300000000A5"
                    ch8_read_data_en = ser.readdata(com, ch8_readcommend_en)
                    mutex.release()

                    ch8_3_log.append(["BatterNumber:", ch8_3_data[1]])

                    starttime = datetime.datetime.now()
                    ch8_3_log.append(
                        ["StartTime:", starttime.strftime("%Y-%m-%d %H:%M:%S")]
                    )

                    ch8_3_start_time = int(round(time.time() * 1000))
                    ch8_3_e[4] = ch8_3_start_time

                    ch8_3_log.append(["Cut-off voltage(V):", ch8_3_data[10]])

                    ###读环境温度
                    mutex_readenvironmenttemperature.acquire()
                    ch8_3_environment_temperature = ser.readenvironmenttemperature(com1)
                    mutex_readenvironmenttemperature.release()
                    ch8_3_log.append(
                        [
                            "Start-Environment-Temperature(℃):",
                            ch8_3_environment_temperature,
                        ]
                    )

                    ch8_3_data_ntc = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data_en[42])[2:]
                                + ("0x%02x" % ch8_read_data_en[43])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch8_3_data_sensor = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data_en[58])[2:]
                                + ("0x%02x" % ch8_read_data_en[59])[2:],
                                16,
                            )
                        )
                        / 100
                    )

                    ch8_3_log.append(["Start-NTC-Temperature(℃):", ch8_3_data_ntc])

                    ch8_3_log.append(
                        ["Start-Sensor-Temperature(℃):", ch8_3_data_sensor]
                    )

                    if math.fabs(ch8_3_data_ntc - ch8_3_data_sensor) > 5:
                        ch8_3_error_data = "NTC温度异常"
                else:
                    messagebox.showinfo("错误", "请设置通道8-3合法电池截止电压")
            else:
                messagebox.showinfo("错误", "请在通道8-3输入合法的电池条码")
        else:
            messagebox.showinfo("错误", "通道8-3正在测试")


def ch8_4_confirm(ch8_4_name_confirm):
    global ch8_4_start_signal
    global ch8_4_signal
    global ch8_4_setvoltage_signal
    global ch8_4_sn_signal
    global ch8_4_set_voltage_command

    global ch8_4_log

    global ch8_4_e

    global ch8_4_error_data

    global entry_ch8_4
    global entry_ch8_4_set_voltage_value

    global ch8_4_data

    if ch8_4_name_confirm == "ch8_4":
        if ch8_4_start_signal:
            ch8_4_setvoltage()
            if ch8_4_sn_signal == 1:
                if ch8_4_setvoltage_signal == 1:
                    ch8_4_start_signal = False
                    ch8_4_signal = 1
                    ### 加锁 设置电压并启动 ###
                    entry_ch8_4["state"] = "disabled"
                    entry_ch8_4_set_voltage_value["state"] = "disabled"
                    ch8_4_error_data = ""
                    mutex.acquire()
                    ser.start(com, ch8_4_set_voltage_command)
                    ch8_readcommend_en = "080300000000A5"
                    ch8_read_data_en = ser.readdata(com, ch8_readcommend_en)
                    mutex.release()

                    ch8_4_log.append(["BatterNumber:", ch8_4_data[1]])

                    starttime = datetime.datetime.now()
                    ch8_4_log.append(
                        ["StartTime:", starttime.strftime("%Y-%m-%d %H:%M:%S")]
                    )

                    ch8_4_start_time = int(round(time.time() * 1000))
                    ch8_4_e[4] = ch8_4_start_time

                    ch8_4_log.append(["Cut-off voltage(V):", ch8_4_data[10]])

                    ###读环境温度
                    mutex_readenvironmenttemperature.acquire()
                    ch8_4_environment_temperature = ser.readenvironmenttemperature(com1)
                    mutex_readenvironmenttemperature.release()
                    ch8_4_log.append(
                        [
                            "Start-Environment-Temperature(℃):",
                            ch8_4_environment_temperature,
                        ]
                    )

                    ch8_4_data_ntc = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data_en[42])[2:]
                                + ("0x%02x" % ch8_read_data_en[43])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch8_4_data_sensor = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data_en[58])[2:]
                                + ("0x%02x" % ch8_read_data_en[59])[2:],
                                16,
                            )
                        )
                        / 100
                    )

                    ch8_4_log.append(["Start-NTC-Temperature(℃):", ch8_4_data_ntc])

                    ch8_4_log.append(
                        ["Start-Sensor-Temperature(℃):", ch8_4_data_sensor]
                    )

                    if math.fabs(ch8_4_data_ntc - ch8_4_data_sensor) > 5:
                        ch8_4_error_data = "NTC温度异常"
                else:
                    messagebox.showinfo("错误", "请设置通道8-4合法电池截止电压")
            else:
                messagebox.showinfo("错误", "请在通道8-4输入合法的电池条码")
        else:
            messagebox.showinfo("错误", "通道8-4正在测试")


def ch8_5_confirm(ch8_5_name_confirm):
    global ch8_5_start_signal
    global ch8_5_signal
    global ch8_5_setvoltage_signal
    global ch8_5_sn_signal
    global ch8_5_set_voltage_command

    global ch8_5_log

    global ch8_5_e

    global ch8_5_error_data

    global entry_ch8_5
    global entry_ch8_5_set_voltage_value

    global ch8_5_data

    if ch8_5_name_confirm == "ch8_5":
        if ch8_5_start_signal:
            ch8_5_setvoltage()
            if ch8_5_sn_signal == 1:
                if ch8_5_setvoltage_signal == 1:
                    ch8_5_start_signal = False
                    ch8_5_signal = 1
                    ### 加锁 设置电压并启动 ###
                    entry_ch8_5["state"] = "disabled"
                    entry_ch8_5_set_voltage_value["state"] = "disabled"
                    ch8_5_error_data = ""
                    mutex.acquire()
                    ser.start(com, ch8_5_set_voltage_command)
                    ch8_readcommend_en = "080300000000A5"
                    ch8_read_data_en = ser.readdata(com, ch8_readcommend_en)
                    mutex.release()

                    ch8_5_log.append(["BatterNumber:", ch8_5_data[1]])

                    starttime = datetime.datetime.now()
                    ch8_5_log.append(
                        ["StartTime:", starttime.strftime("%Y-%m-%d %H:%M:%S")]
                    )

                    ch8_5_start_time = int(round(time.time() * 1000))
                    ch8_5_e[4] = ch8_5_start_time

                    ch8_5_log.append(["Cut-off voltage(V):", ch8_5_data[10]])

                    ###读环境温度
                    mutex_readenvironmenttemperature.acquire()
                    ch8_5_environment_temperature = ser.readenvironmenttemperature(com1)
                    mutex_readenvironmenttemperature.release()
                    ch8_5_log.append(
                        [
                            "Start-Environment-Temperature(℃):",
                            ch8_5_environment_temperature,
                        ]
                    )

                    ch8_5_data_ntc = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data_en[42])[2:]
                                + ("0x%02x" % ch8_read_data_en[43])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch8_5_data_sensor = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data_en[58])[2:]
                                + ("0x%02x" % ch8_read_data_en[59])[2:],
                                16,
                            )
                        )
                        / 100
                    )

                    ch8_5_log.append(["Start-NTC-Temperature(℃):", ch8_5_data_ntc])

                    ch8_5_log.append(
                        ["Start-Sensor-Temperature(℃):", ch8_5_data_sensor]
                    )

                    if math.fabs(ch8_5_data_ntc - ch8_5_data_sensor) > 5:
                        ch8_5_error_data = "NTC温度异常"
                else:
                    messagebox.showinfo("错误", "请设置通道8-5合法电池截止电压")
            else:
                messagebox.showinfo("错误", "请在通道8-5输入合法的电池条码")
        else:
            messagebox.showinfo("错误", "通道8-5正在测试")


def ch8_6_confirm(ch8_6_name_confirm):
    global ch8_6_start_signal
    global ch8_6_signal
    global ch8_6_setvoltage_signal
    global ch8_6_sn_signal
    global ch8_6_set_voltage_command

    global ch8_6_log

    global ch8_6_e

    global ch8_6_error_data

    global entry_ch8_6
    global entry_ch8_6_set_voltage_value

    global ch8_6_data

    if ch8_6_name_confirm == "ch8_6":
        if ch8_6_start_signal:
            ch8_6_setvoltage()
            if ch8_6_sn_signal == 1:
                if ch8_6_setvoltage_signal == 1:
                    ch8_6_start_signal = False
                    ch8_6_signal = 1
                    ### 加锁 设置电压并启动 ###
                    entry_ch8_6["state"] = "disabled"
                    entry_ch8_6_set_voltage_value["state"] = "disabled"
                    ch8_6_error_data = ""
                    mutex.acquire()
                    ser.start(com, ch8_6_set_voltage_command)
                    ch8_readcommend_en = "080300000000A5"
                    ch8_read_data_en = ser.readdata(com, ch8_readcommend_en)
                    mutex.release()

                    ch8_6_log.append(["BatterNumber:", ch8_6_data[1]])

                    starttime = datetime.datetime.now()
                    ch8_6_log.append(
                        ["StartTime:", starttime.strftime("%Y-%m-%d %H:%M:%S")]
                    )

                    ch8_6_start_time = int(round(time.time() * 1000))
                    ch8_6_e[4] = ch8_6_start_time

                    ch8_6_log.append(["Cut-off voltage(V):", ch8_6_data[10]])

                    ###读环境温度
                    mutex_readenvironmenttemperature.acquire()
                    ch8_6_environment_temperature = ser.readenvironmenttemperature(com1)
                    mutex_readenvironmenttemperature.release()
                    ch8_6_log.append(
                        [
                            "Start-Environment-Temperature(℃):",
                            ch8_6_environment_temperature,
                        ]
                    )

                    ch8_6_data_ntc = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data_en[42])[2:]
                                + ("0x%02x" % ch8_read_data_en[43])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch8_6_data_sensor = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data_en[58])[2:]
                                + ("0x%02x" % ch8_read_data_en[59])[2:],
                                16,
                            )
                        )
                        / 100
                    )

                    ch8_6_log.append(["Start-NTC-Temperature(℃):", ch8_6_data_ntc])

                    ch8_6_log.append(
                        ["Start-Sensor-Temperature(℃):", ch8_6_data_sensor]
                    )

                    if math.fabs(ch8_6_data_ntc - ch8_6_data_sensor) > 5:
                        ch8_6_error_data = "NTC温度异常"
                else:
                    messagebox.showinfo("错误", "请设置通道8-6合法电池截止电压")
            else:
                messagebox.showinfo("错误", "请在通道8-6输入合法的电池条码")
        else:
            messagebox.showinfo("错误", "通道8-6正在测试")


def ch8_7_confirm(ch8_7_name_confirm):
    global ch8_7_start_signal
    global ch8_7_signal
    global ch8_7_setvoltage_signal
    global ch8_7_sn_signal
    global ch8_7_set_voltage_command

    global ch8_7_log

    global ch8_7_e

    global ch8_7_error_data

    global entry_ch8_7
    global entry_ch8_7_set_voltage_value

    global ch8_7_data

    if ch8_7_name_confirm == "ch8_7":
        if ch8_7_start_signal:
            ch8_7_setvoltage()
            if ch8_7_sn_signal == 1:
                if ch8_7_setvoltage_signal == 1:
                    ch8_7_start_signal = False
                    ch8_7_signal = 1
                    ### 加锁 设置电压并启动 ###
                    entry_ch8_7["state"] = "disabled"
                    entry_ch8_7_set_voltage_value["state"] = "disabled"
                    ch8_7_error_data = ""
                    mutex.acquire()
                    ser.start(com, ch8_7_set_voltage_command)
                    ch8_readcommend_en = "080300000000A5"
                    ch8_read_data_en = ser.readdata(com, ch8_readcommend_en)
                    mutex.release()

                    ch8_7_log.append(["BatterNumber:", ch8_7_data[1]])

                    starttime = datetime.datetime.now()
                    ch8_7_log.append(
                        ["StartTime:", starttime.strftime("%Y-%m-%d %H:%M:%S")]
                    )

                    ch8_7_start_time = int(round(time.time() * 1000))
                    ch8_7_e[4] = ch8_7_start_time

                    ch8_7_log.append(["Cut-off voltage(V):", ch8_7_data[10]])

                    ###读环境温度
                    mutex_readenvironmenttemperature.acquire()
                    ch8_7_environment_temperature = ser.readenvironmenttemperature(com1)
                    mutex_readenvironmenttemperature.release()
                    ch8_7_log.append(
                        [
                            "Start-Environment-Temperature(℃):",
                            ch8_7_environment_temperature,
                        ]
                    )

                    ch8_7_data_ntc = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data_en[42])[2:]
                                + ("0x%02x" % ch8_read_data_en[43])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch8_7_data_sensor = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data_en[58])[2:]
                                + ("0x%02x" % ch8_read_data_en[59])[2:],
                                16,
                            )
                        )
                        / 100
                    )

                    ch8_7_log.append(["Start-NTC-Temperature(℃):", ch8_7_data_ntc])

                    ch8_7_log.append(
                        ["Start-Sensor-Temperature(℃):", ch8_7_data_sensor]
                    )

                    if math.fabs(ch8_7_data_ntc - ch8_7_data_sensor) > 5:
                        ch8_7_error_data = "NTC温度异常"
                else:
                    messagebox.showinfo("错误", "请设置通道8-7合法电池截止电压")
            else:
                messagebox.showinfo("错误", "请在通道8-7输入合法的电池条码")
        else:
            messagebox.showinfo("错误", "通道8-7正在测试")


def ch8_8_confirm(ch8_8_name_confirm):
    global ch8_8_start_signal
    global ch8_8_signal
    global ch8_8_setvoltage_signal
    global ch8_8_sn_signal
    global ch8_8_set_voltage_command

    global ch8_8_log

    global ch8_8_e

    global ch8_8_error_data

    global entry_ch8_8
    global entry_ch8_8_set_voltage_value

    global ch8_8_data

    if ch8_8_name_confirm == "ch8_8":
        if ch8_8_start_signal:
            ch8_8_setvoltage()
            if ch8_8_sn_signal == 1:
                if ch8_8_setvoltage_signal == 1:
                    ch8_8_start_signal = False
                    ch8_8_signal = 1
                    ### 加锁 设置电压并启动 ###
                    entry_ch8_8["state"] = "disabled"
                    entry_ch8_8_set_voltage_value["state"] = "disabled"
                    ch8_8_error_data = ""
                    mutex.acquire()
                    ser.start(com, ch8_8_set_voltage_command)
                    ch8_readcommend_en = "080300000000A5"
                    ch8_read_data_en = ser.readdata(com, ch8_readcommend_en)
                    mutex.release()

                    ch8_8_log.append(["BatterNumber:", ch8_8_data[1]])

                    starttime = datetime.datetime.now()
                    ch8_8_log.append(
                        ["StartTime:", starttime.strftime("%Y-%m-%d %H:%M:%S")]
                    )

                    ch8_8_start_time = int(round(time.time() * 1000))
                    ch8_8_e[4] = ch8_8_start_time

                    ch8_8_log.append(["Cut-off voltage(V):", ch8_8_data[10]])

                    ###读环境温度
                    mutex_readenvironmenttemperature.acquire()
                    ch8_8_environment_temperature = ser.readenvironmenttemperature(com1)
                    mutex_readenvironmenttemperature.release()
                    ch8_8_log.append(
                        [
                            "Start-Environment-Temperature(℃):",
                            ch8_8_environment_temperature,
                        ]
                    )

                    ch8_8_data_ntc = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data_en[42])[2:]
                                + ("0x%02x" % ch8_read_data_en[43])[2:],
                                16,
                            )
                        )
                        / 100
                    )
                    ch8_8_data_sensor = (
                        float(
                            int(
                                ("0x%02x" % ch8_read_data_en[58])[2:]
                                + ("0x%02x" % ch8_read_data_en[59])[2:],
                                16,
                            )
                        )
                        / 100
                    )

                    ch8_8_log.append(["Start-NTC-Temperature(℃):", ch8_8_data_ntc])

                    ch8_8_log.append(
                        ["Start-Sensor-Temperature(℃):", ch8_8_data_sensor]
                    )

                    if math.fabs(ch8_8_data_ntc - ch8_8_data_sensor) > 5:
                        ch8_8_error_data = "NTC温度异常"
                else:
                    messagebox.showinfo("错误", "请设置通道8-8合法电池截止电压")
            else:
                messagebox.showinfo("错误", "请在通道8-8输入合法的电池条码")
        else:
            messagebox.showinfo("错误", "通道8-8正在测试")


def ch1_1_setvoltage():
    global ch1_1_data
    global ch1_1_sn_signal
    global ch1_1_setvoltage_signal
    global ch1_1_set_voltage_command
    global ch1_1_battery_capacity
    ch1_1_set_voltage_value = entry_ch1_1_set_voltage_value.get()
    ch1_1_sn_value = entry_ch1_1.get()
    if (
        ch1_1_sn_value[0:3] == "JP6"
        or ch1_1_sn_value[0:4] == "605T"
        or ch1_1_sn_value[0:5] == "5021A"
        or ch1_1_sn_value[0:5] == "6011N"
        or ch1_1_sn_value[0:5] == "8071A"
    ):
        ch1_1_sn_signal = 1
        ch1_1_data[1] = ch1_1_sn_value
        try:
            ch1_1_battery_capacity = int(ch1_1_sn_value[6:10])
        except:
            ch1_1_sn_signal = 0
            messagebox.showinfo("错误", "请在通道1-1输入正确的条码")
    else:
        ch1_1_sn_signal = 0

    if ch1_1_set_voltage_value == "":
        ch1_1_setvoltage_signal = 0
    else:
        if float(ch1_1_set_voltage_value) > 12 or float(ch1_1_set_voltage_value) < 9:
            ch1_1_setvoltage_signal = 0
        else:
            ch1_1_set_voltage_command = (
                "01060001"
                + hex(int(float(ch1_1_set_voltage_value) * 1000))[2:].upper()
                + "A5"
            )
            ch1_1_setvoltage_signal = 1
            ch1_1_data[10] = ch1_1_set_voltage_value


def ch1_2_setvoltage():
    global ch1_2_data
    global ch1_2_sn_signal
    global ch1_2_setvoltage_signal
    global ch1_2_set_voltage_command
    global ch1_2_battery_capacity
    ch1_2_set_voltage_value = entry_ch1_2_set_voltage_value.get()
    ch1_2_sn_value = entry_ch1_2.get()
    if (
        ch1_2_sn_value[0:3] == "JP6"
        or ch1_2_sn_value[0:4] == "605T"
        or ch1_2_sn_value[0:5] == "5021A"
        or ch1_2_sn_value[0:5] == "6011N"
        or ch1_2_sn_value[0:5] == "8071A"
    ):
        ch1_2_sn_signal = 1
        ch1_2_data[1] = ch1_2_sn_value
        try:
            ch1_2_battery_capacity = int(ch1_2_sn_value[6:10])
        except:
            ch1_2_sn_signal = 0
            messagebox.showinfo("错误", "请在通道1-2输入正确的条码")
    else:
        ch1_2_sn_signal = 0

    if ch1_2_set_voltage_value == "":
        ch1_2_setvoltage_signal = 0
    else:
        if float(ch1_2_set_voltage_value) > 12 or float(ch1_2_set_voltage_value) < 9:
            ch1_2_setvoltage_signal = 0
        else:
            ch1_2_set_voltage_command = (
                "01060101"
                + hex(int(float(ch1_2_set_voltage_value) * 1000))[2:].upper()
                + "A5"
            )
            ch1_2_setvoltage_signal = 1
            ch1_2_data[10] = ch1_2_set_voltage_value


def ch1_3_setvoltage():
    global ch1_3_data
    global ch1_3_sn_signal
    global ch1_3_setvoltage_signal
    global ch1_3_set_voltage_command
    global ch1_3_battery_capacity
    ch1_3_set_voltage_value = entry_ch1_3_set_voltage_value.get()
    ch1_3_sn_value = entry_ch1_3.get()
    if (
        ch1_3_sn_value[0:3] == "JP6"
        or ch1_3_sn_value[0:4] == "605T"
        or ch1_3_sn_value[0:5] == "5021A"
        or ch1_3_sn_value[0:5] == "6011N"
        or ch1_3_sn_value[0:5] == "8071A"
    ):
        ch1_3_sn_signal = 1
        ch1_3_data[1] = ch1_3_sn_value
        try:
            ch1_3_battery_capacity = int(ch1_3_sn_value[6:10])
        except:
            ch1_3_sn_signal = 0
            messagebox.showinfo("错误", "请在通道1-3输入正确的条码")
    else:
        ch1_3_sn_signal = 0

    if ch1_3_set_voltage_value == "":
        ch1_3_setvoltage_signal = 0
    else:
        if float(ch1_3_set_voltage_value) > 12 or float(ch1_3_set_voltage_value) < 9:
            ch1_3_setvoltage_signal = 0
        else:
            ch1_3_set_voltage_command = (
                "01060201"
                + hex(int(float(ch1_3_set_voltage_value) * 1000))[2:].upper()
                + "A5"
            )
            ch1_3_setvoltage_signal = 1
            ch1_3_data[10] = ch1_3_set_voltage_value


def ch1_4_setvoltage():
    global ch1_4_data
    global ch1_4_sn_signal
    global ch1_4_setvoltage_signal
    global ch1_4_set_voltage_command
    global ch1_4_battery_capacity
    ch1_4_set_voltage_value = entry_ch1_4_set_voltage_value.get()
    ch1_4_sn_value = entry_ch1_4.get()
    if (
        ch1_4_sn_value[0:3] == "JP6"
        or ch1_4_sn_value[0:4] == "605T"
        or ch1_4_sn_value[0:5] == "5021A"
        or ch1_4_sn_value[0:5] == "6011N"
        or ch1_4_sn_value[0:5] == "8071A"
    ):
        ch1_4_sn_signal = 1
        ch1_4_data[1] = ch1_4_sn_value
        try:
            ch1_4_battery_capacity = int(ch1_4_sn_value[6:10])
        except:
            ch1_4_sn_signal = 0
            messagebox.showinfo("错误", "请在通道1-4输入正确的条码")
    else:
        ch1_4_sn_signal = 0

    if ch1_4_set_voltage_value == "":
        ch1_4_setvoltage_signal = 0
    else:
        if float(ch1_4_set_voltage_value) > 12 or float(ch1_4_set_voltage_value) < 9:
            ch1_4_setvoltage_signal = 0
        else:
            ch1_4_set_voltage_command = (
                "01060301"
                + hex(int(float(ch1_4_set_voltage_value) * 1000))[2:].upper()
                + "A5"
            )
            ch1_4_setvoltage_signal = 1
            ch1_4_data[10] = ch1_4_set_voltage_value


def ch1_5_setvoltage():
    global ch1_5_data
    global ch1_5_sn_signal
    global ch1_5_setvoltage_signal
    global ch1_5_set_voltage_command
    global ch1_5_battery_capacity
    ch1_5_set_voltage_value = entry_ch1_5_set_voltage_value.get()
    ch1_5_sn_value = entry_ch1_5.get()
    if (
        ch1_5_sn_value[0:3] == "JP6"
        or ch1_5_sn_value[0:4] == "605T"
        or ch1_5_sn_value[0:5] == "5021A"
        or ch1_5_sn_value[0:5] == "6011N"
        or ch1_5_sn_value[0:5] == "8071A"
    ):
        ch1_5_sn_signal = 1
        ch1_5_data[1] = ch1_5_sn_value
        try:
            ch1_5_battery_capacity = int(ch1_5_sn_value[6:10])
        except:
            ch1_5_sn_signal = 0
            messagebox.showinfo("错误", "请在通道1-5输入正确的条码")
    else:
        ch1_5_sn_signal = 0

    if ch1_5_set_voltage_value == "":
        ch1_5_setvoltage_signal = 0
    else:
        if float(ch1_5_set_voltage_value) > 12 or float(ch1_5_set_voltage_value) < 9:
            ch1_5_setvoltage_signal = 0
        else:
            ch1_5_set_voltage_command = (
                "01060401"
                + hex(int(float(ch1_5_set_voltage_value) * 1000))[2:].upper()
                + "A5"
            )
            ch1_5_setvoltage_signal = 1
            ch1_5_data[10] = ch1_5_set_voltage_value


def ch1_6_setvoltage():
    global ch1_6_data
    global ch1_6_sn_signal
    global ch1_6_setvoltage_signal
    global ch1_6_set_voltage_command
    global ch1_6_battery_capacity
    ch1_6_set_voltage_value = entry_ch1_6_set_voltage_value.get()
    ch1_6_sn_value = entry_ch1_6.get()
    if (
        ch1_6_sn_value[0:3] == "JP6"
        or ch1_6_sn_value[0:4] == "605T"
        or ch1_6_sn_value[0:5] == "5021A"
        or ch1_6_sn_value[0:5] == "6011N"
        or ch1_6_sn_value[0:5] == "8071A"
    ):
        ch1_6_sn_signal = 1
        ch1_6_data[1] = ch1_6_sn_value
        try:
            ch1_6_battery_capacity = int(ch1_6_sn_value[6:10])
        except:
            ch1_6_sn_signal = 0
            messagebox.showinfo("错误", "请在通道1-6输入正确的条码")
    else:
        ch1_6_sn_signal = 0

    if ch1_6_set_voltage_value == "":
        ch1_6_setvoltage_signal = 0
    else:
        if float(ch1_6_set_voltage_value) > 12 or float(ch1_6_set_voltage_value) < 9:
            ch1_6_setvoltage_signal = 0
        else:
            ch1_6_set_voltage_command = (
                "01060501"
                + hex(int(float(ch1_6_set_voltage_value) * 1000))[2:].upper()
                + "A5"
            )
            ch1_6_setvoltage_signal = 1
            ch1_6_data[10] = ch1_6_set_voltage_value


def ch1_7_setvoltage():
    global ch1_7_data
    global ch1_7_sn_signal
    global ch1_7_setvoltage_signal
    global ch1_7_set_voltage_command
    global ch1_7_battery_capacity
    ch1_7_set_voltage_value = entry_ch1_7_set_voltage_value.get()
    ch1_7_sn_value = entry_ch1_7.get()
    if (
        ch1_7_sn_value[0:3] == "JP6"
        or ch1_7_sn_value[0:4] == "605T"
        or ch1_7_sn_value[0:5] == "5021A"
        or ch1_7_sn_value[0:5] == "6011N"
        or ch1_7_sn_value[0:5] == "8071A"
    ):
        ch1_7_sn_signal = 1
        ch1_7_data[1] = ch1_7_sn_value
        try:
            ch1_7_battery_capacity = int(ch1_7_sn_value[6:10])
        except:
            ch1_7_sn_signal = 0
            messagebox.showinfo("错误", "请在通道1-7输入正确的条码")
    else:
        ch1_7_sn_signal = 0

    if ch1_7_set_voltage_value == "":
        ch1_7_setvoltage_signal = 0
    else:
        if float(ch1_7_set_voltage_value) > 12 or float(ch1_7_set_voltage_value) < 9:
            ch1_7_setvoltage_signal = 0
        else:
            ch1_7_set_voltage_command = (
                "01060601"
                + hex(int(float(ch1_7_set_voltage_value) * 1000))[2:].upper()
                + "A5"
            )
            ch1_7_setvoltage_signal = 1
            ch1_7_data[10] = ch1_7_set_voltage_value


def ch1_8_setvoltage():
    global ch1_8_data
    global ch1_8_sn_signal
    global ch1_8_setvoltage_signal
    global ch1_8_set_voltage_command
    global ch1_8_battery_capacity
    ch1_8_set_voltage_value = entry_ch1_8_set_voltage_value.get()
    ch1_8_sn_value = entry_ch1_8.get()
    if (
        ch1_8_sn_value[0:3] == "JP6"
        or ch1_8_sn_value[0:4] == "605T"
        or ch1_8_sn_value[0:5] == "5021A"
        or ch1_8_sn_value[0:5] == "6011N"
        or ch1_8_sn_value[0:5] == "8071A"
    ):
        ch1_8_sn_signal = 1
        ch1_8_data[1] = ch1_8_sn_value
        try:
            ch1_8_battery_capacity = int(ch1_8_sn_value[6:10])
        except:
            ch1_8_sn_signal = 0
            messagebox.showinfo("错误", "请在通道1-8输入正确的条码")
    else:
        ch1_8_sn_signal = 0

    if ch1_8_set_voltage_value == "":
        ch1_8_setvoltage_signal = 0
    else:
        if float(ch1_8_set_voltage_value) > 12 or float(ch1_8_set_voltage_value) < 9:
            ch1_8_setvoltage_signal = 0
        else:
            ch1_8_set_voltage_command = (
                "01060701"
                + hex(int(float(ch1_8_set_voltage_value) * 1000))[2:].upper()
                + "A5"
            )
            ch1_8_setvoltage_signal = 1
            ch1_8_data[10] = ch1_8_set_voltage_value


def ch2_1_setvoltage():
    global ch2_1_data
    global ch2_1_sn_signal
    global ch2_1_setvoltage_signal
    global ch2_1_set_voltage_command
    global ch2_1_battery_capacity
    ch2_1_set_voltage_value = entry_ch2_1_set_voltage_value.get()
    ch2_1_sn_value = entry_ch2_1.get()
    if (
        ch2_1_sn_value[0:3] == "JP6"
        or ch2_1_sn_value[0:4] == "605T"
        or ch2_1_sn_value[0:5] == "5021A"
        or ch2_1_sn_value[0:5] == "6011N"
        or ch2_1_sn_value[0:5] == "8071A"
    ):
        ch2_1_sn_signal = 1
        ch2_1_data[1] = ch2_1_sn_value
        try:
            ch2_1_battery_capacity = int(ch2_1_sn_value[6:10])
        except:
            ch2_1_sn_signal = 0
            messagebox.showinfo("错误", "请在通道2-1输入正确的条码")
    else:
        ch2_1_sn_signal = 0

    if ch2_1_set_voltage_value == "":
        ch2_1_setvoltage_signal = 0
    else:
        if float(ch2_1_set_voltage_value) > 12 or float(ch2_1_set_voltage_value) < 9:
            ch2_1_setvoltage_signal = 0
        else:
            ch2_1_set_voltage_command = (
                "02060001"
                + hex(int(float(ch2_1_set_voltage_value) * 1000))[2:].upper()
                + "A5"
            )
            ch2_1_setvoltage_signal = 1
            ch2_1_data[10] = ch2_1_set_voltage_value


def ch2_2_setvoltage():
    global ch2_2_data
    global ch2_2_sn_signal
    global ch2_2_setvoltage_signal
    global ch2_2_set_voltage_command
    global ch2_2_battery_capacity
    ch2_2_set_voltage_value = entry_ch2_2_set_voltage_value.get()
    ch2_2_sn_value = entry_ch2_2.get()
    if (
        ch2_2_sn_value[0:3] == "JP6"
        or ch2_2_sn_value[0:4] == "605T"
        or ch2_2_sn_value[0:5] == "5021A"
        or ch2_2_sn_value[0:5] == "6011N"
        or ch2_2_sn_value[0:5] == "8071A"
    ):
        ch2_2_sn_signal = 1
        ch2_2_data[1] = ch2_2_sn_value
        try:
            ch2_2_battery_capacity = int(ch2_2_sn_value[6:10])
        except:
            ch2_2_sn_signal = 0
            messagebox.showinfo("错误", "请在通道2-2输入正确的条码")
    else:
        ch2_2_sn_signal = 0

    if ch2_2_set_voltage_value == "":
        ch2_2_setvoltage_signal = 0
    else:
        if float(ch2_2_set_voltage_value) > 12 or float(ch2_2_set_voltage_value) < 9:
            ch2_2_setvoltage_signal = 0
        else:
            ch2_2_set_voltage_command = (
                "02060101"
                + hex(int(float(ch2_2_set_voltage_value) * 1000))[2:].upper()
                + "A5"
            )
            ch2_2_setvoltage_signal = 1
            ch2_2_data[10] = ch2_2_set_voltage_value


def ch2_3_setvoltage():
    global ch2_3_data
    global ch2_3_sn_signal
    global ch2_3_setvoltage_signal
    global ch2_3_set_voltage_command
    global ch2_3_battery_capacity
    ch2_3_set_voltage_value = entry_ch2_3_set_voltage_value.get()
    ch2_3_sn_value = entry_ch2_3.get()
    if (
        ch2_3_sn_value[0:3] == "JP6"
        or ch2_3_sn_value[0:4] == "605T"
        or ch2_3_sn_value[0:5] == "5021A"
        or ch2_3_sn_value[0:5] == "6011N"
        or ch2_3_sn_value[0:5] == "8071A"
    ):
        ch2_3_sn_signal = 1
        ch2_3_data[1] = ch2_3_sn_value
        try:
            ch2_3_battery_capacity = int(ch2_3_sn_value[6:10])
        except:
            ch2_3_sn_signal = 0
            messagebox.showinfo("错误", "请在通道2-3输入正确的条码")
    else:
        ch2_3_sn_signal = 0

    if ch2_3_set_voltage_value == "":
        ch2_3_setvoltage_signal = 0
    else:
        if float(ch2_3_set_voltage_value) > 12 or float(ch2_3_set_voltage_value) < 9:
            ch2_3_setvoltage_signal = 0
        else:
            ch2_3_set_voltage_command = (
                "02060201"
                + hex(int(float(ch2_3_set_voltage_value) * 1000))[2:].upper()
                + "A5"
            )
            ch2_3_setvoltage_signal = 1
            ch2_3_data[10] = ch2_3_set_voltage_value


def ch2_4_setvoltage():
    global ch2_4_data
    global ch2_4_sn_signal
    global ch2_4_setvoltage_signal
    global ch2_4_set_voltage_command
    global ch2_4_battery_capacity
    ch2_4_set_voltage_value = entry_ch2_4_set_voltage_value.get()
    ch2_4_sn_value = entry_ch2_4.get()
    if (
        ch2_4_sn_value[0:3] == "JP6"
        or ch2_4_sn_value[0:4] == "605T"
        or ch2_4_sn_value[0:5] == "5021A"
        or ch2_4_sn_value[0:5] == "6011N"
        or ch2_4_sn_value[0:5] == "8071A"
    ):
        ch2_4_sn_signal = 1
        ch2_4_data[1] = ch2_4_sn_value
        try:
            ch2_4_battery_capacity = int(ch2_4_sn_value[6:10])
        except:
            ch2_4_sn_signal = 0
            messagebox.showinfo("错误", "请在通道2-4输入正确的条码")
    else:
        ch2_4_sn_signal = 0

    if ch2_4_set_voltage_value == "":
        ch2_4_setvoltage_signal = 0
    else:
        if float(ch2_4_set_voltage_value) > 12 or float(ch2_4_set_voltage_value) < 9:
            ch2_4_setvoltage_signal = 0
        else:
            ch2_4_set_voltage_command = (
                "02060301"
                + hex(int(float(ch2_4_set_voltage_value) * 1000))[2:].upper()
                + "A5"
            )
            ch2_4_setvoltage_signal = 1
            ch2_4_data[10] = ch2_4_set_voltage_value


def ch2_5_setvoltage():
    global ch2_5_data
    global ch2_5_sn_signal
    global ch2_5_setvoltage_signal
    global ch2_5_set_voltage_command
    global ch2_5_battery_capacity
    ch2_5_set_voltage_value = entry_ch2_5_set_voltage_value.get()
    ch2_5_sn_value = entry_ch2_5.get()
    if (
        ch2_5_sn_value[0:3] == "JP6"
        or ch2_5_sn_value[0:4] == "605T"
        or ch2_5_sn_value[0:5] == "5021A"
        or ch2_5_sn_value[0:5] == "6011N"
        or ch2_5_sn_value[0:5] == "8071A"
    ):
        ch2_5_sn_signal = 1
        ch2_5_data[1] = ch2_5_sn_value
        try:
            ch2_5_battery_capacity = int(ch2_5_sn_value[6:10])
        except:
            ch2_5_sn_signal = 0
            messagebox.showinfo("错误", "请在通道2-5输入正确的条码")
    else:
        ch2_5_sn_signal = 0

    if ch2_5_set_voltage_value == "":
        ch2_5_setvoltage_signal = 0
    else:
        if float(ch2_5_set_voltage_value) > 12 or float(ch2_5_set_voltage_value) < 9:
            ch2_5_setvoltage_signal = 0
        else:
            ch2_5_set_voltage_command = (
                "02060401"
                + hex(int(float(ch2_5_set_voltage_value) * 1000))[2:].upper()
                + "A5"
            )
            ch2_5_setvoltage_signal = 1
            ch2_5_data[10] = ch2_5_set_voltage_value


def ch2_6_setvoltage():
    global ch2_6_data
    global ch2_6_sn_signal
    global ch2_6_setvoltage_signal
    global ch2_6_set_voltage_command
    global ch2_6_battery_capacity
    ch2_6_set_voltage_value = entry_ch2_6_set_voltage_value.get()
    ch2_6_sn_value = entry_ch2_6.get()
    if (
        ch2_6_sn_value[0:3] == "JP6"
        or ch2_6_sn_value[0:4] == "605T"
        or ch2_6_sn_value[0:5] == "5021A"
        or ch2_6_sn_value[0:5] == "6011N"
        or ch2_6_sn_value[0:5] == "8071A"
    ):
        ch2_6_sn_signal = 1
        ch2_6_data[1] = ch2_6_sn_value
        try:
            ch2_6_battery_capacity = int(ch2_6_sn_value[6:10])
        except:
            ch2_6_sn_signal = 0
            messagebox.showinfo("错误", "请在通道2-6输入正确的条码")
    else:
        ch2_6_sn_signal = 0

    if ch2_6_set_voltage_value == "":
        ch2_6_setvoltage_signal = 0
    else:
        if float(ch2_6_set_voltage_value) > 12 or float(ch2_6_set_voltage_value) < 9:
            ch2_6_setvoltage_signal = 0
        else:
            ch2_6_set_voltage_command = (
                "02060501"
                + hex(int(float(ch2_6_set_voltage_value) * 1000))[2:].upper()
                + "A5"
            )
            ch2_6_setvoltage_signal = 1
            ch2_6_data[10] = ch2_6_set_voltage_value


def ch2_7_setvoltage():
    global ch2_7_data
    global ch2_7_sn_signal
    global ch2_7_setvoltage_signal
    global ch2_7_set_voltage_command
    global ch2_7_battery_capacity
    ch2_7_set_voltage_value = entry_ch2_7_set_voltage_value.get()
    ch2_7_sn_value = entry_ch2_7.get()
    if (
        ch2_7_sn_value[0:3] == "JP6"
        or ch2_7_sn_value[0:4] == "605T"
        or ch2_7_sn_value[0:5] == "5021A"
        or ch2_7_sn_value[0:5] == "6011N"
        or ch2_7_sn_value[0:5] == "8071A"
    ):
        ch2_7_sn_signal = 1
        ch2_7_data[1] = ch2_7_sn_value
        try:
            ch2_7_battery_capacity = int(ch2_7_sn_value[6:10])
        except:
            ch2_7_sn_signal = 0
            messagebox.showinfo("错误", "请在通道2-7输入正确的条码")
    else:
        ch2_7_sn_signal = 0

    if ch2_7_set_voltage_value == "":
        ch2_7_setvoltage_signal = 0
    else:
        if float(ch2_7_set_voltage_value) > 12 or float(ch2_7_set_voltage_value) < 9:
            ch2_7_setvoltage_signal = 0
        else:
            ch2_7_set_voltage_command = (
                "02060601"
                + hex(int(float(ch2_7_set_voltage_value) * 1000))[2:].upper()
                + "A5"
            )
            ch2_7_setvoltage_signal = 1
            ch2_7_data[10] = ch2_7_set_voltage_value


def ch2_8_setvoltage():
    global ch2_8_data
    global ch2_8_sn_signal
    global ch2_8_setvoltage_signal
    global ch2_8_set_voltage_command
    global ch2_8_battery_capacity
    ch2_8_set_voltage_value = entry_ch2_8_set_voltage_value.get()
    ch2_8_sn_value = entry_ch2_8.get()
    if (
        ch2_8_sn_value[0:3] == "JP6"
        or ch2_8_sn_value[0:4] == "605T"
        or ch2_8_sn_value[0:5] == "5021A"
        or ch2_8_sn_value[0:5] == "6011N"
        or ch2_8_sn_value[0:5] == "8071A"
    ):
        ch2_8_sn_signal = 1
        ch2_8_data[1] = ch2_8_sn_value
        try:
            ch2_8_battery_capacity = int(ch2_8_sn_value[6:10])
        except:
            ch2_8_sn_signal = 0
            messagebox.showinfo("错误", "请在通道2-8输入正确的条码")
    else:
        ch2_8_sn_signal = 0

    if ch2_8_set_voltage_value == "":
        ch2_8_setvoltage_signal = 0
    else:
        if float(ch2_8_set_voltage_value) > 12 or float(ch2_8_set_voltage_value) < 9:
            ch2_8_setvoltage_signal = 0
        else:
            ch2_8_set_voltage_command = (
                "02060701"
                + hex(int(float(ch2_8_set_voltage_value) * 1000))[2:].upper()
                + "A5"
            )
            ch2_8_setvoltage_signal = 1
            ch2_8_data[10] = ch2_8_set_voltage_value


def ch3_1_setvoltage():
    global ch3_1_data
    global ch3_1_sn_signal
    global ch3_1_setvoltage_signal
    global ch3_1_set_voltage_command
    global ch3_1_battery_capacity
    ch3_1_set_voltage_value = entry_ch3_1_set_voltage_value.get()
    ch3_1_sn_value = entry_ch3_1.get()
    if (
        ch3_1_sn_value[0:3] == "JP6"
        or ch3_1_sn_value[0:4] == "605T"
        or ch3_1_sn_value[0:5] == "5021A"
        or ch3_1_sn_value[0:5] == "6011N"
        or ch3_1_sn_value[0:5] == "8071A"
    ):
        ch3_1_sn_signal = 1
        ch3_1_data[1] = ch3_1_sn_value
        try:
            ch3_1_battery_capacity = int(ch3_1_sn_value[6:10])
        except:
            ch3_1_sn_signal = 0
            messagebox.showinfo("错误", "请在通道3-1输入正确的条码")
    else:
        ch3_1_sn_signal = 0

    if ch3_1_set_voltage_value == "":
        ch3_1_setvoltage_signal = 0
    else:
        if float(ch3_1_set_voltage_value) > 12 or float(ch3_1_set_voltage_value) < 9:
            ch3_1_setvoltage_signal = 0
        else:
            ch3_1_set_voltage_command = (
                "03060001"
                + hex(int(float(ch3_1_set_voltage_value) * 1000))[2:].upper()
                + "A5"
            )
            ch3_1_setvoltage_signal = 1
            ch3_1_data[10] = ch3_1_set_voltage_value


def ch3_2_setvoltage():
    global ch3_2_data
    global ch3_2_sn_signal
    global ch3_2_setvoltage_signal
    global ch3_2_set_voltage_command
    global ch3_2_battery_capacity
    ch3_2_set_voltage_value = entry_ch3_2_set_voltage_value.get()
    ch3_2_sn_value = entry_ch3_2.get()
    if (
        ch3_2_sn_value[0:3] == "JP6"
        or ch3_2_sn_value[0:4] == "605T"
        or ch3_2_sn_value[0:5] == "5021A"
        or ch3_2_sn_value[0:5] == "6011N"
        or ch3_2_sn_value[0:5] == "8071A"
    ):
        ch3_2_sn_signal = 1
        ch3_2_data[1] = ch3_2_sn_value
        try:
            ch3_2_battery_capacity = int(ch3_2_sn_value[6:10])
        except:
            ch3_2_sn_signal = 0
            messagebox.showinfo("错误", "请在通道3-2输入正确的条码")
    else:
        ch3_2_sn_signal = 0

    if ch3_2_set_voltage_value == "":
        ch3_2_setvoltage_signal = 0
    else:
        if float(ch3_2_set_voltage_value) > 12 or float(ch3_2_set_voltage_value) < 9:
            ch3_2_setvoltage_signal = 0
        else:
            ch3_2_set_voltage_command = (
                "03060101"
                + hex(int(float(ch3_2_set_voltage_value) * 1000))[2:].upper()
                + "A5"
            )
            ch3_2_setvoltage_signal = 1
            ch3_2_data[10] = ch3_2_set_voltage_value


def ch3_3_setvoltage():
    global ch3_3_data
    global ch3_3_sn_signal
    global ch3_3_setvoltage_signal
    global ch3_3_set_voltage_command
    global ch3_3_battery_capacity
    ch3_3_set_voltage_value = entry_ch3_3_set_voltage_value.get()
    ch3_3_sn_value = entry_ch3_3.get()
    if (
        ch3_3_sn_value[0:3] == "JP6"
        or ch3_3_sn_value[0:4] == "605T"
        or ch3_3_sn_value[0:5] == "5021A"
        or ch3_3_sn_value[0:5] == "6011N"
        or ch3_3_sn_value[0:5] == "8071A"
    ):
        ch3_3_sn_signal = 1
        ch3_3_data[1] = ch3_3_sn_value
        try:
            ch3_3_battery_capacity = int(ch3_3_sn_value[6:10])
        except:
            ch3_3_sn_signal = 0
            messagebox.showinfo("错误", "请在通道3-3输入正确的条码")
    else:
        ch3_3_sn_signal = 0

    if ch3_3_set_voltage_value == "":
        ch3_3_setvoltage_signal = 0
    else:
        if float(ch3_3_set_voltage_value) > 12 or float(ch3_3_set_voltage_value) < 9:
            ch3_3_setvoltage_signal = 0
        else:
            ch3_3_set_voltage_command = (
                "03060201"
                + hex(int(float(ch3_3_set_voltage_value) * 1000))[2:].upper()
                + "A5"
            )
            ch3_3_setvoltage_signal = 1
            ch3_3_data[10] = ch3_3_set_voltage_value


def ch3_4_setvoltage():
    global ch3_4_data
    global ch3_4_sn_signal
    global ch3_4_setvoltage_signal
    global ch3_4_set_voltage_command
    global ch3_4_battery_capacity
    ch3_4_set_voltage_value = entry_ch3_4_set_voltage_value.get()
    ch3_4_sn_value = entry_ch3_4.get()
    if (
        ch3_4_sn_value[0:3] == "JP6"
        or ch3_4_sn_value[0:4] == "605T"
        or ch3_4_sn_value[0:5] == "5021A"
        or ch3_4_sn_value[0:5] == "6011N"
        or ch3_4_sn_value[0:5] == "8071A"
    ):
        ch3_4_sn_signal = 1
        ch3_4_data[1] = ch3_4_sn_value
        try:
            ch3_4_battery_capacity = int(ch3_4_sn_value[6:10])
        except:
            ch3_4_sn_signal = 0
            messagebox.showinfo("错误", "请在通道3-4输入正确的条码")
    else:
        ch3_4_sn_signal = 0

    if ch3_4_set_voltage_value == "":
        ch3_4_setvoltage_signal = 0
    else:
        if float(ch3_4_set_voltage_value) > 12 or float(ch3_4_set_voltage_value) < 9:
            ch3_4_setvoltage_signal = 0
        else:
            ch3_4_set_voltage_command = (
                "03060301"
                + hex(int(float(ch3_4_set_voltage_value) * 1000))[2:].upper()
                + "A5"
            )
            ch3_4_setvoltage_signal = 1
            ch3_4_data[10] = ch3_4_set_voltage_value


def ch3_5_setvoltage():
    global ch3_5_data
    global ch3_5_sn_signal
    global ch3_5_setvoltage_signal
    global ch3_5_set_voltage_command
    global ch3_5_battery_capacity
    ch3_5_set_voltage_value = entry_ch3_5_set_voltage_value.get()
    ch3_5_sn_value = entry_ch3_5.get()
    if (
        ch3_5_sn_value[0:3] == "JP6"
        or ch3_5_sn_value[0:4] == "605T"
        or ch3_5_sn_value[0:5] == "5021A"
        or ch3_5_sn_value[0:5] == "6011N"
        or ch3_5_sn_value[0:5] == "8071A"
    ):
        ch3_5_sn_signal = 1
        ch3_5_data[1] = ch3_5_sn_value
        try:
            ch3_5_battery_capacity = int(ch3_5_sn_value[6:10])
        except:
            ch3_5_sn_signal = 0
            messagebox.showinfo("错误", "请在通道3-5输入正确的条码")
    else:
        ch3_5_sn_signal = 0

    if ch3_5_set_voltage_value == "":
        ch3_5_setvoltage_signal = 0
    else:
        if float(ch3_5_set_voltage_value) > 12 or float(ch3_5_set_voltage_value) < 9:
            ch3_5_setvoltage_signal = 0
        else:
            ch3_5_set_voltage_command = (
                "03060401"
                + hex(int(float(ch3_5_set_voltage_value) * 1000))[2:].upper()
                + "A5"
            )
            ch3_5_setvoltage_signal = 1
            ch3_5_data[10] = ch3_5_set_voltage_value


def ch3_6_setvoltage():
    global ch3_6_data
    global ch3_6_sn_signal
    global ch3_6_setvoltage_signal
    global ch3_6_set_voltage_command
    global ch3_6_battery_capacity
    ch3_6_set_voltage_value = entry_ch3_6_set_voltage_value.get()
    ch3_6_sn_value = entry_ch3_6.get()
    if (
        ch3_6_sn_value[0:3] == "JP6"
        or ch3_6_sn_value[0:4] == "605T"
        or ch3_6_sn_value[0:5] == "5021A"
        or ch3_6_sn_value[0:5] == "6011N"
        or ch3_6_sn_value[0:5] == "8071A"
    ):
        ch3_6_sn_signal = 1
        ch3_6_data[1] = ch3_6_sn_value
        try:
            ch3_6_battery_capacity = int(ch3_6_sn_value[6:10])
        except:
            ch3_6_sn_signal = 0
            messagebox.showinfo("错误", "请在通道3-6输入正确的条码")
    else:
        ch3_6_sn_signal = 0

    if ch3_6_set_voltage_value == "":
        ch3_6_setvoltage_signal = 0
    else:
        if float(ch3_6_set_voltage_value) > 12 or float(ch3_6_set_voltage_value) < 9:
            ch3_6_setvoltage_signal = 0
        else:
            ch3_6_set_voltage_command = (
                "03060501"
                + hex(int(float(ch3_6_set_voltage_value) * 1000))[2:].upper()
                + "A5"
            )
            ch3_6_setvoltage_signal = 1
            ch3_6_data[10] = ch3_6_set_voltage_value


def ch3_7_setvoltage():
    global ch3_7_data
    global ch3_7_sn_signal
    global ch3_7_setvoltage_signal
    global ch3_7_set_voltage_command
    global ch3_7_battery_capacity
    ch3_7_set_voltage_value = entry_ch3_7_set_voltage_value.get()
    ch3_7_sn_value = entry_ch3_7.get()
    if (
        ch3_7_sn_value[0:3] == "JP6"
        or ch3_7_sn_value[0:4] == "605T"
        or ch3_7_sn_value[0:5] == "5021A"
        or ch3_7_sn_value[0:5] == "6011N"
        or ch3_7_sn_value[0:5] == "8071A"
    ):
        ch3_7_sn_signal = 1
        ch3_7_data[1] = ch3_7_sn_value
        try:
            ch3_7_battery_capacity = int(ch3_7_sn_value[6:10])
        except:
            ch3_7_sn_signal = 0
            messagebox.showinfo("错误", "请在通道3-7输入正确的条码")
    else:
        ch3_7_sn_signal = 0

    if ch3_7_set_voltage_value == "":
        ch3_7_setvoltage_signal = 0
    else:
        if float(ch3_7_set_voltage_value) > 12 or float(ch3_7_set_voltage_value) < 9:
            ch3_7_setvoltage_signal = 0
        else:
            ch3_7_set_voltage_command = (
                "03060601"
                + hex(int(float(ch3_7_set_voltage_value) * 1000))[2:].upper()
                + "A5"
            )
            ch3_7_setvoltage_signal = 1
            ch3_7_data[10] = ch3_7_set_voltage_value


def ch3_8_setvoltage():
    global ch3_8_data
    global ch3_8_sn_signal
    global ch3_8_setvoltage_signal
    global ch3_8_set_voltage_command
    global ch3_8_battery_capacity
    ch3_8_set_voltage_value = entry_ch3_8_set_voltage_value.get()
    ch3_8_sn_value = entry_ch3_8.get()
    if (
        ch3_8_sn_value[0:3] == "JP6"
        or ch3_8_sn_value[0:4] == "605T"
        or ch3_8_sn_value[0:5] == "5021A"
        or ch3_8_sn_value[0:5] == "6011N"
        or ch3_8_sn_value[0:5] == "8071A"
    ):
        ch3_8_sn_signal = 1
        ch3_8_data[1] = ch3_8_sn_value
        try:
            ch3_8_battery_capacity = int(ch3_8_sn_value[6:10])
        except:
            ch3_8_sn_signal = 0
            messagebox.showinfo("错误", "请在通道3-8输入正确的条码")
    else:
        ch3_8_sn_signal = 0

    if ch3_8_set_voltage_value == "":
        ch3_8_setvoltage_signal = 0
    else:
        if float(ch3_8_set_voltage_value) > 12 or float(ch3_8_set_voltage_value) < 9:
            ch3_8_setvoltage_signal = 0
        else:
            ch3_8_set_voltage_command = (
                "03060701"
                + hex(int(float(ch3_8_set_voltage_value) * 1000))[2:].upper()
                + "A5"
            )
            ch3_8_setvoltage_signal = 1
            ch3_8_data[10] = ch3_8_set_voltage_value


def ch4_1_setvoltage():
    global ch4_1_data
    global ch4_1_sn_signal
    global ch4_1_setvoltage_signal
    global ch4_1_set_voltage_command
    global ch4_1_battery_capacity
    ch4_1_set_voltage_value = entry_ch4_1_set_voltage_value.get()
    ch4_1_sn_value = entry_ch4_1.get()
    if (
        ch4_1_sn_value[0:3] == "JP6"
        or ch4_1_sn_value[0:4] == "605T"
        or ch4_1_sn_value[0:5] == "5021A"
        or ch4_1_sn_value[0:5] == "6011N"
        or ch4_1_sn_value[0:5] == "8071A"
    ):
        ch4_1_sn_signal = 1
        ch4_1_data[1] = ch4_1_sn_value
        try:
            ch4_1_battery_capacity = int(ch4_1_sn_value[6:10])
        except:
            ch4_1_sn_signal = 0
            messagebox.showinfo("错误", "请在通道4-1输入正确的条码")
    else:
        ch4_1_sn_signal = 0

    if ch4_1_set_voltage_value == "":
        ch4_1_setvoltage_signal = 0
    else:
        if float(ch4_1_set_voltage_value) > 12 or float(ch4_1_set_voltage_value) < 9:
            ch4_1_setvoltage_signal = 0
        else:
            ch4_1_set_voltage_command = (
                "04060001"
                + hex(int(float(ch4_1_set_voltage_value) * 1000))[2:].upper()
                + "A5"
            )
            ch4_1_setvoltage_signal = 1
            ch4_1_data[10] = ch4_1_set_voltage_value


def ch4_2_setvoltage():
    global ch4_2_data
    global ch4_2_sn_signal
    global ch4_2_setvoltage_signal
    global ch4_2_set_voltage_command
    global ch4_2_battery_capacity
    ch4_2_set_voltage_value = entry_ch4_2_set_voltage_value.get()
    ch4_2_sn_value = entry_ch4_2.get()
    if (
        ch4_2_sn_value[0:3] == "JP6"
        or ch4_2_sn_value[0:4] == "605T"
        or ch4_2_sn_value[0:5] == "5021A"
        or ch4_2_sn_value[0:5] == "6011N"
        or ch4_2_sn_value[0:5] == "8071A"
    ):
        ch4_2_sn_signal = 1
        ch4_2_data[1] = ch4_2_sn_value
        try:
            ch4_2_battery_capacity = int(ch4_2_sn_value[6:10])
        except:
            ch4_2_sn_signal = 0
            messagebox.showinfo("错误", "请在通道4-2输入正确的条码")
    else:
        ch4_2_sn_signal = 0

    if ch4_2_set_voltage_value == "":
        ch4_2_setvoltage_signal = 0
    else:
        if float(ch4_2_set_voltage_value) > 12 or float(ch4_2_set_voltage_value) < 9:
            ch4_2_setvoltage_signal = 0
        else:
            ch4_2_set_voltage_command = (
                "04060101"
                + hex(int(float(ch4_2_set_voltage_value) * 1000))[2:].upper()
                + "A5"
            )
            ch4_2_setvoltage_signal = 1
            ch4_2_data[10] = ch4_2_set_voltage_value


def ch4_3_setvoltage():
    global ch4_3_data
    global ch4_3_sn_signal
    global ch4_3_setvoltage_signal
    global ch4_3_set_voltage_command
    global ch4_3_battery_capacity
    ch4_3_set_voltage_value = entry_ch4_3_set_voltage_value.get()
    ch4_3_sn_value = entry_ch4_3.get()
    if (
        ch4_3_sn_value[0:3] == "JP6"
        or ch4_3_sn_value[0:4] == "605T"
        or ch4_3_sn_value[0:5] == "5021A"
        or ch4_3_sn_value[0:5] == "6011N"
        or ch4_3_sn_value[0:5] == "8071A"
    ):
        ch4_3_sn_signal = 1
        ch4_3_data[1] = ch4_3_sn_value
        try:
            ch4_3_battery_capacity = int(ch4_3_sn_value[6:10])
        except:
            ch4_3_sn_signal = 0
            messagebox.showinfo("错误", "请在通道4-3输入正确的条码")
    else:
        ch4_3_sn_signal = 0

    if ch4_3_set_voltage_value == "":
        ch4_3_setvoltage_signal = 0
    else:
        if float(ch4_3_set_voltage_value) > 12 or float(ch4_3_set_voltage_value) < 9:
            ch4_3_setvoltage_signal = 0
        else:
            ch4_3_set_voltage_command = (
                "04060201"
                + hex(int(float(ch4_3_set_voltage_value) * 1000))[2:].upper()
                + "A5"
            )
            ch4_3_setvoltage_signal = 1
            ch4_3_data[10] = ch4_3_set_voltage_value


def ch4_4_setvoltage():
    global ch4_4_data
    global ch4_4_sn_signal
    global ch4_4_setvoltage_signal
    global ch4_4_set_voltage_command
    global ch4_4_battery_capacity
    ch4_4_set_voltage_value = entry_ch4_4_set_voltage_value.get()
    ch4_4_sn_value = entry_ch4_4.get()
    if (
        ch4_4_sn_value[0:3] == "JP6"
        or ch4_4_sn_value[0:4] == "605T"
        or ch4_4_sn_value[0:5] == "5021A"
        or ch4_4_sn_value[0:5] == "6011N"
        or ch4_4_sn_value[0:5] == "8071A"
    ):
        ch4_4_sn_signal = 1
        ch4_4_data[1] = ch4_4_sn_value
        try:
            ch4_4_battery_capacity = int(ch4_4_sn_value[6:10])
        except:
            ch4_4_sn_signal = 0
            messagebox.showinfo("错误", "请在通道4-4输入正确的条码")
    else:
        ch4_4_sn_signal = 0

    if ch4_4_set_voltage_value == "":
        ch4_4_setvoltage_signal = 0
    else:
        if float(ch4_4_set_voltage_value) > 12 or float(ch4_4_set_voltage_value) < 9:
            ch4_4_setvoltage_signal = 0
        else:
            ch4_4_set_voltage_command = (
                "04060301"
                + hex(int(float(ch4_4_set_voltage_value) * 1000))[2:].upper()
                + "A5"
            )
            ch4_4_setvoltage_signal = 1
            ch4_4_data[10] = ch4_4_set_voltage_value


def ch4_5_setvoltage():
    global ch4_5_data
    global ch4_5_sn_signal
    global ch4_5_setvoltage_signal
    global ch4_5_set_voltage_command
    global ch4_5_battery_capacity
    ch4_5_set_voltage_value = entry_ch4_5_set_voltage_value.get()
    ch4_5_sn_value = entry_ch4_5.get()
    if (
        ch4_5_sn_value[0:3] == "JP6"
        or ch4_5_sn_value[0:4] == "605T"
        or ch4_5_sn_value[0:5] == "5021A"
        or ch4_5_sn_value[0:5] == "6011N"
        or ch4_5_sn_value[0:5] == "8071A"
    ):
        ch4_5_sn_signal = 1
        ch4_5_data[1] = ch4_5_sn_value
        try:
            ch4_5_battery_capacity = int(ch4_5_sn_value[6:10])
        except:
            ch4_5_sn_signal = 0
            messagebox.showinfo("错误", "请在通道4-5输入正确的条码")
    else:
        ch4_5_sn_signal = 0

    if ch4_5_set_voltage_value == "":
        ch4_5_setvoltage_signal = 0
    else:
        if float(ch4_5_set_voltage_value) > 12 or float(ch4_5_set_voltage_value) < 9:
            ch4_5_setvoltage_signal = 0
        else:
            ch4_5_set_voltage_command = (
                "04060401"
                + hex(int(float(ch4_5_set_voltage_value) * 1000))[2:].upper()
                + "A5"
            )
            ch4_5_setvoltage_signal = 1
            ch4_5_data[10] = ch4_5_set_voltage_value


def ch4_6_setvoltage():
    global ch4_6_data
    global ch4_6_sn_signal
    global ch4_6_setvoltage_signal
    global ch4_6_set_voltage_command
    global ch4_6_battery_capacity
    ch4_6_set_voltage_value = entry_ch4_6_set_voltage_value.get()
    ch4_6_sn_value = entry_ch4_6.get()
    if (
        ch4_6_sn_value[0:3] == "JP6"
        or ch4_6_sn_value[0:4] == "605T"
        or ch4_6_sn_value[0:5] == "5021A"
        or ch4_6_sn_value[0:5] == "6011N"
        or ch4_6_sn_value[0:5] == "8071A"
    ):
        ch4_6_sn_signal = 1
        ch4_6_data[1] = ch4_6_sn_value
        try:
            ch4_6_battery_capacity = int(ch4_6_sn_value[6:10])
        except:
            ch4_6_sn_signal = 0
            messagebox.showinfo("错误", "请在通道4-6输入正确的条码")
    else:
        ch4_6_sn_signal = 0

    if ch4_6_set_voltage_value == "":
        ch4_6_setvoltage_signal = 0
    else:
        if float(ch4_6_set_voltage_value) > 12 or float(ch4_6_set_voltage_value) < 9:
            ch4_6_setvoltage_signal = 0
        else:
            ch4_6_set_voltage_command = (
                "04060501"
                + hex(int(float(ch4_6_set_voltage_value) * 1000))[2:].upper()
                + "A5"
            )
            ch4_6_setvoltage_signal = 1
            ch4_6_data[10] = ch4_6_set_voltage_value


def ch4_7_setvoltage():
    global ch4_7_data
    global ch4_7_sn_signal
    global ch4_7_setvoltage_signal
    global ch4_7_set_voltage_command
    global ch4_7_battery_capacity
    ch4_7_set_voltage_value = entry_ch4_7_set_voltage_value.get()
    ch4_7_sn_value = entry_ch4_7.get()
    if (
        ch4_7_sn_value[0:3] == "JP6"
        or ch4_7_sn_value[0:4] == "605T"
        or ch4_7_sn_value[0:5] == "5021A"
        or ch4_7_sn_value[0:5] == "6011N"
        or ch4_7_sn_value[0:5] == "8071A"
    ):
        ch4_7_sn_signal = 1
        ch4_7_data[1] = ch4_7_sn_value
        try:
            ch4_7_battery_capacity = int(ch4_7_sn_value[6:10])
        except:
            ch4_7_sn_signal = 0
            messagebox.showinfo("错误", "请在通道4-7输入正确的条码")
    else:
        ch4_7_sn_signal = 0

    if ch4_7_set_voltage_value == "":
        ch4_7_setvoltage_signal = 0
    else:
        if float(ch4_7_set_voltage_value) > 12 or float(ch4_7_set_voltage_value) < 9:
            ch4_7_setvoltage_signal = 0
        else:
            ch4_7_set_voltage_command = (
                "04060601"
                + hex(int(float(ch4_7_set_voltage_value) * 1000))[2:].upper()
                + "A5"
            )
            ch4_7_setvoltage_signal = 1
            ch4_7_data[10] = ch4_7_set_voltage_value


def ch4_8_setvoltage():
    global ch4_8_data
    global ch4_8_sn_signal
    global ch4_8_setvoltage_signal
    global ch4_8_set_voltage_command
    global ch4_8_battery_capacity
    ch4_8_set_voltage_value = entry_ch4_8_set_voltage_value.get()
    ch4_8_sn_value = entry_ch4_8.get()
    if (
        ch4_8_sn_value[0:3] == "JP6"
        or ch4_8_sn_value[0:4] == "605T"
        or ch4_8_sn_value[0:5] == "5021A"
        or ch4_8_sn_value[0:5] == "6011N"
        or ch4_8_sn_value[0:5] == "8071A"
    ):
        ch4_8_sn_signal = 1
        ch4_8_data[1] = ch4_8_sn_value
        try:
            ch4_8_battery_capacity = int(ch4_8_sn_value[6:10])
        except:
            ch4_8_sn_signal = 0
            messagebox.showinfo("错误", "请在通道4-8输入正确的条码")
    else:
        ch4_8_sn_signal = 0

    if ch4_8_set_voltage_value == "":
        ch4_8_setvoltage_signal = 0
    else:
        if float(ch4_8_set_voltage_value) > 12 or float(ch4_8_set_voltage_value) < 9:
            ch4_8_setvoltage_signal = 0
        else:
            ch4_8_set_voltage_command = (
                "04060701"
                + hex(int(float(ch4_8_set_voltage_value) * 1000))[2:].upper()
                + "A5"
            )
            ch4_8_setvoltage_signal = 1
            ch4_8_data[10] = ch4_8_set_voltage_value


def ch5_1_setvoltage():
    global ch5_1_data
    global ch5_1_sn_signal
    global ch5_1_setvoltage_signal
    global ch5_1_set_voltage_command
    global ch5_1_battery_capacity
    ch5_1_set_voltage_value = entry_ch5_1_set_voltage_value.get()
    ch5_1_sn_value = entry_ch5_1.get()
    if (
        ch5_1_sn_value[0:3] == "JP6"
        or ch5_1_sn_value[0:4] == "605T"
        or ch5_1_sn_value[0:5] == "5021A"
        or ch5_1_sn_value[0:5] == "6011N"
        or ch5_1_sn_value[0:5] == "8071A"
    ):
        ch5_1_sn_signal = 1
        ch5_1_data[1] = ch5_1_sn_value
        try:
            ch5_1_battery_capacity = int(ch5_1_sn_value[6:10])
        except:
            ch5_1_sn_signal = 0
            messagebox.showinfo("错误", "请在通道5-1输入正确的条码")
    else:
        ch5_1_sn_signal = 0

    if ch5_1_set_voltage_value == "":
        ch5_1_setvoltage_signal = 0
    else:
        if float(ch5_1_set_voltage_value) > 12 or float(ch5_1_set_voltage_value) < 9:
            ch5_1_setvoltage_signal = 0
        else:
            ch5_1_set_voltage_command = (
                "05060001"
                + hex(int(float(ch5_1_set_voltage_value) * 1000))[2:].upper()
                + "A5"
            )
            ch5_1_setvoltage_signal = 1
            ch5_1_data[10] = ch5_1_set_voltage_value


def ch5_2_setvoltage():
    global ch5_2_data
    global ch5_2_sn_signal
    global ch5_2_setvoltage_signal
    global ch5_2_set_voltage_command
    global ch5_2_battery_capacity
    ch5_2_set_voltage_value = entry_ch5_2_set_voltage_value.get()
    ch5_2_sn_value = entry_ch5_2.get()
    if (
        ch5_2_sn_value[0:3] == "JP6"
        or ch5_2_sn_value[0:4] == "605T"
        or ch5_2_sn_value[0:5] == "5021A"
        or ch5_2_sn_value[0:5] == "6011N"
        or ch5_2_sn_value[0:5] == "8071A"
    ):
        ch5_2_sn_signal = 1
        ch5_2_data[1] = ch5_2_sn_value
        try:
            ch5_2_battery_capacity = int(ch5_2_sn_value[6:10])
        except:
            ch5_2_sn_signal = 0
            messagebox.showinfo("错误", "请在通道5-2输入正确的条码")
    else:
        ch5_2_sn_signal = 0

    if ch5_2_set_voltage_value == "":
        ch5_2_setvoltage_signal = 0
    else:
        if float(ch5_2_set_voltage_value) > 12 or float(ch5_2_set_voltage_value) < 9:
            ch5_2_setvoltage_signal = 0
        else:
            ch5_2_set_voltage_command = (
                "05060101"
                + hex(int(float(ch5_2_set_voltage_value) * 1000))[2:].upper()
                + "A5"
            )
            ch5_2_setvoltage_signal = 1
            ch5_2_data[10] = ch5_2_set_voltage_value


def ch5_3_setvoltage():
    global ch5_3_data
    global ch5_3_sn_signal
    global ch5_3_setvoltage_signal
    global ch5_3_set_voltage_command
    global ch5_3_battery_capacity
    ch5_3_set_voltage_value = entry_ch5_3_set_voltage_value.get()
    ch5_3_sn_value = entry_ch5_3.get()
    if (
        ch5_3_sn_value[0:3] == "JP6"
        or ch5_3_sn_value[0:4] == "605T"
        or ch5_3_sn_value[0:5] == "5021A"
        or ch5_3_sn_value[0:5] == "6011N"
        or ch5_3_sn_value[0:5] == "8071A"
    ):
        ch5_3_sn_signal = 1
        ch5_3_data[1] = ch5_3_sn_value
        try:
            ch5_3_battery_capacity = int(ch5_3_sn_value[6:10])
        except:
            ch5_3_sn_signal = 0
            messagebox.showinfo("错误", "请在通道5-3输入正确的条码")
    else:
        ch5_3_sn_signal = 0

    if ch5_3_set_voltage_value == "":
        ch5_3_setvoltage_signal = 0
    else:
        if float(ch5_3_set_voltage_value) > 12 or float(ch5_3_set_voltage_value) < 9:
            ch5_3_setvoltage_signal = 0
        else:
            ch5_3_set_voltage_command = (
                "05060201"
                + hex(int(float(ch5_3_set_voltage_value) * 1000))[2:].upper()
                + "A5"
            )
            ch5_3_setvoltage_signal = 1
            ch5_3_data[10] = ch5_3_set_voltage_value


def ch5_4_setvoltage():
    global ch5_4_data
    global ch5_4_sn_signal
    global ch5_4_setvoltage_signal
    global ch5_4_set_voltage_command
    global ch5_4_battery_capacity
    ch5_4_set_voltage_value = entry_ch5_4_set_voltage_value.get()
    ch5_4_sn_value = entry_ch5_4.get()
    if (
        ch5_4_sn_value[0:3] == "JP6"
        or ch5_4_sn_value[0:4] == "605T"
        or ch5_4_sn_value[0:5] == "5021A"
        or ch5_4_sn_value[0:5] == "6011N"
        or ch5_4_sn_value[0:5] == "8071A"
    ):
        ch5_4_sn_signal = 1
        ch5_4_data[1] = ch5_4_sn_value
        try:
            ch5_4_battery_capacity = int(ch5_4_sn_value[6:10])
        except:
            ch5_4_sn_signal = 0
            messagebox.showinfo("错误", "请在通道5-4输入正确的条码")
    else:
        ch5_4_sn_signal = 0

    if ch5_4_set_voltage_value == "":
        ch5_4_setvoltage_signal = 0
    else:
        if float(ch5_4_set_voltage_value) > 12 or float(ch5_4_set_voltage_value) < 9:
            ch5_4_setvoltage_signal = 0
        else:
            ch5_4_set_voltage_command = (
                "05060301"
                + hex(int(float(ch5_4_set_voltage_value) * 1000))[2:].upper()
                + "A5"
            )
            ch5_4_setvoltage_signal = 1
            ch5_4_data[10] = ch5_4_set_voltage_value


def ch5_5_setvoltage():
    global ch5_5_data
    global ch5_5_sn_signal
    global ch5_5_setvoltage_signal
    global ch5_5_set_voltage_command
    global ch5_5_battery_capacity
    ch5_5_set_voltage_value = entry_ch5_5_set_voltage_value.get()
    ch5_5_sn_value = entry_ch5_5.get()
    if (
        ch5_5_sn_value[0:3] == "JP6"
        or ch5_5_sn_value[0:4] == "605T"
        or ch5_5_sn_value[0:5] == "5021A"
        or ch5_5_sn_value[0:5] == "6011N"
        or ch5_5_sn_value[0:5] == "8071A"
    ):
        ch5_5_sn_signal = 1
        ch5_5_data[1] = ch5_5_sn_value
        try:
            ch5_5_battery_capacity = int(ch5_5_sn_value[6:10])
        except:
            ch5_5_sn_signal = 0
            messagebox.showinfo("错误", "请在通道5-5输入正确的条码")
    else:
        ch5_5_sn_signal = 0

    if ch5_5_set_voltage_value == "":
        ch5_5_setvoltage_signal = 0
    else:
        if float(ch5_5_set_voltage_value) > 12 or float(ch5_5_set_voltage_value) < 9:
            ch5_5_setvoltage_signal = 0
        else:
            ch5_5_set_voltage_command = (
                "05060401"
                + hex(int(float(ch5_5_set_voltage_value) * 1000))[2:].upper()
                + "A5"
            )
            ch5_5_setvoltage_signal = 1
            ch5_5_data[10] = ch5_5_set_voltage_value


def ch5_6_setvoltage():
    global ch5_6_data
    global ch5_6_sn_signal
    global ch5_6_setvoltage_signal
    global ch5_6_set_voltage_command
    global ch5_6_battery_capacity
    ch5_6_set_voltage_value = entry_ch5_6_set_voltage_value.get()
    ch5_6_sn_value = entry_ch5_6.get()
    if (
        ch5_6_sn_value[0:3] == "JP6"
        or ch5_6_sn_value[0:4] == "605T"
        or ch5_6_sn_value[0:5] == "5021A"
        or ch5_6_sn_value[0:5] == "6011N"
        or ch5_6_sn_value[0:5] == "8071A"
    ):
        ch5_6_sn_signal = 1
        ch5_6_data[1] = ch5_6_sn_value
        try:
            ch5_6_battery_capacity = int(ch5_6_sn_value[6:10])
        except:
            ch5_6_sn_signal = 0
            messagebox.showinfo("错误", "请在通道5-6输入正确的条码")
    else:
        ch5_6_sn_signal = 0

    if ch5_6_set_voltage_value == "":
        ch5_6_setvoltage_signal = 0
    else:
        if float(ch5_6_set_voltage_value) > 12 or float(ch5_6_set_voltage_value) < 9:
            ch5_6_setvoltage_signal = 0
        else:
            ch5_6_set_voltage_command = (
                "05060501"
                + hex(int(float(ch5_6_set_voltage_value) * 1000))[2:].upper()
                + "A5"
            )
            ch5_6_setvoltage_signal = 1
            ch5_6_data[10] = ch5_6_set_voltage_value


def ch5_7_setvoltage():
    global ch5_7_data
    global ch5_7_sn_signal
    global ch5_7_setvoltage_signal
    global ch5_7_set_voltage_command
    global ch5_7_battery_capacity
    ch5_7_set_voltage_value = entry_ch5_7_set_voltage_value.get()
    ch5_7_sn_value = entry_ch5_7.get()
    if (
        ch5_7_sn_value[0:3] == "JP6"
        or ch5_7_sn_value[0:4] == "605T"
        or ch5_7_sn_value[0:5] == "5021A"
        or ch5_7_sn_value[0:5] == "6011N"
        or ch5_7_sn_value[0:5] == "8071A"
    ):
        ch5_7_sn_signal = 1
        ch5_7_data[1] = ch5_7_sn_value
        try:
            ch5_7_battery_capacity = int(ch5_7_sn_value[6:10])
        except:
            ch5_7_sn_signal = 0
            messagebox.showinfo("错误", "请在通道5-7输入正确的条码")
    else:
        ch5_7_sn_signal = 0

    if ch5_7_set_voltage_value == "":
        ch5_7_setvoltage_signal = 0
    else:
        if float(ch5_7_set_voltage_value) > 12 or float(ch5_7_set_voltage_value) < 9:
            ch5_7_setvoltage_signal = 0
        else:
            ch5_7_set_voltage_command = (
                "05060601"
                + hex(int(float(ch5_7_set_voltage_value) * 1000))[2:].upper()
                + "A5"
            )
            ch5_7_setvoltage_signal = 1
            ch5_7_data[10] = ch5_7_set_voltage_value


def ch5_8_setvoltage():
    global ch5_8_data
    global ch5_8_sn_signal
    global ch5_8_setvoltage_signal
    global ch5_8_set_voltage_command
    global ch5_8_battery_capacity
    ch5_8_set_voltage_value = entry_ch5_8_set_voltage_value.get()
    ch5_8_sn_value = entry_ch5_8.get()
    if (
        ch5_8_sn_value[0:3] == "JP6"
        or ch5_8_sn_value[0:4] == "605T"
        or ch5_8_sn_value[0:5] == "5021A"
        or ch5_8_sn_value[0:5] == "6011N"
        or ch5_8_sn_value[0:5] == "8071A"
    ):
        ch5_8_sn_signal = 1
        ch5_8_data[1] = ch5_8_sn_value
        try:
            ch5_8_battery_capacity = int(ch5_8_sn_value[6:10])
        except:
            ch5_8_sn_signal = 0
            messagebox.showinfo("错误", "请在通道5-8输入正确的条码")
    else:
        ch5_8_sn_signal = 0

    if ch5_8_set_voltage_value == "":
        ch5_8_setvoltage_signal = 0
    else:
        if float(ch5_8_set_voltage_value) > 12 or float(ch5_8_set_voltage_value) < 9:
            ch5_8_setvoltage_signal = 0
        else:
            ch5_8_set_voltage_command = (
                "05060701"
                + hex(int(float(ch5_8_set_voltage_value) * 1000))[2:].upper()
                + "A5"
            )
            ch5_8_setvoltage_signal = 1
            ch5_8_data[10] = ch5_8_set_voltage_value


def ch6_1_setvoltage():
    global ch6_1_data
    global ch6_1_sn_signal
    global ch6_1_setvoltage_signal
    global ch6_1_set_voltage_command
    global ch6_1_battery_capacity
    ch6_1_set_voltage_value = entry_ch6_1_set_voltage_value.get()
    ch6_1_sn_value = entry_ch6_1.get()
    if (
        ch6_1_sn_value[0:3] == "JP6"
        or ch6_1_sn_value[0:4] == "605T"
        or ch6_1_sn_value[0:5] == "5021A"
        or ch6_1_sn_value[0:5] == "6011N"
        or ch6_1_sn_value[0:5] == "8071A"
    ):
        ch6_1_sn_signal = 1
        ch6_1_data[1] = ch6_1_sn_value
        try:
            ch6_1_battery_capacity = int(ch6_1_sn_value[6:10])
        except:
            ch6_1_sn_signal = 0
            messagebox.showinfo("错误", "请在通道6-1输入正确的条码")
    else:
        ch6_1_sn_signal = 0

    if ch6_1_set_voltage_value == "":
        ch6_1_setvoltage_signal = 0
    else:
        if float(ch6_1_set_voltage_value) > 12 or float(ch6_1_set_voltage_value) < 9:
            ch6_1_setvoltage_signal = 0
        else:
            ch6_1_set_voltage_command = (
                "06060001"
                + hex(int(float(ch6_1_set_voltage_value) * 1000))[2:].upper()
                + "A5"
            )
            ch6_1_setvoltage_signal = 1
            ch6_1_data[10] = ch6_1_set_voltage_value


def ch6_2_setvoltage():
    global ch6_2_data
    global ch6_2_sn_signal
    global ch6_2_setvoltage_signal
    global ch6_2_set_voltage_command
    global ch6_2_battery_capacity
    ch6_2_set_voltage_value = entry_ch6_2_set_voltage_value.get()
    ch6_2_sn_value = entry_ch6_2.get()
    if (
        ch6_2_sn_value[0:3] == "JP6"
        or ch6_2_sn_value[0:4] == "605T"
        or ch6_2_sn_value[0:5] == "5021A"
        or ch6_2_sn_value[0:5] == "6011N"
        or ch6_2_sn_value[0:5] == "8071A"
    ):
        ch6_2_sn_signal = 1
        ch6_2_data[1] = ch6_2_sn_value
        try:
            ch6_2_battery_capacity = int(ch6_2_sn_value[6:10])
        except:
            ch6_2_sn_signal = 0
            messagebox.showinfo("错误", "请在通道6-2输入正确的条码")
    else:
        ch6_2_sn_signal = 0

    if ch6_2_set_voltage_value == "":
        ch6_2_setvoltage_signal = 0
    else:
        if float(ch6_2_set_voltage_value) > 12 or float(ch6_2_set_voltage_value) < 9:
            ch6_2_setvoltage_signal = 0
        else:
            ch6_2_set_voltage_command = (
                "06060101"
                + hex(int(float(ch6_2_set_voltage_value) * 1000))[2:].upper()
                + "A5"
            )
            ch6_2_setvoltage_signal = 1
            ch6_2_data[10] = ch6_2_set_voltage_value


def ch6_3_setvoltage():
    global ch6_3_data
    global ch6_3_sn_signal
    global ch6_3_setvoltage_signal
    global ch6_3_set_voltage_command
    global ch6_3_battery_capacity
    ch6_3_set_voltage_value = entry_ch6_3_set_voltage_value.get()
    ch6_3_sn_value = entry_ch6_3.get()
    if (
        ch6_3_sn_value[0:3] == "JP6"
        or ch6_3_sn_value[0:4] == "605T"
        or ch6_3_sn_value[0:5] == "5021A"
        or ch6_3_sn_value[0:5] == "6011N"
        or ch6_3_sn_value[0:5] == "8071A"
    ):
        ch6_3_sn_signal = 1
        ch6_3_data[1] = ch6_3_sn_value
        try:
            ch6_3_battery_capacity = int(ch6_3_sn_value[6:10])
        except:
            ch6_3_sn_signal = 0
            messagebox.showinfo("错误", "请在通道6-3输入正确的条码")
    else:
        ch6_3_sn_signal = 0

    if ch6_3_set_voltage_value == "":
        ch6_3_setvoltage_signal = 0
    else:
        if float(ch6_3_set_voltage_value) > 12 or float(ch6_3_set_voltage_value) < 9:
            ch6_3_setvoltage_signal = 0
        else:
            ch6_3_set_voltage_command = (
                "06060201"
                + hex(int(float(ch6_3_set_voltage_value) * 1000))[2:].upper()
                + "A5"
            )
            ch6_3_setvoltage_signal = 1
            ch6_3_data[10] = ch6_3_set_voltage_value


def ch6_4_setvoltage():
    global ch6_4_data
    global ch6_4_sn_signal
    global ch6_4_setvoltage_signal
    global ch6_4_set_voltage_command
    global ch6_4_battery_capacity
    ch6_4_set_voltage_value = entry_ch6_4_set_voltage_value.get()
    ch6_4_sn_value = entry_ch6_4.get()
    if (
        ch6_4_sn_value[0:3] == "JP6"
        or ch6_4_sn_value[0:4] == "605T"
        or ch6_4_sn_value[0:5] == "5021A"
        or ch6_4_sn_value[0:5] == "6011N"
        or ch6_4_sn_value[0:5] == "8071A"
    ):
        ch6_4_sn_signal = 1
        ch6_4_data[1] = ch6_4_sn_value
        try:
            ch6_4_battery_capacity = int(ch6_4_sn_value[6:10])
        except:
            ch6_4_sn_signal = 0
            messagebox.showinfo("错误", "请在通道6-4输入正确的条码")
    else:
        ch6_4_sn_signal = 0

    if ch6_4_set_voltage_value == "":
        ch6_4_setvoltage_signal = 0
    else:
        if float(ch6_4_set_voltage_value) > 12 or float(ch6_4_set_voltage_value) < 9:
            ch6_4_setvoltage_signal = 0
        else:
            ch6_4_set_voltage_command = (
                "06060301"
                + hex(int(float(ch6_4_set_voltage_value) * 1000))[2:].upper()
                + "A5"
            )
            ch6_4_setvoltage_signal = 1
            ch6_4_data[10] = ch6_4_set_voltage_value


def ch6_5_setvoltage():
    global ch6_5_data
    global ch6_5_sn_signal
    global ch6_5_setvoltage_signal
    global ch6_5_set_voltage_command
    global ch6_5_battery_capacity
    ch6_5_set_voltage_value = entry_ch6_5_set_voltage_value.get()
    ch6_5_sn_value = entry_ch6_5.get()
    if (
        ch6_5_sn_value[0:3] == "JP6"
        or ch6_5_sn_value[0:4] == "605T"
        or ch6_5_sn_value[0:5] == "5021A"
        or ch6_5_sn_value[0:5] == "6011N"
        or ch6_5_sn_value[0:5] == "8071A"
    ):
        ch6_5_sn_signal = 1
        ch6_5_data[1] = ch6_5_sn_value
        try:
            ch6_5_battery_capacity = int(ch6_5_sn_value[6:10])
        except:
            ch6_5_sn_signal = 0
            messagebox.showinfo("错误", "请在通道6-5输入正确的条码")
    else:
        ch6_5_sn_signal = 0

    if ch6_5_set_voltage_value == "":
        ch6_5_setvoltage_signal = 0
    else:
        if float(ch6_5_set_voltage_value) > 12 or float(ch6_5_set_voltage_value) < 9:
            ch6_5_setvoltage_signal = 0
        else:
            ch6_5_set_voltage_command = (
                "06060401"
                + hex(int(float(ch6_5_set_voltage_value) * 1000))[2:].upper()
                + "A5"
            )
            ch6_5_setvoltage_signal = 1
            ch6_5_data[10] = ch6_5_set_voltage_value


def ch6_6_setvoltage():
    global ch6_6_data
    global ch6_6_sn_signal
    global ch6_6_setvoltage_signal
    global ch6_6_set_voltage_command
    global ch6_6_battery_capacity
    ch6_6_set_voltage_value = entry_ch6_6_set_voltage_value.get()
    ch6_6_sn_value = entry_ch6_6.get()
    if (
        ch6_6_sn_value[0:3] == "JP6"
        or ch6_6_sn_value[0:4] == "605T"
        or ch6_6_sn_value[0:5] == "5021A"
        or ch6_6_sn_value[0:5] == "6011N"
        or ch6_6_sn_value[0:5] == "8071A"
    ):
        ch6_6_sn_signal = 1
        ch6_6_data[1] = ch6_6_sn_value
        try:
            ch6_6_battery_capacity = int(ch6_6_sn_value[6:10])
        except:
            ch6_6_sn_signal = 0
            messagebox.showinfo("错误", "请在通道6-6输入正确的条码")
    else:
        ch6_6_sn_signal = 0

    if ch6_6_set_voltage_value == "":
        ch6_6_setvoltage_signal = 0
    else:
        if float(ch6_6_set_voltage_value) > 12 or float(ch6_6_set_voltage_value) < 9:
            ch6_6_setvoltage_signal = 0
        else:
            ch6_6_set_voltage_command = (
                "06060501"
                + hex(int(float(ch6_6_set_voltage_value) * 1000))[2:].upper()
                + "A5"
            )
            ch6_6_setvoltage_signal = 1
            ch6_6_data[10] = ch6_6_set_voltage_value


def ch6_7_setvoltage():
    global ch6_7_data
    global ch6_7_sn_signal
    global ch6_7_setvoltage_signal
    global ch6_7_set_voltage_command
    global ch6_7_battery_capacity
    ch6_7_set_voltage_value = entry_ch6_7_set_voltage_value.get()
    ch6_7_sn_value = entry_ch6_7.get()
    if (
        ch6_7_sn_value[0:3] == "JP6"
        or ch6_7_sn_value[0:4] == "605T"
        or ch6_7_sn_value[0:5] == "5021A"
        or ch6_7_sn_value[0:5] == "6011N"
        or ch6_7_sn_value[0:5] == "8071A"
    ):
        ch6_7_sn_signal = 1
        ch6_7_data[1] = ch6_7_sn_value
        try:
            ch6_7_battery_capacity = int(ch6_7_sn_value[6:10])
        except:
            ch6_7_sn_signal = 0
            messagebox.showinfo("错误", "请在通道6-7输入正确的条码")
    else:
        ch6_7_sn_signal = 0

    if ch6_7_set_voltage_value == "":
        ch6_7_setvoltage_signal = 0
    else:
        if float(ch6_7_set_voltage_value) > 12 or float(ch6_7_set_voltage_value) < 9:
            ch6_7_setvoltage_signal = 0
        else:
            ch6_7_set_voltage_command = (
                "06060601"
                + hex(int(float(ch6_7_set_voltage_value) * 1000))[2:].upper()
                + "A5"
            )
            ch6_7_setvoltage_signal = 1
            ch6_7_data[10] = ch6_7_set_voltage_value


def ch6_8_setvoltage():
    global ch6_8_data
    global ch6_8_sn_signal
    global ch6_8_setvoltage_signal
    global ch6_8_set_voltage_command
    global ch6_8_battery_capacity
    ch6_8_set_voltage_value = entry_ch6_8_set_voltage_value.get()
    ch6_8_sn_value = entry_ch6_8.get()
    if (
        ch6_8_sn_value[0:3] == "JP6"
        or ch6_8_sn_value[0:4] == "605T"
        or ch6_8_sn_value[0:5] == "5021A"
        or ch6_8_sn_value[0:5] == "6011N"
        or ch6_8_sn_value[0:5] == "8071A"
    ):
        ch6_8_sn_signal = 1
        ch6_8_data[1] = ch6_8_sn_value
        try:
            ch6_8_battery_capacity = int(ch6_8_sn_value[6:10])
        except:
            ch6_8_sn_signal = 0
            messagebox.showinfo("错误", "请在通道6-8输入正确的条码")
    else:
        ch6_8_sn_signal = 0

    if ch6_8_set_voltage_value == "":
        ch6_8_setvoltage_signal = 0
    else:
        if float(ch6_8_set_voltage_value) > 12 or float(ch6_8_set_voltage_value) < 9:
            ch6_8_setvoltage_signal = 0
        else:
            ch6_8_set_voltage_command = (
                "06060701"
                + hex(int(float(ch6_8_set_voltage_value) * 1000))[2:].upper()
                + "A5"
            )
            ch6_8_setvoltage_signal = 1
            ch6_8_data[10] = ch6_8_set_voltage_value


def ch7_1_setvoltage():
    global ch7_1_data
    global ch7_1_sn_signal
    global ch7_1_setvoltage_signal
    global ch7_1_set_voltage_command
    global ch7_1_battery_capacity
    ch7_1_set_voltage_value = entry_ch7_1_set_voltage_value.get()
    ch7_1_sn_value = entry_ch7_1.get()
    if (
        ch7_1_sn_value[0:3] == "JP6"
        or ch7_1_sn_value[0:4] == "605T"
        or ch7_1_sn_value[0:5] == "5021A"
        or ch7_1_sn_value[0:5] == "6011N"
        or ch7_1_sn_value[0:5] == "8071A"
    ):
        ch7_1_sn_signal = 1
        ch7_1_data[1] = ch7_1_sn_value
        try:
            ch7_1_battery_capacity = int(ch7_1_sn_value[6:10])
        except:
            ch7_1_sn_signal = 0
            messagebox.showinfo("错误", "请在通道7-1输入正确的条码")
    else:
        ch7_1_sn_signal = 0

    if ch7_1_set_voltage_value == "":
        ch7_1_setvoltage_signal = 0
    else:
        if float(ch7_1_set_voltage_value) > 12 or float(ch7_1_set_voltage_value) < 9:
            ch7_1_setvoltage_signal = 0
        else:
            ch7_1_set_voltage_command = (
                "07060001"
                + hex(int(float(ch7_1_set_voltage_value) * 1000))[2:].upper()
                + "A5"
            )
            ch7_1_setvoltage_signal = 1
            ch7_1_data[10] = ch7_1_set_voltage_value


def ch7_2_setvoltage():
    global ch7_2_data
    global ch7_2_sn_signal
    global ch7_2_setvoltage_signal
    global ch7_2_set_voltage_command
    global ch7_2_battery_capacity
    ch7_2_set_voltage_value = entry_ch7_2_set_voltage_value.get()
    ch7_2_sn_value = entry_ch7_2.get()
    if (
        ch7_2_sn_value[0:3] == "JP6"
        or ch7_2_sn_value[0:4] == "605T"
        or ch7_2_sn_value[0:5] == "5021A"
        or ch7_2_sn_value[0:5] == "6011N"
        or ch7_2_sn_value[0:5] == "8071A"
    ):
        ch7_2_sn_signal = 1
        ch7_2_data[1] = ch7_2_sn_value
        try:
            ch7_2_battery_capacity = int(ch7_2_sn_value[6:10])
        except:
            ch7_2_sn_signal = 0
            messagebox.showinfo("错误", "请在通道7-2输入正确的条码")
    else:
        ch7_2_sn_signal = 0

    if ch7_2_set_voltage_value == "":
        ch7_2_setvoltage_signal = 0
    else:
        if float(ch7_2_set_voltage_value) > 12 or float(ch7_2_set_voltage_value) < 9:
            ch7_2_setvoltage_signal = 0
        else:
            ch7_2_set_voltage_command = (
                "07060101"
                + hex(int(float(ch7_2_set_voltage_value) * 1000))[2:].upper()
                + "A5"
            )
            ch7_2_setvoltage_signal = 1
            ch7_2_data[10] = ch7_2_set_voltage_value


def ch7_3_setvoltage():
    global ch7_3_data
    global ch7_3_sn_signal
    global ch7_3_setvoltage_signal
    global ch7_3_set_voltage_command
    global ch7_3_battery_capacity
    ch7_3_set_voltage_value = entry_ch7_3_set_voltage_value.get()
    ch7_3_sn_value = entry_ch7_3.get()
    if (
        ch7_3_sn_value[0:3] == "JP6"
        or ch7_3_sn_value[0:4] == "605T"
        or ch7_3_sn_value[0:5] == "5021A"
        or ch7_3_sn_value[0:5] == "6011N"
        or ch7_3_sn_value[0:5] == "8071A"
    ):
        ch7_3_sn_signal = 1
        ch7_3_data[1] = ch7_3_sn_value
        try:
            ch7_3_battery_capacity = int(ch7_3_sn_value[6:10])
        except:
            ch7_3_sn_signal = 0
            messagebox.showinfo("错误", "请在通道7-3输入正确的条码")
    else:
        ch7_3_sn_signal = 0

    if ch7_3_set_voltage_value == "":
        ch7_3_setvoltage_signal = 0
    else:
        if float(ch7_3_set_voltage_value) > 12 or float(ch7_3_set_voltage_value) < 9:
            ch7_3_setvoltage_signal = 0
        else:
            ch7_3_set_voltage_command = (
                "07060201"
                + hex(int(float(ch7_3_set_voltage_value) * 1000))[2:].upper()
                + "A5"
            )
            ch7_3_setvoltage_signal = 1
            ch7_3_data[10] = ch7_3_set_voltage_value


def ch7_4_setvoltage():
    global ch7_4_data
    global ch7_4_sn_signal
    global ch7_4_setvoltage_signal
    global ch7_4_set_voltage_command
    global ch7_4_battery_capacity
    ch7_4_set_voltage_value = entry_ch7_4_set_voltage_value.get()
    ch7_4_sn_value = entry_ch7_4.get()
    if (
        ch7_4_sn_value[0:3] == "JP6"
        or ch7_4_sn_value[0:4] == "605T"
        or ch7_4_sn_value[0:5] == "5021A"
        or ch7_4_sn_value[0:5] == "6011N"
        or ch7_4_sn_value[0:5] == "8071A"
    ):
        ch7_4_sn_signal = 1
        ch7_4_data[1] = ch7_4_sn_value
        try:
            ch7_4_battery_capacity = int(ch7_4_sn_value[6:10])
        except:
            ch7_4_sn_signal = 0
            messagebox.showinfo("错误", "请在通道7-4输入正确的条码")
    else:
        ch7_4_sn_signal = 0

    if ch7_4_set_voltage_value == "":
        ch7_4_setvoltage_signal = 0
    else:
        if float(ch7_4_set_voltage_value) > 12 or float(ch7_4_set_voltage_value) < 9:
            ch7_4_setvoltage_signal = 0
        else:
            ch7_4_set_voltage_command = (
                "07060301"
                + hex(int(float(ch7_4_set_voltage_value) * 1000))[2:].upper()
                + "A5"
            )
            ch7_4_setvoltage_signal = 1
            ch7_4_data[10] = ch7_4_set_voltage_value


def ch7_5_setvoltage():
    global ch7_5_data
    global ch7_5_sn_signal
    global ch7_5_setvoltage_signal
    global ch7_5_set_voltage_command
    global ch7_5_battery_capacity
    ch7_5_set_voltage_value = entry_ch7_5_set_voltage_value.get()
    ch7_5_sn_value = entry_ch7_5.get()
    if (
        ch7_5_sn_value[0:3] == "JP6"
        or ch7_5_sn_value[0:4] == "605T"
        or ch7_5_sn_value[0:5] == "5021A"
        or ch7_5_sn_value[0:5] == "6011N"
        or ch7_5_sn_value[0:5] == "8071A"
    ):
        ch7_5_sn_signal = 1
        ch7_5_data[1] = ch7_5_sn_value
        try:
            ch7_5_battery_capacity = int(ch7_5_sn_value[6:10])
        except:
            ch7_5_sn_signal = 0
            messagebox.showinfo("错误", "请在通道7-5输入正确的条码")
    else:
        ch7_5_sn_signal = 0

    if ch7_5_set_voltage_value == "":
        ch7_5_setvoltage_signal = 0
    else:
        if float(ch7_5_set_voltage_value) > 12 or float(ch7_5_set_voltage_value) < 9:
            ch7_5_setvoltage_signal = 0
        else:
            ch7_5_set_voltage_command = (
                "07060401"
                + hex(int(float(ch7_5_set_voltage_value) * 1000))[2:].upper()
                + "A5"
            )
            ch7_5_setvoltage_signal = 1
            ch7_5_data[10] = ch7_5_set_voltage_value


def ch7_6_setvoltage():
    global ch7_6_data
    global ch7_6_sn_signal
    global ch7_6_setvoltage_signal
    global ch7_6_set_voltage_command
    global ch7_6_battery_capacity
    ch7_6_set_voltage_value = entry_ch7_6_set_voltage_value.get()
    ch7_6_sn_value = entry_ch7_6.get()
    if (
        ch7_6_sn_value[0:3] == "JP6"
        or ch7_6_sn_value[0:4] == "605T"
        or ch7_6_sn_value[0:5] == "5021A"
        or ch7_6_sn_value[0:5] == "6011N"
        or ch7_6_sn_value[0:5] == "8071A"
    ):
        ch7_6_sn_signal = 1
        ch7_6_data[1] = ch7_6_sn_value
        try:
            ch7_6_battery_capacity = int(ch7_6_sn_value[6:10])
        except:
            ch7_6_sn_signal = 0
            messagebox.showinfo("错误", "请在通道7-6输入正确的条码")
    else:
        ch7_6_sn_signal = 0

    if ch7_6_set_voltage_value == "":
        ch7_6_setvoltage_signal = 0
    else:
        if float(ch7_6_set_voltage_value) > 12 or float(ch7_6_set_voltage_value) < 9:
            ch7_6_setvoltage_signal = 0
        else:
            ch7_6_set_voltage_command = (
                "07060501"
                + hex(int(float(ch7_6_set_voltage_value) * 1000))[2:].upper()
                + "A5"
            )
            ch7_6_setvoltage_signal = 1
            ch7_6_data[10] = ch7_6_set_voltage_value


def ch7_7_setvoltage():
    global ch7_7_data
    global ch7_7_sn_signal
    global ch7_7_setvoltage_signal
    global ch7_7_set_voltage_command
    global ch7_7_battery_capacity
    ch7_7_set_voltage_value = entry_ch7_7_set_voltage_value.get()
    ch7_7_sn_value = entry_ch7_7.get()
    if (
        ch7_7_sn_value[0:3] == "JP6"
        or ch7_7_sn_value[0:4] == "605T"
        or ch7_7_sn_value[0:5] == "5021A"
        or ch7_7_sn_value[0:5] == "6011N"
        or ch7_7_sn_value[0:5] == "8071A"
    ):
        ch7_7_sn_signal = 1
        ch7_7_data[1] = ch7_7_sn_value
        try:
            ch7_7_battery_capacity = int(ch7_7_sn_value[6:10])
        except:
            ch7_7_sn_signal = 0
            messagebox.showinfo("错误", "请在通道7-7输入正确的条码")
    else:
        ch7_7_sn_signal = 0

    if ch7_7_set_voltage_value == "":
        ch7_7_setvoltage_signal = 0
    else:
        if float(ch7_7_set_voltage_value) > 12 or float(ch7_7_set_voltage_value) < 9:
            ch7_7_setvoltage_signal = 0
        else:
            ch7_7_set_voltage_command = (
                "07060601"
                + hex(int(float(ch7_7_set_voltage_value) * 1000))[2:].upper()
                + "A5"
            )
            ch7_7_setvoltage_signal = 1
            ch7_7_data[10] = ch7_7_set_voltage_value


def ch7_8_setvoltage():
    global ch7_8_data
    global ch7_8_sn_signal
    global ch7_8_setvoltage_signal
    global ch7_8_set_voltage_command
    global ch7_8_battery_capacity
    ch7_8_set_voltage_value = entry_ch7_8_set_voltage_value.get()
    ch7_8_sn_value = entry_ch7_8.get()
    if (
        ch7_8_sn_value[0:3] == "JP6"
        or ch7_8_sn_value[0:4] == "605T"
        or ch7_8_sn_value[0:5] == "5021A"
        or ch7_8_sn_value[0:5] == "6011N"
        or ch7_8_sn_value[0:5] == "8071A"
    ):
        ch7_8_sn_signal = 1
        ch7_8_data[1] = ch7_8_sn_value
        try:
            ch7_8_battery_capacity = int(ch7_8_sn_value[6:10])
        except:
            ch7_8_sn_signal = 0
            messagebox.showinfo("错误", "请在通道7-8输入正确的条码")
    else:
        ch7_8_sn_signal = 0

    if ch7_8_set_voltage_value == "":
        ch7_8_setvoltage_signal = 0
    else:
        if float(ch7_8_set_voltage_value) > 12 or float(ch7_8_set_voltage_value) < 9:
            ch7_8_setvoltage_signal = 0
        else:
            ch7_8_set_voltage_command = (
                "07060701"
                + hex(int(float(ch7_8_set_voltage_value) * 1000))[2:].upper()
                + "A5"
            )
            ch7_8_setvoltage_signal = 1
            ch7_8_data[10] = ch7_8_set_voltage_value


def ch8_1_setvoltage():
    global ch8_1_data
    global ch8_1_sn_signal
    global ch8_1_setvoltage_signal
    global ch8_1_set_voltage_command
    global ch8_1_battery_capacity
    ch8_1_set_voltage_value = entry_ch8_1_set_voltage_value.get()
    ch8_1_sn_value = entry_ch8_1.get()
    if (
        ch8_1_sn_value[0:3] == "JP6"
        or ch8_1_sn_value[0:4] == "605T"
        or ch8_1_sn_value[0:5] == "5021A"
        or ch8_1_sn_value[0:5] == "6011N"
        or ch8_1_sn_value[0:5] == "8071A"
    ):
        ch8_1_sn_signal = 1
        ch8_1_data[1] = ch8_1_sn_value
        try:
            ch8_1_battery_capacity = int(ch8_1_sn_value[6:10])
        except:
            ch8_1_sn_signal = 0
            messagebox.showinfo("错误", "请在通道8-1输入正确的条码")
    else:
        ch8_1_sn_signal = 0

    if ch8_1_set_voltage_value == "":
        ch8_1_setvoltage_signal = 0
    else:
        if float(ch8_1_set_voltage_value) > 12 or float(ch8_1_set_voltage_value) < 9:
            ch8_1_setvoltage_signal = 0
        else:
            ch8_1_set_voltage_command = (
                "08060001"
                + hex(int(float(ch8_1_set_voltage_value) * 1000))[2:].upper()
                + "A5"
            )
            ch8_1_setvoltage_signal = 1
            ch8_1_data[10] = ch8_1_set_voltage_value


def ch8_2_setvoltage():
    global ch8_2_data
    global ch8_2_sn_signal
    global ch8_2_setvoltage_signal
    global ch8_2_set_voltage_command
    global ch8_2_battery_capacity
    ch8_2_set_voltage_value = entry_ch8_2_set_voltage_value.get()
    ch8_2_sn_value = entry_ch8_2.get()
    if (
        ch8_2_sn_value[0:3] == "JP6"
        or ch8_2_sn_value[0:4] == "605T"
        or ch8_2_sn_value[0:5] == "5021A"
        or ch8_2_sn_value[0:5] == "6011N"
        or ch8_2_sn_value[0:5] == "8071A"
    ):
        ch8_2_sn_signal = 1
        ch8_2_data[1] = ch8_2_sn_value
        try:
            ch8_2_battery_capacity = int(ch8_2_sn_value[6:10])
        except:
            ch8_2_sn_signal = 0
            messagebox.showinfo("错误", "请在通道8-2输入正确的条码")
    else:
        ch8_2_sn_signal = 0

    if ch8_2_set_voltage_value == "":
        ch8_2_setvoltage_signal = 0
    else:
        if float(ch8_2_set_voltage_value) > 12 or float(ch8_2_set_voltage_value) < 9:
            ch8_2_setvoltage_signal = 0
        else:
            ch8_2_set_voltage_command = (
                "08060101"
                + hex(int(float(ch8_2_set_voltage_value) * 1000))[2:].upper()
                + "A5"
            )
            ch8_2_setvoltage_signal = 1
            ch8_2_data[10] = ch8_2_set_voltage_value


def ch8_3_setvoltage():
    global ch8_3_data
    global ch8_3_sn_signal
    global ch8_3_setvoltage_signal
    global ch8_3_set_voltage_command
    global ch8_3_battery_capacity
    ch8_3_set_voltage_value = entry_ch8_3_set_voltage_value.get()
    ch8_3_sn_value = entry_ch8_3.get()
    if (
        ch8_3_sn_value[0:3] == "JP6"
        or ch8_3_sn_value[0:4] == "605T"
        or ch8_3_sn_value[0:5] == "5021A"
        or ch8_3_sn_value[0:5] == "6011N"
        or ch8_3_sn_value[0:5] == "8071A"
    ):
        ch8_3_sn_signal = 1
        ch8_3_data[1] = ch8_3_sn_value
        try:
            ch8_3_battery_capacity = int(ch8_3_sn_value[6:10])
        except:
            ch8_3_sn_signal = 0
            messagebox.showinfo("错误", "请在通道8-3输入正确的条码")
    else:
        ch8_3_sn_signal = 0

    if ch8_3_set_voltage_value == "":
        ch8_3_setvoltage_signal = 0
    else:
        if float(ch8_3_set_voltage_value) > 12 or float(ch8_3_set_voltage_value) < 9:
            ch8_3_setvoltage_signal = 0
        else:
            ch8_3_set_voltage_command = (
                "08060201"
                + hex(int(float(ch8_3_set_voltage_value) * 1000))[2:].upper()
                + "A5"
            )
            ch8_3_setvoltage_signal = 1
            ch8_3_data[10] = ch8_3_set_voltage_value


def ch8_4_setvoltage():
    global ch8_4_data
    global ch8_4_sn_signal
    global ch8_4_setvoltage_signal
    global ch8_4_set_voltage_command
    global ch8_4_battery_capacity
    ch8_4_set_voltage_value = entry_ch8_4_set_voltage_value.get()
    ch8_4_sn_value = entry_ch8_4.get()
    if (
        ch8_4_sn_value[0:3] == "JP6"
        or ch8_4_sn_value[0:4] == "605T"
        or ch8_4_sn_value[0:5] == "5021A"
        or ch8_4_sn_value[0:5] == "6011N"
        or ch8_4_sn_value[0:5] == "8071A"
    ):
        ch8_4_sn_signal = 1
        ch8_4_data[1] = ch8_4_sn_value
        try:
            ch8_4_battery_capacity = int(ch8_4_sn_value[6:10])
        except:
            ch8_4_sn_signal = 0
            messagebox.showinfo("错误", "请在通道8-4输入正确的条码")
    else:
        ch8_4_sn_signal = 0

    if ch8_4_set_voltage_value == "":
        ch8_4_setvoltage_signal = 0
    else:
        if float(ch8_4_set_voltage_value) > 12 or float(ch8_4_set_voltage_value) < 9:
            ch8_4_setvoltage_signal = 0
        else:
            ch8_4_set_voltage_command = (
                "08060301"
                + hex(int(float(ch8_4_set_voltage_value) * 1000))[2:].upper()
                + "A5"
            )
            ch8_4_setvoltage_signal = 1
            ch8_4_data[10] = ch8_4_set_voltage_value


def ch8_5_setvoltage():
    global ch8_5_data
    global ch8_5_sn_signal
    global ch8_5_setvoltage_signal
    global ch8_5_set_voltage_command
    global ch8_5_battery_capacity
    ch8_5_set_voltage_value = entry_ch8_5_set_voltage_value.get()
    ch8_5_sn_value = entry_ch8_5.get()
    if (
        ch8_5_sn_value[0:3] == "JP6"
        or ch8_5_sn_value[0:4] == "605T"
        or ch8_5_sn_value[0:5] == "5021A"
        or ch8_5_sn_value[0:5] == "6011N"
        or ch8_5_sn_value[0:5] == "8071A"
    ):
        ch8_5_sn_signal = 1
        ch8_5_data[1] = ch8_5_sn_value
        try:
            ch8_5_battery_capacity = int(ch8_5_sn_value[6:10])
        except:
            ch8_5_sn_signal = 0
            messagebox.showinfo("错误", "请在通道8-5输入正确的条码")
    else:
        ch8_5_sn_signal = 0

    if ch8_5_set_voltage_value == "":
        ch8_5_setvoltage_signal = 0
    else:
        if float(ch8_5_set_voltage_value) > 12 or float(ch8_5_set_voltage_value) < 9:
            ch8_5_setvoltage_signal = 0
        else:
            ch8_5_set_voltage_command = (
                "08060401"
                + hex(int(float(ch8_5_set_voltage_value) * 1000))[2:].upper()
                + "A5"
            )
            ch8_5_setvoltage_signal = 1
            ch8_5_data[10] = ch8_5_set_voltage_value


def ch8_6_setvoltage():
    global ch8_6_data
    global ch8_6_sn_signal
    global ch8_6_setvoltage_signal
    global ch8_6_set_voltage_command
    global ch8_6_battery_capacity
    ch8_6_set_voltage_value = entry_ch8_6_set_voltage_value.get()
    ch8_6_sn_value = entry_ch8_6.get()
    if (
        ch8_6_sn_value[0:3] == "JP6"
        or ch8_6_sn_value[0:4] == "605T"
        or ch8_6_sn_value[0:5] == "5021A"
        or ch8_6_sn_value[0:5] == "6011N"
        or ch8_6_sn_value[0:5] == "8071A"
    ):
        ch8_6_sn_signal = 1
        ch8_6_data[1] = ch8_6_sn_value
        try:
            ch8_6_battery_capacity = int(ch8_6_sn_value[6:10])
        except:
            ch8_6_sn_signal = 0
            messagebox.showinfo("错误", "请在通道8-6输入正确的条码")
    else:
        ch8_6_sn_signal = 0

    if ch8_6_set_voltage_value == "":
        ch8_6_setvoltage_signal = 0
    else:
        if float(ch8_6_set_voltage_value) > 12 or float(ch8_6_set_voltage_value) < 9:
            ch8_6_setvoltage_signal = 0
        else:
            ch8_6_set_voltage_command = (
                "08060501"
                + hex(int(float(ch8_6_set_voltage_value) * 1000))[2:].upper()
                + "A5"
            )
            ch8_6_setvoltage_signal = 1
            ch8_6_data[10] = ch8_6_set_voltage_value


def ch8_7_setvoltage():
    global ch8_7_data
    global ch8_7_sn_signal
    global ch8_7_setvoltage_signal
    global ch8_7_set_voltage_command
    global ch8_7_battery_capacity
    ch8_7_set_voltage_value = entry_ch8_7_set_voltage_value.get()
    ch8_7_sn_value = entry_ch8_7.get()
    if (
        ch8_7_sn_value[0:3] == "JP6"
        or ch8_7_sn_value[0:4] == "605T"
        or ch8_7_sn_value[0:5] == "5021A"
        or ch8_7_sn_value[0:5] == "6011N"
        or ch8_7_sn_value[0:5] == "8071A"
    ):
        ch8_7_sn_signal = 1
        ch8_7_data[1] = ch8_7_sn_value
        try:
            ch8_7_battery_capacity = int(ch8_7_sn_value[6:10])
        except:
            ch8_7_sn_signal = 0
            messagebox.showinfo("错误", "请在通道8-7输入正确的条码")
    else:
        ch8_7_sn_signal = 0

    if ch8_7_set_voltage_value == "":
        ch8_7_setvoltage_signal = 0
    else:
        if float(ch8_7_set_voltage_value) > 12 or float(ch8_7_set_voltage_value) < 9:
            ch8_7_setvoltage_signal = 0
        else:
            ch8_7_set_voltage_command = (
                "08060601"
                + hex(int(float(ch8_7_set_voltage_value) * 1000))[2:].upper()
                + "A5"
            )
            ch8_7_setvoltage_signal = 1
            ch8_7_data[10] = ch8_7_set_voltage_value


def ch8_8_setvoltage():
    global ch8_8_data
    global ch8_8_sn_signal
    global ch8_8_setvoltage_signal
    global ch8_8_set_voltage_command
    global ch8_8_battery_capacity
    ch8_8_set_voltage_value = entry_ch8_8_set_voltage_value.get()
    ch8_8_sn_value = entry_ch8_8.get()
    if (
        ch8_8_sn_value[0:3] == "JP6"
        or ch8_8_sn_value[0:4] == "605T"
        or ch8_8_sn_value[0:5] == "5021A"
        or ch8_8_sn_value[0:5] == "6011N"
        or ch8_8_sn_value[0:5] == "8071A"
    ):
        ch8_8_sn_signal = 1
        ch8_8_data[1] = ch8_8_sn_value
        try:
            ch8_8_battery_capacity = int(ch8_8_sn_value[6:10])
        except:
            ch8_8_sn_signal = 0
            messagebox.showinfo("错误", "请在通道8-8输入正确的条码")
    else:
        ch8_8_sn_signal = 0

    if ch8_8_set_voltage_value == "":
        ch8_8_setvoltage_signal = 0
    else:
        if float(ch8_8_set_voltage_value) > 12 or float(ch8_8_set_voltage_value) < 9:
            ch8_8_setvoltage_signal = 0
        else:
            ch8_8_set_voltage_command = (
                "08060701"
                + hex(int(float(ch8_8_set_voltage_value) * 1000))[2:].upper()
                + "A5"
            )
            ch8_8_setvoltage_signal = 1
            ch8_8_data[10] = ch8_8_set_voltage_value


def face(ch_name):
    global num
    global ch_sn_state_result
    global ch_current_value_state
    global ch_voltage_value_state
    global ch_state_value_state
    global ch_electric_value_state
    global ch_electric_all_value_state
    global ch_ntc_temperature_value_state
    global ch_sensor_temperature_value_state

    global root1_1
    global root1_1_state
    global face_name

    face_name = ch_name

    if ch_name == "ch1_1_data":
        global ch1_1_data
        name = ch1_1_data
    elif ch_name == "ch1_2_data":
        global ch1_2_data
        name = ch1_2_data
    elif ch_name == "ch1_3_data":
        global ch1_3_data
        name = ch1_3_data
    elif ch_name == "ch1_4_data":
        global ch1_4_data
        name = ch1_4_data
    elif ch_name == "ch1_5_data":
        global ch1_5_data
        name = ch1_5_data
    elif ch_name == "ch1_6_data":
        global ch1_6_data
        name = ch1_6_data
    elif ch_name == "ch1_7_data":
        global ch1_7_data
        name = ch1_7_data
    elif ch_name == "ch1_8_data":
        global ch1_8_data
        name = ch1_8_data
    elif ch_name == "ch2_1_data":
        global ch2_1_data
        name = ch2_1_data
    elif ch_name == "ch2_2_data":
        global ch2_2_data
        name = ch2_2_data
    elif ch_name == "ch2_3_data":
        global ch2_3_data
        name = ch2_3_data
    elif ch_name == "ch2_4_data":
        global ch2_4_data
        name = ch2_4_data
    elif ch_name == "ch2_5_data":
        global ch2_5_data
        name = ch2_5_data
    elif ch_name == "ch2_6_data":
        global ch2_6_data
        name = ch2_6_data
    elif ch_name == "ch2_7_data":
        global ch2_7_data
        name = ch2_7_data
    elif ch_name == "ch2_8_data":
        global ch2_8_data
        name = ch2_8_data
    elif ch_name == "ch3_1_data":
        global ch3_1_data
        name = ch3_1_data
    elif ch_name == "ch3_2_data":
        global ch3_2_data
        name = ch3_2_data
    elif ch_name == "ch3_3_data":
        global ch3_3_data
        name = ch3_3_data
    elif ch_name == "ch3_4_data":
        global ch3_4_data
        name = ch3_4_data
    elif ch_name == "ch3_5_data":
        global ch3_5_data
        name = ch3_5_data
    elif ch_name == "ch3_6_data":
        global ch3_6_data
        name = ch3_6_data
    elif ch_name == "ch3_7_data":
        global ch3_7_data
        name = ch3_7_data
    elif ch_name == "ch3_8_data":
        global ch3_8_data
        name = ch3_8_data
    elif ch_name == "ch4_1_data":
        global ch4_1_data
        name = ch4_1_data
    elif ch_name == "ch4_2_data":
        global ch4_2_data
        name = ch4_2_data
    elif ch_name == "ch4_3_data":
        global ch4_3_data
        name = ch4_3_data
    elif ch_name == "ch4_4_data":
        global ch4_4_data
        name = ch4_4_data
    elif ch_name == "ch4_5_data":
        global ch4_5_data
        name = ch4_5_data
    elif ch_name == "ch4_6_data":
        global ch4_6_data
        name = ch4_6_data
    elif ch_name == "ch4_7_data":
        global ch4_7_data
        name = ch4_7_data
    elif ch_name == "ch4_8_data":
        global ch4_8_data
        name = ch4_8_data
    elif ch_name == "ch5_1_data":
        global ch5_1_data
        name = ch5_1_data
    elif ch_name == "ch5_2_data":
        global ch5_2_data
        name = ch5_2_data
    elif ch_name == "ch5_3_data":
        global ch5_3_data
        name = ch5_3_data
    elif ch_name == "ch5_4_data":
        global ch5_4_data
        name = ch5_4_data
    elif ch_name == "ch5_5_data":
        global ch5_5_data
        name = ch5_5_data
    elif ch_name == "ch5_6_data":
        global ch5_6_data
        name = ch5_6_data
    elif ch_name == "ch5_7_data":
        global ch5_7_data
        name = ch5_7_data
    elif ch_name == "ch5_8_data":
        global ch5_8_data
        name = ch5_8_data
    elif ch_name == "ch6_1_data":
        global ch6_1_data
        name = ch6_1_data
    elif ch_name == "ch6_2_data":
        global ch6_2_data
        name = ch6_2_data
    elif ch_name == "ch6_3_data":
        global ch6_3_data
        name = ch6_3_data
    elif ch_name == "ch6_4_data":
        global ch6_4_data
        name = ch6_4_data
    elif ch_name == "ch6_5_data":
        global ch6_5_data
        name = ch6_5_data
    elif ch_name == "ch6_6_data":
        global ch6_6_data
        name = ch6_6_data
    elif ch_name == "ch6_7_data":
        global ch6_7_data
        name = ch6_7_data
    elif ch_name == "ch6_8_data":
        global ch6_8_data
        name = ch6_8_data
    elif ch_name == "ch7_1_data":
        global ch7_1_data
        name = ch7_1_data
    elif ch_name == "ch7_2_data":
        global ch7_2_data
        name = ch7_2_data
    elif ch_name == "ch7_3_data":
        global ch7_3_data
        name = ch7_3_data
    elif ch_name == "ch7_4_data":
        global ch7_4_data
        name = ch7_4_data
    elif ch_name == "ch7_5_data":
        global ch7_5_data
        name = ch7_5_data
    elif ch_name == "ch7_6_data":
        global ch7_6_data
        name = ch7_6_data
    elif ch_name == "ch7_7_data":
        global ch7_7_data
        name = ch7_7_data
    elif ch_name == "ch7_8_data":
        global ch7_8_data
        name = ch7_8_data
    elif ch_name == "ch8_1_data":
        global ch8_1_data
        name = ch8_1_data
    elif ch_name == "ch8_2_data":
        global ch8_2_data
        name = ch8_2_data
    elif ch_name == "ch8_3_data":
        global ch8_3_data
        name = ch8_3_data
    elif ch_name == "ch8_4_data":
        global ch8_4_data
        name = ch8_4_data
    elif ch_name == "ch8_5_data":
        global ch8_5_data
        name = ch8_5_data
    elif ch_name == "ch8_6_data":
        global ch8_6_data
        name = ch8_6_data
    elif ch_name == "ch8_7_data":
        global ch8_7_data
        name = ch8_7_data
    elif ch_name == "ch8_8_data":
        global ch8_8_data
        name = ch8_8_data

    if num == 1:
        num = 0
        root1_1 = tk.Tk()
        root1_1.title("通道详情")
        width = 290
        height = 230

        screenwidth = root1_1.winfo_screenwidth()
        screenheight = root1_1.winfo_screenheight()
        alignstr = "%dx%d+%d+%d" % (
            width,
            height,
            (screenwidth - width) / 2,
            (screenheight - height) / 2,
        )
        root1_1.geometry(alignstr)
        root1_1.protocol("WM_DELETE_WINDOW", root1_1_closewindow)

        ch_name_state = tk.LabelFrame(
            root1_1, fg="blue", bg="#C4C4C4", text=name[0], font=("宋体", 16)
        )
        ch_name_state.grid(row=0, column=0)

        ch_sn_state = tk.Label(
            ch_name_state,
            bg="#C4C4C4",
            text="电池条码：",
            font=("宋体", 14),
            width=14,
            bd=1,
            relief="raised",
        )
        ch_sn_state.grid(row=0, column=0, sticky="wn")

        ch_sn_value_state = tk.Label(
            ch_name_state, bg="#E6E6E6", text=name[1], font=("宋体", 14), width=14
        )
        ch_sn_value_state.grid(row=0, column=1, sticky="wn")

        ch_state_state = tk.Label(
            ch_name_state,
            bg="#C4C4C4",
            text="当前状态：",
            font=("宋体", 14),
            width=14,
            bd=1,
            relief="raised",
        )
        ch_state_state.grid(row=1, column=0, sticky="wn")

        ch_state_value_state = tk.Label(
            ch_name_state, bg="#E6E6E6", text=name[2], font=("宋体", 14), width=14
        )
        ch_state_value_state.grid(row=1, column=1, sticky="wn")

        ch_current_state = tk.Label(
            ch_name_state,
            bg="#C4C4C4",
            text="电流值(mA)：",
            font=("宋体", 14),
            width=14,
            bd=1,
            relief="raised",
        )
        ch_current_state.grid(row=2, column=0, sticky="wn")

        ch_current_value_state = tk.Label(
            ch_name_state, bg="#E6E6E6", text=name[4], font=("宋体", 14), width=14
        )
        ch_current_value_state.grid(row=2, column=1, sticky="wn")

        ch_voltage_state = tk.Label(
            ch_name_state,
            bg="#C4C4C4",
            text="电压值(V)：",
            font=("宋体", 14),
            width=14,
            bd=1,
            relief="raised",
        )
        ch_voltage_state.grid(row=3, column=0, sticky="wn")

        ch_voltage_value_state = tk.Label(
            ch_name_state, bg="#E6E6E6", text=name[3], font=("宋体", 14), width=14
        )
        ch_voltage_value_state.grid(row=3, column=1, sticky="wn")

        ch_ntc_temperature_state = tk.Label(
            ch_name_state,
            bg="#C4C4C4",
            text="NTC温度(℃)：",
            font=("宋体", 14),
            width=14,
            bd=1,
            relief="raised",
        )
        ch_ntc_temperature_state.grid(row=4, column=0, sticky="wn")

        ch_ntc_temperature_value_state = tk.Label(
            ch_name_state, bg="#E6E6E6", text=name[5], font=("宋体", 14), width=14
        )
        ch_ntc_temperature_value_state.grid(row=4, column=1, sticky="wn")

        ch_sensor_temperature_state = tk.Label(
            ch_name_state,
            bg="#C4C4C4",
            text="传感器温度(℃)：",
            font=("宋体", 14),
            width=14,
            bd=1,
            relief="raised",
        )
        ch_sensor_temperature_state.grid(row=5, column=0, sticky="wn")

        ch_sensor_temperature_value_state = tk.Label(
            ch_name_state, bg="#E6E6E6", text=name[6], font=("宋体", 14), width=14
        )
        ch_sensor_temperature_value_state.grid(row=5, column=1, sticky="wn")

        ch_electric_state = tk.Label(
            ch_name_state,
            bg="#C4C4C4",
            text="当前电量(mAh)：",
            font=("宋体", 14),
            width=14,
            bd=1,
            relief="raised",
        )
        ch_electric_state.grid(row=6, column=0, sticky="wn")

        ch_electric_value_state = tk.Label(
            ch_name_state, bg="#E6E6E6", text=name[7], font=("宋体", 14), width=14
        )
        ch_electric_value_state.grid(row=6, column=1, sticky="wn")

        """
        ch_electric_all_state = tk.Label(
            ch_name_state,
            bg="#C4C4C4",
            text="总电量(mAh)：",
            font=("宋体", 14),
            width=14,
            bd=1,
            relief="raised",
        )
        ch_electric_all_state.grid(row=7, column=0, sticky="wn")

        ch_electric_all_value_state = tk.Label(
            ch_name_state, bg="#E6E6E6", text=name[8], font=("宋体", 14), width=14
        )
        ch_electric_all_value_state.grid(row=7, column=1, sticky="wn")
        """

        ch_button_confirm = tk.Button(
            ch_name_state,
            width=40,
            text="确定",
            bg="#E6E6E6",
            fg="blue",
            padx=1,
            pady=1,
            anchor="c",
            command=root1_1_closewindow,
        )
        ch_button_confirm.grid(row=7, column=0, sticky="wn", columnspan=2)
        root1_1_state = root1_1.winfo_exists()
        # print('root1_1.winfo_exists====', root1_1_state)

        root1_1.mainloop()

        num = 1

    else:
        return


def root1_1_closewindow():
    global root1_1_state
    global num
    num = 1
    root1_1_state = 2
    root1_1.withdraw()


class MyThread(threading.Thread):
    def __init__(self, func):
        super().__init__()

        self.func = func

        self.setDaemon(True)
        self.start()  # 在这里开始

    def run(self):
        self.func()


def ch1_1_logprocess():
    global ch1_1_data
    global ch1_1_log
    mutex_w.acquire()
    writefileobj = open(
        "D:/Battery_Test_Log/" + ch1_1_data[1] + ".csv", "w", newline=""
    )
    writer = csv.writer(writefileobj)
    for row in ch1_1_log:
        writer.writerow(row)
    writefileobj.close()
    # ftp.logupload(ch1_1_data[1])
    mutex_w.release()
    # time.sleep(0.1)


def ch1_2_logprocess():
    global ch1_2_data
    global ch1_2_log
    mutex_w.acquire()
    writefileobj = open(
        "D:/Battery_Test_Log/" + ch1_2_data[1] + ".csv", "w", newline=""
    )
    writer = csv.writer(writefileobj)
    for row in ch1_2_log:
        writer.writerow(row)
    writefileobj.close()
    # ftp.logupload(ch1_2_data[1])
    mutex_w.release()
    # time.sleep(0.1)


def ch1_3_logprocess():
    global ch1_3_data
    global ch1_3_log
    mutex_w.acquire()
    writefileobj = open(
        "D:/Battery_Test_Log/" + ch1_3_data[1] + ".csv", "w", newline=""
    )
    writer = csv.writer(writefileobj)
    for row in ch1_3_log:
        writer.writerow(row)
    writefileobj.close()
    # ftp.logupload(ch1_3_data[1])
    mutex_w.release()
    # time.sleep(0.1)


def ch1_4_logprocess():
    global ch1_4_data
    global ch1_4_log
    mutex_w.acquire()
    writefileobj = open(
        "D:/Battery_Test_Log/" + ch1_4_data[1] + ".csv", "w", newline=""
    )
    writer = csv.writer(writefileobj)
    for row in ch1_4_log:
        writer.writerow(row)
    writefileobj.close()
    # ftp.logupload(ch1_4_data[1])
    mutex_w.release()
    # time.sleep(0.1)


def ch1_5_logprocess():
    global ch1_5_data
    global ch1_5_log
    mutex_w.acquire()
    writefileobj = open(
        "D:/Battery_Test_Log/" + ch1_5_data[1] + ".csv", "w", newline=""
    )
    writer = csv.writer(writefileobj)
    for row in ch1_5_log:
        writer.writerow(row)
    writefileobj.close()
    # ftp.logupload(ch1_5_data[1])
    mutex_w.release()
    # time.sleep(0.1)


def ch1_6_logprocess():
    global ch1_6_data
    global ch1_6_log
    mutex_w.acquire()
    writefileobj = open(
        "D:/Battery_Test_Log/" + ch1_6_data[1] + ".csv", "w", newline=""
    )
    writer = csv.writer(writefileobj)
    for row in ch1_6_log:
        writer.writerow(row)
    writefileobj.close()
    # ftp.logupload(ch1_6_data[1])
    mutex_w.release()
    # time.sleep(0.1)


def ch1_7_logprocess():
    global ch1_7_data
    global ch1_7_log
    mutex_w.acquire()
    writefileobj = open(
        "D:/Battery_Test_Log/" + ch1_7_data[1] + ".csv", "w", newline=""
    )
    writer = csv.writer(writefileobj)
    for row in ch1_7_log:
        writer.writerow(row)
    writefileobj.close()
    # ftp.logupload(ch1_7_data[1])
    mutex_w.release()
    # time.sleep(0.1)


def ch1_8_logprocess():
    global ch1_8_data
    global ch1_8_log
    mutex_w.acquire()
    writefileobj = open(
        "D:/Battery_Test_Log/" + ch1_8_data[1] + ".csv", "w", newline=""
    )
    writer = csv.writer(writefileobj)
    for row in ch1_8_log:
        writer.writerow(row)
    writefileobj.close()
    # ftp.logupload(ch1_8_data[1])
    mutex_w.release()
    # time.sleep(0.1)


def ch2_1_logprocess():
    global ch2_1_data
    global ch2_1_log
    mutex_w.acquire()
    writefileobj = open(
        "D:/Battery_Test_Log/" + ch2_1_data[1] + ".csv", "w", newline=""
    )
    writer = csv.writer(writefileobj)
    for row in ch2_1_log:
        writer.writerow(row)
    writefileobj.close()
    # ftp.logupload(ch2_1_data[1])
    mutex_w.release()
    # time.sleep(0.1)


def ch2_2_logprocess():
    global ch2_2_data
    global ch2_2_log
    mutex_w.acquire()
    writefileobj = open(
        "D:/Battery_Test_Log/" + ch2_2_data[1] + ".csv", "w", newline=""
    )
    writer = csv.writer(writefileobj)
    for row in ch2_2_log:
        writer.writerow(row)
    writefileobj.close()
    # ftp.logupload(ch2_2_data[1])
    mutex_w.release()
    # time.sleep(0.1)


def ch2_3_logprocess():
    global ch2_3_data
    global ch2_3_log
    mutex_w.acquire()
    writefileobj = open(
        "D:/Battery_Test_Log/" + ch2_3_data[1] + ".csv", "w", newline=""
    )
    writer = csv.writer(writefileobj)
    for row in ch2_3_log:
        writer.writerow(row)
    writefileobj.close()
    # ftp.logupload(ch2_3_data[1])
    mutex_w.release()
    # time.sleep(0.1)


def ch2_4_logprocess():
    global ch2_4_data
    global ch2_4_log
    mutex_w.acquire()
    writefileobj = open(
        "D:/Battery_Test_Log/" + ch2_4_data[1] + ".csv", "w", newline=""
    )
    writer = csv.writer(writefileobj)
    for row in ch2_4_log:
        writer.writerow(row)
    writefileobj.close()
    # ftp.logupload(ch2_4_data[1])
    mutex_w.release()
    # time.sleep(0.1)


def ch2_5_logprocess():
    global ch2_5_data
    global ch2_5_log
    mutex_w.acquire()
    writefileobj = open(
        "D:/Battery_Test_Log/" + ch2_5_data[1] + ".csv", "w", newline=""
    )
    writer = csv.writer(writefileobj)
    for row in ch2_5_log:
        writer.writerow(row)
    writefileobj.close()
    # ftp.logupload(ch2_5_data[1])
    mutex_w.release()
    # time.sleep(0.1)


def ch2_6_logprocess():
    global ch2_6_data
    global ch2_6_log
    mutex_w.acquire()
    writefileobj = open(
        "D:/Battery_Test_Log/" + ch2_6_data[1] + ".csv", "w", newline=""
    )
    writer = csv.writer(writefileobj)
    for row in ch2_6_log:
        writer.writerow(row)
    writefileobj.close()
    # ftp.logupload(ch2_6_data[1])
    mutex_w.release()
    # time.sleep(0.1)


def ch2_7_logprocess():
    global ch2_7_data
    global ch2_7_log
    mutex_w.acquire()
    writefileobj = open(
        "D:/Battery_Test_Log/" + ch2_7_data[1] + ".csv", "w", newline=""
    )
    writer = csv.writer(writefileobj)
    for row in ch2_7_log:
        writer.writerow(row)
    writefileobj.close()
    # ftp.logupload(ch2_7_data[1])
    mutex_w.release()
    # time.sleep(0.1)


def ch2_8_logprocess():
    global ch2_8_data
    global ch2_8_log
    mutex_w.acquire()
    writefileobj = open(
        "D:/Battery_Test_Log/" + ch2_8_data[1] + ".csv", "w", newline=""
    )
    writer = csv.writer(writefileobj)
    for row in ch2_8_log:
        writer.writerow(row)
    writefileobj.close()
    # ftp.logupload(ch2_8_data[1])
    mutex_w.release()
    # time.sleep(0.1)


def ch3_1_logprocess():
    global ch3_1_data
    global ch3_1_log
    mutex_w.acquire()
    writefileobj = open(
        "D:/Battery_Test_Log/" + ch3_1_data[1] + ".csv", "w", newline=""
    )
    writer = csv.writer(writefileobj)
    for row in ch3_1_log:
        writer.writerow(row)
    writefileobj.close()
    # ftp.logupload(ch3_1_data[1])
    mutex_w.release()
    # time.sleep(0.1)


def ch3_2_logprocess():
    global ch3_2_data
    global ch3_2_log
    mutex_w.acquire()
    writefileobj = open(
        "D:/Battery_Test_Log/" + ch3_2_data[1] + ".csv", "w", newline=""
    )
    writer = csv.writer(writefileobj)
    for row in ch3_2_log:
        writer.writerow(row)
    writefileobj.close()
    # ftp.logupload(ch3_2_data[1])
    mutex_w.release()
    # time.sleep(0.1)


def ch3_3_logprocess():
    global ch3_3_data
    global ch3_3_log
    mutex_w.acquire()
    writefileobj = open(
        "D:/Battery_Test_Log/" + ch3_3_data[1] + ".csv", "w", newline=""
    )
    writer = csv.writer(writefileobj)
    for row in ch3_3_log:
        writer.writerow(row)
    writefileobj.close()
    # ftp.logupload(ch3_3_data[1])
    mutex_w.release()
    # time.sleep(0.1)


def ch3_4_logprocess():
    global ch3_4_data
    global ch3_4_log
    mutex_w.acquire()
    writefileobj = open(
        "D:/Battery_Test_Log/" + ch3_4_data[1] + ".csv", "w", newline=""
    )
    writer = csv.writer(writefileobj)
    for row in ch3_4_log:
        writer.writerow(row)
    writefileobj.close()
    # ftp.logupload(ch3_4_data[1])
    mutex_w.release()
    # time.sleep(0.1)


def ch3_5_logprocess():
    global ch3_5_data
    global ch3_5_log
    mutex_w.acquire()
    writefileobj = open(
        "D:/Battery_Test_Log/" + ch3_5_data[1] + ".csv", "w", newline=""
    )
    writer = csv.writer(writefileobj)
    for row in ch3_5_log:
        writer.writerow(row)
    writefileobj.close()
    # ftp.logupload(ch3_5_data[1])
    mutex_w.release()
    # time.sleep(0.1)


def ch3_6_logprocess():
    global ch3_6_data
    global ch3_6_log
    mutex_w.acquire()
    writefileobj = open(
        "D:/Battery_Test_Log/" + ch3_6_data[1] + ".csv", "w", newline=""
    )
    writer = csv.writer(writefileobj)
    for row in ch3_6_log:
        writer.writerow(row)
    writefileobj.close()
    # ftp.logupload(ch3_6_data[1])
    mutex_w.release()
    # time.sleep(0.1)


def ch3_7_logprocess():
    global ch3_7_data
    global ch3_7_log
    mutex_w.acquire()
    writefileobj = open(
        "D:/Battery_Test_Log/" + ch3_7_data[1] + ".csv", "w", newline=""
    )
    writer = csv.writer(writefileobj)
    for row in ch3_7_log:
        writer.writerow(row)
    writefileobj.close()
    # ftp.logupload(ch3_7_data[1])
    mutex_w.release()
    # time.sleep(0.1)


def ch3_8_logprocess():
    global ch3_8_data
    global ch3_8_log
    mutex_w.acquire()
    writefileobj = open(
        "D:/Battery_Test_Log/" + ch3_8_data[1] + ".csv", "w", newline=""
    )
    writer = csv.writer(writefileobj)
    for row in ch3_8_log:
        writer.writerow(row)
    writefileobj.close()
    # ftp.logupload(ch3_8_data[1])
    mutex_w.release()
    # time.sleep(0.1)


def ch4_1_logprocess():
    global ch4_1_data
    global ch4_1_log
    mutex_w.acquire()
    writefileobj = open(
        "D:/Battery_Test_Log/" + ch4_1_data[1] + ".csv", "w", newline=""
    )
    writer = csv.writer(writefileobj)
    for row in ch4_1_log:
        writer.writerow(row)
    writefileobj.close()
    # ftp.logupload(ch4_1_data[1])
    mutex_w.release()
    # time.sleep(0.1)


def ch4_2_logprocess():
    global ch4_2_data
    global ch4_2_log
    mutex_w.acquire()
    writefileobj = open(
        "D:/Battery_Test_Log/" + ch4_2_data[1] + ".csv", "w", newline=""
    )
    writer = csv.writer(writefileobj)
    for row in ch4_2_log:
        writer.writerow(row)
    writefileobj.close()
    # ftp.logupload(ch4_2_data[1])
    mutex_w.release()
    # time.sleep(0.1)


def ch4_3_logprocess():
    global ch4_3_data
    global ch4_3_log
    mutex_w.acquire()
    writefileobj = open(
        "D:/Battery_Test_Log/" + ch4_3_data[1] + ".csv", "w", newline=""
    )
    writer = csv.writer(writefileobj)
    for row in ch4_3_log:
        writer.writerow(row)
    writefileobj.close()
    # ftp.logupload(ch4_3_data[1])
    mutex_w.release()
    # time.sleep(0.1)


def ch4_4_logprocess():
    global ch4_4_data
    global ch4_4_log
    mutex_w.acquire()
    writefileobj = open(
        "D:/Battery_Test_Log/" + ch4_4_data[1] + ".csv", "w", newline=""
    )
    writer = csv.writer(writefileobj)
    for row in ch4_4_log:
        writer.writerow(row)
    writefileobj.close()
    # ftp.logupload(ch4_4_data[1])
    mutex_w.release()
    # time.sleep(0.1)


def ch4_5_logprocess():
    global ch4_5_data
    global ch4_5_log
    mutex_w.acquire()
    writefileobj = open(
        "D:/Battery_Test_Log/" + ch4_5_data[1] + ".csv", "w", newline=""
    )
    writer = csv.writer(writefileobj)
    for row in ch4_5_log:
        writer.writerow(row)
    writefileobj.close()
    # ftp.logupload(ch4_5_data[1])
    mutex_w.release()
    # time.sleep(0.1)


def ch4_6_logprocess():
    global ch4_6_data
    global ch4_6_log
    mutex_w.acquire()
    writefileobj = open(
        "D:/Battery_Test_Log/" + ch4_6_data[1] + ".csv", "w", newline=""
    )
    writer = csv.writer(writefileobj)
    for row in ch4_6_log:
        writer.writerow(row)
    writefileobj.close()
    # ftp.logupload(ch4_6_data[1])
    mutex_w.release()
    # time.sleep(0.1)


def ch4_7_logprocess():
    global ch4_7_data
    global ch4_7_log
    mutex_w.acquire()
    writefileobj = open(
        "D:/Battery_Test_Log/" + ch4_7_data[1] + ".csv", "w", newline=""
    )
    writer = csv.writer(writefileobj)
    for row in ch4_7_log:
        writer.writerow(row)
    writefileobj.close()
    # ftp.logupload(ch4_7_data[1])
    mutex_w.release()
    # time.sleep(0.1)


def ch4_8_logprocess():
    global ch4_8_data
    global ch4_8_log
    mutex_w.acquire()
    writefileobj = open(
        "D:/Battery_Test_Log/" + ch4_8_data[1] + ".csv", "w", newline=""
    )
    writer = csv.writer(writefileobj)
    for row in ch4_8_log:
        writer.writerow(row)
    writefileobj.close()
    # ftp.logupload(ch4_8_data[1])
    mutex_w.release()
    # time.sleep(0.1)


def ch5_1_logprocess():
    global ch5_1_data
    global ch5_1_log
    mutex_w.acquire()
    writefileobj = open(
        "D:/Battery_Test_Log/" + ch5_1_data[1] + ".csv", "w", newline=""
    )
    writer = csv.writer(writefileobj)
    for row in ch5_1_log:
        writer.writerow(row)
    writefileobj.close()
    # ftp.logupload(ch5_1_data[1])
    mutex_w.release()
    # time.sleep(0.1)


def ch5_2_logprocess():
    global ch5_2_data
    global ch5_2_log
    mutex_w.acquire()
    writefileobj = open(
        "D:/Battery_Test_Log/" + ch5_2_data[1] + ".csv", "w", newline=""
    )
    writer = csv.writer(writefileobj)
    for row in ch5_2_log:
        writer.writerow(row)
    writefileobj.close()
    # ftp.logupload(ch5_2_data[1])
    mutex_w.release()
    # time.sleep(0.1)


def ch5_3_logprocess():
    global ch5_3_data
    global ch5_3_log
    mutex_w.acquire()
    writefileobj = open(
        "D:/Battery_Test_Log/" + ch5_3_data[1] + ".csv", "w", newline=""
    )
    writer = csv.writer(writefileobj)
    for row in ch5_3_log:
        writer.writerow(row)
    writefileobj.close()
    # ftp.logupload(ch5_3_data[1])
    mutex_w.release()
    # time.sleep(0.1)


def ch5_4_logprocess():
    global ch5_4_data
    global ch5_4_log
    mutex_w.acquire()
    writefileobj = open(
        "D:/Battery_Test_Log/" + ch5_4_data[1] + ".csv", "w", newline=""
    )
    writer = csv.writer(writefileobj)
    for row in ch5_4_log:
        writer.writerow(row)
    writefileobj.close()
    # ftp.logupload(ch5_4_data[1])
    mutex_w.release()
    # time.sleep(0.1)


def ch5_5_logprocess():
    global ch5_5_data
    global ch5_5_log
    mutex_w.acquire()
    writefileobj = open(
        "D:/Battery_Test_Log/" + ch5_5_data[1] + ".csv", "w", newline=""
    )
    writer = csv.writer(writefileobj)
    for row in ch5_5_log:
        writer.writerow(row)
    writefileobj.close()
    # ftp.logupload(ch5_5_data[1])
    mutex_w.release()
    # time.sleep(0.1)


def ch5_6_logprocess():
    global ch5_6_data
    global ch5_6_log
    mutex_w.acquire()
    writefileobj = open(
        "D:/Battery_Test_Log/" + ch5_6_data[1] + ".csv", "w", newline=""
    )
    writer = csv.writer(writefileobj)
    for row in ch5_6_log:
        writer.writerow(row)
    writefileobj.close()
    # ftp.logupload(ch5_6_data[1])
    mutex_w.release()
    # time.sleep(0.1)


def ch5_7_logprocess():
    global ch5_7_data
    global ch5_7_log
    mutex_w.acquire()
    writefileobj = open(
        "D:/Battery_Test_Log/" + ch5_7_data[1] + ".csv", "w", newline=""
    )
    writer = csv.writer(writefileobj)
    for row in ch5_7_log:
        writer.writerow(row)
    writefileobj.close()
    # ftp.logupload(ch5_7_data[1])
    mutex_w.release()
    # time.sleep(0.1)


def ch5_8_logprocess():
    global ch5_8_data
    global ch5_8_log
    mutex_w.acquire()
    writefileobj = open(
        "D:/Battery_Test_Log/" + ch5_8_data[1] + ".csv", "w", newline=""
    )
    writer = csv.writer(writefileobj)
    for row in ch5_8_log:
        writer.writerow(row)
    writefileobj.close()
    # ftp.logupload(ch5_8_data[1])
    mutex_w.release()
    # time.sleep(0.1)


def ch6_1_logprocess():
    global ch6_1_data
    global ch6_1_log
    mutex_w.acquire()
    writefileobj = open(
        "D:/Battery_Test_Log/" + ch6_1_data[1] + ".csv", "w", newline=""
    )
    writer = csv.writer(writefileobj)
    for row in ch6_1_log:
        writer.writerow(row)
    writefileobj.close()
    # ftp.logupload(ch6_1_data[1])
    mutex_w.release()
    # time.sleep(0.1)


def ch6_2_logprocess():
    global ch6_2_data
    global ch6_2_log
    mutex_w.acquire()
    writefileobj = open(
        "D:/Battery_Test_Log/" + ch6_2_data[1] + ".csv", "w", newline=""
    )
    writer = csv.writer(writefileobj)
    for row in ch6_2_log:
        writer.writerow(row)
    writefileobj.close()
    # ftp.logupload(ch6_2_data[1])
    mutex_w.release()
    # time.sleep(0.1)


def ch6_3_logprocess():
    global ch6_3_data
    global ch6_3_log
    mutex_w.acquire()
    writefileobj = open(
        "D:/Battery_Test_Log/" + ch6_3_data[1] + ".csv", "w", newline=""
    )
    writer = csv.writer(writefileobj)
    for row in ch6_3_log:
        writer.writerow(row)
    writefileobj.close()
    # ftp.logupload(ch6_3_data[1])
    mutex_w.release()
    # time.sleep(0.1)


def ch6_4_logprocess():
    global ch6_4_data
    global ch6_4_log
    mutex_w.acquire()
    writefileobj = open(
        "D:/Battery_Test_Log/" + ch6_4_data[1] + ".csv", "w", newline=""
    )
    writer = csv.writer(writefileobj)
    for row in ch6_4_log:
        writer.writerow(row)
    writefileobj.close()
    # ftp.logupload(ch6_4_data[1])
    mutex_w.release()
    # time.sleep(0.1)


def ch6_5_logprocess():
    global ch6_5_data
    global ch6_5_log
    mutex_w.acquire()
    writefileobj = open(
        "D:/Battery_Test_Log/" + ch6_5_data[1] + ".csv", "w", newline=""
    )
    writer = csv.writer(writefileobj)
    for row in ch6_5_log:
        writer.writerow(row)
    writefileobj.close()
    # ftp.logupload(ch6_5_data[1])
    mutex_w.release()
    # time.sleep(0.1)


def ch6_6_logprocess():
    global ch6_6_data
    global ch6_6_log
    mutex_w.acquire()
    writefileobj = open(
        "D:/Battery_Test_Log/" + ch6_6_data[1] + ".csv", "w", newline=""
    )
    writer = csv.writer(writefileobj)
    for row in ch6_6_log:
        writer.writerow(row)
    writefileobj.close()
    # ftp.logupload(ch6_6_data[1])
    mutex_w.release()
    # time.sleep(0.1)


def ch6_7_logprocess():
    global ch6_7_data
    global ch6_7_log
    mutex_w.acquire()
    writefileobj = open(
        "D:/Battery_Test_Log/" + ch6_7_data[1] + ".csv", "w", newline=""
    )
    writer = csv.writer(writefileobj)
    for row in ch6_7_log:
        writer.writerow(row)
    writefileobj.close()
    # ftp.logupload(ch6_7_data[1])
    mutex_w.release()
    # time.sleep(0.1)


def ch6_8_logprocess():
    global ch6_8_data
    global ch6_8_log
    mutex_w.acquire()
    writefileobj = open(
        "D:/Battery_Test_Log/" + ch6_8_data[1] + ".csv", "w", newline=""
    )
    writer = csv.writer(writefileobj)
    for row in ch6_8_log:
        writer.writerow(row)
    writefileobj.close()
    # ftp.logupload(ch6_8_data[1])
    mutex_w.release()
    # time.sleep(0.1)


def ch7_1_logprocess():
    global ch7_1_data
    global ch7_1_log
    mutex_w.acquire()
    writefileobj = open(
        "D:/Battery_Test_Log/" + ch7_1_data[1] + ".csv", "w", newline=""
    )
    writer = csv.writer(writefileobj)
    for row in ch7_1_log:
        writer.writerow(row)
    writefileobj.close()
    # ftp.logupload(ch7_1_data[1])
    mutex_w.release()
    # time.sleep(0.1)


def ch7_2_logprocess():
    global ch7_2_data
    global ch7_2_log
    mutex_w.acquire()
    writefileobj = open(
        "D:/Battery_Test_Log/" + ch7_2_data[1] + ".csv", "w", newline=""
    )
    writer = csv.writer(writefileobj)
    for row in ch7_2_log:
        writer.writerow(row)
    writefileobj.close()
    # ftp.logupload(ch7_2_data[1])
    mutex_w.release()
    # time.sleep(0.1)


def ch7_3_logprocess():
    global ch7_3_data
    global ch7_3_log
    mutex_w.acquire()
    writefileobj = open(
        "D:/Battery_Test_Log/" + ch7_3_data[1] + ".csv", "w", newline=""
    )
    writer = csv.writer(writefileobj)
    for row in ch7_3_log:
        writer.writerow(row)
    writefileobj.close()
    # ftp.logupload(ch7_3_data[1])
    mutex_w.release()
    # time.sleep(0.1)


def ch7_4_logprocess():
    global ch7_4_data
    global ch7_4_log
    mutex_w.acquire()
    writefileobj = open(
        "D:/Battery_Test_Log/" + ch7_4_data[1] + ".csv", "w", newline=""
    )
    writer = csv.writer(writefileobj)
    for row in ch7_4_log:
        writer.writerow(row)
    writefileobj.close()
    # ftp.logupload(ch7_4_data[1])
    mutex_w.release()
    # time.sleep(0.1)


def ch7_5_logprocess():
    global ch7_5_data
    global ch7_5_log
    mutex_w.acquire()
    writefileobj = open(
        "D:/Battery_Test_Log/" + ch7_5_data[1] + ".csv", "w", newline=""
    )
    writer = csv.writer(writefileobj)
    for row in ch7_5_log:
        writer.writerow(row)
    writefileobj.close()
    # ftp.logupload(ch7_5_data[1])
    mutex_w.release()
    # time.sleep(0.1)


def ch7_6_logprocess():
    global ch7_6_data
    global ch7_6_log
    mutex_w.acquire()
    writefileobj = open(
        "D:/Battery_Test_Log/" + ch7_6_data[1] + ".csv", "w", newline=""
    )
    writer = csv.writer(writefileobj)
    for row in ch7_6_log:
        writer.writerow(row)
    writefileobj.close()
    # ftp.logupload(ch7_6_data[1])
    mutex_w.release()
    # time.sleep(0.1)


def ch7_7_logprocess():
    global ch7_7_data
    global ch7_7_log
    mutex_w.acquire()
    writefileobj = open(
        "D:/Battery_Test_Log/" + ch7_7_data[1] + ".csv", "w", newline=""
    )
    writer = csv.writer(writefileobj)
    for row in ch7_7_log:
        writer.writerow(row)
    writefileobj.close()
    # ftp.logupload(ch7_7_data[1])
    mutex_w.release()
    # time.sleep(0.1)


def ch7_8_logprocess():
    global ch7_8_data
    global ch7_8_log
    mutex_w.acquire()
    writefileobj = open(
        "D:/Battery_Test_Log/" + ch7_8_data[1] + ".csv", "w", newline=""
    )
    writer = csv.writer(writefileobj)
    for row in ch7_8_log:
        writer.writerow(row)
    writefileobj.close()
    # ftp.logupload(ch7_8_data[1])
    mutex_w.release()
    # time.sleep(0.1)


def ch8_1_logprocess():
    global ch8_1_data
    global ch8_1_log
    mutex_w.acquire()
    writefileobj = open(
        "D:/Battery_Test_Log/" + ch8_1_data[1] + ".csv", "w", newline=""
    )
    writer = csv.writer(writefileobj)
    for row in ch8_1_log:
        writer.writerow(row)
    writefileobj.close()
    # ftp.logupload(ch8_1_data[1])
    mutex_w.release()
    # time.sleep(0.1)


def ch8_2_logprocess():
    global ch8_2_data
    global ch8_2_log
    mutex_w.acquire()
    writefileobj = open(
        "D:/Battery_Test_Log/" + ch8_2_data[1] + ".csv", "w", newline=""
    )
    writer = csv.writer(writefileobj)
    for row in ch8_2_log:
        writer.writerow(row)
    writefileobj.close()
    # ftp.logupload(ch8_2_data[1])
    mutex_w.release()
    # time.sleep(0.1)


def ch8_3_logprocess():
    global ch8_3_data
    global ch8_3_log
    mutex_w.acquire()
    writefileobj = open(
        "D:/Battery_Test_Log/" + ch8_3_data[1] + ".csv", "w", newline=""
    )
    writer = csv.writer(writefileobj)
    for row in ch8_3_log:
        writer.writerow(row)
    writefileobj.close()
    # ftp.logupload(ch8_3_data[1])
    mutex_w.release()
    # time.sleep(0.1)


def ch8_4_logprocess():
    global ch8_4_data
    global ch8_4_log
    mutex_w.acquire()
    writefileobj = open(
        "D:/Battery_Test_Log/" + ch8_4_data[1] + ".csv", "w", newline=""
    )
    writer = csv.writer(writefileobj)
    for row in ch8_4_log:
        writer.writerow(row)
    writefileobj.close()
    # ftp.logupload(ch8_4_data[1])
    mutex_w.release()
    # time.sleep(0.1)


def ch8_5_logprocess():
    global ch8_5_data
    global ch8_5_log
    mutex_w.acquire()
    writefileobj = open(
        "D:/Battery_Test_Log/" + ch8_5_data[1] + ".csv", "w", newline=""
    )
    writer = csv.writer(writefileobj)
    for row in ch8_5_log:
        writer.writerow(row)
    writefileobj.close()
    # ftp.logupload(ch8_5_data[1])
    mutex_w.release()
    # time.sleep(0.1)


def ch8_6_logprocess():
    global ch8_6_data
    global ch8_6_log
    mutex_w.acquire()
    writefileobj = open(
        "D:/Battery_Test_Log/" + ch8_6_data[1] + ".csv", "w", newline=""
    )
    writer = csv.writer(writefileobj)
    for row in ch8_6_log:
        writer.writerow(row)
    writefileobj.close()
    # ftp.logupload(ch8_6_data[1])
    mutex_w.release()
    # time.sleep(0.1)


def ch8_7_logprocess():
    global ch8_7_data
    global ch8_7_log
    mutex_w.acquire()
    writefileobj = open(
        "D:/Battery_Test_Log/" + ch8_7_data[1] + ".csv", "w", newline=""
    )
    writer = csv.writer(writefileobj)
    for row in ch8_7_log:
        writer.writerow(row)
    writefileobj.close()
    # ftp.logupload(ch8_7_data[1])
    mutex_w.release()
    # time.sleep(0.1)


def ch8_8_logprocess():
    global ch8_8_data
    global ch8_8_log
    mutex_w.acquire()
    writefileobj = open(
        "D:/Battery_Test_Log/" + ch8_8_data[1] + ".csv", "w", newline=""
    )
    writer = csv.writer(writefileobj)
    for row in ch8_8_log:
        writer.writerow(row)
    writefileobj.close()
    # ftp.logupload(ch8_8_data[1])
    mutex_w.release()
    # time.sleep(0.1)


def ch1_1_stop_test():
    ch1_1_stop_value = threading.Thread(target=stop_test, args=("ch1_1",))
    try:
        ch1_1_stop_value.start()
    except Exception:
        print("Error Start threading")


def ch1_2_stop_test():
    ch1_2_stop_value = threading.Thread(target=stop_test, args=("ch1_2",))
    try:
        ch1_2_stop_value.start()
    except Exception:
        print("Error Start threading")


def ch1_3_stop_test():
    ch1_3_stop_value = threading.Thread(target=stop_test, args=("ch1_3",))
    try:
        ch1_3_stop_value.start()
    except Exception:
        print("Error Start threading")


def ch1_4_stop_test():
    ch1_4_stop_value = threading.Thread(target=stop_test, args=("ch1_4",))
    try:
        ch1_4_stop_value.start()
    except Exception:
        print("Error Start threading")


def ch1_5_stop_test():
    ch1_5_stop_value = threading.Thread(target=stop_test, args=("ch1_5",))
    try:
        ch1_5_stop_value.start()
    except Exception:
        print("Error Start threading")


def ch1_6_stop_test():
    ch1_6_stop_value = threading.Thread(target=stop_test, args=("ch1_6",))
    try:
        ch1_6_stop_value.start()
    except Exception:
        print("Error Start threading")


def ch1_7_stop_test():
    ch1_7_stop_value = threading.Thread(target=stop_test, args=("ch1_7",))
    try:
        ch1_7_stop_value.start()
    except Exception:
        print("Error Start threading")


def ch1_8_stop_test():
    ch1_8_stop_value = threading.Thread(target=stop_test, args=("ch1_8",))
    try:
        ch1_8_stop_value.start()
    except Exception:
        print("Error Start threading")


def ch2_1_stop_test():
    ch2_1_stop_value = threading.Thread(target=stop_test, args=("ch2_1",))
    try:
        ch2_1_stop_value.start()
    except Exception:
        print("Error Start threading")


def ch2_2_stop_test():
    ch2_2_stop_value = threading.Thread(target=stop_test, args=("ch2_2",))
    try:
        ch2_2_stop_value.start()
    except Exception:
        print("Error Start threading")


def ch2_3_stop_test():
    ch2_3_stop_value = threading.Thread(target=stop_test, args=("ch2_3",))
    try:
        ch2_3_stop_value.start()
    except Exception:
        print("Error Start threading")


def ch2_4_stop_test():
    ch2_4_stop_value = threading.Thread(target=stop_test, args=("ch2_4",))
    try:
        ch2_4_stop_value.start()
    except Exception:
        print("Error Start threading")


def ch2_5_stop_test():
    ch2_5_stop_value = threading.Thread(target=stop_test, args=("ch2_5",))
    try:
        ch2_5_stop_value.start()
    except Exception:
        print("Error Start threading")


def ch2_6_stop_test():
    ch2_6_stop_value = threading.Thread(target=stop_test, args=("ch2_6",))
    try:
        ch2_6_stop_value.start()
    except Exception:
        print("Error Start threading")


def ch2_7_stop_test():
    ch2_7_stop_value = threading.Thread(target=stop_test, args=("ch2_7",))
    try:
        ch2_7_stop_value.start()
    except Exception:
        print("Error Start threading")


def ch2_8_stop_test():
    ch2_8_stop_value = threading.Thread(target=stop_test, args=("ch2_8",))
    try:
        ch2_8_stop_value.start()
    except Exception:
        print("Error Start threading")


def ch3_1_stop_test():
    ch3_1_stop_value = threading.Thread(target=stop_test, args=("ch3_1",))
    try:
        ch3_1_stop_value.start()
    except Exception:
        print("Error Start threading")


def ch3_2_stop_test():
    ch3_2_stop_value = threading.Thread(target=stop_test, args=("ch3_2",))
    try:
        ch3_2_stop_value.start()
    except Exception:
        print("Error Start threading")


def ch3_3_stop_test():
    ch3_3_stop_value = threading.Thread(target=stop_test, args=("ch3_3",))
    try:
        ch3_3_stop_value.start()
    except Exception:
        print("Error Start threading")


def ch3_4_stop_test():
    ch3_4_stop_value = threading.Thread(target=stop_test, args=("ch3_4",))
    try:
        ch3_4_stop_value.start()
    except Exception:
        print("Error Start threading")


def ch3_5_stop_test():
    ch3_5_stop_value = threading.Thread(target=stop_test, args=("ch3_5",))
    try:
        ch3_5_stop_value.start()
    except Exception:
        print("Error Start threading")


def ch3_6_stop_test():
    ch3_6_stop_value = threading.Thread(target=stop_test, args=("ch3_6",))
    try:
        ch3_6_stop_value.start()
    except Exception:
        print("Error Start threading")


def ch3_7_stop_test():
    ch3_7_stop_value = threading.Thread(target=stop_test, args=("ch3_7",))
    try:
        ch3_7_stop_value.start()
    except Exception:
        print("Error Start threading")


def ch3_8_stop_test():
    ch3_8_stop_value = threading.Thread(target=stop_test, args=("ch3_8",))
    try:
        ch3_8_stop_value.start()
    except Exception:
        print("Error Start threading")


def ch4_1_stop_test():
    ch4_1_stop_value = threading.Thread(target=stop_test, args=("ch4_1",))
    try:
        ch4_1_stop_value.start()
    except Exception:
        print("Error Start threading")


def ch4_2_stop_test():
    ch4_2_stop_value = threading.Thread(target=stop_test, args=("ch4_2",))
    try:
        ch4_2_stop_value.start()
    except Exception:
        print("Error Start threading")


def ch4_3_stop_test():
    ch4_3_stop_value = threading.Thread(target=stop_test, args=("ch4_3",))
    try:
        ch4_3_stop_value.start()
    except Exception:
        print("Error Start threading")


def ch4_4_stop_test():
    ch4_4_stop_value = threading.Thread(target=stop_test, args=("ch4_4",))
    try:
        ch4_4_stop_value.start()
    except Exception:
        print("Error Start threading")


def ch4_5_stop_test():
    ch4_5_stop_value = threading.Thread(target=stop_test, args=("ch4_5",))
    try:
        ch4_5_stop_value.start()
    except Exception:
        print("Error Start threading")


def ch4_6_stop_test():
    ch4_6_stop_value = threading.Thread(target=stop_test, args=("ch4_6",))
    try:
        ch4_6_stop_value.start()
    except Exception:
        print("Error Start threading")


def ch4_7_stop_test():
    ch4_7_stop_value = threading.Thread(target=stop_test, args=("ch4_7",))
    try:
        ch4_7_stop_value.start()
    except Exception:
        print("Error Start threading")


def ch4_8_stop_test():
    ch4_8_stop_value = threading.Thread(target=stop_test, args=("ch4_8",))
    try:
        ch4_8_stop_value.start()
    except Exception:
        print("Error Start threading")


def ch5_1_stop_test():
    ch5_1_stop_value = threading.Thread(target=stop_test, args=("ch5_1",))
    try:
        ch5_1_stop_value.start()
    except Exception:
        print("Error Start threading")


def ch5_2_stop_test():
    ch5_2_stop_value = threading.Thread(target=stop_test, args=("ch5_2",))
    try:
        ch5_2_stop_value.start()
    except Exception:
        print("Error Start threading")


def ch5_3_stop_test():
    ch5_3_stop_value = threading.Thread(target=stop_test, args=("ch5_3",))
    try:
        ch5_3_stop_value.start()
    except Exception:
        print("Error Start threading")


def ch5_4_stop_test():
    ch5_4_stop_value = threading.Thread(target=stop_test, args=("ch5_4",))
    try:
        ch5_4_stop_value.start()
    except Exception:
        print("Error Start threading")


def ch5_5_stop_test():
    ch5_5_stop_value = threading.Thread(target=stop_test, args=("ch5_5",))
    try:
        ch5_5_stop_value.start()
    except Exception:
        print("Error Start threading")


def ch5_6_stop_test():
    ch5_6_stop_value = threading.Thread(target=stop_test, args=("ch5_6",))
    try:
        ch5_6_stop_value.start()
    except Exception:
        print("Error Start threading")


def ch5_7_stop_test():
    ch5_7_stop_value = threading.Thread(target=stop_test, args=("ch5_7",))
    try:
        ch5_7_stop_value.start()
    except Exception:
        print("Error Start threading")


def ch5_8_stop_test():
    ch5_8_stop_value = threading.Thread(target=stop_test, args=("ch5_8",))
    try:
        ch5_8_stop_value.start()
    except Exception:
        print("Error Start threading")


def ch6_1_stop_test():
    ch6_1_stop_value = threading.Thread(target=stop_test, args=("ch6_1",))
    try:
        ch6_1_stop_value.start()
    except Exception:
        print("Error Start threading")


def ch6_2_stop_test():
    ch6_2_stop_value = threading.Thread(target=stop_test, args=("ch6_2",))
    try:
        ch6_2_stop_value.start()
    except Exception:
        print("Error Start threading")


def ch6_3_stop_test():
    ch6_3_stop_value = threading.Thread(target=stop_test, args=("ch6_3",))
    try:
        ch6_3_stop_value.start()
    except Exception:
        print("Error Start threading")


def ch6_4_stop_test():
    ch6_4_stop_value = threading.Thread(target=stop_test, args=("ch6_4",))
    try:
        ch6_4_stop_value.start()
    except Exception:
        print("Error Start threading")


def ch6_5_stop_test():
    ch6_5_stop_value = threading.Thread(target=stop_test, args=("ch6_5",))
    try:
        ch6_5_stop_value.start()
    except Exception:
        print("Error Start threading")


def ch6_6_stop_test():
    ch6_6_stop_value = threading.Thread(target=stop_test, args=("ch6_6",))
    try:
        ch6_6_stop_value.start()
    except Exception:
        print("Error Start threading")


def ch6_7_stop_test():
    ch6_7_stop_value = threading.Thread(target=stop_test, args=("ch6_7",))
    try:
        ch6_7_stop_value.start()
    except Exception:
        print("Error Start threading")


def ch6_8_stop_test():
    ch6_8_stop_value = threading.Thread(target=stop_test, args=("ch6_8",))
    try:
        ch6_8_stop_value.start()
    except Exception:
        print("Error Start threading")


def ch7_1_stop_test():
    ch7_1_stop_value = threading.Thread(target=stop_test, args=("ch7_1",))
    try:
        ch7_1_stop_value.start()
    except Exception:
        print("Error Start threading")


def ch7_2_stop_test():
    ch7_2_stop_value = threading.Thread(target=stop_test, args=("ch7_2",))
    try:
        ch7_2_stop_value.start()
    except Exception:
        print("Error Start threading")


def ch7_3_stop_test():
    ch7_3_stop_value = threading.Thread(target=stop_test, args=("ch7_3",))
    try:
        ch7_3_stop_value.start()
    except Exception:
        print("Error Start threading")


def ch7_4_stop_test():
    ch7_4_stop_value = threading.Thread(target=stop_test, args=("ch7_4",))
    try:
        ch7_4_stop_value.start()
    except Exception:
        print("Error Start threading")


def ch7_5_stop_test():
    ch7_5_stop_value = threading.Thread(target=stop_test, args=("ch7_5",))
    try:
        ch7_5_stop_value.start()
    except Exception:
        print("Error Start threading")


def ch7_6_stop_test():
    ch7_6_stop_value = threading.Thread(target=stop_test, args=("ch7_6",))
    try:
        ch7_6_stop_value.start()
    except Exception:
        print("Error Start threading")


def ch7_7_stop_test():
    ch7_7_stop_value = threading.Thread(target=stop_test, args=("ch7_7",))
    try:
        ch7_7_stop_value.start()
    except Exception:
        print("Error Start threading")


def ch7_8_stop_test():
    ch7_8_stop_value = threading.Thread(target=stop_test, args=("ch7_8",))
    try:
        ch7_8_stop_value.start()
    except Exception:
        print("Error Start threading")


def ch8_1_stop_test():
    ch8_1_stop_value = threading.Thread(target=stop_test, args=("ch8_1",))
    try:
        ch8_1_stop_value.start()
    except Exception:
        print("Error Start threading")


def ch8_2_stop_test():
    ch8_2_stop_value = threading.Thread(target=stop_test, args=("ch8_2",))
    try:
        ch8_2_stop_value.start()
    except Exception:
        print("Error Start threading")


def ch8_3_stop_test():
    ch8_3_stop_value = threading.Thread(target=stop_test, args=("ch8_3",))
    try:
        ch8_3_stop_value.start()
    except Exception:
        print("Error Start threading")


def ch8_4_stop_test():
    ch8_4_stop_value = threading.Thread(target=stop_test, args=("ch8_4",))
    try:
        ch8_4_stop_value.start()
    except Exception:
        print("Error Start threading")


def ch8_5_stop_test():
    ch8_5_stop_value = threading.Thread(target=stop_test, args=("ch8_5",))
    try:
        ch8_5_stop_value.start()
    except Exception:
        print("Error Start threading")


def ch8_6_stop_test():
    ch8_6_stop_value = threading.Thread(target=stop_test, args=("ch8_6",))
    try:
        ch8_6_stop_value.start()
    except Exception:
        print("Error Start threading")


def ch8_7_stop_test():
    ch8_7_stop_value = threading.Thread(target=stop_test, args=("ch8_7",))
    try:
        ch8_7_stop_value.start()
    except Exception:
        print("Error Start threading")


def ch8_8_stop_test():
    ch8_8_stop_value = threading.Thread(target=stop_test, args=("ch8_8",))
    try:
        ch8_8_stop_value.start()
    except Exception:
        print("Error Start threading")


def stop_test(ch_stop_name):
    global ch1_1_log
    global ch1_2_log
    global ch1_3_log
    global ch1_4_log
    global ch1_5_log
    global ch1_6_log
    global ch1_7_log
    global ch1_8_log

    global ch2_1_log
    global ch2_2_log
    global ch2_3_log
    global ch2_4_log
    global ch2_5_log
    global ch2_6_log
    global ch2_7_log
    global ch2_8_log

    global ch3_1_log
    global ch3_2_log
    global ch3_3_log
    global ch3_4_log
    global ch3_5_log
    global ch3_6_log
    global ch3_7_log
    global ch3_8_log

    global ch4_1_log
    global ch4_2_log
    global ch4_3_log
    global ch4_4_log
    global ch4_5_log
    global ch4_6_log
    global ch4_7_log
    global ch4_8_log

    global ch5_1_log
    global ch5_2_log
    global ch5_3_log
    global ch5_4_log
    global ch5_5_log
    global ch5_6_log
    global ch5_7_log
    global ch5_8_log

    global ch6_1_log
    global ch6_2_log
    global ch6_3_log
    global ch6_4_log
    global ch6_5_log
    global ch6_6_log
    global ch6_7_log
    global ch6_8_log

    global ch7_1_log
    global ch7_2_log
    global ch7_3_log
    global ch7_4_log
    global ch7_5_log
    global ch7_6_log
    global ch7_7_log
    global ch7_8_log

    global ch8_1_log
    global ch8_2_log
    global ch8_3_log
    global ch8_4_log
    global ch8_5_log
    global ch8_6_log
    global ch8_7_log
    global ch8_8_log

    global ch1_1_signal
    global ch1_2_signal
    global ch1_3_signal
    global ch1_4_signal
    global ch1_5_signal
    global ch1_6_signal
    global ch1_7_signal
    global ch1_8_signal

    global ch2_1_signal
    global ch2_2_signal
    global ch2_3_signal
    global ch2_4_signal
    global ch2_5_signal
    global ch2_6_signal
    global ch2_7_signal
    global ch2_8_signal

    global ch3_1_signal
    global ch3_2_signal
    global ch3_3_signal
    global ch3_4_signal
    global ch3_5_signal
    global ch3_6_signal
    global ch3_7_signal
    global ch3_8_signal

    global ch4_1_signal
    global ch4_2_signal
    global ch4_3_signal
    global ch4_4_signal
    global ch4_5_signal
    global ch4_6_signal
    global ch4_7_signal
    global ch4_8_signal

    global ch5_1_signal
    global ch5_2_signal
    global ch5_3_signal
    global ch5_4_signal
    global ch5_5_signal
    global ch5_6_signal
    global ch5_7_signal
    global ch5_8_signal

    global ch6_1_signal
    global ch6_2_signal
    global ch6_3_signal
    global ch6_4_signal
    global ch6_5_signal
    global ch6_6_signal
    global ch6_7_signal
    global ch6_8_signal

    global ch7_1_signal
    global ch7_2_signal
    global ch7_3_signal
    global ch7_4_signal
    global ch7_5_signal
    global ch7_6_signal
    global ch7_7_signal
    global ch7_8_signal

    global ch8_1_signal
    global ch8_2_signal
    global ch8_3_signal
    global ch8_4_signal
    global ch8_5_signal
    global ch8_6_signal
    global ch8_7_signal
    global ch8_8_signal

    global ch1_1_start_signal
    global ch1_2_start_signal
    global ch1_3_start_signal
    global ch1_4_start_signal
    global ch1_5_start_signal
    global ch1_6_start_signal
    global ch1_7_start_signal
    global ch1_8_start_signal

    global ch2_1_start_signal
    global ch2_2_start_signal
    global ch2_3_start_signal
    global ch2_4_start_signal
    global ch2_5_start_signal
    global ch2_6_start_signal
    global ch2_7_start_signal
    global ch2_8_start_signal

    global ch3_1_start_signal
    global ch3_2_start_signal
    global ch3_3_start_signal
    global ch3_4_start_signal
    global ch3_5_start_signal
    global ch3_6_start_signal
    global ch3_7_start_signal
    global ch3_8_start_signal

    global ch4_1_start_signal
    global ch4_2_start_signal
    global ch4_3_start_signal
    global ch4_4_start_signal
    global ch4_5_start_signal
    global ch4_6_start_signal
    global ch4_7_start_signal
    global ch4_8_start_signal

    global ch5_1_start_signal
    global ch5_2_start_signal
    global ch5_3_start_signal
    global ch5_4_start_signal
    global ch5_5_start_signal
    global ch5_6_start_signal
    global ch5_7_start_signal
    global ch5_8_start_signal

    global ch6_1_start_signal
    global ch6_2_start_signal
    global ch6_3_start_signal
    global ch6_4_start_signal
    global ch6_5_start_signal
    global ch6_6_start_signal
    global ch6_7_start_signal
    global ch6_8_start_signal

    global ch7_1_start_signal
    global ch7_2_start_signal
    global ch7_3_start_signal
    global ch7_4_start_signal
    global ch7_5_start_signal
    global ch7_6_start_signal
    global ch7_7_start_signal
    global ch7_8_start_signal

    global ch8_1_start_signal
    global ch8_2_start_signal
    global ch8_3_start_signal
    global ch8_4_start_signal
    global ch8_5_start_signal
    global ch8_6_start_signal
    global ch8_7_start_signal
    global ch8_8_start_signal

    global ch3_1_error_data

    global ch1_1_data
    global ch1_2_data
    global ch1_3_data
    global ch1_4_data
    global ch1_5_data
    global ch1_6_data
    global ch1_7_data
    global ch1_8_data

    global ch2_1_data
    global ch2_2_data
    global ch2_3_data
    global ch2_4_data
    global ch2_5_data
    global ch2_6_data
    global ch2_7_data
    global ch2_8_data

    global ch3_1_data
    global ch3_2_data
    global ch3_3_data
    global ch3_4_data
    global ch3_5_data
    global ch3_6_data
    global ch3_7_data
    global ch3_8_data

    global ch4_1_data
    global ch4_2_data
    global ch4_3_data
    global ch4_4_data
    global ch4_5_data
    global ch4_6_data
    global ch4_7_data
    global ch4_8_data

    global ch5_1_data
    global ch5_2_data
    global ch5_3_data
    global ch5_4_data
    global ch5_5_data
    global ch5_6_data
    global ch5_7_data
    global ch5_8_data

    global ch6_1_data
    global ch6_2_data
    global ch6_3_data
    global ch6_4_data
    global ch6_5_data
    global ch6_6_data
    global ch6_7_data
    global ch6_8_data

    global ch7_1_data
    global ch7_2_data
    global ch7_3_data
    global ch7_4_data
    global ch7_5_data
    global ch7_6_data
    global ch7_7_data
    global ch7_8_data

    global ch8_1_data
    global ch8_2_data
    global ch8_3_data
    global ch8_4_data
    global ch8_5_data
    global ch8_6_data
    global ch8_7_data
    global ch8_8_data

    global ch1_1_error_data
    global ch1_2_error_data
    global ch1_3_error_data
    global ch1_4_error_data
    global ch1_5_error_data
    global ch1_6_error_data
    global ch1_7_error_data
    global ch1_8_error_data

    global ch2_1_error_data
    global ch2_2_error_data
    global ch2_3_error_data
    global ch2_4_error_data
    global ch2_5_error_data
    global ch2_6_error_data
    global ch2_7_error_data
    global ch2_8_error_data

    global ch3_1_error_data
    global ch3_2_error_data
    global ch3_3_error_data
    global ch3_4_error_data
    global ch3_5_error_data
    global ch3_6_error_data
    global ch3_7_error_data
    global ch3_8_error_data

    global ch4_1_error_data
    global ch4_2_error_data
    global ch4_3_error_data
    global ch4_4_error_data
    global ch4_5_error_data
    global ch4_6_error_data
    global ch4_7_error_data
    global ch4_8_error_data

    global ch5_1_error_data
    global ch5_2_error_data
    global ch5_3_error_data
    global ch5_4_error_data
    global ch5_5_error_data
    global ch5_6_error_data
    global ch5_7_error_data
    global ch5_8_error_data

    global ch6_1_error_data
    global ch6_2_error_data
    global ch6_3_error_data
    global ch6_4_error_data
    global ch6_5_error_data
    global ch6_6_error_data
    global ch6_7_error_data
    global ch6_8_error_data

    global ch7_1_error_data
    global ch7_2_error_data
    global ch7_3_error_data
    global ch7_4_error_data
    global ch7_5_error_data
    global ch7_6_error_data
    global ch7_7_error_data
    global ch7_8_error_data

    global ch8_1_error_data
    global ch8_2_error_data
    global ch8_3_error_data
    global ch8_4_error_data
    global ch8_5_error_data
    global ch8_6_error_data
    global ch8_7_error_data
    global ch8_8_error_data

    global ch1_1_state_value
    global ch1_2_state_value
    global ch1_3_state_value
    global ch1_4_state_value
    global ch1_5_state_value
    global ch1_6_state_value
    global ch1_7_state_value
    global ch1_8_state_value

    global ch2_1_state_value
    global ch2_2_state_value
    global ch2_3_state_value
    global ch2_4_state_value
    global ch2_5_state_value
    global ch2_6_state_value
    global ch2_7_state_value
    global ch2_8_state_value

    global ch3_1_state_value
    global ch3_2_state_value
    global ch3_3_state_value
    global ch3_4_state_value
    global ch3_5_state_value
    global ch3_6_state_value
    global ch3_7_state_value
    global ch3_8_state_value

    global ch4_1_state_value
    global ch4_2_state_value
    global ch4_3_state_value
    global ch4_4_state_value
    global ch4_5_state_value
    global ch4_6_state_value
    global ch4_7_state_value
    global ch4_8_state_value

    global ch5_1_state_value
    global ch5_2_state_value
    global ch5_3_state_value
    global ch5_4_state_value
    global ch5_5_state_value
    global ch5_6_state_value
    global ch5_7_state_value
    global ch5_8_state_value

    global ch6_1_state_value
    global ch6_2_state_value
    global ch6_3_state_value
    global ch6_4_state_value
    global ch6_5_state_value
    global ch6_6_state_value
    global ch6_7_state_value
    global ch6_8_state_value

    global ch7_1_state_value
    global ch7_2_state_value
    global ch7_3_state_value
    global ch7_4_state_value
    global ch7_5_state_value
    global ch7_6_state_value
    global ch7_7_state_value
    global ch7_8_state_value

    global ch8_1_state_value
    global ch8_2_state_value
    global ch8_3_state_value
    global ch8_4_state_value
    global ch8_5_state_value
    global ch8_6_state_value
    global ch8_7_state_value
    global ch8_8_state_value

    global entry_ch1_1
    global entry_ch1_2
    global entry_ch1_3
    global entry_ch1_4
    global entry_ch1_5
    global entry_ch1_6
    global entry_ch1_7
    global entry_ch1_8

    global entry_ch2_1
    global entry_ch2_2
    global entry_ch2_3
    global entry_ch2_4
    global entry_ch2_5
    global entry_ch2_6
    global entry_ch2_7
    global entry_ch2_8

    global entry_ch3_1
    global entry_ch3_2
    global entry_ch3_3
    global entry_ch3_4
    global entry_ch3_5
    global entry_ch3_6
    global entry_ch3_7
    global entry_ch3_8

    global entry_ch4_1
    global entry_ch4_2
    global entry_ch4_3
    global entry_ch4_4
    global entry_ch4_5
    global entry_ch4_6
    global entry_ch4_7
    global entry_ch4_8

    global entry_ch5_1
    global entry_ch5_2
    global entry_ch5_3
    global entry_ch5_4
    global entry_ch5_5
    global entry_ch5_6
    global entry_ch5_7
    global entry_ch5_8

    global entry_ch6_1
    global entry_ch6_2
    global entry_ch6_3
    global entry_ch6_4
    global entry_ch6_5
    global entry_ch6_6
    global entry_ch6_7
    global entry_ch6_8

    global entry_ch7_1
    global entry_ch7_2
    global entry_ch7_3
    global entry_ch7_4
    global entry_ch7_5
    global entry_ch7_6
    global entry_ch7_7
    global entry_ch7_8

    global entry_ch8_1
    global entry_ch8_2
    global entry_ch8_3
    global entry_ch8_4
    global entry_ch8_5
    global entry_ch8_6
    global entry_ch8_7
    global entry_ch8_8

    global entry_ch1_1_set_voltage_value
    global entry_ch1_2_set_voltage_value
    global entry_ch1_3_set_voltage_value
    global entry_ch1_4_set_voltage_value
    global entry_ch1_5_set_voltage_value
    global entry_ch1_6_set_voltage_value
    global entry_ch1_7_set_voltage_value
    global entry_ch1_8_set_voltage_value

    global entry_ch2_1_set_voltage_value
    global entry_ch2_2_set_voltage_value
    global entry_ch2_3_set_voltage_value
    global entry_ch2_4_set_voltage_value
    global entry_ch2_5_set_voltage_value
    global entry_ch2_6_set_voltage_value
    global entry_ch2_7_set_voltage_value
    global entry_ch2_8_set_voltage_value

    global entry_ch3_1_set_voltage_value
    global entry_ch3_2_set_voltage_value
    global entry_ch3_3_set_voltage_value
    global entry_ch3_4_set_voltage_value
    global entry_ch3_5_set_voltage_value
    global entry_ch3_6_set_voltage_value
    global entry_ch3_7_set_voltage_value
    global entry_ch3_8_set_voltage_value

    global entry_ch4_1_set_voltage_value
    global entry_ch4_2_set_voltage_value
    global entry_ch4_3_set_voltage_value
    global entry_ch4_4_set_voltage_value
    global entry_ch4_5_set_voltage_value
    global entry_ch4_6_set_voltage_value
    global entry_ch4_7_set_voltage_value
    global entry_ch4_8_set_voltage_value

    global entry_ch5_1_set_voltage_value
    global entry_ch5_2_set_voltage_value
    global entry_ch5_3_set_voltage_value
    global entry_ch5_4_set_voltage_value
    global entry_ch5_5_set_voltage_value
    global entry_ch5_6_set_voltage_value
    global entry_ch5_7_set_voltage_value
    global entry_ch5_8_set_voltage_value

    global entry_ch6_1_set_voltage_value
    global entry_ch6_2_set_voltage_value
    global entry_ch6_3_set_voltage_value
    global entry_ch6_4_set_voltage_value
    global entry_ch6_5_set_voltage_value
    global entry_ch6_6_set_voltage_value
    global entry_ch6_7_set_voltage_value
    global entry_ch6_8_set_voltage_value

    global entry_ch7_1_set_voltage_value
    global entry_ch7_2_set_voltage_value
    global entry_ch7_3_set_voltage_value
    global entry_ch7_4_set_voltage_value
    global entry_ch7_5_set_voltage_value
    global entry_ch7_6_set_voltage_value
    global entry_ch7_7_set_voltage_value
    global entry_ch7_8_set_voltage_value

    global entry_ch8_1_set_voltage_value
    global entry_ch8_2_set_voltage_value
    global entry_ch8_3_set_voltage_value
    global entry_ch8_4_set_voltage_value
    global entry_ch8_5_set_voltage_value
    global entry_ch8_6_set_voltage_value
    global entry_ch8_7_set_voltage_value
    global entry_ch8_8_set_voltage_value

    global ch1_1_signal_ntc
    global ch1_2_signal_ntc
    global ch1_3_signal_ntc
    global ch1_4_signal_ntc
    global ch1_5_signal_ntc
    global ch1_6_signal_ntc
    global ch1_7_signal_ntc
    global ch1_8_signal_ntc

    global ch2_1_signal_ntc
    global ch2_2_signal_ntc
    global ch2_3_signal_ntc
    global ch2_4_signal_ntc
    global ch2_5_signal_ntc
    global ch2_6_signal_ntc
    global ch2_7_signal_ntc
    global ch2_8_signal_ntc

    global ch3_1_signal_ntc
    global ch3_2_signal_ntc
    global ch3_3_signal_ntc
    global ch3_4_signal_ntc
    global ch3_5_signal_ntc
    global ch3_6_signal_ntc
    global ch3_7_signal_ntc
    global ch3_8_signal_ntc

    global ch4_1_signal_ntc
    global ch4_2_signal_ntc
    global ch4_3_signal_ntc
    global ch4_4_signal_ntc
    global ch4_5_signal_ntc
    global ch4_6_signal_ntc
    global ch4_7_signal_ntc
    global ch4_8_signal_ntc

    global ch5_1_signal_ntc
    global ch5_2_signal_ntc
    global ch5_3_signal_ntc
    global ch5_4_signal_ntc
    global ch5_5_signal_ntc
    global ch5_6_signal_ntc
    global ch5_7_signal_ntc
    global ch5_8_signal_ntc

    global ch6_1_signal_ntc
    global ch6_2_signal_ntc
    global ch6_3_signal_ntc
    global ch6_4_signal_ntc
    global ch6_5_signal_ntc
    global ch6_6_signal_ntc
    global ch6_7_signal_ntc
    global ch6_8_signal_ntc

    global ch7_1_signal_ntc
    global ch7_2_signal_ntc
    global ch7_3_signal_ntc
    global ch7_4_signal_ntc
    global ch7_5_signal_ntc
    global ch7_6_signal_ntc
    global ch7_7_signal_ntc
    global ch7_8_signal_ntc

    global ch8_1_signal_ntc
    global ch8_2_signal_ntc
    global ch8_3_signal_ntc
    global ch8_4_signal_ntc
    global ch8_5_signal_ntc
    global ch8_6_signal_ntc
    global ch8_7_signal_ntc
    global ch8_8_signal_ntc

    ch1_1_stop_commend = "010600000000A5"
    ch1_2_stop_commend = "010601000000A5"
    ch1_3_stop_commend = "010602000000A5"
    ch1_4_stop_commend = "010603000000A5"
    ch1_5_stop_commend = "010604000000A5"
    ch1_6_stop_commend = "010605000000A5"
    ch1_7_stop_commend = "010606000000A5"
    ch1_8_stop_commend = "010607000000A5"

    ch2_1_stop_commend = "020600000000A5"
    ch2_2_stop_commend = "020601000000A5"
    ch2_3_stop_commend = "020602000000A5"
    ch2_4_stop_commend = "020603000000A5"
    ch2_5_stop_commend = "020604000000A5"
    ch2_6_stop_commend = "020605000000A5"
    ch2_7_stop_commend = "020606000000A5"
    ch2_8_stop_commend = "020607000000A5"

    ch3_1_stop_commend = "030600000000A5"
    ch3_2_stop_commend = "030601000000A5"
    ch3_3_stop_commend = "030602000000A5"
    ch3_4_stop_commend = "030603000000A5"
    ch3_5_stop_commend = "030604000000A5"
    ch3_6_stop_commend = "030605000000A5"
    ch3_7_stop_commend = "030606000000A5"
    ch3_8_stop_commend = "030607000000A5"

    ch4_1_stop_commend = "040600000000A5"
    ch4_2_stop_commend = "040601000000A5"
    ch4_3_stop_commend = "040602000000A5"
    ch4_4_stop_commend = "040603000000A5"
    ch4_5_stop_commend = "040604000000A5"
    ch4_6_stop_commend = "040605000000A5"
    ch4_7_stop_commend = "040606000000A5"
    ch4_8_stop_commend = "040607000000A5"

    ch5_1_stop_commend = "050600000000A5"
    ch5_2_stop_commend = "050601000000A5"
    ch5_3_stop_commend = "050602000000A5"
    ch5_4_stop_commend = "050603000000A5"
    ch5_5_stop_commend = "050604000000A5"
    ch5_6_stop_commend = "050605000000A5"
    ch5_7_stop_commend = "050606000000A5"
    ch5_8_stop_commend = "050607000000A5"

    ch6_1_stop_commend = "060600000000A5"
    ch6_2_stop_commend = "060601000000A5"
    ch6_3_stop_commend = "060602000000A5"
    ch6_4_stop_commend = "060603000000A5"
    ch6_5_stop_commend = "060604000000A5"
    ch6_6_stop_commend = "060605000000A5"
    ch6_7_stop_commend = "060606000000A5"
    ch6_8_stop_commend = "060607000000A5"

    ch7_1_stop_commend = "070600000000A5"
    ch7_2_stop_commend = "070601000000A5"
    ch7_3_stop_commend = "070602000000A5"
    ch7_4_stop_commend = "070603000000A5"
    ch7_5_stop_commend = "070604000000A5"
    ch7_6_stop_commend = "070605000000A5"
    ch7_7_stop_commend = "070606000000A5"
    ch7_8_stop_commend = "070607000000A5"

    ch8_1_stop_commend = "080600000000A5"
    ch8_2_stop_commend = "080601000000A5"
    ch8_3_stop_commend = "080602000000A5"
    ch8_4_stop_commend = "080603000000A5"
    ch8_5_stop_commend = "080604000000A5"
    ch8_6_stop_commend = "080605000000A5"
    ch8_7_stop_commend = "080606000000A5"
    ch8_8_stop_commend = "080607000000A5"

    if ch_stop_name == "ch1_1":
        if not ch1_1_start_signal:
            mutex.acquire()
            ser.stop(com, ch1_1_stop_commend)
            mutex.release()
            # ch1_1_signal = 0

            # time.sleep(0.1)

            ch1_readcommend_stop = "010300000000A5"
            ### 加锁读取数据
            ### 数据处理
            mutex.acquire()
            ch1_read_data_stop = ser.readdata(com, ch1_readcommend_stop)
            mutex.release()

            mutex_readenvironmenttemperature.acquire()
            ch1_1_environment_temperature_end = ser.readenvironmenttemperature(com1)
            mutex_readenvironmenttemperature.release()
            ch1_1_log.append(
                ["Stop_Environment_Temperature(℃):", ch1_1_environment_temperature_end]
            )

            print("ch1_1_stop")
            ch1_1_logprocess()
            ch1_1_start_signal = True

            if ch1_read_data_stop == "FF":
                ch1_1_data[2] = "通信异常"
                ch1_1_error_data == "通信异常"
                ch1_1_state_value["text"] = "通信异常"
                ch1_1_state_value["bg"] = "red"
            else:
                ch1_1_data[2] = int(hex(ch1_read_data_stop[2])[2:])
                if ch1_1_data[2] == 0:
                    ch1_1_data[2] = "待机状态"
                    ch1_1_error_data == "待机状态"
                    ch1_1_state_value["text"] = "待机状态"
                    ch1_1_state_value["bg"] = "#919191"

            entry_ch1_1["state"] = "normal"
            entry_ch1_1_set_voltage_value["state"] = "normal"
            ch1_1_signal_ntc = 0
        else:
            messagebox.showinfo("错误", "通道1-1未开始测试")

    if ch_stop_name == "ch1_2":
        if not ch1_2_start_signal:
            mutex.acquire()
            ser.stop(com, ch1_2_stop_commend)
            mutex.release()
            # ch1_2_signal = 0

            # time.sleep(0.1)

            ch1_readcommend_stop = "010300000000A5"
            ### 加锁读取数据
            ### 数据处理
            mutex.acquire()
            ch1_read_data_stop = ser.readdata(com, ch1_readcommend_stop)
            mutex.release()

            mutex_readenvironmenttemperature.acquire()
            ch1_2_environment_temperature_end = ser.readenvironmenttemperature(com1)
            mutex_readenvironmenttemperature.release()
            ch1_2_log.append(
                ["Stop_Environment_Temperature(℃):", ch1_2_environment_temperature_end]
            )

            print("ch1_2_stop")
            ch1_2_logprocess()
            ch1_2_start_signal = True

            if ch1_read_data_stop == "FF":
                ch1_2_data[2] = "通信异常"
                ch1_2_error_data == "通信异常"
                ch1_2_state_value["text"] = "通信异常"
                ch1_2_state_value["bg"] = "red"
            else:
                ch1_2_data[2] = int(hex(ch1_read_data_stop[2])[2:])
                if ch1_2_data[2] == 0:
                    ch1_2_data[2] = "待机状态"
                    ch1_2_error_data == "待机状态"
                    ch1_2_state_value["text"] = "待机状态"
                    ch1_2_state_value["bg"] = "#919191"

            entry_ch1_2["state"] = "normal"
            entry_ch1_2_set_voltage_value["state"] = "normal"
            ch1_2_signal_ntc = 0
        else:
            messagebox.showinfo("错误", "通道1-2未开始测试")

    if ch_stop_name == "ch1_3":
        if not ch1_3_start_signal:
            mutex.acquire()
            ser.stop(com, ch1_3_stop_commend)
            mutex.release()
            # ch1_3_signal = 0

            # time.sleep(0.1)

            ch1_readcommend_stop = "010300000000A5"
            ### 加锁读取数据
            ### 数据处理
            mutex.acquire()
            ch1_read_data_stop = ser.readdata(com, ch1_readcommend_stop)
            mutex.release()

            mutex_readenvironmenttemperature.acquire()
            ch1_3_environment_temperature_end = ser.readenvironmenttemperature(com1)
            mutex_readenvironmenttemperature.release()
            ch1_3_log.append(
                ["Stop_Environment_Temperature(℃):", ch1_3_environment_temperature_end]
            )

            print("ch1_3_stop")
            ch1_3_logprocess()
            ch1_3_start_signal = True

            if ch1_read_data_stop == "FF":
                ch1_3_data[2] = "通信异常"
                ch1_3_error_data == "通信异常"
                ch1_3_state_value["text"] = "通信异常"
                ch1_3_state_value["bg"] = "red"
            else:
                ch1_3_data[2] = int(hex(ch1_read_data_stop[2])[2:])
                if ch1_3_data[2] == 0:
                    ch1_3_data[2] = "待机状态"
                    ch1_3_error_data == "待机状态"
                    ch1_3_state_value["text"] = "待机状态"
                    ch1_3_state_value["bg"] = "#919191"

            entry_ch1_3["state"] = "normal"
            entry_ch1_3_set_voltage_value["state"] = "normal"
            ch1_3_signal_ntc = 0
        else:
            messagebox.showinfo("错误", "通道1-3未开始测试")

    if ch_stop_name == "ch1_4":
        if not ch1_4_start_signal:
            mutex.acquire()
            ser.stop(com, ch1_4_stop_commend)
            mutex.release()
            # ch1_4_signal = 0

            # time.sleep(0.1)

            ch1_readcommend_stop = "010300000000A5"
            ### 加锁读取数据
            ### 数据处理
            mutex.acquire()
            ch1_read_data_stop = ser.readdata(com, ch1_readcommend_stop)
            mutex.release()

            mutex_readenvironmenttemperature.acquire()
            ch1_4_environment_temperature_end = ser.readenvironmenttemperature(com1)
            mutex_readenvironmenttemperature.release()
            ch1_4_log.append(
                ["Stop_Environment_Temperature(℃):", ch1_4_environment_temperature_end]
            )

            print("ch1_4_stop")
            ch1_4_logprocess()
            ch1_4_start_signal = True

            if ch1_read_data_stop == "FF":
                ch1_4_data[2] = "通信异常"
                ch1_4_error_data == "通信异常"
                ch1_4_state_value["text"] = "通信异常"
                ch1_4_state_value["bg"] = "red"
            else:
                ch1_4_data[2] = int(hex(ch1_read_data_stop[2])[2:])
                if ch1_4_data[2] == 0:
                    ch1_4_data[2] = "待机状态"
                    ch1_4_error_data == "待机状态"
                    ch1_4_state_value["text"] = "待机状态"
                    ch1_4_state_value["bg"] = "#919191"

            entry_ch1_4["state"] = "normal"
            entry_ch1_4_set_voltage_value["state"] = "normal"
            ch1_4_signal_ntc = 0
        else:
            messagebox.showinfo("错误", "通道1-4未开始测试")

    if ch_stop_name == "ch1_5":
        if not ch1_5_start_signal:
            mutex.acquire()
            ser.stop(com, ch1_5_stop_commend)
            mutex.release()
            # ch1_5_signal = 0

            # time.sleep(0.1)

            ch1_readcommend_stop = "010300000000A5"
            ### 加锁读取数据
            ### 数据处理
            mutex.acquire()
            ch1_read_data_stop = ser.readdata(com, ch1_readcommend_stop)
            mutex.release()

            mutex_readenvironmenttemperature.acquire()
            ch1_5_environment_temperature_end = ser.readenvironmenttemperature(com1)
            mutex_readenvironmenttemperature.release()
            ch1_5_log.append(
                ["Stop_Environment_Temperature(℃):", ch1_5_environment_temperature_end]
            )

            print("ch1_5_stop")
            ch1_5_logprocess()
            ch1_5_start_signal = True

            if ch1_read_data_stop == "FF":
                ch1_5_data[2] = "通信异常"
                ch1_5_error_data == "通信异常"
                ch1_5_state_value["text"] = "通信异常"
                ch1_5_state_value["bg"] = "red"
            else:
                ch1_5_data[2] = int(hex(ch1_read_data_stop[2])[2:])
                if ch1_5_data[2] == 0:
                    ch1_5_data[2] = "待机状态"
                    ch1_5_error_data == "待机状态"
                    ch1_5_state_value["text"] = "待机状态"
                    ch1_5_state_value["bg"] = "#919191"

            entry_ch1_5["state"] = "normal"
            entry_ch1_5_set_voltage_value["state"] = "normal"
            ch1_5_signal_ntc = 0
        else:
            messagebox.showinfo("错误", "通道1-5未开始测试")

    if ch_stop_name == "ch1_6":
        if not ch1_6_start_signal:
            mutex.acquire()
            ser.stop(com, ch1_6_stop_commend)
            mutex.release()
            # ch1_6_signal = 0

            # time.sleep(0.1)

            ch1_readcommend_stop = "010300000000A5"
            ### 加锁读取数据
            ### 数据处理
            mutex.acquire()
            ch1_read_data_stop = ser.readdata(com, ch1_readcommend_stop)
            mutex.release()

            mutex_readenvironmenttemperature.acquire()
            ch1_6_environment_temperature_end = ser.readenvironmenttemperature(com1)
            mutex_readenvironmenttemperature.release()
            ch1_6_log.append(
                ["Stop_Environment_Temperature(℃):", ch1_6_environment_temperature_end]
            )

            print("ch1_6_stop")
            ch1_6_logprocess()
            ch1_6_start_signal = True

            if ch1_read_data_stop == "FF":
                ch1_6_data[2] = "通信异常"
                ch1_6_error_data == "通信异常"
                ch1_6_state_value["text"] = "通信异常"
                ch1_6_state_value["bg"] = "red"
            else:
                ch1_6_data[2] = int(hex(ch1_read_data_stop[2])[2:])
                if ch1_6_data[2] == 0:
                    ch1_6_data[2] = "待机状态"
                    ch1_6_error_data == "待机状态"
                    ch1_6_state_value["text"] = "待机状态"
                    ch1_6_state_value["bg"] = "#919191"

            entry_ch1_6["state"] = "normal"
            entry_ch1_6_set_voltage_value["state"] = "normal"
            ch1_6_signal_ntc = 0
        else:
            messagebox.showinfo("错误", "通道1-6未开始测试")

    if ch_stop_name == "ch1_7":
        if not ch1_7_start_signal:
            mutex.acquire()
            ser.stop(com, ch1_7_stop_commend)
            mutex.release()
            # ch1_7_signal = 0

            # time.sleep(0.1)

            ch1_readcommend_stop = "010300000000A5"
            ### 加锁读取数据
            ### 数据处理
            mutex.acquire()
            ch1_read_data_stop = ser.readdata(com, ch1_readcommend_stop)
            mutex.release()

            mutex_readenvironmenttemperature.acquire()
            ch1_7_environment_temperature_end = ser.readenvironmenttemperature(com1)
            mutex_readenvironmenttemperature.release()
            ch1_7_log.append(
                ["Stop_Environment_Temperature(℃):", ch1_7_environment_temperature_end]
            )

            print("ch1_7_stop")
            ch1_7_logprocess()
            ch1_7_start_signal = True

            if ch1_read_data_stop == "FF":
                ch1_7_data[2] = "通信异常"
                ch1_7_error_data == "通信异常"
                ch1_7_state_value["text"] = "通信异常"
                ch1_7_state_value["bg"] = "red"
            else:
                ch1_7_data[2] = int(hex(ch1_read_data_stop[2])[2:])
                if ch1_7_data[2] == 0:
                    ch1_7_data[2] = "待机状态"
                    ch1_7_error_data == "待机状态"
                    ch1_7_state_value["text"] = "待机状态"
                    ch1_7_state_value["bg"] = "#919191"

            entry_ch1_7["state"] = "normal"
            entry_ch1_7_set_voltage_value["state"] = "normal"
            ch1_7_signal_ntc = 0
        else:
            messagebox.showinfo("错误", "通道1-7未开始测试")

    if ch_stop_name == "ch1_8":
        if not ch1_8_start_signal:
            mutex.acquire()
            ser.stop(com, ch1_8_stop_commend)
            mutex.release()
            # ch1_8_signal = 0

            # time.sleep(0.1)

            ch1_readcommend_stop = "010300000000A5"
            ### 加锁读取数据
            ### 数据处理
            mutex.acquire()
            ch1_read_data_stop = ser.readdata(com, ch1_readcommend_stop)
            mutex.release()

            mutex_readenvironmenttemperature.acquire()
            ch1_8_environment_temperature_end = ser.readenvironmenttemperature(com1)
            mutex_readenvironmenttemperature.release()
            ch1_8_log.append(
                ["Stop_Environment_Temperature(℃):", ch1_8_environment_temperature_end]
            )

            print("ch1_8_stop")
            ch1_8_logprocess()
            ch1_8_start_signal = True

            if ch1_read_data_stop == "FF":
                ch1_8_data[2] = "通信异常"
                ch1_8_error_data == "通信异常"
                ch1_8_state_value["text"] = "通信异常"
                ch1_8_state_value["bg"] = "red"
            else:
                ch1_8_data[2] = int(hex(ch1_read_data_stop[2])[2:])
                if ch1_8_data[2] == 0:
                    ch1_8_data[2] = "待机状态"
                    ch1_8_error_data == "待机状态"
                    ch1_8_state_value["text"] = "待机状态"
                    ch1_8_state_value["bg"] = "#919191"

            entry_ch1_8["state"] = "normal"
            entry_ch1_8_set_voltage_value["state"] = "normal"
            ch1_8_signal_ntc = 0
        else:
            messagebox.showinfo("错误", "通道1-8未开始测试")

    if ch_stop_name == "ch2_1":
        if not ch2_1_start_signal:
            mutex.acquire()
            ser.stop(com, ch2_1_stop_commend)
            mutex.release()
            # ch2_1_signal = 0

            # time.sleep(0.1)

            ch2_readcommend_stop = "020300000000A5"
            ### 加锁读取数据
            ### 数据处理
            mutex.acquire()
            ch2_read_data_stop = ser.readdata(com, ch2_readcommend_stop)
            mutex.release()

            mutex_readenvironmenttemperature.acquire()
            ch2_1_environment_temperature_end = ser.readenvironmenttemperature(com1)
            mutex_readenvironmenttemperature.release()
            ch2_1_log.append(
                ["Stop_Environment_Temperature(℃):", ch2_1_environment_temperature_end]
            )

            print("ch2_1_stop")
            ch2_1_logprocess()
            ch2_1_start_signal = True

            if ch2_read_data_stop == "FF":
                ch2_1_data[2] = "通信异常"
                ch2_1_error_data == "通信异常"
                ch2_1_state_value["text"] = "通信异常"
                ch2_1_state_value["bg"] = "red"
            else:
                ch2_1_data[2] = int(hex(ch2_read_data_stop[2])[2:])
                if ch2_1_data[2] == 0:
                    ch2_1_data[2] = "待机状态"
                    ch2_1_error_data == "待机状态"
                    ch2_1_state_value["text"] = "待机状态"
                    ch2_1_state_value["bg"] = "#919191"

            entry_ch2_1["state"] = "normal"
            entry_ch2_1_set_voltage_value["state"] = "normal"
            ch2_1_signal_ntc = 0
        else:
            messagebox.showinfo("错误", "通道2-1未开始测试")

    if ch_stop_name == "ch2_2":
        if not ch2_2_start_signal:
            mutex.acquire()
            ser.stop(com, ch2_2_stop_commend)
            mutex.release()
            # ch2_2_signal = 0

            # time.sleep(0.1)

            ch2_readcommend_stop = "020300000000A5"
            ### 加锁读取数据
            ### 数据处理
            mutex.acquire()
            ch2_read_data_stop = ser.readdata(com, ch2_readcommend_stop)
            mutex.release()

            mutex_readenvironmenttemperature.acquire()
            ch2_2_environment_temperature_end = ser.readenvironmenttemperature(com1)
            mutex_readenvironmenttemperature.release()
            ch2_2_log.append(
                ["Stop_Environment_Temperature(℃):", ch2_2_environment_temperature_end]
            )

            print("ch2_2_stop")
            ch2_2_logprocess()
            ch2_2_start_signal = True

            if ch2_read_data_stop == "FF":
                ch2_2_data[2] = "通信异常"
                ch2_2_error_data == "通信异常"
                ch2_2_state_value["text"] = "通信异常"
                ch2_2_state_value["bg"] = "red"
            else:
                ch2_2_data[2] = int(hex(ch2_read_data_stop[2])[2:])
                if ch2_2_data[2] == 0:
                    ch2_2_data[2] = "待机状态"
                    ch2_2_error_data == "待机状态"
                    ch2_2_state_value["text"] = "待机状态"
                    ch2_2_state_value["bg"] = "#919191"

            entry_ch2_2["state"] = "normal"
            entry_ch2_2_set_voltage_value["state"] = "normal"
            ch2_2_signal_ntc = 0
        else:
            messagebox.showinfo("错误", "通道2-2未开始测试")

    if ch_stop_name == "ch2_3":
        if not ch2_3_start_signal:
            mutex.acquire()
            ser.stop(com, ch2_3_stop_commend)
            mutex.release()
            # ch2_3_signal = 0

            # time.sleep(0.1)

            ch2_readcommend_stop = "020300000000A5"
            ### 加锁读取数据
            ### 数据处理
            mutex.acquire()
            ch2_read_data_stop = ser.readdata(com, ch2_readcommend_stop)
            mutex.release()

            mutex_readenvironmenttemperature.acquire()
            ch2_3_environment_temperature_end = ser.readenvironmenttemperature(com1)
            mutex_readenvironmenttemperature.release()
            ch2_3_log.append(
                ["Stop_Environment_Temperature(℃):", ch2_3_environment_temperature_end]
            )

            print("ch2_3_stop")
            ch2_3_logprocess()
            ch2_3_start_signal = True

            if ch2_read_data_stop == "FF":
                ch2_3_data[2] = "通信异常"
                ch2_3_error_data == "通信异常"
                ch2_3_state_value["text"] = "通信异常"
                ch2_3_state_value["bg"] = "red"
            else:
                ch2_3_data[2] = int(hex(ch2_read_data_stop[2])[2:])
                if ch2_3_data[2] == 0:
                    ch2_3_data[2] = "待机状态"
                    ch2_3_error_data == "待机状态"
                    ch2_3_state_value["text"] = "待机状态"
                    ch2_3_state_value["bg"] = "#919191"

            entry_ch2_3["state"] = "normal"
            entry_ch2_3_set_voltage_value["state"] = "normal"
            ch2_3_signal_ntc = 0
        else:
            messagebox.showinfo("错误", "通道2-3未开始测试")

    if ch_stop_name == "ch2_4":
        if not ch2_4_start_signal:
            mutex.acquire()
            ser.stop(com, ch2_4_stop_commend)
            mutex.release()
            # ch2_4_signal = 0

            # time.sleep(0.1)

            ch2_readcommend_stop = "020300000000A5"
            ### 加锁读取数据
            ### 数据处理
            mutex.acquire()
            ch2_read_data_stop = ser.readdata(com, ch2_readcommend_stop)
            mutex.release()

            mutex_readenvironmenttemperature.acquire()
            ch2_4_environment_temperature_end = ser.readenvironmenttemperature(com1)
            mutex_readenvironmenttemperature.release()
            ch2_4_log.append(
                ["Stop_Environment_Temperature(℃):", ch2_4_environment_temperature_end]
            )

            print("ch2_4_stop")
            ch2_4_logprocess()
            ch2_4_start_signal = True

            if ch2_read_data_stop == "FF":
                ch2_4_data[2] = "通信异常"
                ch2_4_error_data == "通信异常"
                ch2_4_state_value["text"] = "通信异常"
                ch2_4_state_value["bg"] = "red"
            else:
                ch2_4_data[2] = int(hex(ch2_read_data_stop[2])[2:])
                if ch2_4_data[2] == 0:
                    ch2_4_data[2] = "待机状态"
                    ch2_4_error_data == "待机状态"
                    ch2_4_state_value["text"] = "待机状态"
                    ch2_4_state_value["bg"] = "#919191"

            entry_ch2_4["state"] = "normal"
            entry_ch2_4_set_voltage_value["state"] = "normal"
            ch2_4_signal_ntc = 0
        else:
            messagebox.showinfo("错误", "通道2-4未开始测试")

    if ch_stop_name == "ch2_5":
        if not ch2_5_start_signal:
            mutex.acquire()
            ser.stop(com, ch2_5_stop_commend)
            mutex.release()
            # ch2_5_signal = 0

            # time.sleep(0.1)

            ch2_readcommend_stop = "020300000000A5"
            ### 加锁读取数据
            ### 数据处理
            mutex.acquire()
            ch2_read_data_stop = ser.readdata(com, ch2_readcommend_stop)
            mutex.release()

            mutex_readenvironmenttemperature.acquire()
            ch2_5_environment_temperature_end = ser.readenvironmenttemperature(com1)
            mutex_readenvironmenttemperature.release()
            ch2_5_log.append(
                ["Stop_Environment_Temperature(℃):", ch2_5_environment_temperature_end]
            )

            print("ch2_5_stop")
            ch2_5_logprocess()
            ch2_5_start_signal = True

            if ch2_read_data_stop == "FF":
                ch2_5_data[2] = "通信异常"
                ch2_5_error_data == "通信异常"
                ch2_5_state_value["text"] = "通信异常"
                ch2_5_state_value["bg"] = "red"
            else:
                ch2_5_data[2] = int(hex(ch2_read_data_stop[2])[2:])
                if ch2_5_data[2] == 0:
                    ch2_5_data[2] = "待机状态"
                    ch2_5_error_data == "待机状态"
                    ch2_5_state_value["text"] = "待机状态"
                    ch2_5_state_value["bg"] = "#919191"

            entry_ch2_5["state"] = "normal"
            entry_ch2_5_set_voltage_value["state"] = "normal"
            ch2_5_signal_ntc = 0
        else:
            messagebox.showinfo("错误", "通道2-5未开始测试")

    if ch_stop_name == "ch2_6":
        if not ch2_6_start_signal:
            mutex.acquire()
            ser.stop(com, ch2_6_stop_commend)
            mutex.release()
            # ch2_6_signal = 0

            # time.sleep(0.1)

            ch2_readcommend_stop = "020300000000A5"
            ### 加锁读取数据
            ### 数据处理
            mutex.acquire()
            ch2_read_data_stop = ser.readdata(com, ch2_readcommend_stop)
            mutex.release()

            mutex_readenvironmenttemperature.acquire()
            ch2_6_environment_temperature_end = ser.readenvironmenttemperature(com1)
            mutex_readenvironmenttemperature.release()
            ch2_6_log.append(
                ["Stop_Environment_Temperature(℃):", ch2_6_environment_temperature_end]
            )

            print("ch2_6_stop")
            ch2_6_logprocess()
            ch2_6_start_signal = True

            if ch2_read_data_stop == "FF":
                ch2_6_data[2] = "通信异常"
                ch2_6_error_data == "通信异常"
                ch2_6_state_value["text"] = "通信异常"
                ch2_6_state_value["bg"] = "red"
            else:
                ch2_6_data[2] = int(hex(ch2_read_data_stop[2])[2:])
                if ch2_6_data[2] == 0:
                    ch2_6_data[2] = "待机状态"
                    ch2_6_error_data == "待机状态"
                    ch2_6_state_value["text"] = "待机状态"
                    ch2_6_state_value["bg"] = "#919191"

            entry_ch2_6["state"] = "normal"
            entry_ch2_6_set_voltage_value["state"] = "normal"
            ch2_6_signal_ntc = 0
        else:
            messagebox.showinfo("错误", "通道2-6未开始测试")

    if ch_stop_name == "ch2_7":
        if not ch2_7_start_signal:
            mutex.acquire()
            ser.stop(com, ch2_7_stop_commend)
            mutex.release()
            # ch2_7_signal = 0

            # time.sleep(0.1)

            ch2_readcommend_stop = "020300000000A5"
            ### 加锁读取数据
            ### 数据处理
            mutex.acquire()
            ch2_read_data_stop = ser.readdata(com, ch2_readcommend_stop)
            mutex.release()

            mutex_readenvironmenttemperature.acquire()
            ch2_7_environment_temperature_end = ser.readenvironmenttemperature(com1)
            mutex_readenvironmenttemperature.release()
            ch2_7_log.append(
                ["Stop_Environment_Temperature(℃):", ch2_7_environment_temperature_end]
            )

            print("ch2_7_stop")
            ch2_7_logprocess()
            ch2_7_start_signal = True

            if ch2_read_data_stop == "FF":
                ch2_7_data[2] = "通信异常"
                ch2_7_error_data == "通信异常"
                ch2_7_state_value["text"] = "通信异常"
                ch2_7_state_value["bg"] = "red"
            else:
                ch2_7_data[2] = int(hex(ch2_read_data_stop[2])[2:])
                if ch2_7_data[2] == 0:
                    ch2_7_data[2] = "待机状态"
                    ch2_7_error_data == "待机状态"
                    ch2_7_state_value["text"] = "待机状态"
                    ch2_7_state_value["bg"] = "#919191"

            entry_ch2_7["state"] = "normal"
            entry_ch2_7_set_voltage_value["state"] = "normal"
            ch2_7_signal_ntc = 0
        else:
            messagebox.showinfo("错误", "通道2-7未开始测试")

    if ch_stop_name == "ch2_8":
        if not ch2_8_start_signal:
            mutex.acquire()
            ser.stop(com, ch2_8_stop_commend)
            mutex.release()
            # ch2_8_signal = 0

            # time.sleep(0.1)

            ch2_readcommend_stop = "020300000000A5"
            ### 加锁读取数据
            ### 数据处理
            mutex.acquire()
            ch2_read_data_stop = ser.readdata(com, ch2_readcommend_stop)
            mutex.release()

            mutex_readenvironmenttemperature.acquire()
            ch2_8_environment_temperature_end = ser.readenvironmenttemperature(com1)
            mutex_readenvironmenttemperature.release()
            ch2_8_log.append(
                ["Stop_Environment_Temperature(℃):", ch2_8_environment_temperature_end]
            )

            print("ch2_8_stop")
            ch2_8_logprocess()
            ch2_8_start_signal = True

            if ch2_read_data_stop == "FF":
                ch2_8_data[2] = "通信异常"
                ch2_8_error_data == "通信异常"
                ch2_8_state_value["text"] = "通信异常"
                ch2_8_state_value["bg"] = "red"
            else:
                ch2_8_data[2] = int(hex(ch2_read_data_stop[2])[2:])
                if ch2_8_data[2] == 0:
                    ch2_8_data[2] = "待机状态"
                    ch2_8_error_data == "待机状态"
                    ch2_8_state_value["text"] = "待机状态"
                    ch2_8_state_value["bg"] = "#919191"

            entry_ch2_8["state"] = "normal"
            entry_ch2_8_set_voltage_value["state"] = "normal"
            ch2_8_signal_ntc = 0
        else:
            messagebox.showinfo("错误", "通道2-8未开始测试")

    if ch_stop_name == "ch3_1":
        if not ch3_1_start_signal:
            mutex.acquire()
            ser.stop(com, ch3_1_stop_commend)
            mutex.release()
            # ch3_1_signal = 0

            # time.sleep(0.1)

            ch3_readcommend_stop = "030300000000A5"
            ### 加锁读取数据
            ### 数据处理
            mutex.acquire()
            ch3_read_data_stop = ser.readdata(com, ch3_readcommend_stop)
            mutex.release()

            mutex_readenvironmenttemperature.acquire()
            ch3_1_environment_temperature_end = ser.readenvironmenttemperature(com1)
            mutex_readenvironmenttemperature.release()
            ch3_1_log.append(
                ["Stop_Environment_Temperature(℃):", ch3_1_environment_temperature_end]
            )

            print("ch3_1_stop")
            ch3_1_logprocess()
            ch3_1_start_signal = True

            if ch3_read_data_stop == "FF":
                ch3_1_data[2] = "通信异常"
                ch3_1_error_data == "通信异常"
                ch3_1_state_value["text"] = "通信异常"
                ch3_1_state_value["bg"] = "red"
            else:
                ch3_1_data[2] = int(hex(ch3_read_data_stop[2])[2:])
                if ch3_1_data[2] == 0:
                    ch3_1_data[2] = "待机状态"
                    ch3_1_error_data == "待机状态"
                    ch3_1_state_value["text"] = "待机状态"
                    ch3_1_state_value["bg"] = "#919191"

            entry_ch3_1["state"] = "normal"
            entry_ch3_1_set_voltage_value["state"] = "normal"
            ch3_1_signal_ntc = 0
        else:
            messagebox.showinfo("错误", "通道3-1未开始测试")

    if ch_stop_name == "ch3_2":
        if not ch3_2_start_signal:
            mutex.acquire()
            ser.stop(com, ch3_2_stop_commend)
            mutex.release()
            # ch3_2_signal = 0

            # time.sleep(0.1)

            ch3_readcommend_stop = "030300000000A5"
            ### 加锁读取数据
            ### 数据处理
            mutex.acquire()
            ch3_read_data_stop = ser.readdata(com, ch3_readcommend_stop)
            mutex.release()

            mutex_readenvironmenttemperature.acquire()
            ch3_2_environment_temperature_end = ser.readenvironmenttemperature(com1)
            mutex_readenvironmenttemperature.release()
            ch3_2_log.append(
                ["Stop_Environment_Temperature(℃):", ch3_2_environment_temperature_end]
            )

            print("ch3_2_stop")
            ch3_2_logprocess()
            ch3_2_start_signal = True

            if ch3_read_data_stop == "FF":
                ch3_2_data[2] = "通信异常"
                ch3_2_error_data == "通信异常"
                ch3_2_state_value["text"] = "通信异常"
                ch3_2_state_value["bg"] = "red"
            else:
                ch3_2_data[2] = int(hex(ch3_read_data_stop[2])[2:])
                if ch3_2_data[2] == 0:
                    ch3_2_data[2] = "待机状态"
                    ch3_2_error_data == "待机状态"
                    ch3_2_state_value["text"] = "待机状态"
                    ch3_2_state_value["bg"] = "#919191"

            entry_ch3_2["state"] = "normal"
            entry_ch3_2_set_voltage_value["state"] = "normal"
            ch3_2_signal_ntc = 0
        else:
            messagebox.showinfo("错误", "通道3-2未开始测试")

    if ch_stop_name == "ch3_3":
        if not ch3_3_start_signal:
            mutex.acquire()
            ser.stop(com, ch3_3_stop_commend)
            mutex.release()
            # ch3_3_signal = 0

            # time.sleep(0.1)

            ch3_readcommend_stop = "030300000000A5"
            ### 加锁读取数据
            ### 数据处理
            mutex.acquire()
            ch3_read_data_stop = ser.readdata(com, ch3_readcommend_stop)
            mutex.release()

            mutex_readenvironmenttemperature.acquire()
            ch3_3_environment_temperature_end = ser.readenvironmenttemperature(com1)
            mutex_readenvironmenttemperature.release()
            ch3_3_log.append(
                ["Stop_Environment_Temperature(℃):", ch3_3_environment_temperature_end]
            )

            print("ch3_3_stop")
            ch3_3_logprocess()
            ch3_3_start_signal = True

            if ch3_read_data_stop == "FF":
                ch3_3_data[2] = "通信异常"
                ch3_3_error_data == "通信异常"
                ch3_3_state_value["text"] = "通信异常"
                ch3_3_state_value["bg"] = "red"
            else:
                ch3_3_data[2] = int(hex(ch3_read_data_stop[2])[2:])
                if ch3_3_data[2] == 0:
                    ch3_3_data[2] = "待机状态"
                    ch3_3_error_data == "待机状态"
                    ch3_3_state_value["text"] = "待机状态"
                    ch3_3_state_value["bg"] = "#919191"

            entry_ch3_3["state"] = "normal"
            entry_ch3_3_set_voltage_value["state"] = "normal"
            ch3_3_signal_ntc = 0
        else:
            messagebox.showinfo("错误", "通道3-3未开始测试")

    if ch_stop_name == "ch3_4":
        if not ch3_4_start_signal:
            mutex.acquire()
            ser.stop(com, ch3_4_stop_commend)
            mutex.release()
            # ch3_4_signal = 0

            # time.sleep(0.1)

            ch3_readcommend_stop = "030300000000A5"
            ### 加锁读取数据
            ### 数据处理
            mutex.acquire()
            ch3_read_data_stop = ser.readdata(com, ch3_readcommend_stop)
            mutex.release()

            mutex_readenvironmenttemperature.acquire()
            ch3_4_environment_temperature_end = ser.readenvironmenttemperature(com1)
            mutex_readenvironmenttemperature.release()
            ch3_4_log.append(
                ["Stop_Environment_Temperature(℃):", ch3_4_environment_temperature_end]
            )

            print("ch3_4_stop")
            ch3_4_logprocess()
            ch3_4_start_signal = True

            if ch3_read_data_stop == "FF":
                ch3_4_data[2] = "通信异常"
                ch3_4_error_data == "通信异常"
                ch3_4_state_value["text"] = "通信异常"
                ch3_4_state_value["bg"] = "red"
            else:
                ch3_4_data[2] = int(hex(ch3_read_data_stop[2])[2:])
                if ch3_4_data[2] == 0:
                    ch3_4_data[2] = "待机状态"
                    ch3_4_error_data == "待机状态"
                    ch3_4_state_value["text"] = "待机状态"
                    ch3_4_state_value["bg"] = "#919191"

            entry_ch3_4["state"] = "normal"
            entry_ch3_4_set_voltage_value["state"] = "normal"
            ch3_4_signal_ntc = 0
        else:
            messagebox.showinfo("错误", "通道3-4未开始测试")

    if ch_stop_name == "ch3_5":
        if not ch3_5_start_signal:
            mutex.acquire()
            ser.stop(com, ch3_5_stop_commend)
            mutex.release()
            # ch3_5_signal = 0

            # time.sleep(0.1)

            ch3_readcommend_stop = "030300000000A5"
            ### 加锁读取数据
            ### 数据处理
            mutex.acquire()
            ch3_read_data_stop = ser.readdata(com, ch3_readcommend_stop)
            mutex.release()

            mutex_readenvironmenttemperature.acquire()
            ch3_5_environment_temperature_end = ser.readenvironmenttemperature(com1)
            mutex_readenvironmenttemperature.release()
            ch3_5_log.append(
                ["Stop_Environment_Temperature(℃):", ch3_5_environment_temperature_end]
            )

            print("ch3_5_stop")
            ch3_5_logprocess()
            ch3_5_start_signal = True

            if ch3_read_data_stop == "FF":
                ch3_5_data[2] = "通信异常"
                ch3_5_error_data == "通信异常"
                ch3_5_state_value["text"] = "通信异常"
                ch3_5_state_value["bg"] = "red"
            else:
                ch3_5_data[2] = int(hex(ch3_read_data_stop[2])[2:])
                if ch3_5_data[2] == 0:
                    ch3_5_data[2] = "待机状态"
                    ch3_5_error_data == "待机状态"
                    ch3_5_state_value["text"] = "待机状态"
                    ch3_5_state_value["bg"] = "#919191"

            entry_ch3_5["state"] = "normal"
            entry_ch3_5_set_voltage_value["state"] = "normal"
            ch3_5_signal_ntc = 0
        else:
            messagebox.showinfo("错误", "通道3-5未开始测试")

    if ch_stop_name == "ch3_6":
        if not ch3_6_start_signal:
            mutex.acquire()
            ser.stop(com, ch3_6_stop_commend)
            mutex.release()
            # ch3_6_signal = 0

            # time.sleep(0.1)

            ch3_readcommend_stop = "030300000000A5"
            ### 加锁读取数据
            ### 数据处理
            mutex.acquire()
            ch3_read_data_stop = ser.readdata(com, ch3_readcommend_stop)
            mutex.release()

            mutex_readenvironmenttemperature.acquire()
            ch3_6_environment_temperature_end = ser.readenvironmenttemperature(com1)
            mutex_readenvironmenttemperature.release()
            ch3_6_log.append(
                ["Stop_Environment_Temperature(℃):", ch3_6_environment_temperature_end]
            )

            print("ch3_6_stop")
            ch3_6_logprocess()
            ch3_6_start_signal = True

            if ch3_read_data_stop == "FF":
                ch3_6_data[2] = "通信异常"
                ch3_6_error_data == "通信异常"
                ch3_6_state_value["text"] = "通信异常"
                ch3_6_state_value["bg"] = "red"
            else:
                ch3_6_data[2] = int(hex(ch3_read_data_stop[2])[2:])
                if ch3_6_data[2] == 0:
                    ch3_6_data[2] = "待机状态"
                    ch3_6_error_data == "待机状态"
                    ch3_6_state_value["text"] = "待机状态"
                    ch3_6_state_value["bg"] = "#919191"

            entry_ch3_6["state"] = "normal"
            entry_ch3_6_set_voltage_value["state"] = "normal"
            ch3_6_signal_ntc = 0
        else:
            messagebox.showinfo("错误", "通道3-6未开始测试")

    if ch_stop_name == "ch3_7":
        if not ch3_7_start_signal:
            mutex.acquire()
            ser.stop(com, ch3_7_stop_commend)
            mutex.release()
            # ch3_7_signal = 0

            # time.sleep(0.1)

            ch3_readcommend_stop = "030300000000A5"
            ### 加锁读取数据
            ### 数据处理
            mutex.acquire()
            ch3_read_data_stop = ser.readdata(com, ch3_readcommend_stop)
            mutex.release()

            mutex_readenvironmenttemperature.acquire()
            ch3_7_environment_temperature_end = ser.readenvironmenttemperature(com1)
            mutex_readenvironmenttemperature.release()
            ch3_7_log.append(
                ["Stop_Environment_Temperature(℃):", ch3_7_environment_temperature_end]
            )

            print("ch3_7_stop")
            ch3_7_logprocess()
            ch3_7_start_signal = True

            if ch3_read_data_stop == "FF":
                ch3_7_data[2] = "通信异常"
                ch3_7_error_data == "通信异常"
                ch3_7_state_value["text"] = "通信异常"
                ch3_7_state_value["bg"] = "red"
            else:
                ch3_7_data[2] = int(hex(ch3_read_data_stop[2])[2:])
                if ch3_7_data[2] == 0:
                    ch3_7_data[2] = "待机状态"
                    ch3_7_error_data == "待机状态"
                    ch3_7_state_value["text"] = "待机状态"
                    ch3_7_state_value["bg"] = "#919191"

            entry_ch3_7["state"] = "normal"
            entry_ch3_7_set_voltage_value["state"] = "normal"
            ch3_7_signal_ntc = 0
        else:
            messagebox.showinfo("错误", "通道3-7未开始测试")

    if ch_stop_name == "ch3_8":
        if not ch3_8_start_signal:
            mutex.acquire()
            ser.stop(com, ch3_8_stop_commend)
            mutex.release()
            # ch3_8_signal = 0

            # time.sleep(0.1)

            ch3_readcommend_stop = "030300000000A5"
            ### 加锁读取数据
            ### 数据处理
            mutex.acquire()
            ch3_read_data_stop = ser.readdata(com, ch3_readcommend_stop)
            mutex.release()

            mutex_readenvironmenttemperature.acquire()
            ch3_8_environment_temperature_end = ser.readenvironmenttemperature(com1)
            mutex_readenvironmenttemperature.release()
            ch3_8_log.append(
                ["Stop_Environment_Temperature(℃):", ch3_8_environment_temperature_end]
            )

            print("ch3_8_stop")
            ch3_8_logprocess()
            ch3_8_start_signal = True

            if ch3_read_data_stop == "FF":
                ch3_8_data[2] = "通信异常"
                ch3_8_error_data == "通信异常"
                ch3_8_state_value["text"] = "通信异常"
                ch3_8_state_value["bg"] = "red"
            else:
                ch3_8_data[2] = int(hex(ch3_read_data_stop[2])[2:])
                if ch3_8_data[2] == 0:
                    ch3_8_data[2] = "待机状态"
                    ch3_8_error_data == "待机状态"
                    ch3_8_state_value["text"] = "待机状态"
                    ch3_8_state_value["bg"] = "#919191"

            entry_ch3_8["state"] = "normal"
            entry_ch3_8_set_voltage_value["state"] = "normal"
            ch3_8_signal_ntc = 0
        else:
            messagebox.showinfo("错误", "通道3-8未开始测试")

    if ch_stop_name == "ch4_1":
        if not ch4_1_start_signal:
            mutex.acquire()
            ser.stop(com, ch4_1_stop_commend)
            mutex.release()
            # ch4_1_signal = 0

            # time.sleep(0.1)

            ch4_readcommend_stop = "040300000000A5"
            ### 加锁读取数据
            ### 数据处理
            mutex.acquire()
            ch4_read_data_stop = ser.readdata(com, ch4_readcommend_stop)
            mutex.release()

            mutex_readenvironmenttemperature.acquire()
            ch4_1_environment_temperature_end = ser.readenvironmenttemperature(com1)
            mutex_readenvironmenttemperature.release()
            ch4_1_log.append(
                ["Stop_Environment_Temperature(℃):", ch4_1_environment_temperature_end]
            )

            print("ch4_1_stop")
            ch4_1_logprocess()
            ch4_1_start_signal = True

            if ch4_read_data_stop == "FF":
                ch4_1_data[2] = "通信异常"
                ch4_1_error_data == "通信异常"
                ch4_1_state_value["text"] = "通信异常"
                ch4_1_state_value["bg"] = "red"
            else:
                ch4_1_data[2] = int(hex(ch4_read_data_stop[2])[2:])
                if ch4_1_data[2] == 0:
                    ch4_1_data[2] = "待机状态"
                    ch4_1_error_data == "待机状态"
                    ch4_1_state_value["text"] = "待机状态"
                    ch4_1_state_value["bg"] = "#919191"

            entry_ch4_1["state"] = "normal"
            entry_ch4_1_set_voltage_value["state"] = "normal"
            ch4_1_signal_ntc = 0
        else:
            messagebox.showinfo("错误", "通道4-1未开始测试")

    if ch_stop_name == "ch4_2":
        if not ch4_2_start_signal:
            mutex.acquire()
            ser.stop(com, ch4_2_stop_commend)
            mutex.release()
            # ch4_2_signal = 0

            # time.sleep(0.1)

            ch4_readcommend_stop = "040300000000A5"
            ### 加锁读取数据
            ### 数据处理
            mutex.acquire()
            ch4_read_data_stop = ser.readdata(com, ch4_readcommend_stop)
            mutex.release()

            mutex_readenvironmenttemperature.acquire()
            ch4_2_environment_temperature_end = ser.readenvironmenttemperature(com1)
            mutex_readenvironmenttemperature.release()
            ch4_2_log.append(
                ["Stop_Environment_Temperature(℃):", ch4_2_environment_temperature_end]
            )

            print("ch4_2_stop")
            ch4_2_logprocess()
            ch4_2_start_signal = True

            if ch4_read_data_stop == "FF":
                ch4_2_data[2] = "通信异常"
                ch4_2_error_data == "通信异常"
                ch4_2_state_value["text"] = "通信异常"
                ch4_2_state_value["bg"] = "red"
            else:
                ch4_2_data[2] = int(hex(ch4_read_data_stop[2])[2:])
                if ch4_2_data[2] == 0:
                    ch4_2_data[2] = "待机状态"
                    ch4_2_error_data == "待机状态"
                    ch4_2_state_value["text"] = "待机状态"
                    ch4_2_state_value["bg"] = "#919191"

            entry_ch4_2["state"] = "normal"
            entry_ch4_2_set_voltage_value["state"] = "normal"
            ch4_2_signal_ntc = 0
        else:
            messagebox.showinfo("错误", "通道4-2未开始测试")

    if ch_stop_name == "ch4_3":
        if not ch4_3_start_signal:
            mutex.acquire()
            ser.stop(com, ch4_3_stop_commend)
            mutex.release()
            # ch4_3_signal = 0

            # time.sleep(0.1)

            ch4_readcommend_stop = "040300000000A5"
            ### 加锁读取数据
            ### 数据处理
            mutex.acquire()
            ch4_read_data_stop = ser.readdata(com, ch4_readcommend_stop)
            mutex.release()

            mutex_readenvironmenttemperature.acquire()
            ch4_3_environment_temperature_end = ser.readenvironmenttemperature(com1)
            mutex_readenvironmenttemperature.release()
            ch4_3_log.append(
                ["Stop_Environment_Temperature(℃):", ch4_3_environment_temperature_end]
            )

            print("ch4_3_stop")
            ch4_3_logprocess()
            ch4_3_start_signal = True

            if ch4_read_data_stop == "FF":
                ch4_3_data[2] = "通信异常"
                ch4_3_error_data == "通信异常"
                ch4_3_state_value["text"] = "通信异常"
                ch4_3_state_value["bg"] = "red"
            else:
                ch4_3_data[2] = int(hex(ch4_read_data_stop[2])[2:])
                if ch4_3_data[2] == 0:
                    ch4_3_data[2] = "待机状态"
                    ch4_3_error_data == "待机状态"
                    ch4_3_state_value["text"] = "待机状态"
                    ch4_3_state_value["bg"] = "#919191"

            entry_ch4_3["state"] = "normal"
            entry_ch4_3_set_voltage_value["state"] = "normal"
            ch4_3_signal_ntc = 0
        else:
            messagebox.showinfo("错误", "通道4-3未开始测试")

    if ch_stop_name == "ch4_4":
        if not ch4_4_start_signal:
            mutex.acquire()
            ser.stop(com, ch4_4_stop_commend)
            mutex.release()
            # ch4_4_signal = 0

            # time.sleep(0.1)

            ch4_readcommend_stop = "040300000000A5"
            ### 加锁读取数据
            ### 数据处理
            mutex.acquire()
            ch4_read_data_stop = ser.readdata(com, ch4_readcommend_stop)
            mutex.release()

            mutex_readenvironmenttemperature.acquire()
            ch4_4_environment_temperature_end = ser.readenvironmenttemperature(com1)
            mutex_readenvironmenttemperature.release()
            ch4_4_log.append(
                ["Stop_Environment_Temperature(℃):", ch4_4_environment_temperature_end]
            )

            print("ch4_4_stop")
            ch4_4_logprocess()
            ch4_4_start_signal = True

            if ch4_read_data_stop == "FF":
                ch4_4_data[2] = "通信异常"
                ch4_4_error_data == "通信异常"
                ch4_4_state_value["text"] = "通信异常"
                ch4_4_state_value["bg"] = "red"
            else:
                ch4_4_data[2] = int(hex(ch4_read_data_stop[2])[2:])
                if ch4_4_data[2] == 0:
                    ch4_4_data[2] = "待机状态"
                    ch4_4_error_data == "待机状态"
                    ch4_4_state_value["text"] = "待机状态"
                    ch4_4_state_value["bg"] = "#919191"

            entry_ch4_4["state"] = "normal"
            entry_ch4_4_set_voltage_value["state"] = "normal"
            ch4_4_signal_ntc = 0
        else:
            messagebox.showinfo("错误", "通道4-4未开始测试")

    if ch_stop_name == "ch4_5":
        if not ch4_5_start_signal:
            mutex.acquire()
            ser.stop(com, ch4_5_stop_commend)
            mutex.release()
            # ch4_5_signal = 0

            # time.sleep(0.1)

            ch4_readcommend_stop = "040300000000A5"
            ### 加锁读取数据
            ### 数据处理
            mutex.acquire()
            ch4_read_data_stop = ser.readdata(com, ch4_readcommend_stop)
            mutex.release()

            mutex_readenvironmenttemperature.acquire()
            ch4_5_environment_temperature_end = ser.readenvironmenttemperature(com1)
            mutex_readenvironmenttemperature.release()
            ch4_5_log.append(
                ["Stop_Environment_Temperature(℃):", ch4_5_environment_temperature_end]
            )

            print("ch4_5_stop")
            ch4_5_logprocess()
            ch4_5_start_signal = True

            if ch4_read_data_stop == "FF":
                ch4_5_data[2] = "通信异常"
                ch4_5_error_data == "通信异常"
                ch4_5_state_value["text"] = "通信异常"
                ch4_5_state_value["bg"] = "red"
            else:
                ch4_5_data[2] = int(hex(ch4_read_data_stop[2])[2:])
                if ch4_5_data[2] == 0:
                    ch4_5_data[2] = "待机状态"
                    ch4_5_error_data == "待机状态"
                    ch4_5_state_value["text"] = "待机状态"
                    ch4_5_state_value["bg"] = "#919191"

            entry_ch4_5["state"] = "normal"
            entry_ch4_5_set_voltage_value["state"] = "normal"
            ch4_5_signal_ntc = 0
        else:
            messagebox.showinfo("错误", "通道4-5未开始测试")

    if ch_stop_name == "ch4_6":
        if not ch4_6_start_signal:
            mutex.acquire()
            ser.stop(com, ch4_6_stop_commend)
            mutex.release()
            # ch4_6_signal = 0

            # time.sleep(0.1)

            ch4_readcommend_stop = "040300000000A5"
            ### 加锁读取数据
            ### 数据处理
            mutex.acquire()
            ch4_read_data_stop = ser.readdata(com, ch4_readcommend_stop)
            mutex.release()

            mutex_readenvironmenttemperature.acquire()
            ch4_6_environment_temperature_end = ser.readenvironmenttemperature(com1)
            mutex_readenvironmenttemperature.release()
            ch4_6_log.append(
                ["Stop_Environment_Temperature(℃):", ch4_6_environment_temperature_end]
            )

            print("ch4_6_stop")
            ch4_6_logprocess()
            ch4_6_start_signal = True

            if ch4_read_data_stop == "FF":
                ch4_6_data[2] = "通信异常"
                ch4_6_error_data == "通信异常"
                ch4_6_state_value["text"] = "通信异常"
                ch4_6_state_value["bg"] = "red"
            else:
                ch4_6_data[2] = int(hex(ch4_read_data_stop[2])[2:])
                if ch4_6_data[2] == 0:
                    ch4_6_data[2] = "待机状态"
                    ch4_6_error_data == "待机状态"
                    ch4_6_state_value["text"] = "待机状态"
                    ch4_6_state_value["bg"] = "#919191"

            entry_ch4_6["state"] = "normal"
            entry_ch4_6_set_voltage_value["state"] = "normal"
            ch4_6_signal_ntc = 0
        else:
            messagebox.showinfo("错误", "通道4-6未开始测试")

    if ch_stop_name == "ch4_7":
        if not ch4_7_start_signal:
            mutex.acquire()
            ser.stop(com, ch4_7_stop_commend)
            mutex.release()
            # ch4_7_signal = 0

            # time.sleep(0.1)

            ch4_readcommend_stop = "040300000000A5"
            ### 加锁读取数据
            ### 数据处理
            mutex.acquire()
            ch4_read_data_stop = ser.readdata(com, ch4_readcommend_stop)
            mutex.release()

            mutex_readenvironmenttemperature.acquire()
            ch4_7_environment_temperature_end = ser.readenvironmenttemperature(com1)
            mutex_readenvironmenttemperature.release()
            ch4_7_log.append(
                ["Stop_Environment_Temperature(℃):", ch4_7_environment_temperature_end]
            )

            print("ch4_7_stop")
            ch4_7_logprocess()
            ch4_7_start_signal = True

            if ch4_read_data_stop == "FF":
                ch4_7_data[2] = "通信异常"
                ch4_7_error_data == "通信异常"
                ch4_7_state_value["text"] = "通信异常"
                ch4_7_state_value["bg"] = "red"
            else:
                ch4_7_data[2] = int(hex(ch4_read_data_stop[2])[2:])
                if ch4_7_data[2] == 0:
                    ch4_7_data[2] = "待机状态"
                    ch4_7_error_data == "待机状态"
                    ch4_7_state_value["text"] = "待机状态"
                    ch4_7_state_value["bg"] = "#919191"

            entry_ch4_7["state"] = "normal"
            entry_ch4_7_set_voltage_value["state"] = "normal"
            ch4_7_signal_ntc = 0
        else:
            messagebox.showinfo("错误", "通道4-7未开始测试")

    if ch_stop_name == "ch4_8":
        if not ch4_8_start_signal:
            mutex.acquire()
            ser.stop(com, ch4_8_stop_commend)
            mutex.release()
            # ch4_8_signal = 0

            # time.sleep(0.1)

            ch4_readcommend_stop = "040300000000A5"
            ### 加锁读取数据
            ### 数据处理
            mutex.acquire()
            ch4_read_data_stop = ser.readdata(com, ch4_readcommend_stop)
            mutex.release()

            mutex_readenvironmenttemperature.acquire()
            ch4_8_environment_temperature_end = ser.readenvironmenttemperature(com1)
            mutex_readenvironmenttemperature.release()
            ch4_8_log.append(
                ["Stop_Environment_Temperature(℃):", ch4_8_environment_temperature_end]
            )

            print("ch4_8_stop")
            ch4_8_logprocess()
            ch4_8_start_signal = True

            if ch4_read_data_stop == "FF":
                ch4_8_data[2] = "通信异常"
                ch4_8_error_data == "通信异常"
                ch4_8_state_value["text"] = "通信异常"
                ch4_8_state_value["bg"] = "red"
            else:
                ch4_8_data[2] = int(hex(ch4_read_data_stop[2])[2:])
                if ch4_8_data[2] == 0:
                    ch4_8_data[2] = "待机状态"
                    ch4_8_error_data == "待机状态"
                    ch4_8_state_value["text"] = "待机状态"
                    ch4_8_state_value["bg"] = "#919191"

            entry_ch4_8["state"] = "normal"
            entry_ch4_8_set_voltage_value["state"] = "normal"
            ch4_8_signal_ntc = 0
        else:
            messagebox.showinfo("错误", "通道4-8未开始测试")

    if ch_stop_name == "ch5_1":
        if not ch5_1_start_signal:
            mutex.acquire()
            ser.stop(com, ch5_1_stop_commend)
            mutex.release()
            # ch5_1_signal = 0

            # time.sleep(0.1)

            ch5_readcommend_stop = "050300000000A5"
            ### 加锁读取数据
            ### 数据处理
            mutex.acquire()
            ch5_read_data_stop = ser.readdata(com, ch5_readcommend_stop)
            mutex.release()

            mutex_readenvironmenttemperature.acquire()
            ch5_1_environment_temperature_end = ser.readenvironmenttemperature(com1)
            mutex_readenvironmenttemperature.release()
            ch5_1_log.append(
                ["Stop_Environment_Temperature(℃):", ch5_1_environment_temperature_end]
            )

            print("ch5_1_stop")
            ch5_1_logprocess()
            ch5_1_start_signal = True

            if ch5_read_data_stop == "FF":
                ch5_1_data[2] = "通信异常"
                ch5_1_error_data == "通信异常"
                ch5_1_state_value["text"] = "通信异常"
                ch5_1_state_value["bg"] = "red"
            else:
                ch5_1_data[2] = int(hex(ch5_read_data_stop[2])[2:])
                if ch5_1_data[2] == 0:
                    ch5_1_data[2] = "待机状态"
                    ch5_1_error_data == "待机状态"
                    ch5_1_state_value["text"] = "待机状态"
                    ch5_1_state_value["bg"] = "#919191"

            entry_ch5_1["state"] = "normal"
            entry_ch5_1_set_voltage_value["state"] = "normal"
            ch5_1_signal_ntc = 0
        else:
            messagebox.showinfo("错误", "通道5-1未开始测试")

    if ch_stop_name == "ch5_2":
        if not ch5_2_start_signal:
            mutex.acquire()
            ser.stop(com, ch5_2_stop_commend)
            mutex.release()
            # ch5_2_signal = 0

            # time.sleep(0.1)

            ch5_readcommend_stop = "050300000000A5"
            ### 加锁读取数据
            ### 数据处理
            mutex.acquire()
            ch5_read_data_stop = ser.readdata(com, ch5_readcommend_stop)
            mutex.release()

            mutex_readenvironmenttemperature.acquire()
            ch5_2_environment_temperature_end = ser.readenvironmenttemperature(com1)
            mutex_readenvironmenttemperature.release()
            ch5_2_log.append(
                ["Stop_Environment_Temperature(℃):", ch5_2_environment_temperature_end]
            )

            print("ch5_2_stop")
            ch5_2_logprocess()
            ch5_2_start_signal = True

            if ch5_read_data_stop == "FF":
                ch5_2_data[2] = "通信异常"
                ch5_2_error_data == "通信异常"
                ch5_2_state_value["text"] = "通信异常"
                ch5_2_state_value["bg"] = "red"
            else:
                ch5_2_data[2] = int(hex(ch5_read_data_stop[2])[2:])
                if ch5_2_data[2] == 0:
                    ch5_2_data[2] = "待机状态"
                    ch5_2_error_data == "待机状态"
                    ch5_2_state_value["text"] = "待机状态"
                    ch5_2_state_value["bg"] = "#919191"

            entry_ch5_2["state"] = "normal"
            entry_ch5_2_set_voltage_value["state"] = "normal"
            ch5_2_signal_ntc = 0
        else:
            messagebox.showinfo("错误", "通道5-2未开始测试")

    if ch_stop_name == "ch5_3":
        if not ch5_3_start_signal:
            mutex.acquire()
            ser.stop(com, ch5_3_stop_commend)
            mutex.release()
            # ch5_3_signal = 0

            # time.sleep(0.1)

            ch5_readcommend_stop = "050300000000A5"
            ### 加锁读取数据
            ### 数据处理
            mutex.acquire()
            ch5_read_data_stop = ser.readdata(com, ch5_readcommend_stop)
            mutex.release()

            mutex_readenvironmenttemperature.acquire()
            ch5_3_environment_temperature_end = ser.readenvironmenttemperature(com1)
            mutex_readenvironmenttemperature.release()
            ch5_3_log.append(
                ["Stop_Environment_Temperature(℃):", ch5_3_environment_temperature_end]
            )

            print("ch5_3_stop")
            ch5_3_logprocess()
            ch5_3_start_signal = True

            if ch5_read_data_stop == "FF":
                ch5_3_data[2] = "通信异常"
                ch5_3_error_data == "通信异常"
                ch5_3_state_value["text"] = "通信异常"
                ch5_3_state_value["bg"] = "red"
            else:
                ch5_3_data[2] = int(hex(ch5_read_data_stop[2])[2:])
                if ch5_3_data[2] == 0:
                    ch5_3_data[2] = "待机状态"
                    ch5_3_error_data == "待机状态"
                    ch5_3_state_value["text"] = "待机状态"
                    ch5_3_state_value["bg"] = "#919191"

            entry_ch5_3["state"] = "normal"
            entry_ch5_3_set_voltage_value["state"] = "normal"
            ch5_3_signal_ntc = 0
        else:
            messagebox.showinfo("错误", "通道5-3未开始测试")

    if ch_stop_name == "ch5_4":
        if not ch5_4_start_signal:
            mutex.acquire()
            ser.stop(com, ch5_4_stop_commend)
            mutex.release()
            # ch5_4_signal = 0

            # time.sleep(0.1)

            ch5_readcommend_stop = "050300000000A5"
            ### 加锁读取数据
            ### 数据处理
            mutex.acquire()
            ch5_read_data_stop = ser.readdata(com, ch5_readcommend_stop)
            mutex.release()

            mutex_readenvironmenttemperature.acquire()
            ch5_4_environment_temperature_end = ser.readenvironmenttemperature(com1)
            mutex_readenvironmenttemperature.release()
            ch5_4_log.append(
                ["Stop_Environment_Temperature(℃):", ch5_4_environment_temperature_end]
            )

            print("ch5_4_stop")
            ch5_4_logprocess()
            ch5_4_start_signal = True

            if ch5_read_data_stop == "FF":
                ch5_4_data[2] = "通信异常"
                ch5_4_error_data == "通信异常"
                ch5_4_state_value["text"] = "通信异常"
                ch5_4_state_value["bg"] = "red"
            else:
                ch5_4_data[2] = int(hex(ch5_read_data_stop[2])[2:])
                if ch5_4_data[2] == 0:
                    ch5_4_data[2] = "待机状态"
                    ch5_4_error_data == "待机状态"
                    ch5_4_state_value["text"] = "待机状态"
                    ch5_4_state_value["bg"] = "#919191"

            entry_ch5_4["state"] = "normal"
            entry_ch5_4_set_voltage_value["state"] = "normal"
            ch5_4_signal_ntc = 0
        else:
            messagebox.showinfo("错误", "通道5-4未开始测试")

    if ch_stop_name == "ch5_5":
        if not ch5_5_start_signal:
            mutex.acquire()
            ser.stop(com, ch5_5_stop_commend)
            mutex.release()
            # ch5_5_signal = 0

            # time.sleep(0.1)

            ch5_readcommend_stop = "050300000000A5"
            ### 加锁读取数据
            ### 数据处理
            mutex.acquire()
            ch5_read_data_stop = ser.readdata(com, ch5_readcommend_stop)
            mutex.release()

            mutex_readenvironmenttemperature.acquire()
            ch5_5_environment_temperature_end = ser.readenvironmenttemperature(com1)
            mutex_readenvironmenttemperature.release()
            ch5_5_log.append(
                ["Stop_Environment_Temperature(℃):", ch5_5_environment_temperature_end]
            )

            print("ch5_5_stop")
            ch5_5_logprocess()
            ch5_5_start_signal = True

            if ch5_read_data_stop == "FF":
                ch5_5_data[2] = "通信异常"
                ch5_5_error_data == "通信异常"
                ch5_5_state_value["text"] = "通信异常"
                ch5_5_state_value["bg"] = "red"
            else:
                ch5_5_data[2] = int(hex(ch5_read_data_stop[2])[2:])
                if ch5_5_data[2] == 0:
                    ch5_5_data[2] = "待机状态"
                    ch5_5_error_data == "待机状态"
                    ch5_5_state_value["text"] = "待机状态"
                    ch5_5_state_value["bg"] = "#919191"

            entry_ch5_5["state"] = "normal"
            entry_ch5_5_set_voltage_value["state"] = "normal"
            ch5_5_signal_ntc = 0
        else:
            messagebox.showinfo("错误", "通道5-5未开始测试")

    if ch_stop_name == "ch5_6":
        if not ch5_6_start_signal:
            mutex.acquire()
            ser.stop(com, ch5_6_stop_commend)
            mutex.release()
            # ch5_6_signal = 0

            # time.sleep(0.1)

            ch5_readcommend_stop = "050300000000A5"
            ### 加锁读取数据
            ### 数据处理
            mutex.acquire()
            ch5_read_data_stop = ser.readdata(com, ch5_readcommend_stop)
            mutex.release()

            mutex_readenvironmenttemperature.acquire()
            ch5_6_environment_temperature_end = ser.readenvironmenttemperature(com1)
            mutex_readenvironmenttemperature.release()
            ch5_6_log.append(
                ["Stop_Environment_Temperature(℃):", ch5_6_environment_temperature_end]
            )

            print("ch5_6_stop")
            ch5_6_logprocess()
            ch5_6_start_signal = True

            if ch5_read_data_stop == "FF":
                ch5_6_data[2] = "通信异常"
                ch5_6_error_data == "通信异常"
                ch5_6_state_value["text"] = "通信异常"
                ch5_6_state_value["bg"] = "red"
            else:
                ch5_6_data[2] = int(hex(ch5_read_data_stop[2])[2:])
                if ch5_6_data[2] == 0:
                    ch5_6_data[2] = "待机状态"
                    ch5_6_error_data == "待机状态"
                    ch5_6_state_value["text"] = "待机状态"
                    ch5_6_state_value["bg"] = "#919191"

            entry_ch5_6["state"] = "normal"
            entry_ch5_6_set_voltage_value["state"] = "normal"
            ch5_6_signal_ntc = 0
        else:
            messagebox.showinfo("错误", "通道5-6未开始测试")

    if ch_stop_name == "ch5_7":
        if not ch5_7_start_signal:
            mutex.acquire()
            ser.stop(com, ch5_7_stop_commend)
            mutex.release()
            # ch5_7_signal = 0

            # time.sleep(0.1)

            ch5_readcommend_stop = "050300000000A5"
            ### 加锁读取数据
            ### 数据处理
            mutex.acquire()
            ch5_read_data_stop = ser.readdata(com, ch5_readcommend_stop)
            mutex.release()

            mutex_readenvironmenttemperature.acquire()
            ch5_7_environment_temperature_end = ser.readenvironmenttemperature(com1)
            mutex_readenvironmenttemperature.release()
            ch5_7_log.append(
                ["Stop_Environment_Temperature(℃):", ch5_7_environment_temperature_end]
            )

            print("ch5_7_stop")
            ch5_7_logprocess()
            ch5_7_start_signal = True

            if ch5_read_data_stop == "FF":
                ch5_7_data[2] = "通信异常"
                ch5_7_error_data == "通信异常"
                ch5_7_state_value["text"] = "通信异常"
                ch5_7_state_value["bg"] = "red"
            else:
                ch5_7_data[2] = int(hex(ch5_read_data_stop[2])[2:])
                if ch5_7_data[2] == 0:
                    ch5_7_data[2] = "待机状态"
                    ch5_7_error_data == "待机状态"
                    ch5_7_state_value["text"] = "待机状态"
                    ch5_7_state_value["bg"] = "#919191"

            entry_ch5_7["state"] = "normal"
            entry_ch5_7_set_voltage_value["state"] = "normal"
            ch5_7_signal_ntc = 0
        else:
            messagebox.showinfo("错误", "通道5-7未开始测试")

    if ch_stop_name == "ch5_8":
        if not ch5_8_start_signal:
            mutex.acquire()
            ser.stop(com, ch5_8_stop_commend)
            mutex.release()
            # ch5_8_signal = 0

            # time.sleep(0.1)

            ch5_readcommend_stop = "050300000000A5"
            ### 加锁读取数据
            ### 数据处理
            mutex.acquire()
            ch5_read_data_stop = ser.readdata(com, ch5_readcommend_stop)
            mutex.release()

            mutex_readenvironmenttemperature.acquire()
            ch5_8_environment_temperature_end = ser.readenvironmenttemperature(com1)
            mutex_readenvironmenttemperature.release()
            ch5_8_log.append(
                ["Stop_Environment_Temperature(℃):", ch5_8_environment_temperature_end]
            )

            print("ch5_8_stop")
            ch5_8_logprocess()
            ch5_8_start_signal = True

            if ch5_read_data_stop == "FF":
                ch5_8_data[2] = "通信异常"
                ch5_8_error_data == "通信异常"
                ch5_8_state_value["text"] = "通信异常"
                ch5_8_state_value["bg"] = "red"
            else:
                ch5_8_data[2] = int(hex(ch5_read_data_stop[2])[2:])
                if ch5_8_data[2] == 0:
                    ch5_8_data[2] = "待机状态"
                    ch5_8_error_data == "待机状态"
                    ch5_8_state_value["text"] = "待机状态"
                    ch5_8_state_value["bg"] = "#919191"

            entry_ch5_8["state"] = "normal"
            entry_ch5_8_set_voltage_value["state"] = "normal"
            ch5_8_signal_ntc = 0
        else:
            messagebox.showinfo("错误", "通道5-8未开始测试")

    if ch_stop_name == "ch6_1":
        if not ch6_1_start_signal:
            mutex.acquire()
            ser.stop(com, ch6_1_stop_commend)
            mutex.release()
            # ch6_1_signal = 0

            # time.sleep(0.1)

            ch6_readcommend_stop = "060300000000A5"
            ### 加锁读取数据
            ### 数据处理
            mutex.acquire()
            ch6_read_data_stop = ser.readdata(com, ch6_readcommend_stop)
            mutex.release()

            mutex_readenvironmenttemperature.acquire()
            ch6_1_environment_temperature_end = ser.readenvironmenttemperature(com1)
            mutex_readenvironmenttemperature.release()
            ch6_1_log.append(
                ["Stop_Environment_Temperature(℃):", ch6_1_environment_temperature_end]
            )

            print("ch6_1_stop")
            ch6_1_logprocess()
            ch6_1_start_signal = True

            if ch6_read_data_stop == "FF":
                ch6_1_data[2] = "通信异常"
                ch6_1_error_data == "通信异常"
                ch6_1_state_value["text"] = "通信异常"
                ch6_1_state_value["bg"] = "red"
            else:
                ch6_1_data[2] = int(hex(ch6_read_data_stop[2])[2:])
                if ch6_1_data[2] == 0:
                    ch6_1_data[2] = "待机状态"
                    ch6_1_error_data == "待机状态"
                    ch6_1_state_value["text"] = "待机状态"
                    ch6_1_state_value["bg"] = "#919191"

            entry_ch6_1["state"] = "normal"
            entry_ch6_1_set_voltage_value["state"] = "normal"
            ch6_1_signal_ntc = 0
        else:
            messagebox.showinfo("错误", "通道6-1未开始测试")

    if ch_stop_name == "ch6_2":
        if not ch6_2_start_signal:
            mutex.acquire()
            ser.stop(com, ch6_2_stop_commend)
            mutex.release()
            # ch6_2_signal = 0

            # time.sleep(0.1)

            ch6_readcommend_stop = "060300000000A5"
            ### 加锁读取数据
            ### 数据处理
            mutex.acquire()
            ch6_read_data_stop = ser.readdata(com, ch6_readcommend_stop)
            mutex.release()

            mutex_readenvironmenttemperature.acquire()
            ch6_2_environment_temperature_end = ser.readenvironmenttemperature(com1)
            mutex_readenvironmenttemperature.release()
            ch6_2_log.append(
                ["Stop_Environment_Temperature(℃):", ch6_2_environment_temperature_end]
            )

            print("ch6_2_stop")
            ch6_2_logprocess()
            ch6_2_start_signal = True

            if ch6_read_data_stop == "FF":
                ch6_2_data[2] = "通信异常"
                ch6_2_error_data == "通信异常"
                ch6_2_state_value["text"] = "通信异常"
                ch6_2_state_value["bg"] = "red"
            else:
                ch6_2_data[2] = int(hex(ch6_read_data_stop[2])[2:])
                if ch6_2_data[2] == 0:
                    ch6_2_data[2] = "待机状态"
                    ch6_2_error_data == "待机状态"
                    ch6_2_state_value["text"] = "待机状态"
                    ch6_2_state_value["bg"] = "#919191"

            entry_ch6_2["state"] = "normal"
            entry_ch6_2_set_voltage_value["state"] = "normal"
            ch6_2_signal_ntc = 0
        else:
            messagebox.showinfo("错误", "通道6-2未开始测试")

    if ch_stop_name == "ch6_3":
        if not ch6_3_start_signal:
            mutex.acquire()
            ser.stop(com, ch6_3_stop_commend)
            mutex.release()
            # ch6_3_signal = 0

            # time.sleep(0.1)

            ch6_readcommend_stop = "060300000000A5"
            ### 加锁读取数据
            ### 数据处理
            mutex.acquire()
            ch6_read_data_stop = ser.readdata(com, ch6_readcommend_stop)
            mutex.release()

            mutex_readenvironmenttemperature.acquire()
            ch6_3_environment_temperature_end = ser.readenvironmenttemperature(com1)
            mutex_readenvironmenttemperature.release()
            ch6_3_log.append(
                ["Stop_Environment_Temperature(℃):", ch6_3_environment_temperature_end]
            )

            print("ch6_3_stop")
            ch6_3_logprocess()
            ch6_3_start_signal = True

            if ch6_read_data_stop == "FF":
                ch6_3_data[2] = "通信异常"
                ch6_3_error_data == "通信异常"
                ch6_3_state_value["text"] = "通信异常"
                ch6_3_state_value["bg"] = "red"
            else:
                ch6_3_data[2] = int(hex(ch6_read_data_stop[2])[2:])
                if ch6_3_data[2] == 0:
                    ch6_3_data[2] = "待机状态"
                    ch6_3_error_data == "待机状态"
                    ch6_3_state_value["text"] = "待机状态"
                    ch6_3_state_value["bg"] = "#919191"

            entry_ch6_3["state"] = "normal"
            entry_ch6_3_set_voltage_value["state"] = "normal"
            ch6_3_signal_ntc = 0
        else:
            messagebox.showinfo("错误", "通道6-3未开始测试")

    if ch_stop_name == "ch6_4":
        if not ch6_4_start_signal:
            mutex.acquire()
            ser.stop(com, ch6_4_stop_commend)
            mutex.release()
            # ch6_4_signal = 0

            # time.sleep(0.1)

            ch6_readcommend_stop = "060300000000A5"
            ### 加锁读取数据
            ### 数据处理
            mutex.acquire()
            ch6_read_data_stop = ser.readdata(com, ch6_readcommend_stop)
            mutex.release()

            mutex_readenvironmenttemperature.acquire()
            ch6_4_environment_temperature_end = ser.readenvironmenttemperature(com1)
            mutex_readenvironmenttemperature.release()
            ch6_4_log.append(
                ["Stop_Environment_Temperature(℃):", ch6_4_environment_temperature_end]
            )

            print("ch6_4_stop")
            ch6_4_logprocess()
            ch6_4_start_signal = True

            if ch6_read_data_stop == "FF":
                ch6_4_data[2] = "通信异常"
                ch6_4_error_data == "通信异常"
                ch6_4_state_value["text"] = "通信异常"
                ch6_4_state_value["bg"] = "red"
            else:
                ch6_4_data[2] = int(hex(ch6_read_data_stop[2])[2:])
                if ch6_4_data[2] == 0:
                    ch6_4_data[2] = "待机状态"
                    ch6_4_error_data == "待机状态"
                    ch6_4_state_value["text"] = "待机状态"
                    ch6_4_state_value["bg"] = "#919191"

            entry_ch6_4["state"] = "normal"
            entry_ch6_4_set_voltage_value["state"] = "normal"
            ch6_4_signal_ntc = 0
        else:
            messagebox.showinfo("错误", "通道6-4未开始测试")

    if ch_stop_name == "ch6_5":
        if not ch6_5_start_signal:
            mutex.acquire()
            ser.stop(com, ch6_5_stop_commend)
            mutex.release()
            # ch6_5_signal = 0

            # time.sleep(0.1)

            ch6_readcommend_stop = "060300000000A5"
            ### 加锁读取数据
            ### 数据处理
            mutex.acquire()
            ch6_read_data_stop = ser.readdata(com, ch6_readcommend_stop)
            mutex.release()

            mutex_readenvironmenttemperature.acquire()
            ch6_5_environment_temperature_end = ser.readenvironmenttemperature(com1)
            mutex_readenvironmenttemperature.release()
            ch6_5_log.append(
                ["Stop_Environment_Temperature(℃):", ch6_5_environment_temperature_end]
            )

            print("ch6_5_stop")
            ch6_5_logprocess()
            ch6_5_start_signal = True

            if ch6_read_data_stop == "FF":
                ch6_5_data[2] = "通信异常"
                ch6_5_error_data == "通信异常"
                ch6_5_state_value["text"] = "通信异常"
                ch6_5_state_value["bg"] = "red"
            else:
                ch6_5_data[2] = int(hex(ch6_read_data_stop[2])[2:])
                if ch6_5_data[2] == 0:
                    ch6_5_data[2] = "待机状态"
                    ch6_5_error_data == "待机状态"
                    ch6_5_state_value["text"] = "待机状态"
                    ch6_5_state_value["bg"] = "#919191"

            entry_ch6_5["state"] = "normal"
            entry_ch6_5_set_voltage_value["state"] = "normal"
            ch6_5_signal_ntc = 0
        else:
            messagebox.showinfo("错误", "通道6-5未开始测试")

    if ch_stop_name == "ch6_6":
        if not ch6_6_start_signal:
            mutex.acquire()
            ser.stop(com, ch6_6_stop_commend)
            mutex.release()
            # ch6_6_signal = 0

            # time.sleep(0.1)

            ch6_readcommend_stop = "060300000000A5"
            ### 加锁读取数据
            ### 数据处理
            mutex.acquire()
            ch6_read_data_stop = ser.readdata(com, ch6_readcommend_stop)
            mutex.release()

            mutex_readenvironmenttemperature.acquire()
            ch6_6_environment_temperature_end = ser.readenvironmenttemperature(com1)
            mutex_readenvironmenttemperature.release()
            ch6_6_log.append(
                ["Stop_Environment_Temperature(℃):", ch6_6_environment_temperature_end]
            )

            print("ch6_6_stop")
            ch6_6_logprocess()
            ch6_6_start_signal = True

            if ch6_read_data_stop == "FF":
                ch6_6_data[2] = "通信异常"
                ch6_6_error_data == "通信异常"
                ch6_6_state_value["text"] = "通信异常"
                ch6_6_state_value["bg"] = "red"
            else:
                ch6_6_data[2] = int(hex(ch6_read_data_stop[2])[2:])
                if ch6_6_data[2] == 0:
                    ch6_6_data[2] = "待机状态"
                    ch6_6_error_data == "待机状态"
                    ch6_6_state_value["text"] = "待机状态"
                    ch6_6_state_value["bg"] = "#919191"

            entry_ch6_6["state"] = "normal"
            entry_ch6_6_set_voltage_value["state"] = "normal"
            ch6_6_signal_ntc = 0
        else:
            messagebox.showinfo("错误", "通道6-6未开始测试")

    if ch_stop_name == "ch6_7":
        if not ch6_7_start_signal:
            mutex.acquire()
            ser.stop(com, ch6_7_stop_commend)
            mutex.release()
            # ch6_7_signal = 0

            # time.sleep(0.1)

            ch6_readcommend_stop = "060300000000A5"
            ### 加锁读取数据
            ### 数据处理
            mutex.acquire()
            ch6_read_data_stop = ser.readdata(com, ch6_readcommend_stop)
            mutex.release()

            mutex_readenvironmenttemperature.acquire()
            ch6_7_environment_temperature_end = ser.readenvironmenttemperature(com1)
            mutex_readenvironmenttemperature.release()
            ch6_7_log.append(
                ["Stop_Environment_Temperature(℃):", ch6_7_environment_temperature_end]
            )

            print("ch6_7_stop")
            ch6_7_logprocess()
            ch6_7_start_signal = True

            if ch6_read_data_stop == "FF":
                ch6_7_data[2] = "通信异常"
                ch6_7_error_data == "通信异常"
                ch6_7_state_value["text"] = "通信异常"
                ch6_7_state_value["bg"] = "red"
            else:
                ch6_7_data[2] = int(hex(ch6_read_data_stop[2])[2:])
                if ch6_7_data[2] == 0:
                    ch6_7_data[2] = "待机状态"
                    ch6_7_error_data == "待机状态"
                    ch6_7_state_value["text"] = "待机状态"
                    ch6_7_state_value["bg"] = "#919191"

            entry_ch6_7["state"] = "normal"
            entry_ch6_7_set_voltage_value["state"] = "normal"
            ch6_7_signal_ntc = 0
        else:
            messagebox.showinfo("错误", "通道6-7未开始测试")

    if ch_stop_name == "ch6_8":
        if not ch6_8_start_signal:
            mutex.acquire()
            ser.stop(com, ch6_8_stop_commend)
            mutex.release()
            # ch6_8_signal = 0

            # time.sleep(0.1)

            ch6_readcommend_stop = "060300000000A5"
            ### 加锁读取数据
            ### 数据处理
            mutex.acquire()
            ch6_read_data_stop = ser.readdata(com, ch6_readcommend_stop)
            mutex.release()

            mutex_readenvironmenttemperature.acquire()
            ch6_8_environment_temperature_end = ser.readenvironmenttemperature(com1)
            mutex_readenvironmenttemperature.release()
            ch6_8_log.append(
                ["Stop_Environment_Temperature(℃):", ch6_8_environment_temperature_end]
            )

            print("ch6_8_stop")
            ch6_8_logprocess()
            ch6_8_start_signal = True

            if ch6_read_data_stop == "FF":
                ch6_8_data[2] = "通信异常"
                ch6_8_error_data == "通信异常"
                ch6_8_state_value["text"] = "通信异常"
                ch6_8_state_value["bg"] = "red"
            else:
                ch6_8_data[2] = int(hex(ch6_read_data_stop[2])[2:])
                if ch6_8_data[2] == 0:
                    ch6_8_data[2] = "待机状态"
                    ch6_8_error_data == "待机状态"
                    ch6_8_state_value["text"] = "待机状态"
                    ch6_8_state_value["bg"] = "#919191"

            entry_ch6_8["state"] = "normal"
            entry_ch6_8_set_voltage_value["state"] = "normal"
            ch6_8_signal_ntc = 0
        else:
            messagebox.showinfo("错误", "通道6-8未开始测试")

    if ch_stop_name == "ch7_1":
        if not ch7_1_start_signal:
            mutex.acquire()
            ser.stop(com, ch7_1_stop_commend)
            mutex.release()
            # ch7_1_signal = 0

            # time.sleep(0.1)

            ch7_readcommend_stop = "070300000000A5"
            ### 加锁读取数据
            ### 数据处理
            mutex.acquire()
            ch7_read_data_stop = ser.readdata(com, ch7_readcommend_stop)
            mutex.release()

            mutex_readenvironmenttemperature.acquire()
            ch7_1_environment_temperature_end = ser.readenvironmenttemperature(com1)
            mutex_readenvironmenttemperature.release()
            ch7_1_log.append(
                ["Stop_Environment_Temperature(℃):", ch7_1_environment_temperature_end]
            )

            print("ch7_1_stop")
            ch7_1_logprocess()
            ch7_1_start_signal = True

            if ch7_read_data_stop == "FF":
                ch7_1_data[2] = "通信异常"
                ch7_1_error_data == "通信异常"
                ch7_1_state_value["text"] = "通信异常"
                ch7_1_state_value["bg"] = "red"
            else:
                ch7_1_data[2] = int(hex(ch7_read_data_stop[2])[2:])
                if ch7_1_data[2] == 0:
                    ch7_1_data[2] = "待机状态"
                    ch7_1_error_data == "待机状态"
                    ch7_1_state_value["text"] = "待机状态"
                    ch7_1_state_value["bg"] = "#919191"

            entry_ch7_1["state"] = "normal"
            entry_ch7_1_set_voltage_value["state"] = "normal"
            ch7_1_signal_ntc = 0
        else:
            messagebox.showinfo("错误", "通道7-1未开始测试")

    if ch_stop_name == "ch7_2":
        if not ch7_2_start_signal:
            mutex.acquire()
            ser.stop(com, ch7_2_stop_commend)
            mutex.release()
            # ch7_2_signal = 0

            # time.sleep(0.1)

            ch7_readcommend_stop = "070300000000A5"
            ### 加锁读取数据
            ### 数据处理
            mutex.acquire()
            ch7_read_data_stop = ser.readdata(com, ch7_readcommend_stop)
            mutex.release()

            mutex_readenvironmenttemperature.acquire()
            ch7_2_environment_temperature_end = ser.readenvironmenttemperature(com1)
            mutex_readenvironmenttemperature.release()
            ch7_2_log.append(
                ["Stop_Environment_Temperature(℃):", ch7_2_environment_temperature_end]
            )

            print("ch7_2_stop")
            ch7_2_logprocess()
            ch7_2_start_signal = True

            if ch7_read_data_stop == "FF":
                ch7_2_data[2] = "通信异常"
                ch7_2_error_data == "通信异常"
                ch7_2_state_value["text"] = "通信异常"
                ch7_2_state_value["bg"] = "red"
            else:
                ch7_2_data[2] = int(hex(ch7_read_data_stop[2])[2:])
                if ch7_2_data[2] == 0:
                    ch7_2_data[2] = "待机状态"
                    ch7_2_error_data == "待机状态"
                    ch7_2_state_value["text"] = "待机状态"
                    ch7_2_state_value["bg"] = "#919191"

            entry_ch7_2["state"] = "normal"
            entry_ch7_2_set_voltage_value["state"] = "normal"
            ch7_2_signal_ntc = 0
        else:
            messagebox.showinfo("错误", "通道7-2未开始测试")

    if ch_stop_name == "ch7_3":
        if not ch7_3_start_signal:
            mutex.acquire()
            ser.stop(com, ch7_3_stop_commend)
            mutex.release()
            # ch7_3_signal = 0

            # time.sleep(0.1)

            ch7_readcommend_stop = "070300000000A5"
            ### 加锁读取数据
            ### 数据处理
            mutex.acquire()
            ch7_read_data_stop = ser.readdata(com, ch7_readcommend_stop)
            mutex.release()

            mutex_readenvironmenttemperature.acquire()
            ch7_3_environment_temperature_end = ser.readenvironmenttemperature(com1)
            mutex_readenvironmenttemperature.release()
            ch7_3_log.append(
                ["Stop_Environment_Temperature(℃):", ch7_3_environment_temperature_end]
            )

            print("ch7_3_stop")
            ch7_3_logprocess()
            ch7_3_start_signal = True

            if ch7_read_data_stop == "FF":
                ch7_3_data[2] = "通信异常"
                ch7_3_error_data == "通信异常"
                ch7_3_state_value["text"] = "通信异常"
                ch7_3_state_value["bg"] = "red"
            else:
                ch7_3_data[2] = int(hex(ch7_read_data_stop[2])[2:])
                if ch7_3_data[2] == 0:
                    ch7_3_data[2] = "待机状态"
                    ch7_3_error_data == "待机状态"
                    ch7_3_state_value["text"] = "待机状态"
                    ch7_3_state_value["bg"] = "#919191"

            entry_ch7_3["state"] = "normal"
            entry_ch7_3_set_voltage_value["state"] = "normal"
            ch7_3_signal_ntc = 0
        else:
            messagebox.showinfo("错误", "通道7-3未开始测试")

    if ch_stop_name == "ch7_4":
        if not ch7_4_start_signal:
            mutex.acquire()
            ser.stop(com, ch7_4_stop_commend)
            mutex.release()
            # ch7_4_signal = 0

            # time.sleep(0.1)

            ch7_readcommend_stop = "070300000000A5"
            ### 加锁读取数据
            ### 数据处理
            mutex.acquire()
            ch7_read_data_stop = ser.readdata(com, ch7_readcommend_stop)
            mutex.release()

            mutex_readenvironmenttemperature.acquire()
            ch7_4_environment_temperature_end = ser.readenvironmenttemperature(com1)
            mutex_readenvironmenttemperature.release()
            ch7_4_log.append(
                ["Stop_Environment_Temperature(℃):", ch7_4_environment_temperature_end]
            )

            print("ch7_4_stop")
            ch7_4_logprocess()
            ch7_4_start_signal = True

            if ch7_read_data_stop == "FF":
                ch7_4_data[2] = "通信异常"
                ch7_4_error_data == "通信异常"
                ch7_4_state_value["text"] = "通信异常"
                ch7_4_state_value["bg"] = "red"
            else:
                ch7_4_data[2] = int(hex(ch7_read_data_stop[2])[2:])
                if ch7_4_data[2] == 0:
                    ch7_4_data[2] = "待机状态"
                    ch7_4_error_data == "待机状态"
                    ch7_4_state_value["text"] = "待机状态"
                    ch7_4_state_value["bg"] = "#919191"

            entry_ch7_4["state"] = "normal"
            entry_ch7_4_set_voltage_value["state"] = "normal"
            ch7_4_signal_ntc = 0
        else:
            messagebox.showinfo("错误", "通道7-4未开始测试")

    if ch_stop_name == "ch7_5":
        if not ch7_5_start_signal:
            mutex.acquire()
            ser.stop(com, ch7_5_stop_commend)
            mutex.release()
            # ch7_5_signal = 0

            # time.sleep(0.1)

            ch7_readcommend_stop = "070300000000A5"
            ### 加锁读取数据
            ### 数据处理
            mutex.acquire()
            ch7_read_data_stop = ser.readdata(com, ch7_readcommend_stop)
            mutex.release()

            mutex_readenvironmenttemperature.acquire()
            ch7_5_environment_temperature_end = ser.readenvironmenttemperature(com1)
            mutex_readenvironmenttemperature.release()
            ch7_5_log.append(
                ["Stop_Environment_Temperature(℃):", ch7_5_environment_temperature_end]
            )

            print("ch7_5_stop")
            ch7_5_logprocess()
            ch7_5_start_signal = True

            if ch7_read_data_stop == "FF":
                ch7_5_data[2] = "通信异常"
                ch7_5_error_data == "通信异常"
                ch7_5_state_value["text"] = "通信异常"
                ch7_5_state_value["bg"] = "red"
            else:
                ch7_5_data[2] = int(hex(ch7_read_data_stop[2])[2:])
                if ch7_5_data[2] == 0:
                    ch7_5_data[2] = "待机状态"
                    ch7_5_error_data == "待机状态"
                    ch7_5_state_value["text"] = "待机状态"
                    ch7_5_state_value["bg"] = "#919191"

            entry_ch7_5["state"] = "normal"
            entry_ch7_5_set_voltage_value["state"] = "normal"
            ch7_5_signal_ntc = 0
        else:
            messagebox.showinfo("错误", "通道7-5未开始测试")

    if ch_stop_name == "ch7_6":
        if not ch7_6_start_signal:
            mutex.acquire()
            ser.stop(com, ch7_6_stop_commend)
            mutex.release()
            # ch7_6_signal = 0

            # time.sleep(0.1)

            ch7_readcommend_stop = "070300000000A5"
            ### 加锁读取数据
            ### 数据处理
            mutex.acquire()
            ch7_read_data_stop = ser.readdata(com, ch7_readcommend_stop)
            mutex.release()

            mutex_readenvironmenttemperature.acquire()
            ch7_6_environment_temperature_end = ser.readenvironmenttemperature(com1)
            mutex_readenvironmenttemperature.release()
            ch7_6_log.append(
                ["Stop_Environment_Temperature(℃):", ch7_6_environment_temperature_end]
            )

            print("ch7_6_stop")
            ch7_6_logprocess()
            ch7_6_start_signal = True

            if ch7_read_data_stop == "FF":
                ch7_6_data[2] = "通信异常"
                ch7_6_error_data == "通信异常"
                ch7_6_state_value["text"] = "通信异常"
                ch7_6_state_value["bg"] = "red"
            else:
                ch7_6_data[2] = int(hex(ch7_read_data_stop[2])[2:])
                if ch7_6_data[2] == 0:
                    ch7_6_data[2] = "待机状态"
                    ch7_6_error_data == "待机状态"
                    ch7_6_state_value["text"] = "待机状态"
                    ch7_6_state_value["bg"] = "#919191"

            entry_ch7_6["state"] = "normal"
            entry_ch7_6_set_voltage_value["state"] = "normal"
            ch7_6_signal_ntc = 0
        else:
            messagebox.showinfo("错误", "通道7-6未开始测试")

    if ch_stop_name == "ch7_7":
        if not ch7_7_start_signal:
            mutex.acquire()
            ser.stop(com, ch7_7_stop_commend)
            mutex.release()
            # ch7_7_signal = 0

            # time.sleep(0.1)

            ch7_readcommend_stop = "070300000000A5"
            ### 加锁读取数据
            ### 数据处理
            mutex.acquire()
            ch7_read_data_stop = ser.readdata(com, ch7_readcommend_stop)
            mutex.release()

            mutex_readenvironmenttemperature.acquire()
            ch7_7_environment_temperature_end = ser.readenvironmenttemperature(com1)
            mutex_readenvironmenttemperature.release()
            ch7_7_log.append(
                ["Stop_Environment_Temperature(℃):", ch7_7_environment_temperature_end]
            )

            print("ch7_7_stop")
            ch7_7_logprocess()
            ch7_7_start_signal = True

            if ch7_read_data_stop == "FF":
                ch7_7_data[2] = "通信异常"
                ch7_7_error_data == "通信异常"
                ch7_7_state_value["text"] = "通信异常"
                ch7_7_state_value["bg"] = "red"
            else:
                ch7_7_data[2] = int(hex(ch7_read_data_stop[2])[2:])
                if ch7_7_data[2] == 0:
                    ch7_7_data[2] = "待机状态"
                    ch7_7_error_data == "待机状态"
                    ch7_7_state_value["text"] = "待机状态"
                    ch7_7_state_value["bg"] = "#919191"

            entry_ch7_7["state"] = "normal"
            entry_ch7_7_set_voltage_value["state"] = "normal"
            ch7_7_signal_ntc = 0
        else:
            messagebox.showinfo("错误", "通道7-7未开始测试")

    if ch_stop_name == "ch7_8":
        if not ch7_8_start_signal:
            mutex.acquire()
            ser.stop(com, ch7_8_stop_commend)
            mutex.release()
            # ch7_8_signal = 0

            # time.sleep(0.1)

            ch7_readcommend_stop = "070300000000A5"
            ### 加锁读取数据
            ### 数据处理
            mutex.acquire()
            ch7_read_data_stop = ser.readdata(com, ch7_readcommend_stop)
            mutex.release()

            mutex_readenvironmenttemperature.acquire()
            ch7_8_environment_temperature_end = ser.readenvironmenttemperature(com1)
            mutex_readenvironmenttemperature.release()
            ch7_8_log.append(
                ["Stop_Environment_Temperature(℃):", ch7_8_environment_temperature_end]
            )

            print("ch7_8_stop")
            ch7_8_logprocess()
            ch7_8_start_signal = True

            if ch7_read_data_stop == "FF":
                ch7_8_data[2] = "通信异常"
                ch7_8_error_data == "通信异常"
                ch7_8_state_value["text"] = "通信异常"
                ch7_8_state_value["bg"] = "red"
            else:
                ch7_8_data[2] = int(hex(ch7_read_data_stop[2])[2:])
                if ch7_8_data[2] == 0:
                    ch7_8_data[2] = "待机状态"
                    ch7_8_error_data == "待机状态"
                    ch7_8_state_value["text"] = "待机状态"
                    ch7_8_state_value["bg"] = "#919191"

            entry_ch7_8["state"] = "normal"
            entry_ch7_8_set_voltage_value["state"] = "normal"
            ch7_8_signal_ntc = 0
        else:
            messagebox.showinfo("错误", "通道7-8未开始测试")

    if ch_stop_name == "ch8_1":
        if not ch8_1_start_signal:
            mutex.acquire()
            ser.stop(com, ch8_1_stop_commend)
            mutex.release()
            # ch8_1_signal = 0

            ch8_readcommend_stop = "080300000000A5"
            ### 加锁读取数据
            ### 数据处理
            mutex.acquire()
            ch8_read_data_stop = ser.readdata(com, ch8_readcommend_stop)
            mutex.release()

            mutex_readenvironmenttemperature.acquire()
            ch8_1_environment_temperature_end = ser.readenvironmenttemperature(com1)
            mutex_readenvironmenttemperature.release()
            ch8_1_log.append(
                ["Stop_Environment_Temperature(℃):", ch8_1_environment_temperature_end]
            )

            print("ch8_1_stop")
            ch8_1_logprocess()
            ch8_1_start_signal = True

            if ch8_read_data_stop == "FF":
                ch8_1_data[2] = "通信异常"
                ch8_1_error_data == "通信异常"
                ch8_1_state_value["text"] = "通信异常"
                ch8_1_state_value["bg"] = "red"
            else:
                ch8_1_data[2] = int(hex(ch8_read_data_stop[2])[2:])
                if ch8_1_data[2] == 0:
                    ch8_1_data[2] = "待机状态"
                    ch8_1_error_data == "待机状态"
                    ch8_1_state_value["text"] = "待机状态"
                    ch8_1_state_value["bg"] = "#919191"

            entry_ch8_1["state"] = "normal"
            entry_ch8_1_set_voltage_value["state"] = "normal"
            ch8_1_signal_ntc = 0
        else:
            messagebox.showinfo("错误", "通道8-1未开始测试")

    if ch_stop_name == "ch8_2":
        if not ch8_2_start_signal:
            mutex.acquire()
            ser.stop(com, ch8_2_stop_commend)
            mutex.release()
            # ch8_2_signal = 0

            # time.sleep(0.1)

            ch8_readcommend_stop = "080300000000A5"
            ### 加锁读取数据
            ### 数据处理
            mutex.acquire()
            ch8_read_data_stop = ser.readdata(com, ch8_readcommend_stop)
            mutex.release()

            mutex_readenvironmenttemperature.acquire()
            ch8_2_environment_temperature_end = ser.readenvironmenttemperature(com1)
            mutex_readenvironmenttemperature.release()
            ch8_2_log.append(
                ["Stop_Environment_Temperature(℃):", ch8_2_environment_temperature_end]
            )

            print("ch8_2_stop")
            ch8_2_logprocess()
            ch8_2_start_signal = True

            if ch8_read_data_stop == "FF":
                ch8_2_data[2] = "通信异常"
                ch8_2_error_data == "通信异常"
                ch8_2_state_value["text"] = "通信异常"
                ch8_2_state_value["bg"] = "red"
            else:
                ch8_2_data[2] = int(hex(ch8_read_data_stop[2])[2:])
                if ch8_2_data[2] == 0:
                    ch8_2_data[2] = "待机状态"
                    ch8_2_error_data == "待机状态"
                    ch8_2_state_value["text"] = "待机状态"
                    ch8_2_state_value["bg"] = "#919191"

            entry_ch8_2["state"] = "normal"
            entry_ch8_2_set_voltage_value["state"] = "normal"
            ch8_2_signal_ntc = 0
        else:
            messagebox.showinfo("错误", "通道8-2未开始测试")

    if ch_stop_name == "ch8_3":
        if not ch8_3_start_signal:
            mutex.acquire()
            ser.stop(com, ch8_3_stop_commend)
            mutex.release()
            # ch8_3_signal = 0

            # time.sleep(0.1)

            ch8_readcommend_stop = "080300000000A5"
            ### 加锁读取数据
            ### 数据处理
            mutex.acquire()
            ch8_read_data_stop = ser.readdata(com, ch8_readcommend_stop)
            mutex.release()

            mutex_readenvironmenttemperature.acquire()
            ch8_3_environment_temperature_end = ser.readenvironmenttemperature(com1)
            mutex_readenvironmenttemperature.release()
            ch8_3_log.append(
                ["Stop_Environment_Temperature(℃):", ch8_3_environment_temperature_end]
            )

            print("ch8_3_stop")
            ch8_3_logprocess()
            ch8_3_start_signal = True

            if ch8_read_data_stop == "FF":
                ch8_3_data[2] = "通信异常"
                ch8_3_error_data == "通信异常"
                ch8_3_state_value["text"] = "通信异常"
                ch8_3_state_value["bg"] = "red"
            else:
                ch8_3_data[2] = int(hex(ch8_read_data_stop[2])[2:])
                if ch8_3_data[2] == 0:
                    ch8_3_data[2] = "待机状态"
                    ch8_3_error_data == "待机状态"
                    ch8_3_state_value["text"] = "待机状态"
                    ch8_3_state_value["bg"] = "#919191"

            entry_ch8_3["state"] = "normal"
            entry_ch8_3_set_voltage_value["state"] = "normal"
            ch8_3_signal_ntc = 0
        else:
            messagebox.showinfo("错误", "通道8-3未开始测试")

    if ch_stop_name == "ch8_4":
        if not ch8_4_start_signal:
            mutex.acquire()
            ser.stop(com, ch8_4_stop_commend)
            mutex.release()
            # ch8_4_signal = 0

            # time.sleep(0.1)

            ch8_readcommend_stop = "080300000000A5"
            ### 加锁读取数据
            ### 数据处理
            mutex.acquire()
            ch8_read_data_stop = ser.readdata(com, ch8_readcommend_stop)
            mutex.release()

            mutex_readenvironmenttemperature.acquire()
            ch8_4_environment_temperature_end = ser.readenvironmenttemperature(com1)
            mutex_readenvironmenttemperature.release()
            ch8_4_log.append(
                ["Stop_Environment_Temperature(℃):", ch8_4_environment_temperature_end]
            )

            print("ch8_4_stop")
            ch8_4_logprocess()
            ch8_4_start_signal = True

            if ch8_read_data_stop == "FF":
                ch8_4_data[2] = "通信异常"
                ch8_4_error_data == "通信异常"
                ch8_4_state_value["text"] = "通信异常"
                ch8_4_state_value["bg"] = "red"
            else:
                ch8_4_data[2] = int(hex(ch8_read_data_stop[2])[2:])
                if ch8_4_data[2] == 0:
                    ch8_4_data[2] = "待机状态"
                    ch8_4_error_data == "待机状态"
                    ch8_4_state_value["text"] = "待机状态"
                    ch8_4_state_value["bg"] = "#919191"

            entry_ch8_4["state"] = "normal"
            entry_ch8_4_set_voltage_value["state"] = "normal"
            ch8_4_signal_ntc = 0
        else:
            messagebox.showinfo("错误", "通道8-4未开始测试")

    if ch_stop_name == "ch8_5":
        if not ch8_5_start_signal:
            mutex.acquire()
            ser.stop(com, ch8_5_stop_commend)
            mutex.release()
            # ch8_5_signal = 0

            # time.sleep(0.1)

            ch8_readcommend_stop = "080300000000A5"
            ### 加锁读取数据
            ### 数据处理
            mutex.acquire()
            ch8_read_data_stop = ser.readdata(com, ch8_readcommend_stop)
            mutex.release()

            mutex_readenvironmenttemperature.acquire()
            ch8_5_environment_temperature_end = ser.readenvironmenttemperature(com1)
            mutex_readenvironmenttemperature.release()
            ch8_5_log.append(
                ["Stop_Environment_Temperature(℃):", ch8_5_environment_temperature_end]
            )

            print("ch8_5_stop")
            ch8_5_logprocess()
            ch8_5_start_signal = True

            if ch8_read_data_stop == "FF":
                ch8_5_data[2] = "通信异常"
                ch8_5_error_data == "通信异常"
                ch8_5_state_value["text"] = "通信异常"
                ch8_5_state_value["bg"] = "red"
            else:
                ch8_5_data[2] = int(hex(ch8_read_data_stop[2])[2:])
                if ch8_5_data[2] == 0:
                    ch8_5_data[2] = "待机状态"
                    ch8_5_error_data == "待机状态"
                    ch8_5_state_value["text"] = "待机状态"
                    ch8_5_state_value["bg"] = "#919191"

            entry_ch8_5["state"] = "normal"
            entry_ch8_5_set_voltage_value["state"] = "normal"
            ch8_5_signal_ntc = 0
        else:
            messagebox.showinfo("错误", "通道8-5未开始测试")

    if ch_stop_name == "ch8_6":
        if not ch8_6_start_signal:
            mutex.acquire()
            ser.stop(com, ch8_6_stop_commend)
            mutex.release()
            # ch8_6_signal = 0

            # time.sleep(0.1)

            ch8_readcommend_stop = "080300000000A5"
            ### 加锁读取数据
            ### 数据处理
            mutex.acquire()
            ch8_read_data_stop = ser.readdata(com, ch8_readcommend_stop)
            mutex.release()

            mutex_readenvironmenttemperature.acquire()
            ch8_6_environment_temperature_end = ser.readenvironmenttemperature(com1)
            mutex_readenvironmenttemperature.release()
            ch8_6_log.append(
                ["Stop_Environment_Temperature(℃):", ch8_6_environment_temperature_end]
            )

            print("ch8_6_stop")
            ch8_6_logprocess()
            ch8_6_start_signal = True

            if ch8_read_data_stop == "FF":
                ch8_6_data[2] = "通信异常"
                ch8_6_error_data == "通信异常"
                ch8_6_state_value["text"] = "通信异常"
                ch8_6_state_value["bg"] = "red"
            else:
                ch8_6_data[2] = int(hex(ch8_read_data_stop[2])[2:])
                if ch8_6_data[2] == 0:
                    ch8_6_data[2] = "待机状态"
                    ch8_6_error_data == "待机状态"
                    ch8_6_state_value["text"] = "待机状态"
                    ch8_6_state_value["bg"] = "#919191"

            entry_ch8_6["state"] = "normal"
            entry_ch8_6_set_voltage_value["state"] = "normal"
            ch8_6_signal_ntc = 0
        else:
            messagebox.showinfo("错误", "通道8-6未开始测试")

    if ch_stop_name == "ch8_7":
        if not ch8_7_start_signal:
            mutex.acquire()
            ser.stop(com, ch8_7_stop_commend)
            mutex.release()
            # ch8_7_signal = 0

            # time.sleep(0.1)

            ch8_readcommend_stop = "080300000000A5"
            ### 加锁读取数据
            ### 数据处理
            mutex.acquire()
            ch8_read_data_stop = ser.readdata(com, ch8_readcommend_stop)
            mutex.release()

            mutex_readenvironmenttemperature.acquire()
            ch8_7_environment_temperature_end = ser.readenvironmenttemperature(com1)
            mutex_readenvironmenttemperature.release()
            ch8_7_log.append(
                ["Stop_Environment_Temperature(℃):", ch8_7_environment_temperature_end]
            )

            print("ch8_7_stop")
            ch8_7_logprocess()
            ch8_7_start_signal = True

            if ch8_read_data_stop == "FF":
                ch8_7_data[2] = "通信异常"
                ch8_7_error_data == "通信异常"
                ch8_7_state_value["text"] = "通信异常"
                ch8_7_state_value["bg"] = "red"
            else:
                ch8_7_data[2] = int(hex(ch8_read_data_stop[2])[2:])
                if ch8_7_data[2] == 0:
                    ch8_7_data[2] = "待机状态"
                    ch8_7_error_data == "待机状态"
                    ch8_7_state_value["text"] = "待机状态"
                    ch8_7_state_value["bg"] = "#919191"

            entry_ch8_7["state"] = "normal"
            entry_ch8_7_set_voltage_value["state"] = "normal"
            ch8_7_signal_ntc = 0
        else:
            messagebox.showinfo("错误", "通道8-7未开始测试")

    if ch_stop_name == "ch8_8":
        if not ch8_8_start_signal:
            mutex.acquire()
            ser.stop(com, ch8_8_stop_commend)
            mutex.release()
            # ch8_8_signal = 0

            # time.sleep(0.1)

            ch8_readcommend_stop = "080300000000A5"
            ### 加锁读取数据
            ### 数据处理
            mutex.acquire()
            ch8_read_data_stop = ser.readdata(com, ch8_readcommend_stop)
            mutex.release()

            mutex_readenvironmenttemperature.acquire()
            ch8_8_environment_temperature_end = ser.readenvironmenttemperature(com1)
            mutex_readenvironmenttemperature.release()
            ch8_8_log.append(
                ["Stop_Environment_Temperature(℃):", ch8_8_environment_temperature_end]
            )

            print("ch8_8_stop")
            ch8_8_logprocess()
            ch8_8_start_signal = True

            if ch8_read_data_stop == "FF":
                ch8_8_data[2] = "通信异常"
                ch8_8_error_data == "通信异常"
                ch8_8_state_value["text"] = "通信异常"
                ch8_8_state_value["bg"] = "red"
            else:
                ch8_8_data[2] = int(hex(ch8_read_data_stop[2])[2:])
                if ch8_8_data[2] == 0:
                    ch8_8_data[2] = "待机状态"
                    ch8_8_error_data == "待机状态"
                    ch8_8_state_value["text"] = "待机状态"
                    ch8_8_state_value["bg"] = "#919191"

            entry_ch8_8["state"] = "normal"
            entry_ch8_8_set_voltage_value["state"] = "normal"
            ch8_8_signal_ntc = 0
        else:
            messagebox.showinfo("错误", "通道8-8未开始测试")


start_test()


root = tk.Tk()
root.title("锂电池测试")
root["bg"] = "#C4C4C4"


ch1_1_name = tk.LabelFrame(root, fg="blue", bg="#C4C4C4", text="通道1-1")
ch1_1_name.grid(row=0, column=0)

ch1_1_sn = tk.Label(
    ch1_1_name, bg="#E6E6E6", text="条码输入：", width=12, bd=1, relief="raised"
)
ch1_1_sn.grid(row=0, column=0, sticky="wn")

entry_ch1_1 = tk.Entry(ch1_1_name, width=20)
entry_ch1_1.grid(row=0, column=1, columnspan=2, sticky="wn")

ch1_1_set_voltage = tk.Label(
    ch1_1_name, bg="#E6E6E6", text="截止电压：", width=12, bd=1, relief="raised"
)
ch1_1_set_voltage.grid(row=1, column=0, sticky="wn")

entry_ch1_1_set_voltage_value = tk.Entry(ch1_1_name, width=20)
entry_ch1_1_set_voltage_value.grid(row=1, column=1, columnspan=2, sticky="wn")

ch1_1_state = tk.Label(
    ch1_1_name, bg="#E6E6E6", text="当前状态：", width=12, bd=1, relief="raised"
)
ch1_1_state.grid(row=2, column=0, sticky="wn")

ch1_1_state_value = tk.Label(ch1_1_name, bg="#E6E6E6", text=ch1_1_data[2], width=20)
ch1_1_state_value.grid(row=2, column=1, sticky="wn", columnspan=2)

ch1_1_button_start = tk.Button(
    ch1_1_name,
    width=11,
    text="开始",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch1_1_start_test(),
)
ch1_1_button_start.grid(row=3, column=0, sticky="wn")

ch1_1_button_stop = tk.Button(
    ch1_1_name,
    width=9,
    text="停止",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch1_1_stop_test(),
)
ch1_1_button_stop.grid(row=3, column=1, sticky="wn")

ch1_1_button = tk.Button(
    ch1_1_name,
    width=9,
    text="详细查看",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: face("ch1_1_data"),
)
ch1_1_button.grid(row=3, column=2, sticky="wn")

# ch1_2

ch1_2_name = tk.LabelFrame(root, fg="blue", bg="#C4C4C4", text="通道1-2")
ch1_2_name.grid(row=0, column=1)

ch1_2_sn = tk.Label(
    ch1_2_name, bg="#E6E6E6", text="条码输入：", width=12, bd=1, relief="raised"
)
ch1_2_sn.grid(row=0, column=1, sticky="wn")

entry_ch1_2 = tk.Entry(ch1_2_name, width=20)
entry_ch1_2.grid(row=0, column=2, columnspan=2, sticky="wn")

ch1_2_set_voltage = tk.Label(
    ch1_2_name, bg="#E6E6E6", text="截止电压：", width=12, bd=1, relief="raised"
)
ch1_2_set_voltage.grid(row=1, column=1, sticky="wn")

entry_ch1_2_set_voltage_value = tk.Entry(ch1_2_name, width=20)
entry_ch1_2_set_voltage_value.grid(row=1, column=2, columnspan=2, sticky="wn")

ch1_2_state = tk.Label(
    ch1_2_name, bg="#E6E6E6", text="当前状态：", width=12, bd=1, relief="raised"
)
ch1_2_state.grid(row=2, column=1, sticky="wn")

ch1_2_state_value = tk.Label(ch1_2_name, bg="#E6E6E6", text=ch1_2_data[2], width=20)
ch1_2_state_value.grid(row=2, column=2, sticky="wn", columnspan=2)

ch1_2_button_start = tk.Button(
    ch1_2_name,
    width=11,
    text="开始",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch1_2_start_test(),
)
ch1_2_button_start.grid(row=3, column=1, sticky="wn")

ch1_2_button_stop = tk.Button(
    ch1_2_name,
    width=9,
    text="停止",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch1_2_stop_test(),
)
ch1_2_button_stop.grid(row=3, column=2, sticky="wn")

ch1_2_button = tk.Button(
    ch1_2_name,
    width=9,
    text="详细查看",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: face("ch1_2_data"),
)
ch1_2_button.grid(row=3, column=3, sticky="wn")

# ch1_3

ch1_3_name = tk.LabelFrame(root, fg="blue", bg="#C4C4C4", text="通道1-3")
ch1_3_name.grid(row=0, column=2)

ch1_3_sn = tk.Label(
    ch1_3_name, bg="#E6E6E6", text="条码输入：", width=12, bd=1, relief="raised"
)
ch1_3_sn.grid(row=0, column=2, sticky="wn")

entry_ch1_3 = tk.Entry(ch1_3_name, width=20)
entry_ch1_3.grid(row=0, column=3, columnspan=2, sticky="wn")

ch1_3_set_voltage = tk.Label(
    ch1_3_name, bg="#E6E6E6", text="截止电压：", width=12, bd=1, relief="raised"
)
ch1_3_set_voltage.grid(row=1, column=2, sticky="wn")

entry_ch1_3_set_voltage_value = tk.Entry(ch1_3_name, width=20)
entry_ch1_3_set_voltage_value.grid(row=1, column=3, columnspan=2, sticky="wn")

ch1_3_state = tk.Label(
    ch1_3_name, bg="#E6E6E6", text="当前状态：", width=12, bd=1, relief="raised"
)
ch1_3_state.grid(row=2, column=2, sticky="wn")

ch1_3_state_value = tk.Label(ch1_3_name, bg="#E6E6E6", text=ch1_3_data[2], width=20)
ch1_3_state_value.grid(row=2, column=3, sticky="wn", columnspan=2)

ch1_3_button_start = tk.Button(
    ch1_3_name,
    width=11,
    text="开始",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch1_3_start_test(),
)
ch1_3_button_start.grid(row=3, column=2, sticky="wn")

ch1_3_button_stop = tk.Button(
    ch1_3_name,
    width=9,
    text="停止",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch1_3_stop_test(),
)
ch1_3_button_stop.grid(row=3, column=3, sticky="wn")

ch1_3_button = tk.Button(
    ch1_3_name,
    width=9,
    text="详细查看",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: face("ch1_3_data"),
)
ch1_3_button.grid(row=3, column=4, sticky="wn")


# ch1_4

ch1_4_name = tk.LabelFrame(root, fg="blue", bg="#C4C4C4", text="通道1-4")
ch1_4_name.grid(row=0, column=3)

ch1_4_sn = tk.Label(
    ch1_4_name, bg="#E6E6E6", text="条码输入：", width=12, bd=1, relief="raised"
)
ch1_4_sn.grid(row=0, column=3, sticky="wn")

entry_ch1_4 = tk.Entry(ch1_4_name, width=20)
entry_ch1_4.grid(row=0, column=4, columnspan=2, sticky="wn")

ch1_4_set_voltage = tk.Label(
    ch1_4_name, bg="#E6E6E6", text="截止电压：", width=12, bd=1, relief="raised"
)
ch1_4_set_voltage.grid(row=1, column=3, sticky="wn")

entry_ch1_4_set_voltage_value = tk.Entry(ch1_4_name, width=20)
entry_ch1_4_set_voltage_value.grid(row=1, column=4, columnspan=2, sticky="wn")

ch1_4_state = tk.Label(
    ch1_4_name, bg="#E6E6E6", text="当前状态：", width=12, bd=1, relief="raised"
)
ch1_4_state.grid(row=2, column=3, sticky="wn")

ch1_4_state_value = tk.Label(ch1_4_name, bg="#E6E6E6", text=ch1_4_data[2], width=20)
ch1_4_state_value.grid(row=2, column=4, sticky="wn", columnspan=2)

ch1_4_button_start = tk.Button(
    ch1_4_name,
    width=11,
    text="开始",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch1_4_start_test(),
)
ch1_4_button_start.grid(row=3, column=3, sticky="wn")

ch1_4_button_stop = tk.Button(
    ch1_4_name,
    width=9,
    text="停止",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch1_4_stop_test(),
)
ch1_4_button_stop.grid(row=3, column=4, sticky="wn")

ch1_4_button = tk.Button(
    ch1_4_name,
    width=9,
    text="详细查看",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: face("ch1_4_data"),
)
ch1_4_button.grid(row=3, column=5, sticky="wn")


# ch1_5
ch1_5_name = tk.LabelFrame(root, fg="blue", bg="#C4C4C4", text="通道1-5")
ch1_5_name.grid(row=0, column=4)

ch1_5_sn = tk.Label(
    ch1_5_name, bg="#E6E6E6", text="条码输入：", width=12, bd=1, relief="raised"
)
ch1_5_sn.grid(row=0, column=4, sticky="wn")

entry_ch1_5 = tk.Entry(ch1_5_name, width=20)
entry_ch1_5.grid(row=0, column=5, columnspan=2, sticky="wn")

ch1_5_set_voltage = tk.Label(
    ch1_5_name, bg="#E6E6E6", text="截止电压：", width=12, bd=1, relief="raised"
)
ch1_5_set_voltage.grid(row=1, column=4, sticky="wn")

entry_ch1_5_set_voltage_value = tk.Entry(ch1_5_name, width=20)
entry_ch1_5_set_voltage_value.grid(row=1, column=5, columnspan=2, sticky="wn")

ch1_5_state = tk.Label(
    ch1_5_name, bg="#E6E6E6", text="当前状态：", width=12, bd=1, relief="raised"
)
ch1_5_state.grid(row=2, column=4, sticky="wn")

ch1_5_state_value = tk.Label(ch1_5_name, bg="#E6E6E6", text=ch1_5_data[2], width=20)
ch1_5_state_value.grid(row=2, column=5, sticky="wn", columnspan=2)

ch1_5_button_start = tk.Button(
    ch1_5_name,
    width=11,
    text="开始",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch1_5_start_test(),
)
ch1_5_button_start.grid(row=3, column=4, sticky="wn")

ch1_5_button_stop = tk.Button(
    ch1_5_name,
    width=9,
    text="停止",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch1_5_stop_test(),
)
ch1_5_button_stop.grid(row=3, column=5, sticky="wn")

ch1_5_button = tk.Button(
    ch1_5_name,
    width=9,
    text="详细查看",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: face("ch1_5_data"),
)
ch1_5_button.grid(row=3, column=6, sticky="wn")


# ch1_6
ch1_6_name = tk.LabelFrame(root, fg="blue", bg="#C4C4C4", text="通道1-6")
ch1_6_name.grid(row=0, column=5)

ch1_6_sn = tk.Label(
    ch1_6_name, bg="#E6E6E6", text="条码输入：", width=12, bd=1, relief="raised"
)
ch1_6_sn.grid(row=0, column=5, sticky="wn")

entry_ch1_6 = tk.Entry(ch1_6_name, width=20)
entry_ch1_6.grid(row=0, column=6, columnspan=2, sticky="wn")

ch1_6_set_voltage = tk.Label(
    ch1_6_name, bg="#E6E6E6", text="截止电压：", width=12, bd=1, relief="raised"
)
ch1_6_set_voltage.grid(row=1, column=5, sticky="wn")

entry_ch1_6_set_voltage_value = tk.Entry(ch1_6_name, width=20)
entry_ch1_6_set_voltage_value.grid(row=1, column=6, columnspan=2, sticky="wn")

ch1_6_state = tk.Label(
    ch1_6_name, bg="#E6E6E6", text="当前状态：", width=12, bd=1, relief="raised"
)
ch1_6_state.grid(row=2, column=5, sticky="wn")

ch1_6_state_value = tk.Label(ch1_6_name, bg="#E6E6E6", text=ch1_6_data[2], width=20)
ch1_6_state_value.grid(row=2, column=6, sticky="wn", columnspan=2)

ch1_6_button_start = tk.Button(
    ch1_6_name,
    width=11,
    text="开始",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch1_6_start_test(),
)
ch1_6_button_start.grid(row=3, column=5, sticky="wn")

ch1_6_button_stop = tk.Button(
    ch1_6_name,
    width=9,
    text="停止",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch1_6_stop_test(),
)
ch1_6_button_stop.grid(row=3, column=6, sticky="wn")

ch1_6_button = tk.Button(
    ch1_6_name,
    width=9,
    text="详细查看",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: face("ch1_6_data"),
)
ch1_6_button.grid(row=3, column=7, sticky="wn")

# ch1_7
ch1_7_name = tk.LabelFrame(root, fg="blue", bg="#C4C4C4", text="通道1-7")
ch1_7_name.grid(row=0, column=6)

ch1_7_sn = tk.Label(
    ch1_7_name, bg="#E6E6E6", text="条码输入：", width=12, bd=1, relief="raised"
)
ch1_7_sn.grid(row=0, column=6, sticky="wn")

entry_ch1_7 = tk.Entry(ch1_7_name, width=20)
entry_ch1_7.grid(row=0, column=7, columnspan=2, sticky="wn")

ch1_7_set_voltage = tk.Label(
    ch1_7_name, bg="#E6E6E6", text="截止电压：", width=12, bd=1, relief="raised"
)
ch1_7_set_voltage.grid(row=1, column=6, sticky="wn")

entry_ch1_7_set_voltage_value = tk.Entry(ch1_7_name, width=20)
entry_ch1_7_set_voltage_value.grid(row=1, column=7, columnspan=2, sticky="wn")

ch1_7_state = tk.Label(
    ch1_7_name, bg="#E6E6E6", text="当前状态：", width=12, bd=1, relief="raised"
)
ch1_7_state.grid(row=2, column=6, sticky="wn")

ch1_7_state_value = tk.Label(ch1_7_name, bg="#E6E6E6", text=ch1_7_data[2], width=20)
ch1_7_state_value.grid(row=2, column=7, sticky="wn", columnspan=2)

ch1_7_button_start = tk.Button(
    ch1_7_name,
    width=11,
    text="开始",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch1_7_start_test(),
)
ch1_7_button_start.grid(row=3, column=6, sticky="wn")

ch1_7_button_stop = tk.Button(
    ch1_7_name,
    width=9,
    text="停止",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch1_7_stop_test(),
)
ch1_7_button_stop.grid(row=3, column=7, sticky="wn")

ch1_7_button = tk.Button(
    ch1_7_name,
    width=9,
    text="详细查看",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: face("ch1_7_data"),
)
ch1_7_button.grid(row=3, column=8, sticky="wn")

# ch1_8
ch1_8_name = tk.LabelFrame(root, fg="blue", bg="#C4C4C4", text="通道1-8")
ch1_8_name.grid(row=0, column=7)

ch1_8_sn = tk.Label(
    ch1_8_name, bg="#E6E6E6", text="条码输入：", width=12, bd=1, relief="raised"
)
ch1_8_sn.grid(row=0, column=7, sticky="wn")

entry_ch1_8 = tk.Entry(ch1_8_name, width=20)
entry_ch1_8.grid(row=0, column=8, columnspan=2, sticky="wn")

ch1_8_set_voltage = tk.Label(
    ch1_8_name, bg="#E6E6E6", text="截止电压：", width=12, bd=1, relief="raised"
)
ch1_8_set_voltage.grid(row=1, column=7, sticky="wn")

entry_ch1_8_set_voltage_value = tk.Entry(ch1_8_name, width=20)
entry_ch1_8_set_voltage_value.grid(row=1, column=8, columnspan=2, sticky="wn")

ch1_8_state = tk.Label(
    ch1_8_name, bg="#E6E6E6", text="当前状态：", width=12, bd=1, relief="raised"
)
ch1_8_state.grid(row=2, column=7, sticky="wn")

ch1_8_state_value = tk.Label(ch1_8_name, bg="#E6E6E6", text=ch1_8_data[2], width=20)
ch1_8_state_value.grid(row=2, column=8, sticky="wn", columnspan=2)

ch1_8_button_start = tk.Button(
    ch1_8_name,
    width=11,
    text="开始",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch1_8_start_test(),
)
ch1_8_button_start.grid(row=3, column=7, sticky="wn")

ch1_8_button_stop = tk.Button(
    ch1_8_name,
    width=9,
    text="停止",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch1_8_stop_test(),
)
ch1_8_button_stop.grid(row=3, column=8, sticky="wn")

ch1_8_button = tk.Button(
    ch1_8_name,
    width=9,
    text="详细查看",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: face("ch1_8_data"),
)
ch1_8_button.grid(row=3, column=9, sticky="wn")


ch2_1_name = tk.LabelFrame(root, fg="blue", bg="#C4C4C4", text="通道2-1")
ch2_1_name.grid(row=1, column=0)

ch2_1_sn = tk.Label(
    ch2_1_name, bg="#E6E6E6", text="条码输入：", width=12, bd=1, relief="raised"
)
ch2_1_sn.grid(row=1, column=0, sticky="wn")

entry_ch2_1 = tk.Entry(ch2_1_name, width=20)
entry_ch2_1.grid(row=1, column=1, columnspan=2, sticky="wn")

ch2_1_set_voltage = tk.Label(
    ch2_1_name, bg="#E6E6E6", text="截止电压：", width=12, bd=1, relief="raised"
)
ch2_1_set_voltage.grid(row=2, column=0, sticky="wn")

entry_ch2_1_set_voltage_value = tk.Entry(ch2_1_name, width=20)
entry_ch2_1_set_voltage_value.grid(row=2, column=1, columnspan=2, sticky="wn")

ch2_1_state = tk.Label(
    ch2_1_name, bg="#E6E6E6", text="当前状态：", width=12, bd=1, relief="raised"
)
ch2_1_state.grid(row=3, column=0, sticky="wn")

ch2_1_state_value = tk.Label(ch2_1_name, bg="#E6E6E6", text=ch2_1_data[2], width=20)
ch2_1_state_value.grid(row=3, column=1, sticky="wn", columnspan=2)

ch2_1_button_start = tk.Button(
    ch2_1_name,
    width=11,
    text="开始",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch2_1_start_test(),
)
ch2_1_button_start.grid(row=4, column=0, sticky="wn")

ch2_1_button_stop = tk.Button(
    ch2_1_name,
    width=9,
    text="停止",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch2_1_stop_test(),
)
ch2_1_button_stop.grid(row=4, column=1, sticky="wn")

ch2_1_button = tk.Button(
    ch2_1_name,
    width=9,
    text="详细查看",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: face("ch2_1_data"),
)
ch2_1_button.grid(row=4, column=2, sticky="wn")

# ch2_2

ch2_2_name = tk.LabelFrame(root, fg="blue", bg="#C4C4C4", text="通道2-2")
ch2_2_name.grid(row=1, column=1)

ch2_2_sn = tk.Label(
    ch2_2_name, bg="#E6E6E6", text="条码输入：", width=12, bd=1, relief="raised"
)
ch2_2_sn.grid(row=1, column=1, sticky="wn")

entry_ch2_2 = tk.Entry(ch2_2_name, width=20)
entry_ch2_2.grid(row=1, column=2, columnspan=2, sticky="wn")

ch2_2_set_voltage = tk.Label(
    ch2_2_name, bg="#E6E6E6", text="截止电压：", width=12, bd=1, relief="raised"
)
ch2_2_set_voltage.grid(row=2, column=1, sticky="wn")

entry_ch2_2_set_voltage_value = tk.Entry(ch2_2_name, width=20)
entry_ch2_2_set_voltage_value.grid(row=2, column=2, columnspan=2, sticky="wn")

ch2_2_state = tk.Label(
    ch2_2_name, bg="#E6E6E6", text="当前状态：", width=12, bd=1, relief="raised"
)
ch2_2_state.grid(row=3, column=1, sticky="wn")

ch2_2_state_value = tk.Label(ch2_2_name, bg="#E6E6E6", text=ch2_2_data[2], width=20)
ch2_2_state_value.grid(row=3, column=2, sticky="wn", columnspan=2)

ch2_2_button_start = tk.Button(
    ch2_2_name,
    width=11,
    text="开始",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch2_2_start_test(),
)
ch2_2_button_start.grid(row=4, column=1, sticky="wn")

ch2_2_button_stop = tk.Button(
    ch2_2_name,
    width=9,
    text="停止",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch2_2_stop_test(),
)
ch2_2_button_stop.grid(row=4, column=2, sticky="wn")

ch2_2_button = tk.Button(
    ch2_2_name,
    width=9,
    text="详细查看",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: face("ch2_2_data"),
)
ch2_2_button.grid(row=4, column=3, sticky="wn")

# ch2_3

ch2_3_name = tk.LabelFrame(root, fg="blue", bg="#C4C4C4", text="通道2-3")
ch2_3_name.grid(row=1, column=2)

ch2_3_sn = tk.Label(
    ch2_3_name, bg="#E6E6E6", text="条码输入：", width=12, bd=1, relief="raised"
)
ch2_3_sn.grid(row=1, column=2, sticky="wn")

entry_ch2_3 = tk.Entry(ch2_3_name, width=20)
entry_ch2_3.grid(row=1, column=3, columnspan=2, sticky="wn")

ch2_3_set_voltage = tk.Label(
    ch2_3_name, bg="#E6E6E6", text="截止电压：", width=12, bd=1, relief="raised"
)
ch2_3_set_voltage.grid(row=2, column=2, sticky="wn")

entry_ch2_3_set_voltage_value = tk.Entry(ch2_3_name, width=20)
entry_ch2_3_set_voltage_value.grid(row=2, column=3, columnspan=2, sticky="wn")

ch2_3_state = tk.Label(
    ch2_3_name, bg="#E6E6E6", text="当前状态：", width=12, bd=1, relief="raised"
)
ch2_3_state.grid(row=3, column=2, sticky="wn")

ch2_3_state_value = tk.Label(ch2_3_name, bg="#E6E6E6", text=ch2_3_data[2], width=20)
ch2_3_state_value.grid(row=3, column=3, sticky="wn", columnspan=2)

ch2_3_button_start = tk.Button(
    ch2_3_name,
    width=11,
    text="开始",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch2_3_start_test(),
)
ch2_3_button_start.grid(row=4, column=2, sticky="wn")

ch2_3_button_stop = tk.Button(
    ch2_3_name,
    width=9,
    text="停止",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch2_3_stop_test(),
)
ch2_3_button_stop.grid(row=4, column=3, sticky="wn")

ch2_3_button = tk.Button(
    ch2_3_name,
    width=9,
    text="详细查看",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: face("ch2_3_data"),
)
ch2_3_button.grid(row=4, column=4, sticky="wn")


# ch2_4

ch2_4_name = tk.LabelFrame(root, fg="blue", bg="#C4C4C4", text="通道2-4")
ch2_4_name.grid(row=1, column=3)

ch2_4_sn = tk.Label(
    ch2_4_name, bg="#E6E6E6", text="条码输入：", width=12, bd=1, relief="raised"
)
ch2_4_sn.grid(row=1, column=3, sticky="wn")

entry_ch2_4 = tk.Entry(ch2_4_name, width=20)
entry_ch2_4.grid(row=1, column=4, columnspan=2, sticky="wn")

ch2_4_set_voltage = tk.Label(
    ch2_4_name, bg="#E6E6E6", text="截止电压：", width=12, bd=1, relief="raised"
)
ch2_4_set_voltage.grid(row=2, column=3, sticky="wn")

entry_ch2_4_set_voltage_value = tk.Entry(ch2_4_name, width=20)
entry_ch2_4_set_voltage_value.grid(row=2, column=4, columnspan=2, sticky="wn")

ch2_4_state = tk.Label(
    ch2_4_name, bg="#E6E6E6", text="当前状态：", width=12, bd=1, relief="raised"
)
ch2_4_state.grid(row=3, column=3, sticky="wn")

ch2_4_state_value = tk.Label(ch2_4_name, bg="#E6E6E6", text=ch2_4_data[2], width=20)
ch2_4_state_value.grid(row=3, column=4, sticky="wn", columnspan=2)

ch2_4_button_start = tk.Button(
    ch2_4_name,
    width=11,
    text="开始",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch2_4_start_test(),
)
ch2_4_button_start.grid(row=4, column=3, sticky="wn")

ch2_4_button_stop = tk.Button(
    ch2_4_name,
    width=9,
    text="停止",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch2_4_stop_test(),
)
ch2_4_button_stop.grid(row=4, column=4, sticky="wn")

ch2_4_button = tk.Button(
    ch2_4_name,
    width=9,
    text="详细查看",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: face("ch2_4_data"),
)
ch2_4_button.grid(row=4, column=5, sticky="wn")


# ch2_5
ch2_5_name = tk.LabelFrame(root, fg="blue", bg="#C4C4C4", text="通道2-5")
ch2_5_name.grid(row=1, column=4)

ch2_5_sn = tk.Label(
    ch2_5_name, bg="#E6E6E6", text="条码输入：", width=12, bd=1, relief="raised"
)
ch2_5_sn.grid(row=1, column=4, sticky="wn")

entry_ch2_5 = tk.Entry(ch2_5_name, width=20)
entry_ch2_5.grid(row=1, column=5, columnspan=2, sticky="wn")

ch2_5_set_voltage = tk.Label(
    ch2_5_name, bg="#E6E6E6", text="截止电压：", width=12, bd=1, relief="raised"
)
ch2_5_set_voltage.grid(row=2, column=4, sticky="wn")

entry_ch2_5_set_voltage_value = tk.Entry(ch2_5_name, width=20)
entry_ch2_5_set_voltage_value.grid(row=2, column=5, columnspan=2, sticky="wn")

ch2_5_state = tk.Label(
    ch2_5_name, bg="#E6E6E6", text="当前状态：", width=12, bd=1, relief="raised"
)
ch2_5_state.grid(row=3, column=4, sticky="wn")

ch2_5_state_value = tk.Label(ch2_5_name, bg="#E6E6E6", text=ch2_5_data[2], width=20)
ch2_5_state_value.grid(row=3, column=5, sticky="wn", columnspan=2)

ch2_5_button_start = tk.Button(
    ch2_5_name,
    width=11,
    text="开始",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch2_5_start_test(),
)
ch2_5_button_start.grid(row=4, column=4, sticky="wn")

ch2_5_button_stop = tk.Button(
    ch2_5_name,
    width=9,
    text="停止",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch2_5_stop_test(),
)
ch2_5_button_stop.grid(row=4, column=5, sticky="wn")

ch2_5_button = tk.Button(
    ch2_5_name,
    width=9,
    text="详细查看",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: face("ch2_5_data"),
)
ch2_5_button.grid(row=4, column=6, sticky="wn")


# ch2_6
ch2_6_name = tk.LabelFrame(root, fg="blue", bg="#C4C4C4", text="通道2-6")
ch2_6_name.grid(row=1, column=5)

ch2_6_sn = tk.Label(
    ch2_6_name, bg="#E6E6E6", text="条码输入：", width=12, bd=1, relief="raised"
)
ch2_6_sn.grid(row=1, column=5, sticky="wn")

entry_ch2_6 = tk.Entry(ch2_6_name, width=20)
entry_ch2_6.grid(row=1, column=6, columnspan=2, sticky="wn")

ch2_6_set_voltage = tk.Label(
    ch2_6_name, bg="#E6E6E6", text="截止电压：", width=12, bd=1, relief="raised"
)
ch2_6_set_voltage.grid(row=2, column=5, sticky="wn")

entry_ch2_6_set_voltage_value = tk.Entry(ch2_6_name, width=20)
entry_ch2_6_set_voltage_value.grid(row=2, column=6, columnspan=2, sticky="wn")

ch2_6_state = tk.Label(
    ch2_6_name, bg="#E6E6E6", text="当前状态：", width=12, bd=1, relief="raised"
)
ch2_6_state.grid(row=3, column=5, sticky="wn")

ch2_6_state_value = tk.Label(ch2_6_name, bg="#E6E6E6", text=ch2_6_data[2], width=20)
ch2_6_state_value.grid(row=3, column=6, sticky="wn", columnspan=2)

ch2_6_button_start = tk.Button(
    ch2_6_name,
    width=11,
    text="开始",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch2_6_start_test(),
)
ch2_6_button_start.grid(row=4, column=5, sticky="wn")

ch2_6_button_stop = tk.Button(
    ch2_6_name,
    width=9,
    text="停止",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch2_6_stop_test(),
)
ch2_6_button_stop.grid(row=4, column=6, sticky="wn")

ch2_6_button = tk.Button(
    ch2_6_name,
    width=9,
    text="详细查看",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: face("ch2_6_data"),
)
ch2_6_button.grid(row=4, column=7, sticky="wn")

# ch2_7
ch2_7_name = tk.LabelFrame(root, fg="blue", bg="#C4C4C4", text="通道2-7")
ch2_7_name.grid(row=1, column=6)

ch2_7_sn = tk.Label(
    ch2_7_name, bg="#E6E6E6", text="条码输入：", width=12, bd=1, relief="raised"
)
ch2_7_sn.grid(row=1, column=6, sticky="wn")

entry_ch2_7 = tk.Entry(ch2_7_name, width=20)
entry_ch2_7.grid(row=1, column=7, columnspan=2, sticky="wn")

ch2_7_set_voltage = tk.Label(
    ch2_7_name, bg="#E6E6E6", text="截止电压：", width=12, bd=1, relief="raised"
)
ch2_7_set_voltage.grid(row=2, column=6, sticky="wn")

entry_ch2_7_set_voltage_value = tk.Entry(ch2_7_name, width=20)
entry_ch2_7_set_voltage_value.grid(row=2, column=7, columnspan=2, sticky="wn")

ch2_7_state = tk.Label(
    ch2_7_name, bg="#E6E6E6", text="当前状态：", width=12, bd=1, relief="raised"
)
ch2_7_state.grid(row=3, column=6, sticky="wn")

ch2_7_state_value = tk.Label(ch2_7_name, bg="#E6E6E6", text=ch2_7_data[2], width=20)
ch2_7_state_value.grid(row=3, column=7, sticky="wn", columnspan=2)

ch2_7_button_start = tk.Button(
    ch2_7_name,
    width=11,
    text="开始",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch2_7_start_test(),
)
ch2_7_button_start.grid(row=4, column=6, sticky="wn")

ch2_7_button_stop = tk.Button(
    ch2_7_name,
    width=9,
    text="停止",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch2_7_stop_test(),
)
ch2_7_button_stop.grid(row=4, column=7, sticky="wn")

ch2_7_button = tk.Button(
    ch2_7_name,
    width=9,
    text="详细查看",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: face("ch2_7_data"),
)
ch2_7_button.grid(row=4, column=8, sticky="wn")

# ch2_8
ch2_8_name = tk.LabelFrame(root, fg="blue", bg="#C4C4C4", text="通道2-8")
ch2_8_name.grid(row=1, column=7)

ch2_8_sn = tk.Label(
    ch2_8_name, bg="#E6E6E6", text="条码输入：", width=12, bd=1, relief="raised"
)
ch2_8_sn.grid(row=1, column=7, sticky="wn")

entry_ch2_8 = tk.Entry(ch2_8_name, width=20)
entry_ch2_8.grid(row=1, column=8, columnspan=2, sticky="wn")

ch2_8_set_voltage = tk.Label(
    ch2_8_name, bg="#E6E6E6", text="截止电压：", width=12, bd=1, relief="raised"
)
ch2_8_set_voltage.grid(row=2, column=7, sticky="wn")

entry_ch2_8_set_voltage_value = tk.Entry(ch2_8_name, width=20)
entry_ch2_8_set_voltage_value.grid(row=2, column=8, columnspan=2, sticky="wn")

ch2_8_state = tk.Label(
    ch2_8_name, bg="#E6E6E6", text="当前状态：", width=12, bd=1, relief="raised"
)
ch2_8_state.grid(row=3, column=7, sticky="wn")

ch2_8_state_value = tk.Label(ch2_8_name, bg="#E6E6E6", text=ch2_8_data[2], width=20)
ch2_8_state_value.grid(row=3, column=8, sticky="wn", columnspan=2)

ch2_8_button_start = tk.Button(
    ch2_8_name,
    width=11,
    text="开始",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch2_8_start_test(),
)
ch2_8_button_start.grid(row=4, column=7, sticky="wn")

ch2_8_button_stop = tk.Button(
    ch2_8_name,
    width=9,
    text="停止",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch2_8_stop_test(),
)
ch2_8_button_stop.grid(row=4, column=8, sticky="wn")

ch2_8_button = tk.Button(
    ch2_8_name,
    width=9,
    text="详细查看",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: face("ch2_8_data"),
)
ch2_8_button.grid(row=4, column=9, sticky="wn")


ch3_1_name = tk.LabelFrame(root, fg="blue", bg="#C4C4C4", text="通道3-1")
ch3_1_name.grid(row=2, column=0)

ch3_1_sn = tk.Label(
    ch3_1_name, bg="#E6E6E6", text="条码输入：", width=12, bd=1, relief="raised"
)
ch3_1_sn.grid(row=2, column=0, sticky="wn")

entry_ch3_1 = tk.Entry(ch3_1_name, width=20)
entry_ch3_1.grid(row=2, column=1, columnspan=2, sticky="wn")

ch3_1_set_voltage = tk.Label(
    ch3_1_name, bg="#E6E6E6", text="截止电压：", width=12, bd=1, relief="raised"
)
ch3_1_set_voltage.grid(row=3, column=0, sticky="wn")

entry_ch3_1_set_voltage_value = tk.Entry(ch3_1_name, width=20)
entry_ch3_1_set_voltage_value.grid(row=3, column=1, columnspan=2, sticky="wn")

ch3_1_state = tk.Label(
    ch3_1_name, bg="#E6E6E6", text="当前状态：", width=12, bd=1, relief="raised"
)
ch3_1_state.grid(row=4, column=0, sticky="wn")

ch3_1_state_value = tk.Label(ch3_1_name, bg="#E6E6E6", text=ch3_1_data[2], width=20)
ch3_1_state_value.grid(row=4, column=1, sticky="wn", columnspan=2)

ch3_1_button_start = tk.Button(
    ch3_1_name,
    width=11,
    text="开始",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch3_1_start_test(),
)
ch3_1_button_start.grid(row=5, column=0, sticky="wn")

ch3_1_button_stop = tk.Button(
    ch3_1_name,
    width=9,
    text="停止",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch3_1_stop_test(),
)
ch3_1_button_stop.grid(row=5, column=1, sticky="wn")

ch3_1_button = tk.Button(
    ch3_1_name,
    width=9,
    text="详细查看",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: face("ch3_1_data"),
)
ch3_1_button.grid(row=5, column=2, sticky="wn")

# ch3_2

ch3_2_name = tk.LabelFrame(root, fg="blue", bg="#C4C4C4", text="通道3-2")
ch3_2_name.grid(row=2, column=1)

ch3_2_sn = tk.Label(
    ch3_2_name, bg="#E6E6E6", text="条码输入：", width=12, bd=1, relief="raised"
)
ch3_2_sn.grid(row=2, column=1, sticky="wn")

entry_ch3_2 = tk.Entry(ch3_2_name, width=20)
entry_ch3_2.grid(row=2, column=2, columnspan=2, sticky="wn")

ch3_2_set_voltage = tk.Label(
    ch3_2_name, bg="#E6E6E6", text="截止电压：", width=12, bd=1, relief="raised"
)
ch3_2_set_voltage.grid(row=3, column=1, sticky="wn")

entry_ch3_2_set_voltage_value = tk.Entry(ch3_2_name, width=20)
entry_ch3_2_set_voltage_value.grid(row=3, column=2, columnspan=2, sticky="wn")

ch3_2_state = tk.Label(
    ch3_2_name, bg="#E6E6E6", text="当前状态：", width=12, bd=1, relief="raised"
)
ch3_2_state.grid(row=4, column=1, sticky="wn")

ch3_2_state_value = tk.Label(ch3_2_name, bg="#E6E6E6", text=ch3_2_data[2], width=20)
ch3_2_state_value.grid(row=4, column=2, sticky="wn", columnspan=2)

ch3_2_button_start = tk.Button(
    ch3_2_name,
    width=11,
    text="开始",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch3_2_start_test(),
)
ch3_2_button_start.grid(row=5, column=1, sticky="wn")

ch3_2_button_stop = tk.Button(
    ch3_2_name,
    width=9,
    text="停止",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch3_2_stop_test(),
)
ch3_2_button_stop.grid(row=5, column=2, sticky="wn")

ch3_2_button = tk.Button(
    ch3_2_name,
    width=9,
    text="详细查看",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: face("ch3_2_data"),
)
ch3_2_button.grid(row=5, column=3, sticky="wn")

# ch3_3

ch3_3_name = tk.LabelFrame(root, fg="blue", bg="#C4C4C4", text="通道3-3")
ch3_3_name.grid(row=2, column=2)

ch3_3_sn = tk.Label(
    ch3_3_name, bg="#E6E6E6", text="条码输入：", width=12, bd=1, relief="raised"
)
ch3_3_sn.grid(row=2, column=2, sticky="wn")

entry_ch3_3 = tk.Entry(ch3_3_name, width=20)
entry_ch3_3.grid(row=2, column=3, columnspan=2, sticky="wn")

ch3_3_set_voltage = tk.Label(
    ch3_3_name, bg="#E6E6E6", text="截止电压：", width=12, bd=1, relief="raised"
)
ch3_3_set_voltage.grid(row=3, column=2, sticky="wn")

entry_ch3_3_set_voltage_value = tk.Entry(ch3_3_name, width=20)
entry_ch3_3_set_voltage_value.grid(row=3, column=3, columnspan=2, sticky="wn")

ch3_3_state = tk.Label(
    ch3_3_name, bg="#E6E6E6", text="当前状态：", width=12, bd=1, relief="raised"
)
ch3_3_state.grid(row=4, column=2, sticky="wn")

ch3_3_state_value = tk.Label(ch3_3_name, bg="#E6E6E6", text=ch3_3_data[2], width=20)
ch3_3_state_value.grid(row=4, column=3, sticky="wn", columnspan=2)

ch3_3_button_start = tk.Button(
    ch3_3_name,
    width=11,
    text="开始",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch3_3_start_test(),
)
ch3_3_button_start.grid(row=5, column=2, sticky="wn")

ch3_3_button_stop = tk.Button(
    ch3_3_name,
    width=9,
    text="停止",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch3_3_stop_test(),
)
ch3_3_button_stop.grid(row=5, column=3, sticky="wn")

ch3_3_button = tk.Button(
    ch3_3_name,
    width=9,
    text="详细查看",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: face("ch3_3_data"),
)
ch3_3_button.grid(row=5, column=4, sticky="wn")


# ch3_4

ch3_4_name = tk.LabelFrame(root, fg="blue", bg="#C4C4C4", text="通道3-4")
ch3_4_name.grid(row=2, column=3)

ch3_4_sn = tk.Label(
    ch3_4_name, bg="#E6E6E6", text="条码输入：", width=12, bd=1, relief="raised"
)
ch3_4_sn.grid(row=2, column=3, sticky="wn")

entry_ch3_4 = tk.Entry(ch3_4_name, width=20)
entry_ch3_4.grid(row=2, column=4, columnspan=2, sticky="wn")

ch3_4_set_voltage = tk.Label(
    ch3_4_name, bg="#E6E6E6", text="截止电压：", width=12, bd=1, relief="raised"
)
ch3_4_set_voltage.grid(row=3, column=3, sticky="wn")

entry_ch3_4_set_voltage_value = tk.Entry(ch3_4_name, width=20)
entry_ch3_4_set_voltage_value.grid(row=3, column=4, columnspan=2, sticky="wn")

ch3_4_state = tk.Label(
    ch3_4_name, bg="#E6E6E6", text="当前状态：", width=12, bd=1, relief="raised"
)
ch3_4_state.grid(row=4, column=3, sticky="wn")

ch3_4_state_value = tk.Label(ch3_4_name, bg="#E6E6E6", text=ch3_4_data[2], width=20)
ch3_4_state_value.grid(row=4, column=4, sticky="wn", columnspan=2)

ch3_4_button_start = tk.Button(
    ch3_4_name,
    width=11,
    text="开始",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch3_4_start_test(),
)
ch3_4_button_start.grid(row=5, column=3, sticky="wn")

ch3_4_button_stop = tk.Button(
    ch3_4_name,
    width=9,
    text="停止",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch3_4_stop_test(),
)
ch3_4_button_stop.grid(row=5, column=4, sticky="wn")

ch3_4_button = tk.Button(
    ch3_4_name,
    width=9,
    text="详细查看",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: face("ch3_4_data"),
)
ch3_4_button.grid(row=5, column=5, sticky="wn")


# ch3_5
ch3_5_name = tk.LabelFrame(root, fg="blue", bg="#C4C4C4", text="通道3-5")
ch3_5_name.grid(row=2, column=4)

ch3_5_sn = tk.Label(
    ch3_5_name, bg="#E6E6E6", text="条码输入：", width=12, bd=1, relief="raised"
)
ch3_5_sn.grid(row=2, column=4, sticky="wn")

entry_ch3_5 = tk.Entry(ch3_5_name, width=20)
entry_ch3_5.grid(row=2, column=5, columnspan=2, sticky="wn")

ch3_5_set_voltage = tk.Label(
    ch3_5_name, bg="#E6E6E6", text="截止电压：", width=12, bd=1, relief="raised"
)
ch3_5_set_voltage.grid(row=3, column=4, sticky="wn")

entry_ch3_5_set_voltage_value = tk.Entry(ch3_5_name, width=20)
entry_ch3_5_set_voltage_value.grid(row=3, column=5, columnspan=2, sticky="wn")

ch3_5_state = tk.Label(
    ch3_5_name, bg="#E6E6E6", text="当前状态：", width=12, bd=1, relief="raised"
)
ch3_5_state.grid(row=4, column=4, sticky="wn")

ch3_5_state_value = tk.Label(ch3_5_name, bg="#E6E6E6", text=ch3_5_data[2], width=20)
ch3_5_state_value.grid(row=4, column=5, sticky="wn", columnspan=2)

ch3_5_button_start = tk.Button(
    ch3_5_name,
    width=11,
    text="开始",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch3_5_start_test(),
)
ch3_5_button_start.grid(row=5, column=4, sticky="wn")

ch3_5_button_stop = tk.Button(
    ch3_5_name,
    width=9,
    text="停止",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch3_5_stop_test(),
)
ch3_5_button_stop.grid(row=5, column=5, sticky="wn")

ch3_5_button = tk.Button(
    ch3_5_name,
    width=9,
    text="详细查看",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: face("ch3_5_data"),
)
ch3_5_button.grid(row=5, column=6, sticky="wn")


# ch3_6
ch3_6_name = tk.LabelFrame(root, fg="blue", bg="#C4C4C4", text="通道3-6")
ch3_6_name.grid(row=2, column=5)

ch3_6_sn = tk.Label(
    ch3_6_name, bg="#E6E6E6", text="条码输入：", width=12, bd=1, relief="raised"
)
ch3_6_sn.grid(row=2, column=5, sticky="wn")

entry_ch3_6 = tk.Entry(ch3_6_name, width=20)
entry_ch3_6.grid(row=2, column=6, columnspan=2, sticky="wn")

ch3_6_set_voltage = tk.Label(
    ch3_6_name, bg="#E6E6E6", text="截止电压：", width=12, bd=1, relief="raised"
)
ch3_6_set_voltage.grid(row=3, column=5, sticky="wn")

entry_ch3_6_set_voltage_value = tk.Entry(ch3_6_name, width=20)
entry_ch3_6_set_voltage_value.grid(row=3, column=6, columnspan=2, sticky="wn")

ch3_6_state = tk.Label(
    ch3_6_name, bg="#E6E6E6", text="当前状态：", width=12, bd=1, relief="raised"
)
ch3_6_state.grid(row=4, column=5, sticky="wn")

ch3_6_state_value = tk.Label(ch3_6_name, bg="#E6E6E6", text=ch3_6_data[2], width=20)
ch3_6_state_value.grid(row=4, column=6, sticky="wn", columnspan=2)

ch3_6_button_start = tk.Button(
    ch3_6_name,
    width=11,
    text="开始",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch3_6_start_test(),
)
ch3_6_button_start.grid(row=5, column=5, sticky="wn")

ch3_6_button_stop = tk.Button(
    ch3_6_name,
    width=9,
    text="停止",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch3_6_stop_test(),
)
ch3_6_button_stop.grid(row=5, column=6, sticky="wn")

ch3_6_button = tk.Button(
    ch3_6_name,
    width=9,
    text="详细查看",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: face("ch3_6_data"),
)
ch3_6_button.grid(row=5, column=7, sticky="wn")

# ch3_7
ch3_7_name = tk.LabelFrame(root, fg="blue", bg="#C4C4C4", text="通道3-7")
ch3_7_name.grid(row=2, column=6)

ch3_7_sn = tk.Label(
    ch3_7_name, bg="#E6E6E6", text="条码输入：", width=12, bd=1, relief="raised"
)
ch3_7_sn.grid(row=2, column=6, sticky="wn")

entry_ch3_7 = tk.Entry(ch3_7_name, width=20)
entry_ch3_7.grid(row=2, column=7, columnspan=2, sticky="wn")

ch3_7_set_voltage = tk.Label(
    ch3_7_name, bg="#E6E6E6", text="截止电压：", width=12, bd=1, relief="raised"
)
ch3_7_set_voltage.grid(row=3, column=6, sticky="wn")

entry_ch3_7_set_voltage_value = tk.Entry(ch3_7_name, width=20)
entry_ch3_7_set_voltage_value.grid(row=3, column=7, columnspan=2, sticky="wn")

ch3_7_state = tk.Label(
    ch3_7_name, bg="#E6E6E6", text="当前状态：", width=12, bd=1, relief="raised"
)
ch3_7_state.grid(row=4, column=6, sticky="wn")

ch3_7_state_value = tk.Label(ch3_7_name, bg="#E6E6E6", text=ch3_7_data[2], width=20)
ch3_7_state_value.grid(row=4, column=7, sticky="wn", columnspan=2)

ch3_7_button_start = tk.Button(
    ch3_7_name,
    width=11,
    text="开始",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch3_7_start_test(),
)
ch3_7_button_start.grid(row=5, column=6, sticky="wn")

ch3_7_button_stop = tk.Button(
    ch3_7_name,
    width=9,
    text="停止",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch3_7_stop_test(),
)
ch3_7_button_stop.grid(row=5, column=7, sticky="wn")

ch3_7_button = tk.Button(
    ch3_7_name,
    width=9,
    text="详细查看",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: face("ch3_7_data"),
)
ch3_7_button.grid(row=5, column=8, sticky="wn")

# ch3_8
ch3_8_name = tk.LabelFrame(root, fg="blue", bg="#C4C4C4", text="通道3-8")
ch3_8_name.grid(row=2, column=7)

ch3_8_sn = tk.Label(
    ch3_8_name, bg="#E6E6E6", text="条码输入：", width=12, bd=1, relief="raised"
)
ch3_8_sn.grid(row=2, column=7, sticky="wn")

entry_ch3_8 = tk.Entry(ch3_8_name, width=20)
entry_ch3_8.grid(row=2, column=8, columnspan=2, sticky="wn")

ch3_8_set_voltage = tk.Label(
    ch3_8_name, bg="#E6E6E6", text="截止电压：", width=12, bd=1, relief="raised"
)
ch3_8_set_voltage.grid(row=3, column=7, sticky="wn")

entry_ch3_8_set_voltage_value = tk.Entry(ch3_8_name, width=20)
entry_ch3_8_set_voltage_value.grid(row=3, column=8, columnspan=2, sticky="wn")

ch3_8_state = tk.Label(
    ch3_8_name, bg="#E6E6E6", text="当前状态：", width=12, bd=1, relief="raised"
)
ch3_8_state.grid(row=4, column=7, sticky="wn")

ch3_8_state_value = tk.Label(ch3_8_name, bg="#E6E6E6", text=ch3_8_data[2], width=20)
ch3_8_state_value.grid(row=4, column=8, sticky="wn", columnspan=2)

ch3_8_button_start = tk.Button(
    ch3_8_name,
    width=11,
    text="开始",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch3_8_start_test(),
)
ch3_8_button_start.grid(row=5, column=7, sticky="wn")

ch3_8_button_stop = tk.Button(
    ch3_8_name,
    width=9,
    text="停止",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch3_8_stop_test(),
)
ch3_8_button_stop.grid(row=5, column=8, sticky="wn")

ch3_8_button = tk.Button(
    ch3_8_name,
    width=9,
    text="详细查看",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: face("ch3_8_data"),
)
ch3_8_button.grid(row=5, column=9, sticky="wn")


ch4_1_name = tk.LabelFrame(root, fg="blue", bg="#C4C4C4", text="通道4-1")
ch4_1_name.grid(row=3, column=0)

ch4_1_sn = tk.Label(
    ch4_1_name, bg="#E6E6E6", text="条码输入：", width=12, bd=1, relief="raised"
)
ch4_1_sn.grid(row=3, column=0, sticky="wn")

entry_ch4_1 = tk.Entry(ch4_1_name, width=20)
entry_ch4_1.grid(row=3, column=1, columnspan=2, sticky="wn")

ch4_1_set_voltage = tk.Label(
    ch4_1_name, bg="#E6E6E6", text="截止电压：", width=12, bd=1, relief="raised"
)
ch4_1_set_voltage.grid(row=4, column=0, sticky="wn")

entry_ch4_1_set_voltage_value = tk.Entry(ch4_1_name, width=20)
entry_ch4_1_set_voltage_value.grid(row=4, column=1, columnspan=2, sticky="wn")

ch4_1_state = tk.Label(
    ch4_1_name, bg="#E6E6E6", text="当前状态：", width=12, bd=1, relief="raised"
)
ch4_1_state.grid(row=5, column=0, sticky="wn")

ch4_1_state_value = tk.Label(ch4_1_name, bg="#E6E6E6", text=ch4_1_data[2], width=20)
ch4_1_state_value.grid(row=5, column=1, sticky="wn", columnspan=2)

ch4_1_button_start = tk.Button(
    ch4_1_name,
    width=11,
    text="开始",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch4_1_start_test(),
)
ch4_1_button_start.grid(row=6, column=0, sticky="wn")

ch4_1_button_stop = tk.Button(
    ch4_1_name,
    width=9,
    text="停止",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch4_1_stop_test(),
)
ch4_1_button_stop.grid(row=6, column=1, sticky="wn")

ch4_1_button = tk.Button(
    ch4_1_name,
    width=9,
    text="详细查看",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: face("ch4_1_data"),
)
ch4_1_button.grid(row=6, column=2, sticky="wn")

# ch4_2

ch4_2_name = tk.LabelFrame(root, fg="blue", bg="#C4C4C4", text="通道4-2")
ch4_2_name.grid(row=3, column=1)

ch4_2_sn = tk.Label(
    ch4_2_name, bg="#E6E6E6", text="条码输入：", width=12, bd=1, relief="raised"
)
ch4_2_sn.grid(row=3, column=1, sticky="wn")

entry_ch4_2 = tk.Entry(ch4_2_name, width=20)
entry_ch4_2.grid(row=3, column=2, columnspan=2, sticky="wn")

ch4_2_set_voltage = tk.Label(
    ch4_2_name, bg="#E6E6E6", text="截止电压：", width=12, bd=1, relief="raised"
)
ch4_2_set_voltage.grid(row=4, column=1, sticky="wn")

entry_ch4_2_set_voltage_value = tk.Entry(ch4_2_name, width=20)
entry_ch4_2_set_voltage_value.grid(row=4, column=2, columnspan=2, sticky="wn")

ch4_2_state = tk.Label(
    ch4_2_name, bg="#E6E6E6", text="当前状态：", width=12, bd=1, relief="raised"
)
ch4_2_state.grid(row=5, column=1, sticky="wn")

ch4_2_state_value = tk.Label(ch4_2_name, bg="#E6E6E6", text=ch4_2_data[2], width=20)
ch4_2_state_value.grid(row=5, column=2, sticky="wn", columnspan=2)

ch4_2_button_start = tk.Button(
    ch4_2_name,
    width=11,
    text="开始",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch4_2_start_test(),
)
ch4_2_button_start.grid(row=6, column=1, sticky="wn")

ch4_2_button_stop = tk.Button(
    ch4_2_name,
    width=9,
    text="停止",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch4_2_stop_test(),
)
ch4_2_button_stop.grid(row=6, column=2, sticky="wn")

ch4_2_button = tk.Button(
    ch4_2_name,
    width=9,
    text="详细查看",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: face("ch4_2_data"),
)
ch4_2_button.grid(row=6, column=3, sticky="wn")

# ch4_3

ch4_3_name = tk.LabelFrame(root, fg="blue", bg="#C4C4C4", text="通道4-3")
ch4_3_name.grid(row=3, column=2)

ch4_3_sn = tk.Label(
    ch4_3_name, bg="#E6E6E6", text="条码输入：", width=12, bd=1, relief="raised"
)
ch4_3_sn.grid(row=3, column=2, sticky="wn")

entry_ch4_3 = tk.Entry(ch4_3_name, width=20)
entry_ch4_3.grid(row=3, column=3, columnspan=2, sticky="wn")

ch4_3_set_voltage = tk.Label(
    ch4_3_name, bg="#E6E6E6", text="截止电压：", width=12, bd=1, relief="raised"
)
ch4_3_set_voltage.grid(row=4, column=2, sticky="wn")

entry_ch4_3_set_voltage_value = tk.Entry(ch4_3_name, width=20)
entry_ch4_3_set_voltage_value.grid(row=4, column=3, columnspan=2, sticky="wn")

ch4_3_state = tk.Label(
    ch4_3_name, bg="#E6E6E6", text="当前状态：", width=12, bd=1, relief="raised"
)
ch4_3_state.grid(row=5, column=2, sticky="wn")

ch4_3_state_value = tk.Label(ch4_3_name, bg="#E6E6E6", text=ch4_3_data[2], width=20)
ch4_3_state_value.grid(row=5, column=3, sticky="wn", columnspan=2)

ch4_3_button_start = tk.Button(
    ch4_3_name,
    width=11,
    text="开始",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch4_3_start_test(),
)
ch4_3_button_start.grid(row=6, column=2, sticky="wn")

ch4_3_button_stop = tk.Button(
    ch4_3_name,
    width=9,
    text="停止",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch4_3_stop_test(),
)
ch4_3_button_stop.grid(row=6, column=3, sticky="wn")

ch4_3_button = tk.Button(
    ch4_3_name,
    width=9,
    text="详细查看",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: face("ch4_3_data"),
)
ch4_3_button.grid(row=6, column=4, sticky="wn")


# ch4_4

ch4_4_name = tk.LabelFrame(root, fg="blue", bg="#C4C4C4", text="通道4-4")
ch4_4_name.grid(row=3, column=3)

ch4_4_sn = tk.Label(
    ch4_4_name, bg="#E6E6E6", text="条码输入：", width=12, bd=1, relief="raised"
)
ch4_4_sn.grid(row=3, column=3, sticky="wn")

entry_ch4_4 = tk.Entry(ch4_4_name, width=20)
entry_ch4_4.grid(row=3, column=4, columnspan=2, sticky="wn")

ch4_4_set_voltage = tk.Label(
    ch4_4_name, bg="#E6E6E6", text="截止电压：", width=12, bd=1, relief="raised"
)
ch4_4_set_voltage.grid(row=4, column=3, sticky="wn")

entry_ch4_4_set_voltage_value = tk.Entry(ch4_4_name, width=20)
entry_ch4_4_set_voltage_value.grid(row=4, column=4, columnspan=2, sticky="wn")

ch4_4_state = tk.Label(
    ch4_4_name, bg="#E6E6E6", text="当前状态：", width=12, bd=1, relief="raised"
)
ch4_4_state.grid(row=5, column=3, sticky="wn")

ch4_4_state_value = tk.Label(ch4_4_name, bg="#E6E6E6", text=ch4_4_data[2], width=20)
ch4_4_state_value.grid(row=5, column=4, sticky="wn", columnspan=2)

ch4_4_button_start = tk.Button(
    ch4_4_name,
    width=11,
    text="开始",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch4_4_start_test(),
)
ch4_4_button_start.grid(row=6, column=3, sticky="wn")

ch4_4_button_stop = tk.Button(
    ch4_4_name,
    width=9,
    text="停止",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch4_4_stop_test(),
)
ch4_4_button_stop.grid(row=6, column=4, sticky="wn")

ch4_4_button = tk.Button(
    ch4_4_name,
    width=9,
    text="详细查看",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: face("ch4_4_data"),
)
ch4_4_button.grid(row=6, column=5, sticky="wn")


# ch4_5
ch4_5_name = tk.LabelFrame(root, fg="blue", bg="#C4C4C4", text="通道4-5")
ch4_5_name.grid(row=3, column=4)

ch4_5_sn = tk.Label(
    ch4_5_name, bg="#E6E6E6", text="条码输入：", width=12, bd=1, relief="raised"
)
ch4_5_sn.grid(row=3, column=4, sticky="wn")

entry_ch4_5 = tk.Entry(ch4_5_name, width=20)
entry_ch4_5.grid(row=3, column=5, columnspan=2, sticky="wn")

ch4_5_set_voltage = tk.Label(
    ch4_5_name, bg="#E6E6E6", text="截止电压：", width=12, bd=1, relief="raised"
)
ch4_5_set_voltage.grid(row=4, column=4, sticky="wn")

entry_ch4_5_set_voltage_value = tk.Entry(ch4_5_name, width=20)
entry_ch4_5_set_voltage_value.grid(row=4, column=5, columnspan=2, sticky="wn")

ch4_5_state = tk.Label(
    ch4_5_name, bg="#E6E6E6", text="当前状态：", width=12, bd=1, relief="raised"
)
ch4_5_state.grid(row=5, column=4, sticky="wn")

ch4_5_state_value = tk.Label(ch4_5_name, bg="#E6E6E6", text=ch4_5_data[2], width=20)
ch4_5_state_value.grid(row=5, column=5, sticky="wn", columnspan=2)

ch4_5_button_start = tk.Button(
    ch4_5_name,
    width=11,
    text="开始",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch4_5_start_test(),
)
ch4_5_button_start.grid(row=6, column=4, sticky="wn")

ch4_5_button_stop = tk.Button(
    ch4_5_name,
    width=9,
    text="停止",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch4_5_stop_test(),
)
ch4_5_button_stop.grid(row=6, column=5, sticky="wn")

ch4_5_button = tk.Button(
    ch4_5_name,
    width=9,
    text="详细查看",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: face("ch4_5_data"),
)
ch4_5_button.grid(row=6, column=6, sticky="wn")


# ch4_6
ch4_6_name = tk.LabelFrame(root, fg="blue", bg="#C4C4C4", text="通道4-6")
ch4_6_name.grid(row=3, column=5)

ch4_6_sn = tk.Label(
    ch4_6_name, bg="#E6E6E6", text="条码输入：", width=12, bd=1, relief="raised"
)
ch4_6_sn.grid(row=3, column=5, sticky="wn")

entry_ch4_6 = tk.Entry(ch4_6_name, width=20)
entry_ch4_6.grid(row=3, column=6, columnspan=2, sticky="wn")

ch4_6_set_voltage = tk.Label(
    ch4_6_name, bg="#E6E6E6", text="截止电压：", width=12, bd=1, relief="raised"
)
ch4_6_set_voltage.grid(row=4, column=5, sticky="wn")

entry_ch4_6_set_voltage_value = tk.Entry(ch4_6_name, width=20)
entry_ch4_6_set_voltage_value.grid(row=4, column=6, columnspan=2, sticky="wn")

ch4_6_state = tk.Label(
    ch4_6_name, bg="#E6E6E6", text="当前状态：", width=12, bd=1, relief="raised"
)
ch4_6_state.grid(row=5, column=5, sticky="wn")

ch4_6_state_value = tk.Label(ch4_6_name, bg="#E6E6E6", text=ch4_6_data[2], width=20)
ch4_6_state_value.grid(row=5, column=6, sticky="wn", columnspan=2)

ch4_6_button_start = tk.Button(
    ch4_6_name,
    width=11,
    text="开始",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch4_6_start_test(),
)
ch4_6_button_start.grid(row=6, column=5, sticky="wn")

ch4_6_button_stop = tk.Button(
    ch4_6_name,
    width=9,
    text="停止",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch4_6_stop_test(),
)
ch4_6_button_stop.grid(row=6, column=6, sticky="wn")

ch4_6_button = tk.Button(
    ch4_6_name,
    width=9,
    text="详细查看",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: face("ch4_6_data"),
)
ch4_6_button.grid(row=6, column=7, sticky="wn")

# ch4_7
ch4_7_name = tk.LabelFrame(root, fg="blue", bg="#C4C4C4", text="通道4-7")
ch4_7_name.grid(row=3, column=6)

ch4_7_sn = tk.Label(
    ch4_7_name, bg="#E6E6E6", text="条码输入：", width=12, bd=1, relief="raised"
)
ch4_7_sn.grid(row=3, column=6, sticky="wn")

entry_ch4_7 = tk.Entry(ch4_7_name, width=20)
entry_ch4_7.grid(row=3, column=7, columnspan=2, sticky="wn")

ch4_7_set_voltage = tk.Label(
    ch4_7_name, bg="#E6E6E6", text="截止电压：", width=12, bd=1, relief="raised"
)
ch4_7_set_voltage.grid(row=4, column=6, sticky="wn")

entry_ch4_7_set_voltage_value = tk.Entry(ch4_7_name, width=20)
entry_ch4_7_set_voltage_value.grid(row=4, column=7, columnspan=2, sticky="wn")

ch4_7_state = tk.Label(
    ch4_7_name, bg="#E6E6E6", text="当前状态：", width=12, bd=1, relief="raised"
)
ch4_7_state.grid(row=5, column=6, sticky="wn")

ch4_7_state_value = tk.Label(ch4_7_name, bg="#E6E6E6", text=ch4_7_data[2], width=20)
ch4_7_state_value.grid(row=5, column=7, sticky="wn", columnspan=2)

ch4_7_button_start = tk.Button(
    ch4_7_name,
    width=11,
    text="开始",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch4_7_start_test(),
)
ch4_7_button_start.grid(row=6, column=6, sticky="wn")

ch4_7_button_stop = tk.Button(
    ch4_7_name,
    width=9,
    text="停止",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch4_7_stop_test(),
)
ch4_7_button_stop.grid(row=6, column=7, sticky="wn")

ch4_7_button = tk.Button(
    ch4_7_name,
    width=9,
    text="详细查看",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: face("ch4_7_data"),
)
ch4_7_button.grid(row=6, column=8, sticky="wn")

# ch4_8
ch4_8_name = tk.LabelFrame(root, fg="blue", bg="#C4C4C4", text="通道4-8")
ch4_8_name.grid(row=3, column=7)

ch4_8_sn = tk.Label(
    ch4_8_name, bg="#E6E6E6", text="条码输入：", width=12, bd=1, relief="raised"
)
ch4_8_sn.grid(row=3, column=7, sticky="wn")

entry_ch4_8 = tk.Entry(ch4_8_name, width=20)
entry_ch4_8.grid(row=3, column=8, columnspan=2, sticky="wn")

ch4_8_set_voltage = tk.Label(
    ch4_8_name, bg="#E6E6E6", text="截止电压：", width=12, bd=1, relief="raised"
)
ch4_8_set_voltage.grid(row=4, column=7, sticky="wn")

entry_ch4_8_set_voltage_value = tk.Entry(ch4_8_name, width=20)
entry_ch4_8_set_voltage_value.grid(row=4, column=8, columnspan=2, sticky="wn")

ch4_8_state = tk.Label(
    ch4_8_name, bg="#E6E6E6", text="当前状态：", width=12, bd=1, relief="raised"
)
ch4_8_state.grid(row=5, column=7, sticky="wn")

ch4_8_state_value = tk.Label(ch4_8_name, bg="#E6E6E6", text=ch4_8_data[2], width=20)
ch4_8_state_value.grid(row=5, column=8, sticky="wn", columnspan=2)

ch4_8_button_start = tk.Button(
    ch4_8_name,
    width=11,
    text="开始",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch4_8_start_test(),
)
ch4_8_button_start.grid(row=6, column=7, sticky="wn")

ch4_8_button_stop = tk.Button(
    ch4_8_name,
    width=9,
    text="停止",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch4_8_stop_test(),
)
ch4_8_button_stop.grid(row=6, column=8, sticky="wn")

ch4_8_button = tk.Button(
    ch4_8_name,
    width=9,
    text="详细查看",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: face("ch4_8_data"),
)
ch4_8_button.grid(row=6, column=9, sticky="wn")


ch5_1_name = tk.LabelFrame(root, fg="blue", bg="#C4C4C4", text="通道5-1")
ch5_1_name.grid(row=4, column=0)

ch5_1_sn = tk.Label(
    ch5_1_name, bg="#E6E6E6", text="条码输入：", width=12, bd=1, relief="raised"
)
ch5_1_sn.grid(row=4, column=0, sticky="wn")

entry_ch5_1 = tk.Entry(ch5_1_name, width=20)
entry_ch5_1.grid(row=4, column=1, columnspan=2, sticky="wn")

ch5_1_set_voltage = tk.Label(
    ch5_1_name, bg="#E6E6E6", text="截止电压：", width=12, bd=1, relief="raised"
)
ch5_1_set_voltage.grid(row=5, column=0, sticky="wn")

entry_ch5_1_set_voltage_value = tk.Entry(ch5_1_name, width=20, state="normal")
entry_ch5_1_set_voltage_value.grid(row=5, column=1, columnspan=2, sticky="wn")

ch5_1_state = tk.Label(
    ch5_1_name, bg="#E6E6E6", text="当前状态：", width=12, bd=1, relief="raised"
)
ch5_1_state.grid(row=6, column=0, sticky="wn")

ch5_1_state_value = tk.Label(ch5_1_name, bg="#E6E6E6", text=ch5_1_data[2], width=20)
ch5_1_state_value.grid(row=6, column=1, sticky="wn", columnspan=2)

ch5_1_button_start = tk.Button(
    ch5_1_name,
    width=11,
    text="开始",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch5_1_start_test(),
)
ch5_1_button_start.grid(row=7, column=0, sticky="wn")

ch5_1_button_stop = tk.Button(
    ch5_1_name,
    width=9,
    text="停止",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch5_1_stop_test(),
)
ch5_1_button_stop.grid(row=7, column=1, sticky="wn")

ch5_1_button = tk.Button(
    ch5_1_name,
    width=9,
    text="详细查看",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: face("ch5_1_data"),
)
ch5_1_button.grid(row=7, column=2, sticky="wn")

# ch5_2

ch5_2_name = tk.LabelFrame(root, fg="blue", bg="#C4C4C4", text="通道5-2")
ch5_2_name.grid(row=4, column=1)

ch5_2_sn = tk.Label(
    ch5_2_name, bg="#E6E6E6", text="条码输入：", width=12, bd=1, relief="raised"
)
ch5_2_sn.grid(row=4, column=1, sticky="wn")

entry_ch5_2 = tk.Entry(ch5_2_name, width=20)
entry_ch5_2.grid(row=4, column=2, columnspan=2, sticky="wn")

ch5_2_set_voltage = tk.Label(
    ch5_2_name, bg="#E6E6E6", text="截止电压：", width=12, bd=1, relief="raised"
)
ch5_2_set_voltage.grid(row=5, column=1, sticky="wn")

entry_ch5_2_set_voltage_value = tk.Entry(ch5_2_name, width=20)
entry_ch5_2_set_voltage_value.grid(row=5, column=2, columnspan=2, sticky="wn")

ch5_2_state = tk.Label(
    ch5_2_name, bg="#E6E6E6", text="当前状态：", width=12, bd=1, relief="raised"
)
ch5_2_state.grid(row=6, column=1, sticky="wn")

ch5_2_state_value = tk.Label(ch5_2_name, bg="#E6E6E6", text=ch5_2_data[2], width=20)
ch5_2_state_value.grid(row=6, column=2, sticky="wn", columnspan=2)

ch5_2_button_start = tk.Button(
    ch5_2_name,
    width=11,
    text="开始",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch5_2_start_test(),
)
ch5_2_button_start.grid(row=7, column=1, sticky="wn")

ch5_2_button_stop = tk.Button(
    ch5_2_name,
    width=9,
    text="停止",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch5_2_stop_test(),
)
ch5_2_button_stop.grid(row=7, column=2, sticky="wn")

ch5_2_button = tk.Button(
    ch5_2_name,
    width=9,
    text="详细查看",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: face("ch5_2_data"),
)
ch5_2_button.grid(row=7, column=3, sticky="wn")

# ch5_3

ch5_3_name = tk.LabelFrame(root, fg="blue", bg="#C4C4C4", text="通道5-3")
ch5_3_name.grid(row=4, column=2)

ch5_3_sn = tk.Label(
    ch5_3_name, bg="#E6E6E6", text="条码输入：", width=12, bd=1, relief="raised"
)
ch5_3_sn.grid(row=4, column=2, sticky="wn")

entry_ch5_3 = tk.Entry(ch5_3_name, width=20)
entry_ch5_3.grid(row=4, column=3, columnspan=2, sticky="wn")

ch5_3_set_voltage = tk.Label(
    ch5_3_name, bg="#E6E6E6", text="截止电压：", width=12, bd=1, relief="raised"
)
ch5_3_set_voltage.grid(row=5, column=2, sticky="wn")

entry_ch5_3_set_voltage_value = tk.Entry(ch5_3_name, width=20)
entry_ch5_3_set_voltage_value.grid(row=5, column=3, columnspan=2, sticky="wn")

ch5_3_state = tk.Label(
    ch5_3_name, bg="#E6E6E6", text="当前状态：", width=12, bd=1, relief="raised"
)
ch5_3_state.grid(row=6, column=2, sticky="wn")

ch5_3_state_value = tk.Label(ch5_3_name, bg="#E6E6E6", text=ch5_3_data[2], width=20)
ch5_3_state_value.grid(row=6, column=3, sticky="wn", columnspan=2)

ch5_3_button_start = tk.Button(
    ch5_3_name,
    width=11,
    text="开始",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch5_3_start_test(),
)
ch5_3_button_start.grid(row=7, column=2, sticky="wn")

ch5_3_button_stop = tk.Button(
    ch5_3_name,
    width=9,
    text="停止",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch5_3_stop_test(),
)
ch5_3_button_stop.grid(row=7, column=3, sticky="wn")

ch5_3_button = tk.Button(
    ch5_3_name,
    width=9,
    text="详细查看",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: face("ch5_3_data"),
)
ch5_3_button.grid(row=7, column=4, sticky="wn")


# ch5_4

ch5_4_name = tk.LabelFrame(root, fg="blue", bg="#C4C4C4", text="通道5-4")
ch5_4_name.grid(row=4, column=3)

ch5_4_sn = tk.Label(
    ch5_4_name, bg="#E6E6E6", text="条码输入：", width=12, bd=1, relief="raised"
)
ch5_4_sn.grid(row=4, column=3, sticky="wn")

entry_ch5_4 = tk.Entry(ch5_4_name, width=20)
entry_ch5_4.grid(row=4, column=4, columnspan=2, sticky="wn")

ch5_4_set_voltage = tk.Label(
    ch5_4_name, bg="#E6E6E6", text="截止电压：", width=12, bd=1, relief="raised"
)
ch5_4_set_voltage.grid(row=5, column=3, sticky="wn")

entry_ch5_4_set_voltage_value = tk.Entry(ch5_4_name, width=20)
entry_ch5_4_set_voltage_value.grid(row=5, column=4, columnspan=2, sticky="wn")

ch5_4_state = tk.Label(
    ch5_4_name, bg="#E6E6E6", text="当前状态：", width=12, bd=1, relief="raised"
)
ch5_4_state.grid(row=6, column=3, sticky="wn")

ch5_4_state_value = tk.Label(ch5_4_name, bg="#E6E6E6", text=ch5_4_data[2], width=20)
ch5_4_state_value.grid(row=6, column=4, sticky="wn", columnspan=2)

ch5_4_button_start = tk.Button(
    ch5_4_name,
    width=11,
    text="开始",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch5_4_start_test(),
)
ch5_4_button_start.grid(row=7, column=3, sticky="wn")

ch5_4_button_stop = tk.Button(
    ch5_4_name,
    width=9,
    text="停止",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch5_4_stop_test(),
)
ch5_4_button_stop.grid(row=7, column=4, sticky="wn")

ch5_4_button = tk.Button(
    ch5_4_name,
    width=9,
    text="详细查看",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: face("ch5_4_data"),
)
ch5_4_button.grid(row=7, column=5, sticky="wn")


# ch5_5
ch5_5_name = tk.LabelFrame(root, fg="blue", bg="#C4C4C4", text="通道5-5")
ch5_5_name.grid(row=4, column=4)

ch5_5_sn = tk.Label(
    ch5_5_name, bg="#E6E6E6", text="条码输入：", width=12, bd=1, relief="raised"
)
ch5_5_sn.grid(row=4, column=4, sticky="wn")

entry_ch5_5 = tk.Entry(ch5_5_name, width=20)
entry_ch5_5.grid(row=4, column=5, columnspan=2, sticky="wn")

ch5_5_set_voltage = tk.Label(
    ch5_5_name, bg="#E6E6E6", text="截止电压：", width=12, bd=1, relief="raised"
)
ch5_5_set_voltage.grid(row=5, column=4, sticky="wn")

entry_ch5_5_set_voltage_value = tk.Entry(ch5_5_name, width=20)
entry_ch5_5_set_voltage_value.grid(row=5, column=5, columnspan=2, sticky="wn")

ch5_5_state = tk.Label(
    ch5_5_name, bg="#E6E6E6", text="当前状态：", width=12, bd=1, relief="raised"
)
ch5_5_state.grid(row=6, column=4, sticky="wn")

ch5_5_state_value = tk.Label(ch5_5_name, bg="#E6E6E6", text=ch5_5_data[2], width=20)
ch5_5_state_value.grid(row=6, column=5, sticky="wn", columnspan=2)

ch5_5_button_start = tk.Button(
    ch5_5_name,
    width=11,
    text="开始",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch5_5_start_test(),
)
ch5_5_button_start.grid(row=7, column=4, sticky="wn")

ch5_5_button_stop = tk.Button(
    ch5_5_name,
    width=9,
    text="停止",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch5_5_stop_test(),
)
ch5_5_button_stop.grid(row=7, column=5, sticky="wn")

ch5_5_button = tk.Button(
    ch5_5_name,
    width=9,
    text="详细查看",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: face("ch5_5_data"),
)
ch5_5_button.grid(row=7, column=6, sticky="wn")


# ch5_6
ch5_6_name = tk.LabelFrame(root, fg="blue", bg="#C4C4C4", text="通道5-6")
ch5_6_name.grid(row=4, column=5)

ch5_6_sn = tk.Label(
    ch5_6_name, bg="#E6E6E6", text="条码输入：", width=12, bd=1, relief="raised"
)
ch5_6_sn.grid(row=4, column=5, sticky="wn")

entry_ch5_6 = tk.Entry(ch5_6_name, width=20)
entry_ch5_6.grid(row=4, column=6, columnspan=2, sticky="wn")

ch5_6_set_voltage = tk.Label(
    ch5_6_name, bg="#E6E6E6", text="截止电压：", width=12, bd=1, relief="raised"
)
ch5_6_set_voltage.grid(row=5, column=5, sticky="wn")

entry_ch5_6_set_voltage_value = tk.Entry(ch5_6_name, width=20)
entry_ch5_6_set_voltage_value.grid(row=5, column=6, columnspan=2, sticky="wn")

ch5_6_state = tk.Label(
    ch5_6_name, bg="#E6E6E6", text="当前状态：", width=12, bd=1, relief="raised"
)
ch5_6_state.grid(row=6, column=5, sticky="wn")

ch5_6_state_value = tk.Label(ch5_6_name, bg="#E6E6E6", text=ch5_6_data[2], width=20)
ch5_6_state_value.grid(row=6, column=6, sticky="wn", columnspan=2)

ch5_6_button_start = tk.Button(
    ch5_6_name,
    width=11,
    text="开始",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch5_6_start_test(),
)
ch5_6_button_start.grid(row=7, column=5, sticky="wn")

ch5_6_button_stop = tk.Button(
    ch5_6_name,
    width=9,
    text="停止",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch5_6_stop_test(),
)
ch5_6_button_stop.grid(row=7, column=6, sticky="wn")

ch5_6_button = tk.Button(
    ch5_6_name,
    width=9,
    text="详细查看",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: face("ch5_6_data"),
)
ch5_6_button.grid(row=7, column=7, sticky="wn")

# ch5_7
ch5_7_name = tk.LabelFrame(root, fg="blue", bg="#C4C4C4", text="通道5-7")
ch5_7_name.grid(row=4, column=6)

ch5_7_sn = tk.Label(
    ch5_7_name, bg="#E6E6E6", text="条码输入：", width=12, bd=1, relief="raised"
)
ch5_7_sn.grid(row=4, column=6, sticky="wn")

entry_ch5_7 = tk.Entry(ch5_7_name, width=20)
entry_ch5_7.grid(row=4, column=7, columnspan=2, sticky="wn")

ch5_7_set_voltage = tk.Label(
    ch5_7_name, bg="#E6E6E6", text="截止电压：", width=12, bd=1, relief="raised"
)
ch5_7_set_voltage.grid(row=5, column=6, sticky="wn")

entry_ch5_7_set_voltage_value = tk.Entry(ch5_7_name, width=20)
entry_ch5_7_set_voltage_value.grid(row=5, column=7, columnspan=2, sticky="wn")

ch5_7_state = tk.Label(
    ch5_7_name, bg="#E6E6E6", text="当前状态：", width=12, bd=1, relief="raised"
)
ch5_7_state.grid(row=6, column=6, sticky="wn")

ch5_7_state_value = tk.Label(ch5_7_name, bg="#E6E6E6", text=ch5_7_data[2], width=20)
ch5_7_state_value.grid(row=6, column=7, sticky="wn", columnspan=2)

ch5_7_button_start = tk.Button(
    ch5_7_name,
    width=11,
    text="开始",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch5_7_start_test(),
)
ch5_7_button_start.grid(row=7, column=6, sticky="wn")

ch5_7_button_stop = tk.Button(
    ch5_7_name,
    width=9,
    text="停止",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch5_7_stop_test(),
)
ch5_7_button_stop.grid(row=7, column=7, sticky="wn")

ch5_7_button = tk.Button(
    ch5_7_name,
    width=9,
    text="详细查看",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: face("ch5_7_data"),
)
ch5_7_button.grid(row=7, column=8, sticky="wn")

# ch5_8
ch5_8_name = tk.LabelFrame(root, fg="blue", bg="#C4C4C4", text="通道5-8")
ch5_8_name.grid(row=4, column=7)

ch5_8_sn = tk.Label(
    ch5_8_name, bg="#E6E6E6", text="条码输入：", width=12, bd=1, relief="raised"
)
ch5_8_sn.grid(row=4, column=7, sticky="wn")

entry_ch5_8 = tk.Entry(ch5_8_name, width=20)
entry_ch5_8.grid(row=4, column=8, columnspan=2, sticky="wn")

ch5_8_set_voltage = tk.Label(
    ch5_8_name, bg="#E6E6E6", text="截止电压：", width=12, bd=1, relief="raised"
)
ch5_8_set_voltage.grid(row=5, column=7, sticky="wn")

entry_ch5_8_set_voltage_value = tk.Entry(ch5_8_name, width=20)
entry_ch5_8_set_voltage_value.grid(row=5, column=8, columnspan=2, sticky="wn")

ch5_8_state = tk.Label(
    ch5_8_name, bg="#E6E6E6", text="当前状态：", width=12, bd=1, relief="raised"
)
ch5_8_state.grid(row=6, column=7, sticky="wn")

ch5_8_state_value = tk.Label(ch5_8_name, bg="#E6E6E6", text=ch5_8_data[2], width=20)
ch5_8_state_value.grid(row=6, column=8, sticky="wn", columnspan=2)

ch5_8_button_start = tk.Button(
    ch5_8_name,
    width=11,
    text="开始",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch5_8_start_test(),
)
ch5_8_button_start.grid(row=7, column=7, sticky="wn")

ch5_8_button_stop = tk.Button(
    ch5_8_name,
    width=9,
    text="停止",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch5_8_stop_test(),
)
ch5_8_button_stop.grid(row=7, column=8, sticky="wn")

ch5_8_button = tk.Button(
    ch5_8_name,
    width=9,
    text="详细查看",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: face("ch5_8_data"),
)
ch5_8_button.grid(row=7, column=9, sticky="wn")


ch6_1_name = tk.LabelFrame(root, fg="blue", bg="#C4C4C4", text="通道6-1")
ch6_1_name.grid(row=5, column=0)

ch6_1_sn = tk.Label(
    ch6_1_name, bg="#E6E6E6", text="条码输入：", width=12, bd=1, relief="raised"
)
ch6_1_sn.grid(row=5, column=0, sticky="wn")

entry_ch6_1 = tk.Entry(ch6_1_name, width=20)
entry_ch6_1.grid(row=5, column=1, columnspan=2, sticky="wn")

ch6_1_set_voltage = tk.Label(
    ch6_1_name, bg="#E6E6E6", text="截止电压：", width=12, bd=1, relief="raised"
)
ch6_1_set_voltage.grid(row=6, column=0, sticky="wn")

entry_ch6_1_set_voltage_value = tk.Entry(ch6_1_name, width=20)
entry_ch6_1_set_voltage_value.grid(row=6, column=1, columnspan=2, sticky="wn")

ch6_1_state = tk.Label(
    ch6_1_name, bg="#E6E6E6", text="当前状态：", width=12, bd=1, relief="raised"
)
ch6_1_state.grid(row=7, column=0, sticky="wn")

ch6_1_state_value = tk.Label(ch6_1_name, bg="#E6E6E6", text=ch6_1_data[2], width=20)
ch6_1_state_value.grid(row=7, column=1, sticky="wn", columnspan=2)

ch6_1_button_start = tk.Button(
    ch6_1_name,
    width=11,
    text="开始",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch6_1_start_test(),
)
ch6_1_button_start.grid(row=8, column=0, sticky="wn")

ch6_1_button_stop = tk.Button(
    ch6_1_name,
    width=9,
    text="停止",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch6_1_stop_test(),
)
ch6_1_button_stop.grid(row=8, column=1, sticky="wn")

ch6_1_button = tk.Button(
    ch6_1_name,
    width=9,
    text="详细查看",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: face("ch6_1_data"),
)
ch6_1_button.grid(row=8, column=2, sticky="wn")

# ch6_2

ch6_2_name = tk.LabelFrame(root, fg="blue", bg="#C4C4C4", text="通道6-2")
ch6_2_name.grid(row=5, column=1)

ch6_2_sn = tk.Label(
    ch6_2_name, bg="#E6E6E6", text="条码输入：", width=12, bd=1, relief="raised"
)
ch6_2_sn.grid(row=5, column=1, sticky="wn")

entry_ch6_2 = tk.Entry(ch6_2_name, width=20)
entry_ch6_2.grid(row=5, column=2, columnspan=2, sticky="wn")

ch6_2_set_voltage = tk.Label(
    ch6_2_name, bg="#E6E6E6", text="截止电压：", width=12, bd=1, relief="raised"
)
ch6_2_set_voltage.grid(row=6, column=1, sticky="wn")

entry_ch6_2_set_voltage_value = tk.Entry(ch6_2_name, width=20)
entry_ch6_2_set_voltage_value.grid(row=6, column=2, columnspan=2, sticky="wn")

ch6_2_state = tk.Label(
    ch6_2_name, bg="#E6E6E6", text="当前状态：", width=12, bd=1, relief="raised"
)
ch6_2_state.grid(row=7, column=1, sticky="wn")

ch6_2_state_value = tk.Label(ch6_2_name, bg="#E6E6E6", text=ch6_2_data[2], width=20)
ch6_2_state_value.grid(row=7, column=2, sticky="wn", columnspan=2)

ch6_2_button_start = tk.Button(
    ch6_2_name,
    width=11,
    text="开始",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch6_2_start_test(),
)
ch6_2_button_start.grid(row=8, column=1, sticky="wn")

ch6_2_button_stop = tk.Button(
    ch6_2_name,
    width=9,
    text="停止",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch6_2_stop_test(),
)
ch6_2_button_stop.grid(row=8, column=2, sticky="wn")

ch6_2_button = tk.Button(
    ch6_2_name,
    width=9,
    text="详细查看",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: face("ch6_2_data"),
)
ch6_2_button.grid(row=8, column=3, sticky="wn")

# ch6_3

ch6_3_name = tk.LabelFrame(root, fg="blue", bg="#C4C4C4", text="通道6-3")
ch6_3_name.grid(row=5, column=2)

ch6_3_sn = tk.Label(
    ch6_3_name, bg="#E6E6E6", text="条码输入：", width=12, bd=1, relief="raised"
)
ch6_3_sn.grid(row=5, column=2, sticky="wn")

entry_ch6_3 = tk.Entry(ch6_3_name, width=20)
entry_ch6_3.grid(row=5, column=3, columnspan=2, sticky="wn")

ch6_3_set_voltage = tk.Label(
    ch6_3_name, bg="#E6E6E6", text="截止电压：", width=12, bd=1, relief="raised"
)
ch6_3_set_voltage.grid(row=6, column=2, sticky="wn")

entry_ch6_3_set_voltage_value = tk.Entry(ch6_3_name, width=20)
entry_ch6_3_set_voltage_value.grid(row=6, column=3, columnspan=2, sticky="wn")

ch6_3_state = tk.Label(
    ch6_3_name, bg="#E6E6E6", text="当前状态：", width=12, bd=1, relief="raised"
)
ch6_3_state.grid(row=7, column=2, sticky="wn")

ch6_3_state_value = tk.Label(ch6_3_name, bg="#E6E6E6", text=ch6_3_data[2], width=20)
ch6_3_state_value.grid(row=7, column=3, sticky="wn", columnspan=2)

ch6_3_button_start = tk.Button(
    ch6_3_name,
    width=11,
    text="开始",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch6_3_start_test(),
)
ch6_3_button_start.grid(row=8, column=2, sticky="wn")

ch6_3_button_stop = tk.Button(
    ch6_3_name,
    width=9,
    text="停止",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch6_3_stop_test(),
)
ch6_3_button_stop.grid(row=8, column=3, sticky="wn")

ch6_3_button = tk.Button(
    ch6_3_name,
    width=9,
    text="详细查看",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: face("ch6_3_data"),
)
ch6_3_button.grid(row=8, column=4, sticky="wn")


# ch6_4

ch6_4_name = tk.LabelFrame(root, fg="blue", bg="#C4C4C4", text="通道6-4")
ch6_4_name.grid(row=5, column=3)

ch6_4_sn = tk.Label(
    ch6_4_name, bg="#E6E6E6", text="条码输入：", width=12, bd=1, relief="raised"
)
ch6_4_sn.grid(row=5, column=3, sticky="wn")

entry_ch6_4 = tk.Entry(ch6_4_name, width=20)
entry_ch6_4.grid(row=5, column=4, columnspan=2, sticky="wn")

ch6_4_set_voltage = tk.Label(
    ch6_4_name, bg="#E6E6E6", text="截止电压：", width=12, bd=1, relief="raised"
)
ch6_4_set_voltage.grid(row=6, column=3, sticky="wn")

entry_ch6_4_set_voltage_value = tk.Entry(ch6_4_name, width=20)
entry_ch6_4_set_voltage_value.grid(row=6, column=4, columnspan=2, sticky="wn")

ch6_4_state = tk.Label(
    ch6_4_name, bg="#E6E6E6", text="当前状态：", width=12, bd=1, relief="raised"
)
ch6_4_state.grid(row=7, column=3, sticky="wn")

ch6_4_state_value = tk.Label(ch6_4_name, bg="#E6E6E6", text=ch6_4_data[2], width=20)
ch6_4_state_value.grid(row=7, column=4, sticky="wn", columnspan=2)

ch6_4_button_start = tk.Button(
    ch6_4_name,
    width=11,
    text="开始",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch6_4_start_test(),
)
ch6_4_button_start.grid(row=8, column=3, sticky="wn")

ch6_4_button_stop = tk.Button(
    ch6_4_name,
    width=9,
    text="停止",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch6_4_stop_test(),
)
ch6_4_button_stop.grid(row=8, column=4, sticky="wn")

ch6_4_button = tk.Button(
    ch6_4_name,
    width=9,
    text="详细查看",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: face("ch6_4_data"),
)
ch6_4_button.grid(row=8, column=5, sticky="wn")


# ch6_5
ch6_5_name = tk.LabelFrame(root, fg="blue", bg="#C4C4C4", text="通道6-5")
ch6_5_name.grid(row=5, column=4)

ch6_5_sn = tk.Label(
    ch6_5_name, bg="#E6E6E6", text="条码输入：", width=12, bd=1, relief="raised"
)
ch6_5_sn.grid(row=5, column=4, sticky="wn")

entry_ch6_5 = tk.Entry(ch6_5_name, width=20)
entry_ch6_5.grid(row=5, column=5, columnspan=2, sticky="wn")

ch6_5_set_voltage = tk.Label(
    ch6_5_name, bg="#E6E6E6", text="截止电压：", width=12, bd=1, relief="raised"
)
ch6_5_set_voltage.grid(row=6, column=4, sticky="wn")

entry_ch6_5_set_voltage_value = tk.Entry(ch6_5_name, width=20)
entry_ch6_5_set_voltage_value.grid(row=6, column=5, columnspan=2, sticky="wn")

ch6_5_state = tk.Label(
    ch6_5_name, bg="#E6E6E6", text="当前状态：", width=12, bd=1, relief="raised"
)
ch6_5_state.grid(row=7, column=4, sticky="wn")

ch6_5_state_value = tk.Label(ch6_5_name, bg="#E6E6E6", text=ch6_5_data[2], width=20)
ch6_5_state_value.grid(row=7, column=5, sticky="wn", columnspan=2)

ch6_5_button_start = tk.Button(
    ch6_5_name,
    width=11,
    text="开始",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch6_5_start_test(),
)
ch6_5_button_start.grid(row=8, column=4, sticky="wn")

ch6_5_button_stop = tk.Button(
    ch6_5_name,
    width=9,
    text="停止",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch6_5_stop_test(),
)
ch6_5_button_stop.grid(row=8, column=5, sticky="wn")

ch6_5_button = tk.Button(
    ch6_5_name,
    width=9,
    text="详细查看",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: face("ch6_5_data"),
)
ch6_5_button.grid(row=8, column=6, sticky="wn")


# ch6_6
ch6_6_name = tk.LabelFrame(root, fg="blue", bg="#C4C4C4", text="通道6-6")
ch6_6_name.grid(row=5, column=5)

ch6_6_sn = tk.Label(
    ch6_6_name, bg="#E6E6E6", text="条码输入：", width=12, bd=1, relief="raised"
)
ch6_6_sn.grid(row=5, column=5, sticky="wn")

entry_ch6_6 = tk.Entry(ch6_6_name, width=20)
entry_ch6_6.grid(row=5, column=6, columnspan=2, sticky="wn")

ch6_6_set_voltage = tk.Label(
    ch6_6_name, bg="#E6E6E6", text="截止电压：", width=12, bd=1, relief="raised"
)
ch6_6_set_voltage.grid(row=6, column=5, sticky="wn")

entry_ch6_6_set_voltage_value = tk.Entry(ch6_6_name, width=20)
entry_ch6_6_set_voltage_value.grid(row=6, column=6, columnspan=2, sticky="wn")

ch6_6_state = tk.Label(
    ch6_6_name, bg="#E6E6E6", text="当前状态：", width=12, bd=1, relief="raised"
)
ch6_6_state.grid(row=7, column=5, sticky="wn")

ch6_6_state_value = tk.Label(ch6_6_name, bg="#E6E6E6", text=ch6_6_data[2], width=20)
ch6_6_state_value.grid(row=7, column=6, sticky="wn", columnspan=2)

ch6_6_button_start = tk.Button(
    ch6_6_name,
    width=11,
    text="开始",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch6_6_start_test(),
)
ch6_6_button_start.grid(row=8, column=5, sticky="wn")

ch6_6_button_stop = tk.Button(
    ch6_6_name,
    width=9,
    text="停止",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch6_6_stop_test(),
)
ch6_6_button_stop.grid(row=8, column=6, sticky="wn")

ch6_6_button = tk.Button(
    ch6_6_name,
    width=9,
    text="详细查看",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: face("ch6_6_data"),
)
ch6_6_button.grid(row=8, column=7, sticky="wn")

# ch6_7
ch6_7_name = tk.LabelFrame(root, fg="blue", bg="#C4C4C4", text="通道6-7")
ch6_7_name.grid(row=5, column=6)

ch6_7_sn = tk.Label(
    ch6_7_name, bg="#E6E6E6", text="条码输入：", width=12, bd=1, relief="raised"
)
ch6_7_sn.grid(row=5, column=6, sticky="wn")

entry_ch6_7 = tk.Entry(ch6_7_name, width=20)
entry_ch6_7.grid(row=5, column=7, columnspan=2, sticky="wn")

ch6_7_set_voltage = tk.Label(
    ch6_7_name, bg="#E6E6E6", text="截止电压：", width=12, bd=1, relief="raised"
)
ch6_7_set_voltage.grid(row=6, column=6, sticky="wn")

entry_ch6_7_set_voltage_value = tk.Entry(ch6_7_name, width=20)
entry_ch6_7_set_voltage_value.grid(row=6, column=7, columnspan=2, sticky="wn")

ch6_7_state = tk.Label(
    ch6_7_name, bg="#E6E6E6", text="当前状态：", width=12, bd=1, relief="raised"
)
ch6_7_state.grid(row=7, column=6, sticky="wn")

ch6_7_state_value = tk.Label(ch6_7_name, bg="#E6E6E6", text=ch6_7_data[2], width=20)
ch6_7_state_value.grid(row=7, column=7, sticky="wn", columnspan=2)

ch6_7_button_start = tk.Button(
    ch6_7_name,
    width=11,
    text="开始",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch6_7_start_test(),
)
ch6_7_button_start.grid(row=8, column=6, sticky="wn")

ch6_7_button_stop = tk.Button(
    ch6_7_name,
    width=9,
    text="停止",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch6_7_stop_test(),
)
ch6_7_button_stop.grid(row=8, column=7, sticky="wn")

ch6_7_button = tk.Button(
    ch6_7_name,
    width=9,
    text="详细查看",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: face("ch6_7_data"),
)
ch6_7_button.grid(row=8, column=8, sticky="wn")

# ch6_8
ch6_8_name = tk.LabelFrame(root, fg="blue", bg="#C4C4C4", text="通道6-8")
ch6_8_name.grid(row=5, column=7)

ch6_8_sn = tk.Label(
    ch6_8_name, bg="#E6E6E6", text="条码输入：", width=12, bd=1, relief="raised"
)
ch6_8_sn.grid(row=5, column=7, sticky="wn")

entry_ch6_8 = tk.Entry(ch6_8_name, width=20)
entry_ch6_8.grid(row=5, column=8, columnspan=2, sticky="wn")

ch6_8_set_voltage = tk.Label(
    ch6_8_name, bg="#E6E6E6", text="截止电压：", width=12, bd=1, relief="raised"
)
ch6_8_set_voltage.grid(row=6, column=7, sticky="wn")

entry_ch6_8_set_voltage_value = tk.Entry(ch6_8_name, width=20)
entry_ch6_8_set_voltage_value.grid(row=6, column=8, columnspan=2, sticky="wn")

ch6_8_state = tk.Label(
    ch6_8_name, bg="#E6E6E6", text="当前状态：", width=12, bd=1, relief="raised"
)
ch6_8_state.grid(row=7, column=7, sticky="wn")

ch6_8_state_value = tk.Label(ch6_8_name, bg="#E6E6E6", text=ch6_8_data[2], width=20)
ch6_8_state_value.grid(row=7, column=8, sticky="wn", columnspan=2)

ch6_8_button_start = tk.Button(
    ch6_8_name,
    width=11,
    text="开始",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch6_8_start_test(),
)
ch6_8_button_start.grid(row=8, column=7, sticky="wn")

ch6_8_button_stop = tk.Button(
    ch6_8_name,
    width=9,
    text="停止",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch6_8_stop_test(),
)
ch6_8_button_stop.grid(row=8, column=8, sticky="wn")

ch6_8_button = tk.Button(
    ch6_8_name,
    width=9,
    text="详细查看",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: face("ch6_8_data"),
)
ch6_8_button.grid(row=8, column=9, sticky="wn")


ch7_1_name = tk.LabelFrame(root, fg="blue", bg="#C4C4C4", text="通道7-1")
ch7_1_name.grid(row=6, column=0)

ch7_1_sn = tk.Label(
    ch7_1_name, bg="#E6E6E6", text="条码输入：", width=12, bd=1, relief="raised"
)
ch7_1_sn.grid(row=6, column=0, sticky="wn")

entry_ch7_1 = tk.Entry(ch7_1_name, width=20)
entry_ch7_1.grid(row=6, column=1, columnspan=2, sticky="wn")

ch7_1_set_voltage = tk.Label(
    ch7_1_name, bg="#E6E6E6", text="截止电压：", width=12, bd=1, relief="raised"
)
ch7_1_set_voltage.grid(row=7, column=0, sticky="wn")

entry_ch7_1_set_voltage_value = tk.Entry(ch7_1_name, width=20)
entry_ch7_1_set_voltage_value.grid(row=7, column=1, columnspan=2, sticky="wn")

ch7_1_state = tk.Label(
    ch7_1_name, bg="#E6E6E6", text="当前状态：", width=12, bd=1, relief="raised"
)
ch7_1_state.grid(row=8, column=0, sticky="wn")

ch7_1_state_value = tk.Label(ch7_1_name, bg="#E6E6E6", text=ch7_1_data[2], width=20)
ch7_1_state_value.grid(row=8, column=1, sticky="wn", columnspan=2)

ch7_1_button_start = tk.Button(
    ch7_1_name,
    width=11,
    text="开始",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch7_1_start_test(),
)
ch7_1_button_start.grid(row=9, column=0, sticky="wn")

ch7_1_button_stop = tk.Button(
    ch7_1_name,
    width=9,
    text="停止",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch7_1_stop_test(),
)
ch7_1_button_stop.grid(row=9, column=1, sticky="wn")

ch7_1_button = tk.Button(
    ch7_1_name,
    width=9,
    text="详细查看",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: face("ch7_1_data"),
)
ch7_1_button.grid(row=9, column=2, sticky="wn")

# ch7_2

ch7_2_name = tk.LabelFrame(root, fg="blue", bg="#C4C4C4", text="通道7-2")
ch7_2_name.grid(row=6, column=1)

ch7_2_sn = tk.Label(
    ch7_2_name, bg="#E6E6E6", text="条码输入：", width=12, bd=1, relief="raised"
)
ch7_2_sn.grid(row=6, column=1, sticky="wn")

entry_ch7_2 = tk.Entry(ch7_2_name, width=20)
entry_ch7_2.grid(row=6, column=2, columnspan=2, sticky="wn")

ch7_2_set_voltage = tk.Label(
    ch7_2_name, bg="#E6E6E6", text="截止电压：", width=12, bd=1, relief="raised"
)
ch7_2_set_voltage.grid(row=7, column=1, sticky="wn")

entry_ch7_2_set_voltage_value = tk.Entry(ch7_2_name, width=20)
entry_ch7_2_set_voltage_value.grid(row=7, column=2, columnspan=2, sticky="wn")

ch7_2_state = tk.Label(
    ch7_2_name, bg="#E6E6E6", text="当前状态：", width=12, bd=1, relief="raised"
)
ch7_2_state.grid(row=8, column=1, sticky="wn")

ch7_2_state_value = tk.Label(ch7_2_name, bg="#E6E6E6", text=ch7_2_data[2], width=20)
ch7_2_state_value.grid(row=8, column=2, sticky="wn", columnspan=2)

ch7_2_button_start = tk.Button(
    ch7_2_name,
    width=11,
    text="开始",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch7_2_start_test(),
)
ch7_2_button_start.grid(row=9, column=1, sticky="wn")

ch7_2_button_stop = tk.Button(
    ch7_2_name,
    width=9,
    text="停止",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch7_2_stop_test(),
)
ch7_2_button_stop.grid(row=9, column=2, sticky="wn")

ch7_2_button = tk.Button(
    ch7_2_name,
    width=9,
    text="详细查看",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: face("ch7_2_data"),
)
ch7_2_button.grid(row=9, column=3, sticky="wn")

# ch7_3

ch7_3_name = tk.LabelFrame(root, fg="blue", bg="#C4C4C4", text="通道7-3")
ch7_3_name.grid(row=6, column=2)

ch7_3_sn = tk.Label(
    ch7_3_name, bg="#E6E6E6", text="条码输入：", width=12, bd=1, relief="raised"
)
ch7_3_sn.grid(row=6, column=2, sticky="wn")

entry_ch7_3 = tk.Entry(ch7_3_name, width=20)
entry_ch7_3.grid(row=6, column=3, columnspan=2, sticky="wn")

ch7_3_set_voltage = tk.Label(
    ch7_3_name, bg="#E6E6E6", text="截止电压：", width=12, bd=1, relief="raised"
)
ch7_3_set_voltage.grid(row=7, column=2, sticky="wn")

entry_ch7_3_set_voltage_value = tk.Entry(ch7_3_name, width=20)
entry_ch7_3_set_voltage_value.grid(row=7, column=3, columnspan=2, sticky="wn")

ch7_3_state = tk.Label(
    ch7_3_name, bg="#E6E6E6", text="当前状态：", width=12, bd=1, relief="raised"
)
ch7_3_state.grid(row=8, column=2, sticky="wn")

ch7_3_state_value = tk.Label(ch7_3_name, bg="#E6E6E6", text=ch7_3_data[2], width=20)
ch7_3_state_value.grid(row=8, column=3, sticky="wn", columnspan=2)

ch7_3_button_start = tk.Button(
    ch7_3_name,
    width=11,
    text="开始",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch7_3_start_test(),
)
ch7_3_button_start.grid(row=9, column=2, sticky="wn")

ch7_3_button_stop = tk.Button(
    ch7_3_name,
    width=9,
    text="停止",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch7_3_stop_test(),
)
ch7_3_button_stop.grid(row=9, column=3, sticky="wn")

ch7_3_button = tk.Button(
    ch7_3_name,
    width=9,
    text="详细查看",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: face("ch7_3_data"),
)
ch7_3_button.grid(row=9, column=4, sticky="wn")


# ch7_4

ch7_4_name = tk.LabelFrame(root, fg="blue", bg="#C4C4C4", text="通道7-4")
ch7_4_name.grid(row=6, column=3)

ch7_4_sn = tk.Label(
    ch7_4_name, bg="#E6E6E6", text="条码输入：", width=12, bd=1, relief="raised"
)
ch7_4_sn.grid(row=6, column=3, sticky="wn")

entry_ch7_4 = tk.Entry(ch7_4_name, width=20)
entry_ch7_4.grid(row=6, column=4, columnspan=2, sticky="wn")

ch7_4_set_voltage = tk.Label(
    ch7_4_name, bg="#E6E6E6", text="截止电压：", width=12, bd=1, relief="raised"
)
ch7_4_set_voltage.grid(row=7, column=3, sticky="wn")

entry_ch7_4_set_voltage_value = tk.Entry(ch7_4_name, width=20)
entry_ch7_4_set_voltage_value.grid(row=7, column=4, columnspan=2, sticky="wn")

ch7_4_state = tk.Label(
    ch7_4_name, bg="#E6E6E6", text="当前状态：", width=12, bd=1, relief="raised"
)
ch7_4_state.grid(row=8, column=3, sticky="wn")

ch7_4_state_value = tk.Label(ch7_4_name, bg="#E6E6E6", text=ch7_4_data[2], width=20)
ch7_4_state_value.grid(row=8, column=4, sticky="wn", columnspan=2)

ch7_4_button_start = tk.Button(
    ch7_4_name,
    width=11,
    text="开始",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch7_4_start_test(),
)
ch7_4_button_start.grid(row=9, column=3, sticky="wn")

ch7_4_button_stop = tk.Button(
    ch7_4_name,
    width=9,
    text="停止",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch7_4_stop_test(),
)
ch7_4_button_stop.grid(row=9, column=4, sticky="wn")

ch7_4_button = tk.Button(
    ch7_4_name,
    width=9,
    text="详细查看",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: face("ch7_4_data"),
)
ch7_4_button.grid(row=9, column=5, sticky="wn")


# ch7_5
ch7_5_name = tk.LabelFrame(root, fg="blue", bg="#C4C4C4", text="通道7-5")
ch7_5_name.grid(row=6, column=4)

ch7_5_sn = tk.Label(
    ch7_5_name, bg="#E6E6E6", text="条码输入：", width=12, bd=1, relief="raised"
)
ch7_5_sn.grid(row=6, column=4, sticky="wn")

entry_ch7_5 = tk.Entry(ch7_5_name, width=20)
entry_ch7_5.grid(row=6, column=5, columnspan=2, sticky="wn")

ch7_5_set_voltage = tk.Label(
    ch7_5_name, bg="#E6E6E6", text="截止电压：", width=12, bd=1, relief="raised"
)
ch7_5_set_voltage.grid(row=7, column=4, sticky="wn")

entry_ch7_5_set_voltage_value = tk.Entry(ch7_5_name, width=20)
entry_ch7_5_set_voltage_value.grid(row=7, column=5, columnspan=2, sticky="wn")

ch7_5_state = tk.Label(
    ch7_5_name, bg="#E6E6E6", text="当前状态：", width=12, bd=1, relief="raised"
)
ch7_5_state.grid(row=8, column=4, sticky="wn")

ch7_5_state_value = tk.Label(ch7_5_name, bg="#E6E6E6", text=ch7_5_data[2], width=20)
ch7_5_state_value.grid(row=8, column=5, sticky="wn", columnspan=2)

ch7_5_button_start = tk.Button(
    ch7_5_name,
    width=11,
    text="开始",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch7_5_start_test(),
)
ch7_5_button_start.grid(row=9, column=4, sticky="wn")

ch7_5_button_stop = tk.Button(
    ch7_5_name,
    width=9,
    text="停止",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch7_5_stop_test(),
)
ch7_5_button_stop.grid(row=9, column=5, sticky="wn")

ch7_5_button = tk.Button(
    ch7_5_name,
    width=9,
    text="详细查看",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: face("ch7_5_data"),
)
ch7_5_button.grid(row=9, column=6, sticky="wn")


# ch7_6
ch7_6_name = tk.LabelFrame(root, fg="blue", bg="#C4C4C4", text="通道7-6")
ch7_6_name.grid(row=6, column=5)

ch7_6_sn = tk.Label(
    ch7_6_name, bg="#E6E6E6", text="条码输入：", width=12, bd=1, relief="raised"
)
ch7_6_sn.grid(row=6, column=5, sticky="wn")

entry_ch7_6 = tk.Entry(ch7_6_name, width=20)
entry_ch7_6.grid(row=6, column=6, columnspan=2, sticky="wn")

ch7_6_set_voltage = tk.Label(
    ch7_6_name, bg="#E6E6E6", text="截止电压：", width=12, bd=1, relief="raised"
)
ch7_6_set_voltage.grid(row=7, column=5, sticky="wn")

entry_ch7_6_set_voltage_value = tk.Entry(ch7_6_name, width=20)
entry_ch7_6_set_voltage_value.grid(row=7, column=6, columnspan=2, sticky="wn")

ch7_6_state = tk.Label(
    ch7_6_name, bg="#E6E6E6", text="当前状态：", width=12, bd=1, relief="raised"
)
ch7_6_state.grid(row=8, column=5, sticky="wn")

ch7_6_state_value = tk.Label(ch7_6_name, bg="#E6E6E6", text=ch7_6_data[2], width=20)
ch7_6_state_value.grid(row=8, column=6, sticky="wn", columnspan=2)

ch7_6_button_start = tk.Button(
    ch7_6_name,
    width=11,
    text="开始",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch7_6_start_test(),
)
ch7_6_button_start.grid(row=9, column=5, sticky="wn")

ch7_6_button_stop = tk.Button(
    ch7_6_name,
    width=9,
    text="停止",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch7_6_stop_test(),
)
ch7_6_button_stop.grid(row=9, column=6, sticky="wn")

ch7_6_button = tk.Button(
    ch7_6_name,
    width=9,
    text="详细查看",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: face("ch7_6_data"),
)
ch7_6_button.grid(row=9, column=7, sticky="wn")

# ch7_7
ch7_7_name = tk.LabelFrame(root, fg="blue", bg="#C4C4C4", text="通道7-7")
ch7_7_name.grid(row=6, column=6)

ch7_7_sn = tk.Label(
    ch7_7_name, bg="#E6E6E6", text="条码输入：", width=12, bd=1, relief="raised"
)
ch7_7_sn.grid(row=6, column=6, sticky="wn")

entry_ch7_7 = tk.Entry(ch7_7_name, width=20)
entry_ch7_7.grid(row=6, column=7, columnspan=2, sticky="wn")

ch7_7_set_voltage = tk.Label(
    ch7_7_name, bg="#E6E6E6", text="截止电压：", width=12, bd=1, relief="raised"
)
ch7_7_set_voltage.grid(row=7, column=6, sticky="wn")

entry_ch7_7_set_voltage_value = tk.Entry(ch7_7_name, width=20)
entry_ch7_7_set_voltage_value.grid(row=7, column=7, columnspan=2, sticky="wn")

ch7_7_state = tk.Label(
    ch7_7_name, bg="#E6E6E6", text="当前状态：", width=12, bd=1, relief="raised"
)
ch7_7_state.grid(row=8, column=6, sticky="wn")

ch7_7_state_value = tk.Label(ch7_7_name, bg="#E6E6E6", text=ch7_7_data[2], width=20)
ch7_7_state_value.grid(row=8, column=7, sticky="wn", columnspan=2)

ch7_7_button_start = tk.Button(
    ch7_7_name,
    width=11,
    text="开始",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch7_7_start_test(),
)
ch7_7_button_start.grid(row=9, column=6, sticky="wn")

ch7_7_button_stop = tk.Button(
    ch7_7_name,
    width=9,
    text="停止",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch7_7_stop_test(),
)
ch7_7_button_stop.grid(row=9, column=7, sticky="wn")

ch7_7_button = tk.Button(
    ch7_7_name,
    width=9,
    text="详细查看",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: face("ch7_7_data"),
)
ch7_7_button.grid(row=9, column=8, sticky="wn")

# ch7_8
ch7_8_name = tk.LabelFrame(root, fg="blue", bg="#C4C4C4", text="通道7-8")
ch7_8_name.grid(row=6, column=7)

ch7_8_sn = tk.Label(
    ch7_8_name, bg="#E6E6E6", text="条码输入：", width=12, bd=1, relief="raised"
)
ch7_8_sn.grid(row=6, column=7, sticky="wn")

entry_ch7_8 = tk.Entry(ch7_8_name, width=20)
entry_ch7_8.grid(row=6, column=8, columnspan=2, sticky="wn")

ch7_8_set_voltage = tk.Label(
    ch7_8_name, bg="#E6E6E6", text="截止电压：", width=12, bd=1, relief="raised"
)
ch7_8_set_voltage.grid(row=7, column=7, sticky="wn")

entry_ch7_8_set_voltage_value = tk.Entry(ch7_8_name, width=20)
entry_ch7_8_set_voltage_value.grid(row=7, column=8, columnspan=2, sticky="wn")

ch7_8_state = tk.Label(
    ch7_8_name, bg="#E6E6E6", text="当前状态：", width=12, bd=1, relief="raised"
)
ch7_8_state.grid(row=8, column=7, sticky="wn")

ch7_8_state_value = tk.Label(ch7_8_name, bg="#E6E6E6", text=ch7_8_data[2], width=20)
ch7_8_state_value.grid(row=8, column=8, sticky="wn", columnspan=2)

ch7_8_button_start = tk.Button(
    ch7_8_name,
    width=11,
    text="开始",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch7_8_start_test(),
)
ch7_8_button_start.grid(row=9, column=7, sticky="wn")

ch7_8_button_stop = tk.Button(
    ch7_8_name,
    width=9,
    text="停止",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch7_8_stop_test(),
)
ch7_8_button_stop.grid(row=9, column=8, sticky="wn")

ch7_8_button = tk.Button(
    ch7_8_name,
    width=9,
    text="详细查看",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: face("ch7_8_data"),
)
ch7_8_button.grid(row=9, column=9, sticky="wn")


ch8_1_name = tk.LabelFrame(root, fg="blue", bg="#C4C4C4", text="通道8-1")
ch8_1_name.grid(row=7, column=0)

ch8_1_sn = tk.Label(
    ch8_1_name, bg="#E6E6E6", text="条码输入：", width=12, bd=1, relief="raised"
)
ch8_1_sn.grid(row=7, column=0, sticky="wn")

entry_ch8_1 = tk.Entry(ch8_1_name, width=20)
entry_ch8_1.grid(row=7, column=1, columnspan=2, sticky="wn")

ch8_1_set_voltage = tk.Label(
    ch8_1_name, bg="#E6E6E6", text="截止电压：", width=12, bd=1, relief="raised"
)
ch8_1_set_voltage.grid(row=8, column=0, sticky="wn")

entry_ch8_1_set_voltage_value = tk.Entry(ch8_1_name, width=20)
entry_ch8_1_set_voltage_value.grid(row=8, column=1, columnspan=2, sticky="wn")

ch8_1_state = tk.Label(
    ch8_1_name, bg="#E6E6E6", text="当前状态：", width=12, bd=1, relief="raised"
)
ch8_1_state.grid(row=9, column=0, sticky="wn")

ch8_1_state_value = tk.Label(ch8_1_name, bg="#E6E6E6", text=ch8_1_data[2], width=20)
ch8_1_state_value.grid(row=9, column=1, sticky="wn", columnspan=2)

ch8_1_button_start = tk.Button(
    ch8_1_name,
    width=11,
    text="开始",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch8_1_start_test(),
)
ch8_1_button_start.grid(row=10, column=0, sticky="wn")

ch8_1_button_stop = tk.Button(
    ch8_1_name,
    width=9,
    text="停止",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch8_1_stop_test(),
)
ch8_1_button_stop.grid(row=10, column=1, sticky="wn")

ch8_1_button = tk.Button(
    ch8_1_name,
    width=9,
    text="详细查看",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: face("ch8_1_data"),
)
ch8_1_button.grid(row=10, column=2, sticky="wn")

# ch8_2

ch8_2_name = tk.LabelFrame(root, fg="blue", bg="#C4C4C4", text="通道8-2")
ch8_2_name.grid(row=7, column=1)

ch8_2_sn = tk.Label(
    ch8_2_name, bg="#E6E6E6", text="条码输入：", width=12, bd=1, relief="raised"
)
ch8_2_sn.grid(row=7, column=1, sticky="wn")

entry_ch8_2 = tk.Entry(ch8_2_name, width=20)
entry_ch8_2.grid(row=7, column=2, columnspan=2, sticky="wn")

ch8_2_set_voltage = tk.Label(
    ch8_2_name, bg="#E6E6E6", text="截止电压：", width=12, bd=1, relief="raised"
)
ch8_2_set_voltage.grid(row=8, column=1, sticky="wn")

entry_ch8_2_set_voltage_value = tk.Entry(ch8_2_name, width=20)
entry_ch8_2_set_voltage_value.grid(row=8, column=2, columnspan=2, sticky="wn")

ch8_2_state = tk.Label(
    ch8_2_name, bg="#E6E6E6", text="当前状态：", width=12, bd=1, relief="raised"
)
ch8_2_state.grid(row=9, column=1, sticky="wn")

ch8_2_state_value = tk.Label(ch8_2_name, bg="#E6E6E6", text=ch8_2_data[2], width=20)
ch8_2_state_value.grid(row=9, column=2, sticky="wn", columnspan=2)

ch8_2_button_start = tk.Button(
    ch8_2_name,
    width=11,
    text="开始",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch8_2_start_test(),
)
ch8_2_button_start.grid(row=10, column=1, sticky="wn")

ch8_2_button_stop = tk.Button(
    ch8_2_name,
    width=9,
    text="停止",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch8_2_stop_test(),
)
ch8_2_button_stop.grid(row=10, column=2, sticky="wn")

ch8_2_button = tk.Button(
    ch8_2_name,
    width=9,
    text="详细查看",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: face("ch8_2_data"),
)
ch8_2_button.grid(row=10, column=3, sticky="wn")

# ch8_3

ch8_3_name = tk.LabelFrame(root, fg="blue", bg="#C4C4C4", text="通道8-3")
ch8_3_name.grid(row=7, column=2)

ch8_3_sn = tk.Label(
    ch8_3_name, bg="#E6E6E6", text="条码输入：", width=12, bd=1, relief="raised"
)
ch8_3_sn.grid(row=7, column=2, sticky="wn")

entry_ch8_3 = tk.Entry(ch8_3_name, width=20)
entry_ch8_3.grid(row=7, column=3, columnspan=2, sticky="wn")

ch8_3_set_voltage = tk.Label(
    ch8_3_name, bg="#E6E6E6", text="截止电压：", width=12, bd=1, relief="raised"
)
ch8_3_set_voltage.grid(row=8, column=2, sticky="wn")

entry_ch8_3_set_voltage_value = tk.Entry(ch8_3_name, width=20)
entry_ch8_3_set_voltage_value.grid(row=8, column=3, columnspan=2, sticky="wn")

ch8_3_state = tk.Label(
    ch8_3_name, bg="#E6E6E6", text="当前状态：", width=12, bd=1, relief="raised"
)
ch8_3_state.grid(row=9, column=2, sticky="wn")

ch8_3_state_value = tk.Label(ch8_3_name, bg="#E6E6E6", text=ch8_3_data[2], width=20)
ch8_3_state_value.grid(row=9, column=3, sticky="wn", columnspan=2)

ch8_3_button_start = tk.Button(
    ch8_3_name,
    width=11,
    text="开始",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch8_3_start_test(),
)
ch8_3_button_start.grid(row=10, column=2, sticky="wn")

ch8_3_button_stop = tk.Button(
    ch8_3_name,
    width=9,
    text="停止",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch8_3_stop_test(),
)
ch8_3_button_stop.grid(row=10, column=3, sticky="wn")

ch8_3_button = tk.Button(
    ch8_3_name,
    width=9,
    text="详细查看",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: face("ch8_3_data"),
)
ch8_3_button.grid(row=10, column=4, sticky="wn")


# ch8_4

ch8_4_name = tk.LabelFrame(root, fg="blue", bg="#C4C4C4", text="通道8-4")
ch8_4_name.grid(row=7, column=3)

ch8_4_sn = tk.Label(
    ch8_4_name, bg="#E6E6E6", text="条码输入：", width=12, bd=1, relief="raised"
)
ch8_4_sn.grid(row=7, column=3, sticky="wn")

entry_ch8_4 = tk.Entry(ch8_4_name, width=20)
entry_ch8_4.grid(row=7, column=4, columnspan=2, sticky="wn")

ch8_4_set_voltage = tk.Label(
    ch8_4_name, bg="#E6E6E6", text="截止电压：", width=12, bd=1, relief="raised"
)
ch8_4_set_voltage.grid(row=8, column=3, sticky="wn")

entry_ch8_4_set_voltage_value = tk.Entry(ch8_4_name, width=20)
entry_ch8_4_set_voltage_value.grid(row=8, column=4, columnspan=2, sticky="wn")

ch8_4_state = tk.Label(
    ch8_4_name, bg="#E6E6E6", text="当前状态：", width=12, bd=1, relief="raised"
)
ch8_4_state.grid(row=9, column=3, sticky="wn")

ch8_4_state_value = tk.Label(ch8_4_name, bg="#E6E6E6", text=ch8_4_data[2], width=20)
ch8_4_state_value.grid(row=9, column=4, sticky="wn", columnspan=2)

ch8_4_button_start = tk.Button(
    ch8_4_name,
    width=11,
    text="开始",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch8_4_start_test(),
)
ch8_4_button_start.grid(row=10, column=3, sticky="wn")

ch8_4_button_stop = tk.Button(
    ch8_4_name,
    width=9,
    text="停止",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch8_4_stop_test(),
)
ch8_4_button_stop.grid(row=10, column=4, sticky="wn")

ch8_4_button = tk.Button(
    ch8_4_name,
    width=9,
    text="详细查看",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: face("ch8_4_data"),
)
ch8_4_button.grid(row=10, column=5, sticky="wn")


# ch8_5
ch8_5_name = tk.LabelFrame(root, fg="blue", bg="#C4C4C4", text="通道8-5")
ch8_5_name.grid(row=7, column=4)

ch8_5_sn = tk.Label(
    ch8_5_name, bg="#E6E6E6", text="条码输入：", width=12, bd=1, relief="raised"
)
ch8_5_sn.grid(row=7, column=4, sticky="wn")

entry_ch8_5 = tk.Entry(ch8_5_name, width=20)
entry_ch8_5.grid(row=7, column=5, columnspan=2, sticky="wn")

ch8_5_set_voltage = tk.Label(
    ch8_5_name, bg="#E6E6E6", text="截止电压：", width=12, bd=1, relief="raised"
)
ch8_5_set_voltage.grid(row=8, column=4, sticky="wn")

entry_ch8_5_set_voltage_value = tk.Entry(ch8_5_name, width=20)
entry_ch8_5_set_voltage_value.grid(row=8, column=5, columnspan=2, sticky="wn")

ch8_5_state = tk.Label(
    ch8_5_name, bg="#E6E6E6", text="当前状态：", width=12, bd=1, relief="raised"
)
ch8_5_state.grid(row=9, column=4, sticky="wn")

ch8_5_state_value = tk.Label(ch8_5_name, bg="#E6E6E6", text=ch8_5_data[2], width=20)
ch8_5_state_value.grid(row=9, column=5, sticky="wn", columnspan=2)

ch8_5_button_start = tk.Button(
    ch8_5_name,
    width=11,
    text="开始",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch8_5_start_test(),
)
ch8_5_button_start.grid(row=10, column=4, sticky="wn")

ch8_5_button_stop = tk.Button(
    ch8_5_name,
    width=9,
    text="停止",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch8_5_stop_test(),
)
ch8_5_button_stop.grid(row=10, column=5, sticky="wn")

ch8_5_button = tk.Button(
    ch8_5_name,
    width=9,
    text="详细查看",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: face("ch8_5_data"),
)
ch8_5_button.grid(row=10, column=6, sticky="wn")


# ch8_6
ch8_6_name = tk.LabelFrame(root, fg="blue", bg="#C4C4C4", text="通道8-6")
ch8_6_name.grid(row=7, column=5)

ch8_6_sn = tk.Label(
    ch8_6_name, bg="#E6E6E6", text="条码输入：", width=12, bd=1, relief="raised"
)
ch8_6_sn.grid(row=7, column=5, sticky="wn")

entry_ch8_6 = tk.Entry(ch8_6_name, width=20)
entry_ch8_6.grid(row=7, column=6, columnspan=2, sticky="wn")

ch8_6_set_voltage = tk.Label(
    ch8_6_name, bg="#E6E6E6", text="截止电压：", width=12, bd=1, relief="raised"
)
ch8_6_set_voltage.grid(row=8, column=5, sticky="wn")

entry_ch8_6_set_voltage_value = tk.Entry(ch8_6_name, width=20)
entry_ch8_6_set_voltage_value.grid(row=8, column=6, columnspan=2, sticky="wn")

ch8_6_state = tk.Label(
    ch8_6_name, bg="#E6E6E6", text="当前状态：", width=12, bd=1, relief="raised"
)
ch8_6_state.grid(row=9, column=5, sticky="wn")

ch8_6_state_value = tk.Label(ch8_6_name, bg="#E6E6E6", text=ch8_6_data[2], width=20)
ch8_6_state_value.grid(row=9, column=6, sticky="wn", columnspan=2)

ch8_6_button_start = tk.Button(
    ch8_6_name,
    width=11,
    text="开始",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch8_6_start_test(),
)
ch8_6_button_start.grid(row=10, column=5, sticky="wn")

ch8_6_button_stop = tk.Button(
    ch8_6_name,
    width=9,
    text="停止",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch8_6_stop_test(),
)
ch8_6_button_stop.grid(row=10, column=6, sticky="wn")

ch8_6_button = tk.Button(
    ch8_6_name,
    width=9,
    text="详细查看",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: face("ch8_6_data"),
)
ch8_6_button.grid(row=10, column=7, sticky="wn")

# ch8_7
ch8_7_name = tk.LabelFrame(root, fg="blue", bg="#C4C4C4", text="通道8-7")
ch8_7_name.grid(row=7, column=6)

ch8_7_sn = tk.Label(
    ch8_7_name, bg="#E6E6E6", text="条码输入：", width=12, bd=1, relief="raised"
)
ch8_7_sn.grid(row=7, column=6, sticky="wn")

entry_ch8_7 = tk.Entry(ch8_7_name, width=20)
entry_ch8_7.grid(row=7, column=7, columnspan=2, sticky="wn")

ch8_7_set_voltage = tk.Label(
    ch8_7_name, bg="#E6E6E6", text="截止电压：", width=12, bd=1, relief="raised"
)
ch8_7_set_voltage.grid(row=8, column=6, sticky="wn")

entry_ch8_7_set_voltage_value = tk.Entry(ch8_7_name, width=20)
entry_ch8_7_set_voltage_value.grid(row=8, column=7, columnspan=2, sticky="wn")

ch8_7_state = tk.Label(
    ch8_7_name, bg="#E6E6E6", text="当前状态：", width=12, bd=1, relief="raised"
)
ch8_7_state.grid(row=9, column=6, sticky="wn")

ch8_7_state_value = tk.Label(ch8_7_name, bg="#E6E6E6", text=ch8_7_data[2], width=20)
ch8_7_state_value.grid(row=9, column=7, sticky="wn", columnspan=2)

ch8_7_button_start = tk.Button(
    ch8_7_name,
    width=11,
    text="开始",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch8_7_start_test(),
)
ch8_7_button_start.grid(row=10, column=6, sticky="wn")

ch8_7_button_stop = tk.Button(
    ch8_7_name,
    width=9,
    text="停止",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch8_7_stop_test(),
)
ch8_7_button_stop.grid(row=10, column=7, sticky="wn")

ch8_7_button = tk.Button(
    ch8_7_name,
    width=9,
    text="详细查看",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: face("ch8_7_data"),
)
ch8_7_button.grid(row=10, column=8, sticky="wn")

# ch8_8
ch8_8_name = tk.LabelFrame(root, fg="blue", bg="#C4C4C4", text="通道8-8")
ch8_8_name.grid(row=7, column=7)

ch8_8_sn = tk.Label(
    ch8_8_name, bg="#E6E6E6", text="条码输入：", width=12, bd=1, relief="raised"
)
ch8_8_sn.grid(row=7, column=7, sticky="wn")

entry_ch8_8 = tk.Entry(ch8_8_name, width=20)
entry_ch8_8.grid(row=7, column=8, columnspan=2, sticky="wn")

ch8_8_set_voltage = tk.Label(
    ch8_8_name, bg="#E6E6E6", text="截止电压：", width=12, bd=1, relief="raised"
)
ch8_8_set_voltage.grid(row=8, column=7, sticky="wn")

entry_ch8_8_set_voltage_value = tk.Entry(ch8_8_name, width=20)
entry_ch8_8_set_voltage_value.grid(row=8, column=8, columnspan=2, sticky="wn")

ch8_8_state = tk.Label(
    ch8_8_name, bg="#E6E6E6", text="当前状态：", width=12, bd=1, relief="raised"
)
ch8_8_state.grid(row=9, column=7, sticky="wn")

ch8_8_state_value = tk.Label(ch8_8_name, bg="#E6E6E6", text=ch8_8_data[2], width=20)
ch8_8_state_value.grid(row=9, column=8, sticky="wn", columnspan=2)

ch8_8_button_start = tk.Button(
    ch8_8_name,
    width=11,
    text="开始",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch8_8_start_test(),
)
ch8_8_button_start.grid(row=10, column=7, sticky="wn")

ch8_8_button_stop = tk.Button(
    ch8_8_name,
    width=9,
    text="停止",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: ch8_8_stop_test(),
)
ch8_8_button_stop.grid(row=10, column=8, sticky="wn")

ch8_8_button = tk.Button(
    ch8_8_name,
    width=9,
    text="详细查看",
    bg="#E6E6E6",
    fg="blue",
    anchor="c",
    font=("宋体", 10),
    command=lambda: face("ch8_8_data"),
)
ch8_8_button.grid(row=10, column=9, sticky="wn")


root.mainloop()
